
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007250  08007250  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000070  080072c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  080072c8  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a05  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023cf  00000000  00000000  00032aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  00036158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e3f  00000000  00000000  00037348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d44b  00000000  00000000  0003b187  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c99b5  00000000  00000000  000485d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  00112004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007064 	.word	0x08007064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007064 	.word	0x08007064

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
#if USE_IMU
void IMU_printf(Inertial*);
void IMU_raw_printf();
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4aa2      	ldr	r2, [pc, #648]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800057e:	4293      	cmp	r3, r2
 8000580:	f040 8126 	bne.w	80007d0 <HAL_TIM_PeriodElapsedCallback+0x260>
#if USE_MOTOR
		if (motorenable)
 8000584:	4ba1      	ldr	r3, [pc, #644]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 80d5 	beq.w	8000738 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		{
#if !STATICMOTORPWM
#if USE_ANALOG
			analogl = 0;
 800058e:	4ba0      	ldr	r3, [pc, #640]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000590:	2200      	movs	r2, #0
 8000592:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 8000594:	4b9f      	ldr	r3, [pc, #636]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000596:	2200      	movs	r2, #0
 8000598:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e059      	b.n	8000654 <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				uint16_t analogbuf = analog[i];
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	4a9d      	ldr	r2, [pc, #628]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a8:	81bb      	strh	r3, [r7, #12]
				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
				if(analogmax[i] < analogbuf)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4a9b      	ldr	r2, [pc, #620]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b2:	89ba      	ldrh	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d904      	bls.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x52>
				{
					analogmax[i] = analogbuf;
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4998      	ldr	r1, [pc, #608]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005bc:	89ba      	ldrh	r2, [r7, #12]
 80005be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if(analogmin[i] > analogbuf)
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	4a96      	ldr	r2, [pc, #600]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80005c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ca:	89ba      	ldrh	r2, [r7, #12]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d204      	bcs.n	80005da <HAL_TIM_PeriodElapsedCallback+0x6a>
				{
					analogmin[i] = analogbuf;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4993      	ldr	r1, [pc, #588]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80005d4:	89ba      	ldrh	r2, [r7, #12]
 80005d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4a8e      	ldr	r2, [pc, #568]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e2:	4619      	mov	r1, r3
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	4a8e      	ldr	r2, [pc, #568]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80005e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ec:	1acb      	subs	r3, r1, r3
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	fb02 f203 	mul.w	r2, r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4988      	ldr	r1, [pc, #544]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005fe:	4618      	mov	r0, r3
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4987      	ldr	r1, [pc, #540]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000604:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000608:	1ac3      	subs	r3, r0, r3
 800060a:	fb92 f2f3 	sdiv	r2, r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	b291      	uxth	r1, r2
 8000612:	4a84      	ldr	r2, [pc, #528]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if(i % 2 == 0)
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10a      	bne.n	800063a <HAL_TIM_PeriodElapsedCallback+0xca>
				{
				  analogl += analograte[i];
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4a7f      	ldr	r2, [pc, #508]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000628:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062c:	4b78      	ldr	r3, [pc, #480]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b76      	ldr	r3, [pc, #472]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000636:	801a      	strh	r2, [r3, #0]
 8000638:	e009      	b.n	800064e <HAL_TIM_PeriodElapsedCallback+0xde>
				}
				else
				{
				  analogr += analograte[i];
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	4a79      	ldr	r2, [pc, #484]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800063e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b72      	ldr	r3, [pc, #456]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800064c:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3301      	adds	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b0b      	cmp	r3, #11
 8000658:	d9a2      	bls.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x30>
				}
			}
			switch(rotary_value)
 800065a:	4b73      	ldr	r3, [pc, #460]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3b01      	subs	r3, #1
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d81f      	bhi.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x134>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	080006ad 	.word	0x080006ad
 8000670:	080006ad 	.word	0x080006ad
 8000674:	080006ad 	.word	0x080006ad
 8000678:	080006a5 	.word	0x080006a5
 800067c:	080006a5 	.word	0x080006a5
 8000680:	080006a5 	.word	0x080006a5
 8000684:	080006a5 	.word	0x080006a5
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006a5 	.word	0x080006a5
 8000690:	080006a5 	.word	0x080006a5
 8000694:	080006a5 	.word	0x080006a5
 8000698:	080006a5 	.word	0x080006a5
 800069c:	080006a5 	.word	0x080006a5
 80006a0:	080006ad 	.word	0x080006ad
#endif
					break;
				case 0xE:
					break;
				default:
					commonspeed = 0;
 80006a4:	4b61      	ldr	r3, [pc, #388]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	801a      	strh	r2, [r3, #0]
					break;
 80006aa:	e000      	b.n	80006ae <HAL_TIM_PeriodElapsedCallback+0x13e>
					break;
 80006ac:	bf00      	nop
			}
			direction = (analogl - analogr);	// difference
 80006ae:	4b58      	ldr	r3, [pc, #352]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b57      	ldr	r3, [pc, #348]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006bc:	6013      	str	r3, [r2, #0]
			leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * kpl - (direction - beforedirection) * kdl;
 80006be:	4b5b      	ldr	r3, [pc, #364]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a5a      	ldr	r2, [pc, #360]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006ca:	fb82 0203 	smull	r0, r2, r2, r3
 80006ce:	1092      	asrs	r2, r2, #2
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	4a58      	ldr	r2, [pc, #352]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	1aca      	subs	r2, r1, r3
 80006de:	4b54      	ldr	r3, [pc, #336]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	4b56      	ldr	r3, [pc, #344]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1acb      	subs	r3, r1, r3
 80006e8:	4955      	ldr	r1, [pc, #340]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006ea:	7809      	ldrb	r1, [r1, #0]
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4a54      	ldr	r2, [pc, #336]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006f4:	6013      	str	r3, [r2, #0]
			rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * kpr + (direction - beforedirection) * kdr;
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a4c      	ldr	r2, [pc, #304]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000702:	fb82 0203 	smull	r0, r2, r2, r3
 8000706:	1092      	asrs	r2, r2, #2
 8000708:	17db      	asrs	r3, r3, #31
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	4a4e      	ldr	r2, [pc, #312]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	18ca      	adds	r2, r1, r3
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000718:	6819      	ldr	r1, [r3, #0]
 800071a:	4b48      	ldr	r3, [pc, #288]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1acb      	subs	r3, r1, r3
 8000720:	494a      	ldr	r1, [pc, #296]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000722:	7809      	ldrb	r1, [r1, #0]
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	4a49      	ldr	r2, [pc, #292]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800072c:	6013      	str	r3, [r2, #0]
			beforedirection = direction;
 800072e:	4b40      	ldr	r3, [pc, #256]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a42      	ldr	r2, [pc, #264]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e005      	b.n	8000744 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			rightmotor = COMMONSPEED;
#endif	// !STATICMOTORPWM
		}
		else
		{
			leftmotor = 0;
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
			rightmotor = 0;
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
		}

		if(leftmotor < 0)
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da0a      	bge.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x1f2>
		{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2104      	movs	r1, #4
 8000750:	4840      	ldr	r0, [pc, #256]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000752:	f003 fb03 	bl	8003d5c <HAL_GPIO_WritePin>
		  leftmotor *= -1;
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	425b      	negs	r3, r3
 800075c:	4a39      	ldr	r2, [pc, #228]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e004      	b.n	800076c <HAL_TIM_PeriodElapsedCallback+0x1fc>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2104      	movs	r1, #4
 8000766:	483b      	ldr	r0, [pc, #236]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000768:	f003 faf8 	bl	8003d5c <HAL_GPIO_WritePin>
		}
		if(rightmotor < 0)
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <HAL_TIM_PeriodElapsedCallback+0x21c>
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	4837      	ldr	r0, [pc, #220]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800077c:	f003 faee 	bl	8003d5c <HAL_GPIO_WritePin>
		  rightmotor *= -1;
 8000780:	4b33      	ldr	r3, [pc, #204]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	425b      	negs	r3, r3
 8000786:	4a32      	ldr	r2, [pc, #200]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e005      	b.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x228>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4831      	ldr	r0, [pc, #196]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000794:	f003 fae2 	bl	8003d5c <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8000798:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007a0:	bfa8      	it	ge
 80007a2:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80007a6:	4a27      	ldr	r2, [pc, #156]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80007a8:	6013      	str	r3, [r2, #0]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007b2:	bfa8      	it	ge
 80007b4:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80007ba:	6013      	str	r3, [r2, #0]
#endif

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
			pwmstepud = (PWM_STEP_AMPLITUDE <= pwmstepoutput) ? 255 : (0 >= pwmstepoutput) ? 1 : pwmstepud;
			pwmsteptime = (pwmstepud == 255) ? pwmsteptime - 1 : pwmsteptime + 1;
		}
#endif	// D_PWM
	}	// TIM6
	if (htim->Instance == TIM10)	// TIM10 // 1ms
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	f040 8129 	bne.w	8000a2e <HAL_TIM_PeriodElapsedCallback+0x4be>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80007dc:	2104      	movs	r1, #4
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80007e0:	f003 faa4 	bl	8003d2c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	72fb      	strb	r3, [r7, #11]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	481b      	ldr	r0, [pc, #108]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80007f8:	f003 fa98 	bl	8003d2c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d132      	bne.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000802:	2302      	movs	r3, #2
 8000804:	e031      	b.n	800086a <HAL_TIM_PeriodElapsedCallback+0x2fa>
 8000806:	bf00      	nop
 8000808:	40001000 	.word	0x40001000
 800080c:	200004c4 	.word	0x200004c4
 8000810:	20000252 	.word	0x20000252
 8000814:	200004c6 	.word	0x200004c6
 8000818:	200000a0 	.word	0x200000a0
 800081c:	200005e8 	.word	0x200005e8
 8000820:	20000234 	.word	0x20000234
 8000824:	20000374 	.word	0x20000374
 8000828:	20000250 	.word	0x20000250
 800082c:	20000256 	.word	0x20000256
 8000830:	2000029c 	.word	0x2000029c
 8000834:	2aaaaaab 	.word	0x2aaaaaab
 8000838:	20000478 	.word	0x20000478
 800083c:	20000644 	.word	0x20000644
 8000840:	20000224 	.word	0x20000224
 8000844:	2000022c 	.word	0x2000022c
 8000848:	20000601 	.word	0x20000601
 800084c:	20000230 	.word	0x20000230
 8000850:	20000228 	.word	0x20000228
 8000854:	40020c00 	.word	0x40020c00
 8000858:	40020800 	.word	0x40020800
 800085c:	2000013c 	.word	0x2000013c
 8000860:	40014400 	.word	0x40014400
 8000864:	40020400 	.word	0x40020400
 8000868:	2300      	movs	r3, #0
 800086a:	b2da      	uxtb	r2, r3
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	4413      	add	r3, r2
 8000870:	72fb      	strb	r3, [r7, #11]

		if (subsens != subsensbuf) {
 8000872:	4ba4      	ldr	r3, [pc, #656]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	7afa      	ldrb	r2, [r7, #11]
 8000878:	429a      	cmp	r2, r3
 800087a:	d05c      	beq.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			subsensbuf = subsens;
 800087c:	4aa1      	ldr	r2, [pc, #644]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 8000882:	7afa      	ldrb	r2, [r7, #11]
 8000884:	4ba0      	ldr	r3, [pc, #640]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b9e      	ldr	r3, [pc, #632]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4413      	add	r3, r2
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b9c      	ldr	r3, [pc, #624]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800089a:	701a      	strb	r2, [r3, #0]
			if (subsens == 0b00 && sidedeltacount != 0) {
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d143      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x3ba>
 80008a2:	4b99      	ldr	r3, [pc, #612]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d03f      	beq.n	800092a <HAL_TIM_PeriodElapsedCallback+0x3ba>
				first = (marker & 0b0011);
 80008aa:	4b98      	ldr	r3, [pc, #608]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	72bb      	strb	r3, [r7, #10]
				second = (marker & 0b1100) >> 2;
 80008b4:	4b95      	ldr	r3, [pc, #596]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	109b      	asrs	r3, r3, #2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	727b      	strb	r3, [r7, #9]
				if (second == 0b00) {
 80008c2:	7a7b      	ldrb	r3, [r7, #9]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d123      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x3a0>
					if (first == 0b01) {
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d115      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x38a>
						// right -> stop
						markerstate = 0b01;
 80008ce:	4b90      	ldr	r3, [pc, #576]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
						if (rightmarkercount == 0) {
 80008d4:	4b8f      	ldr	r3, [pc, #572]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d106      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x37a>
							rightmarkercount++;
 80008dc:	4b8d      	ldr	r3, [pc, #564]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b8b      	ldr	r3, [pc, #556]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e015      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x3a6>
						} else if (rightmarkercount == 1) {
 80008ea:	4b8a      	ldr	r3, [pc, #552]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d111      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x3a6>
							enter = 0;
 80008f2:	4b89      	ldr	r3, [pc, #548]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e00d      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x3a6>
						}
					} else if (first == 0b10) {
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d103      	bne.n	8000908 <HAL_TIM_PeriodElapsedCallback+0x398>
						// left -> curve
						markerstate = 0b10;
 8000900:	4b83      	ldr	r3, [pc, #524]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000902:	2202      	movs	r2, #2
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e006      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x3a6>
							motorenable = 0;
						}
#endif
					} else {
						// cross
						markerstate = 0b11;
 8000908:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800090a:	2203      	movs	r2, #3
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x3a6>
					}
				} else {
					// cross
					markerstate = 0b11;
 8000910:	4b7f      	ldr	r3, [pc, #508]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000912:	2203      	movs	r2, #3
 8000914:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 8000916:	4b7c      	ldr	r3, [pc, #496]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
				marker = 0;
 800091c:	4b7b      	ldr	r3, [pc, #492]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	e005      	b.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			} else {
				sidedeltacount++;
 800092a:	4b77      	ldr	r3, [pc, #476]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b75      	ldr	r3, [pc, #468]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000934:	701a      	strb	r2, [r3, #0]
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		// 1ms
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 8000936:	213c      	movs	r1, #60	; 0x3c
 8000938:	4878      	ldr	r0, [pc, #480]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800093a:	f004 fa2a 	bl	8004d92 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 800093e:	213c      	movs	r1, #60	; 0x3c
 8000940:	4877      	ldr	r0, [pc, #476]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000942:	f004 fa26 	bl	8004d92 <HAL_TIM_Encoder_Stop>

		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	b29b      	uxth	r3, r3
 800094c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21a      	sxth	r2, r3
 8000954:	4b74      	ldr	r3, [pc, #464]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000956:	801a      	strh	r2, [r3, #0]
		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 8000958:	4b74      	ldr	r3, [pc, #464]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b74      	ldr	r3, [pc, #464]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	b29b      	uxth	r3, r3
 8000964:	b21a      	sxth	r2, r3
 8000966:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8000968:	801a      	strh	r2, [r3, #0]

		TIM1->CNT = ENCODER_MIDDLE;
 800096a:	4b6e      	ldr	r3, [pc, #440]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800096c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = ENCODER_MIDDLE;
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000978:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 800097a:	213c      	movs	r1, #60	; 0x3c
 800097c:	4867      	ldr	r0, [pc, #412]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800097e:	f004 f9d1 	bl	8004d24 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 8000982:	213c      	movs	r1, #60	; 0x3c
 8000984:	4866      	ldr	r0, [pc, #408]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000986:	f004 f9cd 	bl	8004d24 <HAL_TIM_Encoder_Start>

#if D_VELOCITY_CONTROL
		velocity_l = encoder_l * LENGTHPERPULSE;	// mm/s
 800098a:	4b67      	ldr	r3, [pc, #412]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800098c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000990:	461a      	mov	r2, r3
 8000992:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	fb03 f302 	mul.w	r3, r3, r2
 800099a:	461a      	mov	r2, r3
 800099c:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800099e:	601a      	str	r2, [r3, #0]
		velocity_r = encoder_r * LENGTHPERPULSE;
 80009a0:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80009a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b63      	ldr	r3, [pc, #396]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	fb03 f302 	mul.w	r3, r3, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b63      	ldr	r3, [pc, #396]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80009b4:	601a      	str	r2, [r3, #0]
		velocity_error_l = (VELOCITY_TARGET - velocity_l);
 80009b6:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	425b      	negs	r3, r3
 80009bc:	4a61      	ldr	r2, [pc, #388]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009be:	6013      	str	r3, [r2, #0]
		velocity_error_r = (VELOCITY_TARGET - velocity_r);
 80009c0:	4b5f      	ldr	r3, [pc, #380]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	425b      	negs	r3, r3
 80009c6:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009c8:	6013      	str	r3, [r2, #0]
		s_velocity_error_l += velocity_error_l;
 80009ca:	4b60      	ldr	r3, [pc, #384]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80009d6:	6013      	str	r3, [r2, #0]
		s_velocity_error_r += velocity_error_r;
 80009d8:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a5b      	ldr	r2, [pc, #364]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80009e4:	6013      	str	r3, [r2, #0]
		// PI
		velocity_next_l = VKPL * velocity_error_l + VKIL * s_velocity_error_l;
 80009e6:	4b57      	ldr	r3, [pc, #348]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4613      	mov	r3, r2
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b57      	ldr	r3, [pc, #348]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80009f6:	601a      	str	r2, [r3, #0]
		velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
 80009f8:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4613      	mov	r3, r2
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000a08:	601a      	str	r2, [r3, #0]
		commonspeed = COMMONSPEED1 + (velocity_next_l + velocity_next_r) * PWMMAX / 2 / VELOCITY_MAX / VELOCITY_CONTROL_RATE;
 8000a0a:	4b52      	ldr	r3, [pc, #328]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a22:	1352      	asrs	r2, r2, #13
 8000a24:	17db      	asrs	r3, r3, #31
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b4d      	ldr	r3, [pc, #308]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000a2c:	801a      	strh	r2, [r3, #0]
		 velocityr = lengthr / ENCODERPERIOD / 1000;
		 */
#endif	// USE_ENCODER
	}	// TIM10

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d161      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x58c>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	484a      	ldr	r0, [pc, #296]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000a3e:	f003 f975 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4844      	ldr	r0, [pc, #272]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000a56:	f003 f969 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x4f4>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e000      	b.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x4f6>
 8000a64:	2300      	movs	r3, #0
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	7a3b      	ldrb	r3, [r7, #8]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8000a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8000a74:	f003 f95a 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x512>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e000      	b.n	8000a84 <HAL_TIM_PeriodElapsedCallback+0x514>
 8000a82:	2300      	movs	r3, #0
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	4413      	add	r3, r2
 8000a8a:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	4835      	ldr	r0, [pc, #212]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000a92:	f003 f94b 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0x530>
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	e000      	b.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x532>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	7a3b      	ldrb	r3, [r7, #8]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	723b      	strb	r3, [r7, #8]
		rotary_value = rotary_value_row;
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8000aac:	7a3b      	ldrb	r3, [r7, #8]
 8000aae:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	482c      	ldr	r0, [pc, #176]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000ab6:	f003 f939 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10a      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x566>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	4828      	ldr	r0, [pc, #160]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000ac6:	f003 f931 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x566>
			enter = 1;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 8000ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ada:	4823      	ldr	r0, [pc, #140]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000adc:	f003 f926 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00a      	beq.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x58c>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000aec:	f003 f91e 	bl	8003d2c <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x58c>
			enter = 0;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM7)	// TIM7 // 0.1ms
	{
	}
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000254 	.word	0x20000254
 8000b08:	20000298 	.word	0x20000298
 8000b0c:	200003f4 	.word	0x200003f4
 8000b10:	200002e9 	.word	0x200002e9
 8000b14:	20000648 	.word	0x20000648
 8000b18:	20000649 	.word	0x20000649
 8000b1c:	20000438 	.word	0x20000438
 8000b20:	20000258 	.word	0x20000258
 8000b24:	40010000 	.word	0x40010000
 8000b28:	2000036c 	.word	0x2000036c
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	ffff8000 	.word	0xffff8000
 8000b34:	200005e4 	.word	0x200005e4
 8000b38:	20000480 	.word	0x20000480
 8000b3c:	200000b8 	.word	0x200000b8
 8000b40:	20000098 	.word	0x20000098
 8000b44:	200005e0 	.word	0x200005e0
 8000b48:	20000220 	.word	0x20000220
 8000b4c:	2000024c 	.word	0x2000024c
 8000b50:	20000118 	.word	0x20000118
 8000b54:	20000370 	.word	0x20000370
 8000b58:	200003f0 	.word	0x200003f0
 8000b5c:	7b5ca453 	.word	0x7b5ca453
 8000b60:	20000256 	.word	0x20000256
 8000b64:	40014800 	.word	0x40014800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20000250 	.word	0x20000250

08000b74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b7a:	f001 fd85 	bl	8002688 <HAL_Init>
	/* USER CODE BEGIN Init */
#if USE_FLASH
	FlashBuffer readrom;
#endif

	enter = 0;
 8000b7e:	4ba6      	ldr	r3, [pc, #664]	; (8000e18 <main+0x2a4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8000b84:	4ba5      	ldr	r3, [pc, #660]	; (8000e1c <main+0x2a8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 8000b8a:	4ba5      	ldr	r3, [pc, #660]	; (8000e20 <main+0x2ac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 8000b90:	4ba4      	ldr	r3, [pc, #656]	; (8000e24 <main+0x2b0>)
 8000b92:	2227      	movs	r2, #39	; 0x27
 8000b94:	601a      	str	r2, [r3, #0]
	commonspeed = 0;
 8000b96:	4ba4      	ldr	r3, [pc, #656]	; (8000e28 <main+0x2b4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	e00d      	b.n	8000bbe <main+0x4a>
		analogmax[i] = 0;
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4aa1      	ldr	r2, [pc, #644]	; (8000e2c <main+0x2b8>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4aa0      	ldr	r2, [pc, #640]	; (8000e30 <main+0x2bc>)
 8000bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b0b      	cmp	r3, #11
 8000bc2:	d9ee      	bls.n	8000ba2 <main+0x2e>
	}

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc4:	f000 f952 	bl	8000e6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc8:	f000 fdce 	bl	8001768 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bcc:	f000 fdac 	bl	8001728 <MX_DMA_Init>
	MX_ADC1_Init();
 8000bd0:	f000 f9b6 	bl	8000f40 <MX_ADC1_Init>
	MX_USART6_UART_Init();
 8000bd4:	f000 fd7e 	bl	80016d4 <MX_USART6_UART_Init>
	MX_TIM6_Init();
 8000bd8:	f000 fca4 	bl	8001524 <MX_TIM6_Init>
	MX_TIM4_Init();
 8000bdc:	f000 fc3e 	bl	800145c <MX_TIM4_Init>
	MX_TIM7_Init();
 8000be0:	f000 fcd6 	bl	8001590 <MX_TIM7_Init>
	MX_TIM1_Init();
 8000be4:	f000 fb34 	bl	8001250 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000be8:	f000 fbe4 	bl	80013b4 <MX_TIM3_Init>
	MX_TIM10_Init();
 8000bec:	f000 fd06 	bl	80015fc <MX_TIM10_Init>
	MX_TIM11_Init();
 8000bf0:	f000 fd28 	bl	8001644 <MX_TIM11_Init>
	MX_TIM13_Init();
 8000bf4:	f000 fd4a 	bl	800168c <MX_TIM13_Init>
	MX_SPI2_Init();
 8000bf8:	f000 faf4 	bl	80011e4 <MX_SPI2_Init>
	MX_I2C1_Init();
 8000bfc:	f000 fac4 	bl	8001188 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000c00:	f000 fb7e 	bl	8001300 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8000c04:	488b      	ldr	r0, [pc, #556]	; (8000e34 <main+0x2c0>)
 8000c06:	f005 fae5 	bl	80061d4 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8000c0a:	488b      	ldr	r0, [pc, #556]	; (8000e38 <main+0x2c4>)
 8000c0c:	f005 fb56 	bl	80062bc <puts>

	printf("Starting Analog Read\r\n");
 8000c10:	488a      	ldr	r0, [pc, #552]	; (8000e3c <main+0x2c8>)
 8000c12:	f005 fb53 	bl	80062bc <puts>
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c16:	488a      	ldr	r0, [pc, #552]	; (8000e40 <main+0x2cc>)
 8000c18:	f001 fdca 	bl	80027b0 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <main+0xb2>
		Error_Handler();
 8000c22:	f001 f879 	bl	8001d18 <Error_Handler>
	}

	printf("Starting TIM11\r\n");
 8000c26:	4887      	ldr	r0, [pc, #540]	; (8000e44 <main+0x2d0>)
 8000c28:	f005 fb48 	bl	80062bc <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8000c2c:	4886      	ldr	r0, [pc, #536]	; (8000e48 <main+0x2d4>)
 8000c2e:	f003 fed6 	bl	80049de <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	led_rgb(1, 1, 1);	// White
 8000c32:	2201      	movs	r2, #1
 8000c34:	2101      	movs	r1, #1
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 fe6e 	bl	8001918 <led_rgb>
	while (1) {
		printf("///// WHILE /////\n\r");
 8000c3c:	4883      	ldr	r0, [pc, #524]	; (8000e4c <main+0x2d8>)
 8000c3e:	f005 fac9 	bl	80061d4 <iprintf>
		printf("enter = %d\r\n", enter);
#endif
#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
#endif
		if (enter) {
 8000c42:	4b75      	ldr	r3, [pc, #468]	; (8000e18 <main+0x2a4>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f8      	beq.n	8000c3c <main+0xc8>
			switch (rotary_value) {
 8000c4a:	4b75      	ldr	r3, [pc, #468]	; (8000e20 <main+0x2ac>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d8f4      	bhi.n	8000c3c <main+0xc8>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <main+0xe4>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c99 	.word	0x08000c99
 8000c5c:	08000d0d 	.word	0x08000d0d
 8000c60:	08000d55 	.word	0x08000d55
 8000c64:	08000d9f 	.word	0x08000d9f
 8000c68:	08000c3d 	.word	0x08000c3d
 8000c6c:	08000c3d 	.word	0x08000c3d
 8000c70:	08000c3d 	.word	0x08000c3d
 8000c74:	08000c3d 	.word	0x08000c3d
 8000c78:	08000c3d 	.word	0x08000c3d
 8000c7c:	08000c3d 	.word	0x08000c3d
 8000c80:	08000c3d 	.word	0x08000c3d
 8000c84:	08000c3d 	.word	0x08000c3d
 8000c88:	08000c3d 	.word	0x08000c3d
 8000c8c:	08000c3d 	.word	0x08000c3d
 8000c90:	08000de9 	.word	0x08000de9
 8000c94:	08000e0d 	.word	0x08000e0d
			case 0x0:
				led_rgb(1, 1, 0);	// Yellow
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fe3b 	bl	8001918 <led_rgb>

				sensor_initialize();
 8000ca2:	f000 fe6f 	bl	8001984 <sensor_initialize>

				while (enter) {
 8000ca6:	e02a      	b.n	8000cfe <main+0x18a>
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71bb      	strb	r3, [r7, #6]
 8000cac:	e021      	b.n	8000cf2 <main+0x17e>
						uint16_t analogbuf = analog[j];
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <main+0x2dc>)
 8000cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb6:	80bb      	strh	r3, [r7, #4]
						analogmax[j] =
								(analogmax[j] < analogbuf) ?
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	4a5c      	ldr	r2, [pc, #368]	; (8000e2c <main+0x2b8>)
 8000cbc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmax[j] =
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	88b9      	ldrh	r1, [r7, #4]
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	bf38      	it	cc
 8000cc8:	460a      	movcc	r2, r1
 8000cca:	b291      	uxth	r1, r2
 8000ccc:	4a57      	ldr	r2, [pc, #348]	; (8000e2c <main+0x2b8>)
 8000cce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										analogbuf : analogmax[j];
						analogmin[j] =
								(analogmin[j] > analogbuf) ?
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4a56      	ldr	r2, [pc, #344]	; (8000e30 <main+0x2bc>)
 8000cd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmin[j] =
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	88b9      	ldrh	r1, [r7, #4]
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	bf28      	it	cs
 8000ce2:	460a      	movcs	r2, r1
 8000ce4:	b291      	uxth	r1, r2
 8000ce6:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <main+0x2bc>)
 8000ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	71bb      	strb	r3, [r7, #6]
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2b0b      	cmp	r3, #11
 8000cf6:	d9da      	bls.n	8000cae <main+0x13a>
						} else {
							printf("\r\n");
						}
#endif
					}
					HAL_Delay(250);
 8000cf8:	20fa      	movs	r0, #250	; 0xfa
 8000cfa:	f001 fd37 	bl	800276c <HAL_Delay>
				while (enter) {
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <main+0x2a4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1d0      	bne.n	8000ca8 <main+0x134>
				}
				sensor_finalize();
 8000d06:	f000 fe5d 	bl	80019c4 <sensor_finalize>
					printf("%4d,", analogmin[i * 2 - 1]);
				}
				printf("\r\n");
				printf(ESC_DEF);
#endif
				break;	// case 0x00:
 8000d0a:	e084      	b.n	8000e16 <main+0x2a2>
			case 0x1:
				commonspeed = COMMONSPEED1;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <main+0x2b4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]
				kpl = KPL1;
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <main+0x2e0>)
 8000d14:	2219      	movs	r2, #25
 8000d16:	701a      	strb	r2, [r3, #0]
				kpr = KPR1;
 8000d18:	4b4f      	ldr	r3, [pc, #316]	; (8000e58 <main+0x2e4>)
 8000d1a:	2219      	movs	r2, #25
 8000d1c:	701a      	strb	r2, [r3, #0]
				kdl = KDL1;
 8000d1e:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <main+0x2e8>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	701a      	strb	r2, [r3, #0]
				kdr = KDR1;
 8000d24:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <main+0x2ec>)
 8000d26:	220a      	movs	r2, #10
 8000d28:	701a      	strb	r2, [r3, #0]
				kil = KIL1;
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <main+0x2f0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
				kir = KIR1;
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <main+0x2f4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
				running_initialize();
 8000d36:	f000 fe53 	bl	80019e0 <running_initialize>

				while (enter) {
 8000d3a:	e004      	b.n	8000d46 <main+0x1d2>
					d_print();
 8000d3c:	f000 fef8 	bl	8001b30 <d_print>
					HAL_Delay(250);
 8000d40:	20fa      	movs	r0, #250	; 0xfa
 8000d42:	f001 fd13 	bl	800276c <HAL_Delay>
				while (enter) {
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <main+0x2a4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f6      	bne.n	8000d3c <main+0x1c8>
				}

				running_finalize();
 8000d4e:	f000 fec9 	bl	8001ae4 <running_finalize>
				for (int i = 0; i < ENC_SIZE; i++) {
				}
				writeFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				break;
 8000d52:	e060      	b.n	8000e16 <main+0x2a2>
			case 0x2:
				commonspeed = COMMONSPEED2;
 8000d54:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <main+0x2b4>)
 8000d56:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d5a:	801a      	strh	r2, [r3, #0]
				kpl = KPL2;
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <main+0x2e0>)
 8000d5e:	2228      	movs	r2, #40	; 0x28
 8000d60:	701a      	strb	r2, [r3, #0]
				kpr = KPR2;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <main+0x2e4>)
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	701a      	strb	r2, [r3, #0]
				kdl = KDL2;
 8000d68:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <main+0x2e8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
				kdr = KDR2;
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <main+0x2ec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
				kil = KIL2;
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <main+0x2f0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
				kir = KIR2;
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <main+0x2f4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
				loadFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				running_initialize();
 8000d80:	f000 fe2e 	bl	80019e0 <running_initialize>

				while (enter) {
 8000d84:	e004      	b.n	8000d90 <main+0x21c>
					d_print();
 8000d86:	f000 fed3 	bl	8001b30 <d_print>
					HAL_Delay(250);
 8000d8a:	20fa      	movs	r0, #250	; 0xfa
 8000d8c:	f001 fcee 	bl	800276c <HAL_Delay>
				while (enter) {
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <main+0x2a4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f6      	bne.n	8000d86 <main+0x212>
				}

				running_finalize();
 8000d98:	f000 fea4 	bl	8001ae4 <running_finalize>
				break;
 8000d9c:	e03b      	b.n	8000e16 <main+0x2a2>
			case 0x3:
				commonspeed = COMMONSPEED3;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <main+0x2b4>)
 8000da0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000da4:	801a      	strh	r2, [r3, #0]
				kpl = KPL3;
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <main+0x2e0>)
 8000da8:	2219      	movs	r2, #25
 8000daa:	701a      	strb	r2, [r3, #0]
				kpr = KPR3;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <main+0x2e4>)
 8000dae:	2219      	movs	r2, #25
 8000db0:	701a      	strb	r2, [r3, #0]
				kdl = KDL3;
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <main+0x2e8>)
 8000db4:	220a      	movs	r2, #10
 8000db6:	701a      	strb	r2, [r3, #0]
				kdr = KDR3;
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <main+0x2ec>)
 8000dba:	220a      	movs	r2, #10
 8000dbc:	701a      	strb	r2, [r3, #0]
				kil = KIL3;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <main+0x2f0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
				kir = KIR3;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <main+0x2f4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
				running_initialize();
 8000dca:	f000 fe09 	bl	80019e0 <running_initialize>

				while (enter) {
 8000dce:	e004      	b.n	8000dda <main+0x266>
					d_print();
 8000dd0:	f000 feae 	bl	8001b30 <d_print>
					HAL_Delay(250);
 8000dd4:	20fa      	movs	r0, #250	; 0xfa
 8000dd6:	f001 fcc9 	bl	800276c <HAL_Delay>
				while (enter) {
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <main+0x2a4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f6      	bne.n	8000dd0 <main+0x25c>
				}

				running_finalize();
 8000de2:	f000 fe7f 	bl	8001ae4 <running_finalize>
				break;
 8000de6:	e016      	b.n	8000e16 <main+0x2a2>
					}
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
#endif
#if D_VELOCITY_CONTROL
				running_initialize();
 8000de8:	f000 fdfa 	bl	80019e0 <running_initialize>

				while (enter) {
 8000dec:	e004      	b.n	8000df8 <main+0x284>
					d_print();
 8000dee:	f000 fe9f 	bl	8001b30 <d_print>
					HAL_Delay(250);
 8000df2:	20fa      	movs	r0, #250	; 0xfa
 8000df4:	f001 fcba 	bl	800276c <HAL_Delay>
				while (enter) {
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <main+0x2a4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f6      	bne.n	8000dee <main+0x27a>
				}

				running_finalize();
 8000e00:	f000 fe70 	bl	8001ae4 <running_finalize>
#endif
				break;
 8000e04:	e007      	b.n	8000e16 <main+0x2a2>
					IMU_printf(&readrom.inertial[i]);
				}
#endif

				while (enter) {
					HAL_Delay(250);
 8000e06:	20fa      	movs	r0, #250	; 0xfa
 8000e08:	f001 fcb0 	bl	800276c <HAL_Delay>
				while (enter) {
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <main+0x2a4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f8      	bne.n	8000e06 <main+0x292>
				}
				break;
 8000e14:	bf00      	nop
		printf("///// WHILE /////\n\r");
 8000e16:	e711      	b.n	8000c3c <main+0xc8>
 8000e18:	20000649 	.word	0x20000649
 8000e1c:	200004c4 	.word	0x200004c4
 8000e20:	20000250 	.word	0x20000250
 8000e24:	20000480 	.word	0x20000480
 8000e28:	20000256 	.word	0x20000256
 8000e2c:	200005e8 	.word	0x200005e8
 8000e30:	20000234 	.word	0x20000234
 8000e34:	0800707c 	.word	0x0800707c
 8000e38:	08007084 	.word	0x08007084
 8000e3c:	080070a4 	.word	0x080070a4
 8000e40:	200002a0 	.word	0x200002a0
 8000e44:	080070bc 	.word	0x080070bc
 8000e48:	2000032c 	.word	0x2000032c
 8000e4c:	080070cc 	.word	0x080070cc
 8000e50:	200000a0 	.word	0x200000a0
 8000e54:	20000478 	.word	0x20000478
 8000e58:	20000601 	.word	0x20000601
 8000e5c:	20000224 	.word	0x20000224
 8000e60:	20000230 	.word	0x20000230
 8000e64:	20000231 	.word	0x20000231
 8000e68:	20000255 	.word	0x20000255

08000e6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	; 0x50
 8000e70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	2230      	movs	r2, #48	; 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f9a2 	bl	80061c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <SystemClock_Config+0xcc>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemClock_Config+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ecc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000edc:	2308      	movs	r3, #8
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000ee0:	23a8      	movs	r3, #168	; 0xa8
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 f885 	bl	8004000 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x94>
		Error_Handler();
 8000efc:	f000 ff0c 	bl	8001d18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2302      	movs	r3, #2
 8000f06:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f10:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 fade 	bl	80044e0 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xc2>
		Error_Handler();
 8000f2a:	f000 fef5 	bl	8001d18 <Error_Handler>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	; 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f52:	4b8a      	ldr	r3, [pc, #552]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f54:	4a8a      	ldr	r2, [pc, #552]	; (8001180 <MX_ADC1_Init+0x240>)
 8000f56:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b88      	ldr	r3, [pc, #544]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f5e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b86      	ldr	r3, [pc, #536]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000f66:	4b85      	ldr	r3, [pc, #532]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6c:	4b83      	ldr	r3, [pc, #524]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b82      	ldr	r3, [pc, #520]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b80      	ldr	r3, [pc, #512]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b7e      	ldr	r3, [pc, #504]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f82:	4a80      	ldr	r2, [pc, #512]	; (8001184 <MX_ADC1_Init+0x244>)
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f86:	4b7d      	ldr	r3, [pc, #500]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 16;
 8000f8c:	4b7b      	ldr	r3, [pc, #492]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f8e:	2210      	movs	r2, #16
 8000f90:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f92:	4b7a      	ldr	r3, [pc, #488]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b78      	ldr	r3, [pc, #480]	; (800117c <MX_ADC1_Init+0x23c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fa0:	4876      	ldr	r0, [pc, #472]	; (800117c <MX_ADC1_Init+0x23c>)
 8000fa2:	f001 fc05 	bl	80027b0 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000fac:	f000 feb4 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	486e      	ldr	r0, [pc, #440]	; (800117c <MX_ADC1_Init+0x23c>)
 8000fc2:	f001 fd89 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000fcc:	f000 fea4 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4867      	ldr	r0, [pc, #412]	; (800117c <MX_ADC1_Init+0x23c>)
 8000fde:	f001 fd7b 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0xac>
		Error_Handler();
 8000fe8:	f000 fe96 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4860      	ldr	r0, [pc, #384]	; (800117c <MX_ADC1_Init+0x23c>)
 8000ffa:	f001 fd6d 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001004:	f000 fe88 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8001008:	230b      	movs	r3, #11
 800100a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4859      	ldr	r0, [pc, #356]	; (800117c <MX_ADC1_Init+0x23c>)
 8001016:	f001 fd5f 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8001020:	f000 fe7a 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001024:	230e      	movs	r3, #14
 8001026:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8001028:	2305      	movs	r3, #5
 800102a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4852      	ldr	r0, [pc, #328]	; (800117c <MX_ADC1_Init+0x23c>)
 8001032:	f001 fd51 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x100>
		Error_Handler();
 800103c:	f000 fe6c 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001040:	230f      	movs	r3, #15
 8001042:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8001044:	2306      	movs	r3, #6
 8001046:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	484b      	ldr	r0, [pc, #300]	; (800117c <MX_ADC1_Init+0x23c>)
 800104e:	f001 fd43 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x11c>
		Error_Handler();
 8001058:	f000 fe5e 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800105c:	230c      	movs	r3, #12
 800105e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8001060:	2307      	movs	r3, #7
 8001062:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4844      	ldr	r0, [pc, #272]	; (800117c <MX_ADC1_Init+0x23c>)
 800106a:	f001 fd35 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x138>
		Error_Handler();
 8001074:	f000 fe50 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001078:	230d      	movs	r3, #13
 800107a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	483d      	ldr	r0, [pc, #244]	; (800117c <MX_ADC1_Init+0x23c>)
 8001086:	f001 fd27 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x154>
		Error_Handler();
 8001090:	f000 fe42 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001094:	2307      	movs	r3, #7
 8001096:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 8001098:	2309      	movs	r3, #9
 800109a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4836      	ldr	r0, [pc, #216]	; (800117c <MX_ADC1_Init+0x23c>)
 80010a2:	f001 fd19 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x170>
		Error_Handler();
 80010ac:	f000 fe34 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 80010b4:	230a      	movs	r3, #10
 80010b6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	482f      	ldr	r0, [pc, #188]	; (800117c <MX_ADC1_Init+0x23c>)
 80010be:	f001 fd0b 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x18c>
		Error_Handler();
 80010c8:	f000 fe26 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80010cc:	2306      	movs	r3, #6
 80010ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 80010d0:	230b      	movs	r3, #11
 80010d2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4828      	ldr	r0, [pc, #160]	; (800117c <MX_ADC1_Init+0x23c>)
 80010da:	f001 fcfd 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x1a8>
		Error_Handler();
 80010e4:	f000 fe18 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 80010ec:	230c      	movs	r3, #12
 80010ee:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4821      	ldr	r0, [pc, #132]	; (800117c <MX_ADC1_Init+0x23c>)
 80010f6:	f001 fcef 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x1c4>
		Error_Handler();
 8001100:	f000 fe0a 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001104:	2305      	movs	r3, #5
 8001106:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 8001108:	230d      	movs	r3, #13
 800110a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_ADC1_Init+0x23c>)
 8001112:	f001 fce1 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x1e0>
		Error_Handler();
 800111c:	f000 fdfc 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001120:	2302      	movs	r3, #2
 8001122:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 8001124:	230e      	movs	r3, #14
 8001126:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <MX_ADC1_Init+0x23c>)
 800112e:	f001 fcd3 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x1fc>
		Error_Handler();
 8001138:	f000 fdee 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800113c:	2304      	movs	r3, #4
 800113e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 8001140:	230f      	movs	r3, #15
 8001142:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_ADC1_Init+0x23c>)
 800114a:	f001 fcc5 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x218>
		Error_Handler();
 8001154:	f000 fde0 	bl	8001d18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001158:	2303      	movs	r3, #3
 800115a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_ADC1_Init+0x23c>)
 8001166:	f001 fcb7 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0x234>
		Error_Handler();
 8001170:	f000 fdd2 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200002a0 	.word	0x200002a0
 8001180:	40012000 	.word	0x40012000
 8001184:	0f000001 	.word	0x0f000001

08001188 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f002 fde3 	bl	8003d90 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011d0:	f000 fda2 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000188 	.word	0x20000188
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_SPI2_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_SPI2_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI2_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI2_Init+0x64>)
 8001204:	2202      	movs	r2, #2
 8001206:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI2_Init+0x64>)
 800120a:	2201      	movs	r2, #1
 800120c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI2_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI2_Init+0x64>)
 8001218:	2220      	movs	r2, #32
 800121a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_SPI2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI2_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_SPI2_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI2_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_SPI2_Init+0x64>)
 8001236:	f003 fb43 	bl	80048c0 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI2_Init+0x60>
		Error_Handler();
 8001240:	f000 fd6a 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000bc 	.word	0x200000bc
 800124c:	40003800 	.word	0x40003800

08001250 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f004 ffb0 	bl	80061c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_TIM1_Init+0xa8>)
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <MX_TIM1_Init+0xac>)
 8001270:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM1_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM1_Init+0xa8>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM1_Init+0xa8>)
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM1_Init+0xa8>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM1_Init+0xa8>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM1_Init+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM1_Init+0xa8>)
 80012c4:	f003 fc9c 	bl	8004c00 <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x82>
		Error_Handler();
 80012ce:	f000 fd23 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM1_Init+0xa8>)
 80012e0:	f004 fa0a 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80012ea:	f000 fd15 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000438 	.word	0x20000438
 80012fc:	40010000 	.word	0x40010000

08001300 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_TIM2_Init+0xb0>)
 8001324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001328:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 256;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_TIM2_Init+0xb0>)
 800132c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001330:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM2_Init+0xb0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1485;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM2_Init+0xb0>)
 800133a:	f240 52cd 	movw	r2, #1485	; 0x5cd
 800133e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM2_Init+0xb0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM2_Init+0xb0>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <MX_TIM2_Init+0xb0>)
 800134e:	f003 fb95 	bl	8004a7c <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x5c>
		Error_Handler();
 8001358:	f000 fcde 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <MX_TIM2_Init+0xb0>)
 800136c:	f004 f9c4 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8001376:	f000 fccf 	bl	8001d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM2_Init+0xb0>)
 8001392:	f003 fe4d 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 800139c:	f000 fcbc 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM2_Init+0xb0>)
 80013a2:	f000 ff81 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200004c8 	.word	0x200004c8

080013b4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fefe 	bl	80061c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <MX_TIM3_Init+0xa4>)
 80013d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM3_Init+0xa0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f6:	2303      	movs	r3, #3
 80013f8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140e:	2301      	movs	r3, #1
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM3_Init+0xa0>)
 8001422:	f003 fbed 	bl	8004c00 <HAL_TIM_Encoder_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x7c>
		Error_Handler();
 800142c:	f000 fc74 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM3_Init+0xa0>)
 800143e:	f004 f95b 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001448:	f000 fc66 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000258 	.word	0x20000258
 8001458:	40000400 	.word	0x40000400

0800145c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_TIM4_Init+0xc0>)
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <MX_TIM4_Init+0xc4>)
 8001482:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_TIM4_Init+0xc0>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <MX_TIM4_Init+0xc0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 3359;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_TIM4_Init+0xc0>)
 8001492:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001496:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <MX_TIM4_Init+0xc0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_TIM4_Init+0xc0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <MX_TIM4_Init+0xc0>)
 80014a6:	f003 fae9 	bl	8004a7c <HAL_TIM_PWM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x58>
		Error_Handler();
 80014b0:	f000 fc32 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4619      	mov	r1, r3
 80014c2:	4816      	ldr	r0, [pc, #88]	; (800151c <MX_TIM4_Init+0xc0>)
 80014c4:	f004 f918 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80014ce:	f000 fc23 	bl	8001d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_TIM4_Init+0xc0>)
 80014ea:	f003 fda1 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM4_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80014f4:	f000 fc10 	bl	8001d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2204      	movs	r2, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM4_Init+0xc0>)
 8001500:	f003 fd96 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800150a:	f000 fc05 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM4_Init+0xc0>)
 8001510:	f000 feca 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000013c 	.word	0x2000013c
 8001520:	40000800 	.word	0x40000800

08001524 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_TIM6_Init+0x64>)
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_TIM6_Init+0x68>)
 8001536:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 2;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_TIM6_Init+0x64>)
 800153a:	2202      	movs	r2, #2
 800153c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_TIM6_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 55999;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_TIM6_Init+0x64>)
 8001546:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800154a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_TIM6_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_TIM6_Init+0x64>)
 8001554:	f003 fa18 	bl	8004988 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM6_Init+0x3e>
		Error_Handler();
 800155e:	f000 fbdb 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 800156a:	463b      	mov	r3, r7
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_TIM6_Init+0x64>)
 8001570:	f004 f8c2 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800157a:	f000 fbcd 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200003f8 	.word	0x200003f8
 800158c:	40001000 	.word	0x40001000

08001590 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015a0:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <MX_TIM7_Init+0x68>)
 80015a2:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 16799;
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015b2:	f244 129f 	movw	r2, #16799	; 0x419f
 80015b6:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015c0:	f003 f9e2 	bl	8004988 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM7_Init+0x3e>
		Error_Handler();
 80015ca:	f000 fba5 	bl	8001d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_TIM7_Init+0x64>)
 80015dc:	f004 f88c 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM7_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80015e6:	f000 fb97 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000604 	.word	0x20000604
 80015f8:	40001400 	.word	0x40001400

080015fc <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_TIM10_Init+0x40>)
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <MX_TIM10_Init+0x44>)
 8001604:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 2;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_TIM10_Init+0x40>)
 8001608:	2202      	movs	r2, #2
 800160a:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_TIM10_Init+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 55999;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_TIM10_Init+0x40>)
 8001614:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001618:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_TIM10_Init+0x40>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_TIM10_Init+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM10_Init+0x40>)
 8001628:	f003 f9ae 	bl	8004988 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM10_Init+0x3a>
		Error_Handler();
 8001632:	f000 fb71 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200001dc 	.word	0x200001dc
 8001640:	40014400 	.word	0x40014400

08001644 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_TIM11_Init+0x40>)
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <MX_TIM11_Init+0x44>)
 800164c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 2;
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_TIM11_Init+0x40>)
 8001650:	2202      	movs	r2, #2
 8001652:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_TIM11_Init+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 55999;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_TIM11_Init+0x40>)
 800165c:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001660:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_TIM11_Init+0x40>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_TIM11_Init+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM11_Init+0x40>)
 8001670:	f003 f98a 	bl	8004988 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM11_Init+0x3a>
		Error_Handler();
 800167a:	f000 fb4d 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000032c 	.word	0x2000032c
 8001688:	40014800 	.word	0x40014800

0800168c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_TIM13_Init+0x40>)
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <MX_TIM13_Init+0x44>)
 8001694:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 2;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_TIM13_Init+0x40>)
 8001698:	2202      	movs	r2, #2
 800169a:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_TIM13_Init+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 55999;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_TIM13_Init+0x40>)
 80016a4:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80016a8:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_TIM13_Init+0x40>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_TIM13_Init+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_TIM13_Init+0x40>)
 80016b8:	f003 f966 	bl	8004988 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM13_Init+0x3a>
		Error_Handler();
 80016c2:	f000 fb29 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200002ec 	.word	0x200002ec
 80016d0:	40001c00 	.word	0x40001c00

080016d4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART6_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART6_UART_Init+0x4c>)
 800170c:	f004 f884 	bl	8005818 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001716:	f000 faff 	bl	8001d18 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000484 	.word	0x20000484
 8001724:	40011400 	.word	0x40011400

08001728 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_DMA_Init+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <MX_DMA_Init+0x3c>)
 8001738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_DMA_Init+0x3c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2038      	movs	r0, #56	; 0x38
 8001750:	f001 fd3d 	bl	80031ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001754:	2038      	movs	r0, #56	; 0x38
 8001756:	f001 fd56 	bl	8003206 <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b60      	ldr	r3, [pc, #384]	; (8001904 <MX_GPIO_Init+0x19c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <MX_GPIO_Init+0x19c>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <MX_GPIO_Init+0x19c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b59      	ldr	r3, [pc, #356]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a58      	ldr	r2, [pc, #352]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b52      	ldr	r3, [pc, #328]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a51      	ldr	r2, [pc, #324]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a43      	ldr	r2, [pc, #268]	; (8001904 <MX_GPIO_Init+0x19c>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <MX_GPIO_Init+0x19c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin | LED_White_Pin | LED_B_Pin,
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001810:	483d      	ldr	r0, [pc, #244]	; (8001908 <MX_GPIO_Init+0x1a0>)
 8001812:	f002 faa3 	bl	8003d5c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin | LED_Red_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800181c:	483b      	ldr	r0, [pc, #236]	; (800190c <MX_GPIO_Init+0x1a4>)
 800181e:	f002 fa9d 	bl	8003d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_G_Pin | LED_R_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <MX_GPIO_Init+0x1a8>)
 800182a:	f002 fa97 	bl	8003d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	4838      	ldr	r0, [pc, #224]	; (8001914 <MX_GPIO_Init+0x1ac>)
 8001834:	f002 fa92 	bl	8003d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = DRV2_PH_Pin | LED_White_Pin | LED_B_Pin;
 8001838:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800183c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	482d      	ldr	r0, [pc, #180]	; (8001908 <MX_GPIO_Init+0x1a0>)
 8001852:	f002 f8d1 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
	 Rotary1_Pin */
	GPIO_InitStruct.Pin = SW1_Pin | SW2_Pin | Rotary2_Pin | Rotary8_Pin
 8001856:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 800185a:	617b      	str	r3, [r7, #20]
			| Rotary1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4827      	ldr	r0, [pc, #156]	; (8001908 <MX_GPIO_Init+0x1a0>)
 800186c:	f002 f8c4 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
	GPIO_InitStruct.Pin = SubSens1_Pin | SubSens2_Pin;
 8001870:	f640 0304 	movw	r3, #2052	; 0x804
 8001874:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4821      	ldr	r0, [pc, #132]	; (800190c <MX_GPIO_Init+0x1a4>)
 8001886:	f002 f8b7 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
	GPIO_InitStruct.Pin = SPI2_nCS_Pin | LED_Red_Pin;
 800188a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800188e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	481a      	ldr	r0, [pc, #104]	; (800190c <MX_GPIO_Init+0x1a4>)
 80018a4:	f002 f8a8 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_G_Pin | LED_R_Pin;
 80018a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <MX_GPIO_Init+0x1a8>)
 80018c2:	f002 f899 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Rotary4_Pin */
	GPIO_InitStruct.Pin = Rotary4_Pin;
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_GPIO_Init+0x1a8>)
 80018dc:	f002 f88c 	bl	80039f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRV1_PH_Pin */
	GPIO_InitStruct.Pin = DRV1_PH_Pin;
 80018e0:	2304      	movs	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_GPIO_Init+0x1ac>)
 80018f8:	f002 f87e 	bl	80039f8 <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020400 	.word	0x40020400
 8001910:	40020000 	.word	0x40020000
 8001914:	40020c00 	.word	0x40020c00

08001918 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 0 : 1;	// Rotary4
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	460b      	mov	r3, r1
 8001924:	71bb      	strb	r3, [r7, #6]
 8001926:	4613      	mov	r3, r2
 8001928:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	480f      	ldr	r0, [pc, #60]	; (800197c <led_rgb+0x64>)
 800193e:	f002 fa0d 	bl	8003d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <led_rgb+0x64>)
 8001956:	f002 fa01 	bl	8003d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 800195a:	797b      	ldrb	r3, [r7, #5]
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <led_rgb+0x68>)
 800196e:	f002 f9f5 	bl	8003d5c <HAL_GPIO_WritePin>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020000 	.word	0x40020000
 8001980:	40020800 	.word	0x40020800

08001984 <sensor_initialize>:

void sensor_initialize() {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	sensgettime = 0;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <sensor_initialize+0x30>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 800198e:	2210      	movs	r2, #16
 8001990:	4909      	ldr	r1, [pc, #36]	; (80019b8 <sensor_initialize+0x34>)
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <sensor_initialize+0x38>)
 8001994:	f000 ff50 	bl	8002838 <HAL_ADC_Start_DMA>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <sensor_initialize+0x1e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 800199e:	f000 f9bb 	bl	8001d18 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim7);	// SENSORGET SORT
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <sensor_initialize+0x3c>)
 80019a4:	f003 f81b 	bl	80049de <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 80019a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ac:	f000 fede 	bl	800276c <HAL_Delay>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000114 	.word	0x20000114
 80019b8:	2000011c 	.word	0x2000011c
 80019bc:	200002a0 	.word	0x200002a0
 80019c0:	20000604 	.word	0x20000604

080019c4 <sensor_finalize>:

void sensor_finalize() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <sensor_finalize+0x14>)
 80019ca:	f003 f82c 	bl	8004a26 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <sensor_finalize+0x18>)
 80019d0:	f001 f824 	bl	8002a1c <HAL_ADC_Stop_DMA>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000604 	.word	0x20000604
 80019dc:	200002a0 	.word	0x200002a0

080019e0 <running_initialize>:

void running_initialize() {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	sensor_initialize();
 80019e4:	f7ff ffce 	bl	8001984 <sensor_initialize>
	printf("Encoder_Start\r\n");
 80019e8:	4827      	ldr	r0, [pc, #156]	; (8001a88 <running_initialize+0xa8>)
 80019ea:	f004 fc67 	bl	80062bc <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80019ee:	213c      	movs	r1, #60	; 0x3c
 80019f0:	4826      	ldr	r0, [pc, #152]	; (8001a8c <running_initialize+0xac>)
 80019f2:	f003 f997 	bl	8004d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80019f6:	213c      	movs	r1, #60	; 0x3c
 80019f8:	4825      	ldr	r0, [pc, #148]	; (8001a90 <running_initialize+0xb0>)
 80019fa:	f003 f993 	bl	8004d24 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <running_initialize+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
	marker = 0;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <running_initialize+0xb8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <running_initialize+0xbc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <running_initialize+0xc0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <running_initialize+0xc4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
	prelengthl = 0;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <running_initialize+0xc8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	prelengthr = 0;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <running_initialize+0xcc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
#if D_VELOCITY_CONTROL
	s_velocity_error_l = 0;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <running_initialize+0xd0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
	s_velocity_error_r = 0;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <running_initialize+0xd4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
#endif
#if USE_FLASH
	course_state_time = 0;
#endif
	printf("SIDESENSOR ENCODER\r\n");
 8001a34:	4820      	ldr	r0, [pc, #128]	; (8001ab8 <running_initialize+0xd8>)
 8001a36:	f004 fc41 	bl	80062bc <puts>
	HAL_TIM_Base_Start_IT(&htim7);
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <running_initialize+0xdc>)
 8001a3c:	f002 ffcf 	bl	80049de <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 8001a40:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <running_initialize+0xe0>)
 8001a42:	f002 ffcc 	bl	80049de <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <running_initialize+0xe4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	rightmotor = 0;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <running_initialize+0xe8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
	beforedirection = 0;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <running_initialize+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
	encoder_initialize();
 8001a58:	f000 f898 	bl	8001b8c <encoder_initialize>
	printf("PWM_Start\r\n");
 8001a5c:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <running_initialize+0xf0>)
 8001a5e:	f004 fc2d 	bl	80062bc <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8001a62:	2100      	movs	r1, #0
 8001a64:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <running_initialize+0xf4>)
 8001a66:	f003 f835 	bl	8004ad4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	4819      	ldr	r0, [pc, #100]	; (8001ad4 <running_initialize+0xf4>)
 8001a6e:	f003 f831 	bl	8004ad4 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 8001a72:	4819      	ldr	r0, [pc, #100]	; (8001ad8 <running_initialize+0xf8>)
 8001a74:	f004 fc22 	bl	80062bc <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8001a78:	4818      	ldr	r0, [pc, #96]	; (8001adc <running_initialize+0xfc>)
 8001a7a:	f002 ffb0 	bl	80049de <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <running_initialize+0x100>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
#endif
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	080070e0 	.word	0x080070e0
 8001a8c:	20000438 	.word	0x20000438
 8001a90:	20000258 	.word	0x20000258
 8001a94:	20000254 	.word	0x20000254
 8001a98:	200003f4 	.word	0x200003f4
 8001a9c:	20000298 	.word	0x20000298
 8001aa0:	200002e9 	.word	0x200002e9
 8001aa4:	20000648 	.word	0x20000648
 8001aa8:	20000299 	.word	0x20000299
 8001aac:	20000184 	.word	0x20000184
 8001ab0:	2000024c 	.word	0x2000024c
 8001ab4:	20000118 	.word	0x20000118
 8001ab8:	080070f0 	.word	0x080070f0
 8001abc:	20000604 	.word	0x20000604
 8001ac0:	200001dc 	.word	0x200001dc
 8001ac4:	2000022c 	.word	0x2000022c
 8001ac8:	20000228 	.word	0x20000228
 8001acc:	20000644 	.word	0x20000644
 8001ad0:	08007104 	.word	0x08007104
 8001ad4:	2000013c 	.word	0x2000013c
 8001ad8:	08007110 	.word	0x08007110
 8001adc:	200003f8 	.word	0x200003f8
 8001ae0:	200004c4 	.word	0x200004c4

08001ae4 <running_finalize>:

void running_finalize() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	motorenable = 0;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <running_finalize+0x38>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8001aee:	f7ff ff69 	bl	80019c4 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001af2:	480b      	ldr	r0, [pc, #44]	; (8001b20 <running_finalize+0x3c>)
 8001af4:	f002 ff97 	bl	8004a26 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001af8:	2104      	movs	r1, #4
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <running_finalize+0x40>)
 8001afc:	f003 f828 	bl	8004b50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001b00:	2100      	movs	r1, #0
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <running_finalize+0x40>)
 8001b04:	f003 f824 	bl	8004b50 <HAL_TIM_PWM_Stop>
	encoder_finalize();
 8001b08:	f000 f85a 	bl	8001bc0 <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim7);
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <running_finalize+0x44>)
 8001b0e:	f002 ff8a 	bl	8004a26 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim10);
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <running_finalize+0x48>)
 8001b14:	f002 ff87 	bl	8004a26 <HAL_TIM_Base_Stop_IT>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200004c4 	.word	0x200004c4
 8001b20:	200003f8 	.word	0x200003f8
 8001b24:	2000013c 	.word	0x2000013c
 8001b28:	20000604 	.word	0x20000604
 8001b2c:	200001dc 	.word	0x200001dc

08001b30 <d_print>:

void d_print() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

#if D_IMU
#endif

#if D_VELOCITY_CONTROL
	printf("velocity = %5d, velocity_r = %5d\r\n", velocity_l, velocity_r);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <d_print+0x38>)
 8001b36:	6819      	ldr	r1, [r3, #0]
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <d_print+0x3c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <d_print+0x40>)
 8001b40:	f004 fb48 	bl	80061d4 <iprintf>
	printf("velocity_next_l = %5d, velocity_next_r = %5d\r\n", velocity_next_l, velocity_next_r);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <d_print+0x44>)
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <d_print+0x48>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <d_print+0x4c>)
 8001b50:	f004 fb40 	bl	80061d4 <iprintf>
	printf("leftmotor = %5d, rightmotor = %5d\r\n", leftmotor, rightmotor);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <d_print+0x50>)
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <d_print+0x54>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	480a      	ldr	r0, [pc, #40]	; (8001b88 <d_print+0x58>)
 8001b60:	f004 fb38 	bl	80061d4 <iprintf>
#endif
}	// d_print
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200000b8 	.word	0x200000b8
 8001b6c:	20000098 	.word	0x20000098
 8001b70:	08007118 	.word	0x08007118
 8001b74:	20000370 	.word	0x20000370
 8001b78:	200003f0 	.word	0x200003f0
 8001b7c:	0800713c 	.word	0x0800713c
 8001b80:	2000022c 	.word	0x2000022c
 8001b84:	20000228 	.word	0x20000228
 8001b88:	0800716c 	.word	0x0800716c

08001b8c <encoder_initialize>:
	printf("%4d, %4d, %4d\r\n", inertial.gyro.x, inertial.gyro.y,
			inertial.gyro.z);
}
#endif

void encoder_initialize() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b90:	213c      	movs	r1, #60	; 0x3c
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <encoder_initialize+0x24>)
 8001b94:	f003 f8c6 	bl	8004d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b98:	213c      	movs	r1, #60	; 0x3c
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <encoder_initialize+0x28>)
 8001b9c:	f003 f8c2 	bl	8004d24 <HAL_TIM_Encoder_Start>

	TIM1->CNT = 0;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <encoder_initialize+0x2c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <encoder_initialize+0x30>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000438 	.word	0x20000438
 8001bb4:	20000258 	.word	0x20000258
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <encoder_finalize>:

void encoder_finalize() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001bc4:	213c      	movs	r1, #60	; 0x3c
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <encoder_finalize+0x18>)
 8001bc8:	f003 f8e3 	bl	8004d92 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001bcc:	213c      	movs	r1, #60	; 0x3c
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <encoder_finalize+0x1c>)
 8001bd0:	f003 f8df 	bl	8004d92 <HAL_TIM_Encoder_Stop>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000438 	.word	0x20000438
 8001bdc:	20000258 	.word	0x20000258

08001be0 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8001be8:	1d39      	adds	r1, r7, #4
 8001bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <__io_putchar+0x20>)
 8001bf2:	f003 fe5e 	bl	80058b2 <HAL_UART_Transmit>
	return ch;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000484 	.word	0x20000484

08001c04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 8001c04:	b4b0      	push	{r4, r5, r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	if (sensgettime >= SENSGETCOUNT) {
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x104>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d954      	bls.n	8001cbe <HAL_ADC_ConvCpltCallback+0xba>
		sensgettime = 0;
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x104>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e04b      	b.n	8001cb8 <HAL_ADC_ConvCpltCallback+0xb4>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	73bb      	strb	r3, [r7, #14]
 8001c24:	e039      	b.n	8001c9a <HAL_ADC_ConvCpltCallback+0x96>
				for (unsigned char alphaindex = 0; alphaindex > count;
 8001c26:	2300      	movs	r3, #0
 8001c28:	737b      	strb	r3, [r7, #13]
 8001c2a:	e02f      	b.n	8001c8c <HAL_ADC_ConvCpltCallback+0x88>
						alphaindex--) {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	7bf9      	ldrb	r1, [r7, #15]
 8001c32:	4836      	ldr	r0, [pc, #216]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001c42:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] =
							analogbuffers[alphaindex][index];
 8001c44:	7b79      	ldrb	r1, [r7, #13]
 8001c46:	7bfc      	ldrb	r4, [r7, #15]
					analogbuffers[alphaindex - 1][index] =
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	7bf8      	ldrb	r0, [r7, #15]
							analogbuffers[alphaindex][index];
 8001c4e:	4d2f      	ldr	r5, [pc, #188]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001c50:	460b      	mov	r3, r1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	440b      	add	r3, r1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4423      	add	r3, r4
 8001c5a:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
					analogbuffers[alphaindex - 1][index] =
 8001c5e:	492b      	ldr	r1, [pc, #172]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4403      	add	r3, r0
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001c70:	7b7a      	ldrb	r2, [r7, #13]
 8001c72:	7bf9      	ldrb	r1, [r7, #15]
 8001c74:	4825      	ldr	r0, [pc, #148]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	897a      	ldrh	r2, [r7, #10]
 8001c82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						alphaindex--) {
 8001c86:	7b7b      	ldrb	r3, [r7, #13]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	737b      	strb	r3, [r7, #13]
				for (unsigned char alphaindex = 0; alphaindex > count;
 8001c8c:	7b7a      	ldrb	r2, [r7, #13]
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8cb      	bhi.n	8001c2c <HAL_ADC_ConvCpltCallback+0x28>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73bb      	strb	r3, [r7, #14]
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d9c2      	bls.n	8001c26 <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	4919      	ldr	r1, [pc, #100]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001ca6:	3230      	adds	r2, #48	; 0x30
 8001ca8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b0b      	cmp	r3, #11
 8001cbc:	d9b0      	bls.n	8001c20 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	733b      	strb	r3, [r7, #12]
 8001cc2:	e013      	b.n	8001cec <HAL_ADC_ConvCpltCallback+0xe8>
		analogbuffers[sensgettime][index] = analograw[index];
 8001cc4:	7b3b      	ldrb	r3, [r7, #12]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x104>)
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4610      	mov	r0, r2
 8001ccc:	7b3a      	ldrb	r2, [r7, #12]
 8001cce:	4911      	ldr	r1, [pc, #68]	; (8001d14 <HAL_ADC_ConvCpltCallback+0x110>)
 8001cd0:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8001cd4:	490d      	ldr	r1, [pc, #52]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x108>)
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4403      	add	r3, r0
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8001ce6:	7b3b      	ldrb	r3, [r7, #12]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	733b      	strb	r3, [r7, #12]
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	2b0b      	cmp	r3, #11
 8001cf0:	d9e8      	bls.n	8001cc4 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x104>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x104>)
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bcb0      	pop	{r4, r5, r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000114 	.word	0x20000114
 8001d0c:	20000508 	.word	0x20000508
 8001d10:	200000a0 	.word	0x200000a0
 8001d14:	2000011c 	.word	0x2000011c

08001d18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d1e:	e7fe      	b.n	8001d1e <Error_Handler+0x6>

08001d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_ADC_MspInit+0x144>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f040 808c 	bne.w	8001eac <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6453      	str	r3, [r2, #68]	; 0x44
 8001da4:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_ADC_MspInit+0x148>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e04:	233f      	movs	r3, #63	; 0x3f
 8001e06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4829      	ldr	r0, [pc, #164]	; (8001ebc <HAL_ADC_MspInit+0x14c>)
 8001e18:	f001 fdee 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e1c:	23ff      	movs	r3, #255	; 0xff
 8001e1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <HAL_ADC_MspInit+0x150>)
 8001e30:	f001 fde2 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e34:	2303      	movs	r3, #3
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	481f      	ldr	r0, [pc, #124]	; (8001ec4 <HAL_ADC_MspInit+0x154>)
 8001e48:	f001 fdd6 	bl	80039f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <HAL_ADC_MspInit+0x15c>)
 8001e50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001e92:	f001 f9d3 	bl	800323c <HAL_DMA_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001e9c:	f7ff ff3c 	bl	8001d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_ADC_MspInit+0x158>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	2000038c 	.word	0x2000038c
 8001ecc:	40026410 	.word	0x40026410

08001ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_I2C_MspInit+0x84>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12c      	bne.n	8001f4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f14:	2312      	movs	r3, #18
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f20:	2304      	movs	r3, #4
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <HAL_I2C_MspInit+0x8c>)
 8001f2c:	f001 fd64 	bl	80039f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_I2C_MspInit+0x88>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40005400 	.word	0x40005400
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_SPI_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fcc:	2305      	movs	r3, #5
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_SPI_MspInit+0x8c>)
 8001fd8:	f001 fd0e 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40003800 	.word	0x40003800
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <HAL_TIM_Encoder_MspInit+0x108>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d13d      	bne.n	800208e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a38      	ldr	r2, [pc, #224]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a31      	ldr	r2, [pc, #196]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800204a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4826      	ldr	r0, [pc, #152]	; (8002100 <HAL_TIM_Encoder_MspInit+0x110>)
 8002068:	f001 fcc6 	bl	80039f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2019      	movs	r0, #25
 8002072:	f001 f8ac 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002076:	2019      	movs	r0, #25
 8002078:	f001 f8c5 	bl	8003206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	201a      	movs	r0, #26
 8002082:	f001 f8a4 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002086:	201a      	movs	r0, #26
 8002088:	f001 f8bd 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208c:	e030      	b.n	80020f0 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_TIM_Encoder_MspInit+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d12b      	bne.n	80020f0 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	6313      	str	r3, [r2, #48]	; 0x30
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80020d0:	2330      	movs	r3, #48	; 0x30
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e0:	2302      	movs	r3, #2
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_TIM_Encoder_MspInit+0x118>)
 80020ec:	f001 fc84 	bl	80039f8 <HAL_GPIO_Init>
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40000400 	.word	0x40000400
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d10e      	bne.n	800213c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800213a:	e012      	b.n	8002162 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_TIM_PWM_MspInit+0x68>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10d      	bne.n	8002162 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_TIM_PWM_MspInit+0x64>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a42      	ldr	r2, [pc, #264]	; (8002290 <HAL_TIM_Base_MspInit+0x118>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d116      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2036      	movs	r0, #54	; 0x36
 80021ac:	f001 f80f 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b0:	2036      	movs	r0, #54	; 0x36
 80021b2:	f001 f828 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80021b6:	e066      	b.n	8002286 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a36      	ldr	r2, [pc, #216]	; (8002298 <HAL_TIM_Base_MspInit+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d116      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a32      	ldr	r2, [pc, #200]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2037      	movs	r0, #55	; 0x37
 80021e4:	f000 fff3 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021e8:	2037      	movs	r0, #55	; 0x37
 80021ea:	f001 f80c 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 80021ee:	e04a      	b.n	8002286 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_TIM_Base_MspInit+0x124>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d116      	bne.n	8002228 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2019      	movs	r0, #25
 800221c:	f000 ffd7 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002220:	2019      	movs	r0, #25
 8002222:	f000 fff0 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002226:	e02e      	b.n	8002286 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_TIM_Base_MspInit+0x128>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d116      	bne.n	8002260 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	201a      	movs	r0, #26
 8002254:	f000 ffbb 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002258:	201a      	movs	r0, #26
 800225a:	f000 ffd4 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 800225e:	e012      	b.n	8002286 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_TIM_Base_MspInit+0x12c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10d      	bne.n	8002286 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_TIM_Base_MspInit+0x11c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40001000 	.word	0x40001000
 8002294:	40023800 	.word	0x40023800
 8002298:	40001400 	.word	0x40001400
 800229c:	40014400 	.word	0x40014400
 80022a0:	40014800 	.word	0x40014800
 80022a4:	40001c00 	.word	0x40001c00

080022a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d11f      	bne.n	800230a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4816      	ldr	r0, [pc, #88]	; (800235c <HAL_TIM_MspPostInit+0xb4>)
 8002304:	f001 fb78 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002308:	e022      	b.n	8002350 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_TIM_MspPostInit+0xb8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d11d      	bne.n	8002350 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_TIM_MspPostInit+0xb0>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002340:	2302      	movs	r3, #2
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	; (8002364 <HAL_TIM_MspPostInit+0xbc>)
 800234c:	f001 fb54 	bl	80039f8 <HAL_GPIO_Init>
}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40000800 	.word	0x40000800
 8002364:	40020400 	.word	0x40020400

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_UART_MspInit+0x84>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12b      	bne.n	80023e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0x88>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_UART_MspInit+0x88>)
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0x88>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_UART_MspInit+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_UART_MspInit+0x88>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_UART_MspInit+0x88>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023d2:	2308      	movs	r3, #8
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <HAL_UART_MspInit+0x8c>)
 80023de:	f001 fb0b 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40011400 	.word	0x40011400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020800 	.word	0x40020800

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f000 f972 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002452:	f002 fce5 	bl	8004e20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002458:	f002 fce2 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000438 	.word	0x20000438
 8002464:	200001dc 	.word	0x200001dc

08002468 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800246e:	f002 fcd7 	bl	8004e20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002472:	4803      	ldr	r0, [pc, #12]	; (8002480 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002474:	f002 fcd4 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000438 	.word	0x20000438
 8002480:	2000032c 	.word	0x2000032c

08002484 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <TIM6_DAC_IRQHandler+0x10>)
 800248a:	f002 fcc9 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200003f8 	.word	0x200003f8

08002498 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <TIM7_IRQHandler+0x10>)
 800249e:	f002 fcbf 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000604 	.word	0x20000604

080024ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA2_Stream0_IRQHandler+0x10>)
 80024b2:	f001 f839 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000038c 	.word	0x2000038c

080024c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00a      	b.n	80024e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024d2:	f3af 8000 	nop.w
 80024d6:	4601      	mov	r1, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	60ba      	str	r2, [r7, #8]
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf0      	blt.n	80024d2 <_read+0x12>
	}

return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e009      	b.n	8002520 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb63 	bl	8001be0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf1      	blt.n	800250c <_write+0x12>
	}
	return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_close>:

int _close(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255a:	605a      	str	r2, [r3, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_isatty>:

int _isatty(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <_sbrk+0x5c>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <_sbrk+0x60>)
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025cc:	f003 fdd0 	bl	8006170 <__errno>
 80025d0:	4602      	mov	r2, r0
 80025d2:	230c      	movs	r3, #12
 80025d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20020000 	.word	0x20020000
 80025fc:	00000400 	.word	0x00000400
 8002600:	2000008c 	.word	0x2000008c
 8002604:	20000658 	.word	0x20000658

08002608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <SystemInit+0x28>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <SystemInit+0x28>)
 8002614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SystemInit+0x28>)
 800261e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002622:	609a      	str	r2, [r3, #8]
#endif
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800266c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800263a:	e003      	b.n	8002644 <LoopCopyDataInit>

0800263c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800263e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002642:	3104      	adds	r1, #4

08002644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800264a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800264c:	d3f6      	bcc.n	800263c <CopyDataInit>
  ldr  r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002650:	e002      	b.n	8002658 <LoopFillZerobss>

08002652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002654:	f842 3b04 	str.w	r3, [r2], #4

08002658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800265a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800265c:	d3f9      	bcc.n	8002652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800265e:	f7ff ffd3 	bl	8002608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f003 fd8b 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7fe fa85 	bl	8000b74 <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800266c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002670:	08007258 	.word	0x08007258
  ldr  r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002678:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800267c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002680:	20000654 	.word	0x20000654

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 fd81 	bl	80031b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f000 f808 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fb30 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x54>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fd99 	bl	8003222 <HAL_SYSTICK_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d80a      	bhi.n	8002716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f000 fd61 	bl	80031ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800270c:	4a06      	ldr	r2, [pc, #24]	; (8002728 <HAL_InitTick+0x5c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000000 	.word	0x20000000
 8002724:	20000008 	.word	0x20000008
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000008 	.word	0x20000008
 8002750:	2000064c 	.word	0x2000064c

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000064c 	.word	0x2000064c

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_Delay+0x40>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000008 	.word	0x20000008

080027b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e033      	b.n	800282e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff face 	bl	8001d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa8a 	bl	8002d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
 800281e:	e001      	b.n	8002824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Start_DMA+0x1e>
 8002852:	2302      	movs	r3, #2
 8002854:	e0cc      	b.n	80029f0 <HAL_ADC_Start_DMA+0x1b8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d018      	beq.n	800289e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800287c:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_ADC_Start_DMA+0x1c0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5e      	ldr	r2, [pc, #376]	; (80029fc <HAL_ADC_Start_DMA+0x1c4>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9a      	lsrs	r2, r3, #18
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002890:	e002      	b.n	8002898 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	3b01      	subs	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f9      	bne.n	8002892 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 80a0 	bne.w	80029ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f023 0206 	bic.w	r2, r3, #6
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
 80028fa:	e002      	b.n	8002902 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_ADC_Start_DMA+0x1c8>)
 800290c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_ADC_Start_DMA+0x1cc>)
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <HAL_ADC_Start_DMA+0x1d0>)
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_ADC_Start_DMA+0x1d4>)
 8002924:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800292e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800293e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	334c      	adds	r3, #76	; 0x4c
 800295a:	4619      	mov	r1, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f000 fd1a 	bl	8003398 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2b00      	cmp	r3, #0
 800296e:	d12a      	bne.n	80029c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_ADC_Start_DMA+0x1d8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d015      	beq.n	80029a6 <HAL_ADC_Start_DMA+0x16e>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <HAL_ADC_Start_DMA+0x1dc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d105      	bne.n	8002990 <HAL_ADC_Start_DMA+0x158>
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_ADC_Start_DMA+0x1c8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_ADC_Start_DMA+0x1e0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d129      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_ADC_Start_DMA+0x1c8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	d823      	bhi.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11c      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e013      	b.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_ADC_Start_DMA+0x1d8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d10e      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	40012300 	.word	0x40012300
 8002a04:	08002f15 	.word	0x08002f15
 8002a08:	08002fcf 	.word	0x08002fcf
 8002a0c:	08002feb 	.word	0x08002feb
 8002a10:	40012000 	.word	0x40012000
 8002a14:	40012100 	.word	0x40012100
 8002a18:	40012200 	.word	0x40012200

08002a1c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Stop_DMA+0x1a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e038      	b.n	8002aa8 <HAL_ADC_Stop_DMA+0x8c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d120      	bne.n	8002a9e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fce9 	bl	8003448 <HAL_DMA_Abort>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002a88:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e105      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x228>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d925      	bls.n	8002b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4403      	add	r3, r0
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e022      	b.n	8002b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	2207      	movs	r2, #7
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4403      	add	r3, r0
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d824      	bhi.n	8002be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b05      	subs	r3, #5
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b05      	subs	r3, #5
 8002bda:	fa00 f203 	lsl.w	r2, r0, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
 8002be6:	e04c      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d824      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b23      	subs	r3, #35	; 0x23
 8002c02:	221f      	movs	r2, #31
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b23      	subs	r3, #35	; 0x23
 8002c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
 8002c38:	e023      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b41      	subs	r3, #65	; 0x41
 8002c4c:	221f      	movs	r2, #31
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	400a      	ands	r2, r1
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3b41      	subs	r3, #65	; 0x41
 8002c76:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_ADC_ConfigChannel+0x234>)
 8002c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_ADC_ConfigChannel+0x238>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1cc>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_ADC_ConfigChannel+0x238>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d123      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x21e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d003      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x1e6>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b11      	cmp	r3, #17
 8002cbc:	d11b      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d111      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_ADC_ConfigChannel+0x23c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_ADC_ConfigChannel+0x240>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	0c9a      	lsrs	r2, r3, #18
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40012300 	.word	0x40012300
 8002d10:	40012000 	.word	0x40012000
 8002d14:	20000000 	.word	0x20000000
 8002d18:	431bde83 	.word	0x431bde83

08002d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d24:	4b79      	ldr	r3, [pc, #484]	; (8002f0c <ADC_Init+0x1f0>)
 8002d26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	021a      	lsls	r2, r3, #8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <ADC_Init+0x1f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	e00f      	b.n	8002e1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0202 	bic.w	r2, r2, #2
 8002e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7e1b      	ldrb	r3, [r3, #24]
 8002e34:	005a      	lsls	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	035a      	lsls	r2, r3, #13
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e007      	b.n	8002e90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	051a      	lsls	r2, r3, #20
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ed2:	025a      	lsls	r2, r3, #9
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6899      	ldr	r1, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	029a      	lsls	r2, r3, #10
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40012300 	.word	0x40012300
 8002f10:	0f000001 	.word	0x0f000001

08002f14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d13c      	bne.n	8002fa8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d12b      	bne.n	8002fa0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d127      	bne.n	8002fa0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d119      	bne.n	8002fa0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0220 	bic.w	r2, r2, #32
 8002f7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7fe fe2f 	bl	8001c04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fa6:	e00e      	b.n	8002fc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fd85 	bl	8002ac4 <HAL_ADC_ErrorCallback>
}
 8002fba:	e004      	b.n	8002fc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7ff fd67 	bl	8002ab0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0204 	orr.w	r2, r3, #4
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff fd5a 	bl	8002ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	; (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	; (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf28      	it	cs
 800312a:	2304      	movcs	r3, #4
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3304      	adds	r3, #4
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b03      	subs	r3, #3
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003184:	d301      	bcc.n	800318a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003186:	2301      	movs	r3, #1
 8003188:	e00f      	b.n	80031aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <SysTick_Config+0x40>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003192:	210f      	movs	r1, #15
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f7ff ff8e 	bl	80030b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <SysTick_Config+0x40>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <SysTick_Config+0x40>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000e010 	.word	0xe000e010

080031b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff29 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff3e 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff8e 	bl	800310c <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5d 	bl	80030b8 <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff31 	bl	800307c <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa2 	bl	8003174 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff fa84 	bl	8002754 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e099      	b.n	800338c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003278:	e00f      	b.n	800329a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327a:	f7ff fa6b 	bl	8002754 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b05      	cmp	r3, #5
 8003286:	d908      	bls.n	800329a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e078      	b.n	800338c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e8      	bne.n	800327a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_DMA_Init+0x158>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b04      	cmp	r3, #4
 800332c:	d117      	bne.n	800335e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fadf 	bl	8003904 <DMA_CheckFifoParam>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800335a:	2301      	movs	r3, #1
 800335c:	e016      	b.n	800338c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa96 	bl	8003898 <DMA_CalcBaseAndBitshift>
 800336c:	4603      	mov	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	223f      	movs	r2, #63	; 0x3f
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	f010803f 	.word	0xf010803f

08003398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_DMA_Start_IT+0x26>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e040      	b.n	8003440 <HAL_DMA_Start_IT+0xa8>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d12f      	bne.n	8003432 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa28 	bl	800383c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0216 	orr.w	r2, r2, #22
 8003406:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e005      	b.n	800343e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003456:	f7ff f97d 	bl	8002754 <HAL_GetTick>
 800345a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d008      	beq.n	800347a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e052      	b.n	8003520 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0216 	bic.w	r2, r2, #22
 8003488:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_DMA_Abort+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0208 	bic.w	r2, r2, #8
 80034b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ca:	e013      	b.n	80034f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034cc:	f7ff f942 	bl	8002754 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d90c      	bls.n	80034f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2203      	movs	r2, #3
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e015      	b.n	8003520 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e4      	bne.n	80034cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	223f      	movs	r2, #63	; 0x3f
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <HAL_DMA_IRQHandler+0x258>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a92      	ldr	r2, [pc, #584]	; (8003784 <HAL_DMA_IRQHandler+0x25c>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2208      	movs	r2, #8
 8003554:	409a      	lsls	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2208      	movs	r2, #8
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2204      	movs	r2, #4
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2204      	movs	r2, #4
 80035ee:	409a      	lsls	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	2210      	movs	r2, #16
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d043      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03c      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2210      	movs	r2, #16
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d024      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
 8003656:	e01f      	b.n	8003698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
 8003668:	e016      	b.n	8003698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0208 	bic.w	r2, r2, #8
 8003686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2220      	movs	r2, #32
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 808e 	beq.w	80037c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8086 	beq.w	80037c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2220      	movs	r2, #32
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d136      	bne.n	8003740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_IRQHandler+0x1da>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	223f      	movs	r2, #63	; 0x3f
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07d      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
        }
        return;
 800373e:	e078      	b.n	8003832 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01c      	beq.n	8003788 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	2b00      	cmp	r3, #0
 8003762:	d030      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e02b      	b.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e022      	b.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
 8003780:	20000000 	.word	0x20000000
 8003784:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0210 	bic.w	r2, r2, #16
 80037a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d032      	beq.n	8003834 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d307      	bcc.n	800380e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f2      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x2ca>
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800380e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e000      	b.n	8003834 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003832:	bf00      	nop
    }
  }
}
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003858:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d108      	bne.n	800387c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800387a:	e007      	b.n	800388c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3b10      	subs	r3, #16
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <DMA_CalcBaseAndBitshift+0x64>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <DMA_CalcBaseAndBitshift+0x68>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d909      	bls.n	80038da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	; 0x58
 80038d8:	e007      	b.n	80038ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	aaaaaaab 	.word	0xaaaaaaab
 8003900:	080071a8 	.word	0x080071a8

08003904 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11f      	bne.n	800395e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d855      	bhi.n	80039d0 <DMA_CheckFifoParam+0xcc>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <DMA_CheckFifoParam+0x28>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	0800393d 	.word	0x0800393d
 8003930:	0800394f 	.word	0x0800394f
 8003934:	0800393d 	.word	0x0800393d
 8003938:	080039d1 	.word	0x080039d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d045      	beq.n	80039d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394c:	e042      	b.n	80039d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003956:	d13f      	bne.n	80039d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395c:	e03c      	b.n	80039d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	d121      	bne.n	80039ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d836      	bhi.n	80039dc <DMA_CheckFifoParam+0xd8>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <DMA_CheckFifoParam+0x70>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003985 	.word	0x08003985
 8003978:	0800398b 	.word	0x0800398b
 800397c:	08003985 	.word	0x08003985
 8003980:	0800399d 	.word	0x0800399d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      break;
 8003988:	e02f      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d024      	beq.n	80039e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399a:	e021      	b.n	80039e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a4:	d11e      	bne.n	80039e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039aa:	e01b      	b.n	80039e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <DMA_CheckFifoParam+0xb4>
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d003      	beq.n	80039be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039b6:	e018      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e015      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00e      	beq.n	80039e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      break;
 80039ce:	e00b      	b.n	80039e8 <DMA_CheckFifoParam+0xe4>
      break;
 80039d0:	bf00      	nop
 80039d2:	e00a      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;
 80039d4:	bf00      	nop
 80039d6:	e008      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;
 80039d8:	bf00      	nop
 80039da:	e006      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;
 80039dc:	bf00      	nop
 80039de:	e004      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;   
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <DMA_CheckFifoParam+0xe6>
      break;
 80039e8:	bf00      	nop
    }
  } 
  
  return status; 
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e16b      	b.n	8003cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 815a 	bne.w	8003ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d00b      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a46:	2b11      	cmp	r3, #17
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d130      	bne.n	8003ab4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0xfc>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b12      	cmp	r3, #18
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80b4 	beq.w	8003ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <HAL_GPIO_Init+0x308>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_GPIO_Init+0x308>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_GPIO_Init+0x308>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	; (8003d04 <HAL_GPIO_Init+0x30c>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a51      	ldr	r2, [pc, #324]	; (8003d08 <HAL_GPIO_Init+0x310>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x226>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a50      	ldr	r2, [pc, #320]	; (8003d0c <HAL_GPIO_Init+0x314>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x222>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4f      	ldr	r2, [pc, #316]	; (8003d10 <HAL_GPIO_Init+0x318>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x21e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <HAL_GPIO_Init+0x31c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x21a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4d      	ldr	r2, [pc, #308]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x216>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_GPIO_Init+0x328>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x20e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x20a>
 8003bfe:	2307      	movs	r3, #7
 8003c00:	e00e      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c02:	2308      	movs	r3, #8
 8003c04:	e00c      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c06:	2306      	movs	r3, #6
 8003c08:	e00a      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	e008      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	e006      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c12:	2303      	movs	r3, #3
 8003c14:	e004      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f002 0203 	and.w	r2, r2, #3
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	4093      	lsls	r3, r2
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c30:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_GPIO_Init+0x30c>)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	3302      	adds	r3, #2
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c62:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c68:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce0:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	f67f ae90 	bls.w	8003a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3724      	adds	r7, #36	; 0x24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40013800 	.word	0x40013800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40021400 	.word	0x40021400
 8003d20:	40021800 	.word	0x40021800
 8003d24:	40021c00 	.word	0x40021c00
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	e001      	b.n	8003d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d78:	e003      	b.n	8003d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	041a      	lsls	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	619a      	str	r2, [r3, #24]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e11f      	b.n	8003fe2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe f88a 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003df4:	f000 fd3c 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_I2C_Init+0x25c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d807      	bhi.n	8003e14 <HAL_I2C_Init+0x84>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a7a      	ldr	r2, [pc, #488]	; (8003ff0 <HAL_I2C_Init+0x260>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e006      	b.n	8003e22 <HAL_I2C_Init+0x92>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_I2C_Init+0x264>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0db      	b.n	8003fe2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a72      	ldr	r2, [pc, #456]	; (8003ff8 <HAL_I2C_Init+0x268>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0c9b      	lsrs	r3, r3, #18
 8003e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a64      	ldr	r2, [pc, #400]	; (8003fec <HAL_I2C_Init+0x25c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d802      	bhi.n	8003e64 <HAL_I2C_Init+0xd4>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3301      	adds	r3, #1
 8003e62:	e009      	b.n	8003e78 <HAL_I2C_Init+0xe8>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	4a63      	ldr	r2, [pc, #396]	; (8003ffc <HAL_I2C_Init+0x26c>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	3301      	adds	r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4956      	ldr	r1, [pc, #344]	; (8003fec <HAL_I2C_Init+0x25c>)
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d80d      	bhi.n	8003eb4 <HAL_I2C_Init+0x124>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e59      	subs	r1, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	bf38      	it	cc
 8003eb0:	2304      	movcc	r3, #4
 8003eb2:	e04f      	b.n	8003f54 <HAL_I2C_Init+0x1c4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <HAL_I2C_Init+0x150>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e012      	b.n	8003f06 <HAL_I2C_Init+0x176>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e58      	subs	r0, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	0099      	lsls	r1, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x17e>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e022      	b.n	8003f54 <HAL_I2C_Init+0x1c4>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10e      	bne.n	8003f34 <HAL_I2C_Init+0x1a4>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1e58      	subs	r0, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	440b      	add	r3, r1
 8003f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	e00f      	b.n	8003f54 <HAL_I2C_Init+0x1c4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	0099      	lsls	r1, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	6809      	ldr	r1, [r1, #0]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6911      	ldr	r1, [r2, #16]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	000186a0 	.word	0x000186a0
 8003ff0:	001e847f 	.word	0x001e847f
 8003ff4:	003d08ff 	.word	0x003d08ff
 8003ff8:	431bde83 	.word	0x431bde83
 8003ffc:	10624dd3 	.word	0x10624dd3

08004000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e25b      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d075      	beq.n	800410a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401e:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00c      	beq.n	8004044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402a:	4ba0      	ldr	r3, [pc, #640]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d112      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004036:	4b9d      	ldr	r3, [pc, #628]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004042:	d10b      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b99      	ldr	r3, [pc, #612]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05b      	beq.n	8004108 <HAL_RCC_OscConfig+0x108>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d157      	bne.n	8004108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e236      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x74>
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a90      	ldr	r2, [pc, #576]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x98>
 800407e:	4b8b      	ldr	r3, [pc, #556]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8a      	ldr	r2, [pc, #552]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a87      	ldr	r2, [pc, #540]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a83      	ldr	r2, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a80      	ldr	r2, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fb4c 	bl	8002754 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fb48 	bl	8002754 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1fb      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xc0>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe fb38 	bl	8002754 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe fb34 	bl	8002754 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1e7      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0xe8>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e1bb      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b56      	ldr	r3, [pc, #344]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4952      	ldr	r1, [pc, #328]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <HAL_RCC_OscConfig+0x2b0>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe faed 	bl	8002754 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fae9 	bl	8002754 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e19c      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4940      	ldr	r1, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <HAL_RCC_OscConfig+0x2b0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe facc 	bl	8002754 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe fac8 	bl	8002754 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e17b      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d030      	beq.n	800424c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCC_OscConfig+0x2b4>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fe faac 	bl	8002754 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe faa8 	bl	8002754 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e15b      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x200>
 800421e:	e015      	b.n	800424c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x2b4>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fe fa95 	bl	8002754 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422e:	f7fe fa91 	bl	8002754 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e144      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a0 	beq.w	800439a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x2ac>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d121      	bne.n	80042da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <HAL_RCC_OscConfig+0x2b8>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe fa57 	bl	8002754 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e011      	b.n	80042ce <HAL_RCC_OscConfig+0x2ce>
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
 80042b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fe fa4a 	bl	8002754 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0fd      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCC_OscConfig+0x4d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x2f0>
 80042e2:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a7c      	ldr	r2, [pc, #496]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	e01c      	b.n	800432a <HAL_RCC_OscConfig+0x32a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d10c      	bne.n	8004312 <HAL_RCC_OscConfig+0x312>
 80042f8:	4b77      	ldr	r3, [pc, #476]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a76      	ldr	r2, [pc, #472]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a73      	ldr	r2, [pc, #460]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	e00b      	b.n	800432a <HAL_RCC_OscConfig+0x32a>
 8004312:	4b71      	ldr	r3, [pc, #452]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a70      	ldr	r2, [pc, #448]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	4b6e      	ldr	r3, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a6d      	ldr	r2, [pc, #436]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d015      	beq.n	800435e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fe fa0f 	bl	8002754 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe fa0b 	bl	8002754 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0bc      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ee      	beq.n	800433a <HAL_RCC_OscConfig+0x33a>
 800435c:	e014      	b.n	8004388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fe f9f9 	bl	8002754 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe f9f5 	bl	8002754 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0a6      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437c:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ee      	bne.n	8004366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a51      	ldr	r2, [pc, #324]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8092 	beq.w	80044c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d05c      	beq.n	800446a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d141      	bne.n	800443c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b8:	4b48      	ldr	r3, [pc, #288]	; (80044dc <HAL_RCC_OscConfig+0x4dc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fe f9c9 	bl	8002754 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe f9c5 	bl	8002754 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e078      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	4933      	ldr	r1, [pc, #204]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440e:	4b33      	ldr	r3, [pc, #204]	; (80044dc <HAL_RCC_OscConfig+0x4dc>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe f99e 	bl	8002754 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe f99a 	bl	8002754 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04d      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x41c>
 800443a:	e045      	b.n	80044c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x4dc>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe f987 	bl	8002754 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe f983 	bl	8002754 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e036      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x44a>
 8004468:	e02e      	b.n	80044c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e029      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <HAL_RCC_OscConfig+0x4d8>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	429a      	cmp	r2, r3
 8004488:	d11c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d115      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d106      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40007000 	.word	0x40007000
 80044d8:	40023800 	.word	0x40023800
 80044dc:	42470060 	.word	0x42470060

080044e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0cc      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f4:	4b68      	ldr	r3, [pc, #416]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d90c      	bls.n	800451c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b65      	ldr	r3, [pc, #404]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b63      	ldr	r3, [pc, #396]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b8      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004534:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a58      	ldr	r2, [pc, #352]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b50      	ldr	r3, [pc, #320]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	494d      	ldr	r1, [pc, #308]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d044      	beq.n	8004600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d119      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d003      	beq.n	800459e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459a:	2b03      	cmp	r3, #3
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e067      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 0203 	bic.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4934      	ldr	r1, [pc, #208]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d0:	f7fe f8c0 	bl	8002754 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fe f8bc 	bl	8002754 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e04f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 020c 	and.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1eb      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d20c      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e032      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4916      	ldr	r1, [pc, #88]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	490e      	ldr	r1, [pc, #56]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004666:	f000 f821 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800466a:	4601      	mov	r1, r0
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	5cd3      	ldrb	r3, [r2, r3]
 800467a:	fa21 f303 	lsr.w	r3, r1, r3
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe f820 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023c00 	.word	0x40023c00
 800469c:	40023800 	.word	0x40023800
 80046a0:	08007190 	.word	0x08007190
 80046a4:	20000000 	.word	0x20000000
 80046a8:	20000004 	.word	0x20000004

080046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	2300      	movs	r3, #0
 80046bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d007      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0x32>
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d008      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x38>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80b4 	bne.w	8004840 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b5e      	ldr	r3, [pc, #376]	; (8004854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046da:	60bb      	str	r3, [r7, #8]
       break;
 80046dc:	e0b3      	b.n	8004846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046de:	4b5d      	ldr	r3, [pc, #372]	; (8004854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046e0:	60bb      	str	r3, [r7, #8]
      break;
 80046e2:	e0b0      	b.n	8004846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e4:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ee:	4b58      	ldr	r3, [pc, #352]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d04a      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fa:	4b55      	ldr	r3, [pc, #340]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	ea03 0501 	and.w	r5, r3, r1
 8004710:	ea04 0602 	and.w	r6, r4, r2
 8004714:	4629      	mov	r1, r5
 8004716:	4632      	mov	r2, r6
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	f04f 0400 	mov.w	r4, #0
 8004720:	0154      	lsls	r4, r2, #5
 8004722:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004726:	014b      	lsls	r3, r1, #5
 8004728:	4619      	mov	r1, r3
 800472a:	4622      	mov	r2, r4
 800472c:	1b49      	subs	r1, r1, r5
 800472e:	eb62 0206 	sbc.w	r2, r2, r6
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	f04f 0400 	mov.w	r4, #0
 800473a:	0194      	lsls	r4, r2, #6
 800473c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004740:	018b      	lsls	r3, r1, #6
 8004742:	1a5b      	subs	r3, r3, r1
 8004744:	eb64 0402 	sbc.w	r4, r4, r2
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	00e2      	lsls	r2, r4, #3
 8004752:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004756:	00d9      	lsls	r1, r3, #3
 8004758:	460b      	mov	r3, r1
 800475a:	4614      	mov	r4, r2
 800475c:	195b      	adds	r3, r3, r5
 800475e:	eb44 0406 	adc.w	r4, r4, r6
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	02a2      	lsls	r2, r4, #10
 800476c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004770:	0299      	lsls	r1, r3, #10
 8004772:	460b      	mov	r3, r1
 8004774:	4614      	mov	r4, r2
 8004776:	4618      	mov	r0, r3
 8004778:	4621      	mov	r1, r4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	461a      	mov	r2, r3
 8004782:	4623      	mov	r3, r4
 8004784:	f7fb fd74 	bl	8000270 <__aeabi_uldivmod>
 8004788:	4603      	mov	r3, r0
 800478a:	460c      	mov	r4, r1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e049      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	ea03 0501 	and.w	r5, r3, r1
 80047a6:	ea04 0602 	and.w	r6, r4, r2
 80047aa:	4629      	mov	r1, r5
 80047ac:	4632      	mov	r2, r6
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	f04f 0400 	mov.w	r4, #0
 80047b6:	0154      	lsls	r4, r2, #5
 80047b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047bc:	014b      	lsls	r3, r1, #5
 80047be:	4619      	mov	r1, r3
 80047c0:	4622      	mov	r2, r4
 80047c2:	1b49      	subs	r1, r1, r5
 80047c4:	eb62 0206 	sbc.w	r2, r2, r6
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	0194      	lsls	r4, r2, #6
 80047d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047d6:	018b      	lsls	r3, r1, #6
 80047d8:	1a5b      	subs	r3, r3, r1
 80047da:	eb64 0402 	sbc.w	r4, r4, r2
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	00e2      	lsls	r2, r4, #3
 80047e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047ec:	00d9      	lsls	r1, r3, #3
 80047ee:	460b      	mov	r3, r1
 80047f0:	4614      	mov	r4, r2
 80047f2:	195b      	adds	r3, r3, r5
 80047f4:	eb44 0406 	adc.w	r4, r4, r6
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	02a2      	lsls	r2, r4, #10
 8004802:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004806:	0299      	lsls	r1, r3, #10
 8004808:	460b      	mov	r3, r1
 800480a:	4614      	mov	r4, r2
 800480c:	4618      	mov	r0, r3
 800480e:	4621      	mov	r1, r4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f04f 0400 	mov.w	r4, #0
 8004816:	461a      	mov	r2, r3
 8004818:	4623      	mov	r3, r4
 800481a:	f7fb fd29 	bl	8000270 <__aeabi_uldivmod>
 800481e:	4603      	mov	r3, r0
 8004820:	460c      	mov	r4, r1
 8004822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	3301      	adds	r3, #1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	60bb      	str	r3, [r7, #8]
      break;
 800483e:	e002      	b.n	8004846 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004842:	60bb      	str	r3, [r7, #8]
      break;
 8004844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004846:	68bb      	ldr	r3, [r7, #8]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400

08004858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_GetHCLKFreq+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000000 	.word	0x20000000

08004870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004874:	f7ff fff0 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 8004878:	4601      	mov	r1, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0a9b      	lsrs	r3, r3, #10
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4a03      	ldr	r2, [pc, #12]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004886:	5cd3      	ldrb	r3, [r2, r3]
 8004888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	080071a0 	.word	0x080071a0

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800489c:	f7ff ffdc 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048a0:	4601      	mov	r1, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0b5b      	lsrs	r3, r3, #13
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4a03      	ldr	r2, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	080071a0 	.word	0x080071a0

080048c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e056      	b.n	8004980 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd fb37 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004908:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	ea42 0103 	orr.w	r1, r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 0104 	and.w	r1, r3, #4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e01d      	b.n	80049d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fd fbe2 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 fc20 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b06      	cmp	r3, #6
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <HAL_TIM_Base_Stop_IT+0x48>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f240 4344 	movw	r3, #1092	; 0x444
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_Base_Stop_IT+0x48>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e01d      	b.n	8004aca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd fb32 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 fba6 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fde0 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_TIM_PWM_Start+0x74>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x2c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <HAL_TIM_PWM_Start+0x78>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x30>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_TIM_PWM_Start+0x32>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b06      	cmp	r3, #6
 8004b2a:	d007      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400

08004b50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fda2 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <HAL_TIM_PWM_Stop+0xa8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_PWM_Stop+0x2c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_TIM_PWM_Stop+0xac>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_PWM_Stop+0x30>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x32>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d017      	beq.n	8004bb6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <HAL_TIM_PWM_Stop+0x66>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	f240 4344 	movw	r3, #1092	; 0x444
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_TIM_PWM_Stop+0x66>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <HAL_TIM_PWM_Stop+0x96>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f240 4344 	movw	r3, #1092	; 0x444
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_PWM_Stop+0x96>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e083      	b.n	8004d1c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fd f9e1 	bl	8001ff0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c44:	f023 0307 	bic.w	r3, r3, #7
 8004c48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f000 fad9 	bl	800520c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	4313      	orrs	r3, r2
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ca0:	f023 030c 	bic.w	r3, r3, #12
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	011a      	lsls	r2, r3, #4
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	031b      	lsls	r3, r3, #12
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_TIM_Encoder_Start+0x16>
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d008      	beq.n	8004d4a <HAL_TIM_Encoder_Start+0x26>
 8004d38:	e00f      	b.n	8004d5a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fcb2 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004d48:	e016      	b.n	8004d78 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	2104      	movs	r1, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fcaa 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004d58:	e00e      	b.n	8004d78 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fca2 	bl	80056ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2104      	movs	r1, #4
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc9b 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004d76:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_TIM_Encoder_Stop+0x16>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d008      	beq.n	8004db8 <HAL_TIM_Encoder_Stop+0x26>
 8004da6:	e00f      	b.n	8004dc8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fc7b 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004db6:	e016      	b.n	8004de6 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fc73 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004dc6:	e00e      	b.n	8004de6 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fc6b 	bl	80056ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2104      	movs	r1, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fc64 	bl	80056ac <TIM_CCxChannelCmd>
      break;
 8004de4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	f241 1311 	movw	r3, #4369	; 0x1111
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <HAL_TIM_Encoder_Stop+0x84>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	f240 4344 	movw	r3, #1092	; 0x444
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_Encoder_Stop+0x84>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0202 	mvn.w	r2, #2
 8004e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9b4 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9a6 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f9b7 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0204 	mvn.w	r2, #4
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f98a 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f97c 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f98d 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0208 	mvn.w	r2, #8
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f960 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f952 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f963 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0210 	mvn.w	r2, #16
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f936 	bl	80051d0 <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f928 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f939 	bl	80051e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb fae6 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc1a 	bl	8005804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8fe 	bl	80051f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b20      	cmp	r3, #32
 8005008:	d10e      	bne.n	8005028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b20      	cmp	r3, #32
 8005016:	d107      	bne.n	8005028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0220 	mvn.w	r2, #32
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fbe4 	bl	80057f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e0b4      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	f200 809f 	bhi.w	80051a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080051a1 	.word	0x080051a1
 8005070:	080051a1 	.word	0x080051a1
 8005074:	080051a1 	.word	0x080051a1
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080051a1 	.word	0x080051a1
 8005080:	080051a1 	.word	0x080051a1
 8005084:	080051a1 	.word	0x080051a1
 8005088:	0800511f 	.word	0x0800511f
 800508c:	080051a1 	.word	0x080051a1
 8005090:	080051a1 	.word	0x080051a1
 8005094:	080051a1 	.word	0x080051a1
 8005098:	0800515f 	.word	0x0800515f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f952 	bl	800534c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e062      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f9a2 	bl	800542c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e041      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f9f7 	bl	8005518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e021      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fa4b 	bl	8005600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e000      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a40      	ldr	r2, [pc, #256]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d00f      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3b      	ldr	r2, [pc, #236]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3a      	ldr	r2, [pc, #232]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d027      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d023      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0x124>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a28      	ldr	r2, [pc, #160]	; (8005334 <TIM_Base_SetConfig+0x128>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <TIM_Base_SetConfig+0x12c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <TIM_Base_SetConfig+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_Base_SetConfig+0x134>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <TIM_Base_SetConfig+0x138>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a23      	ldr	r2, [pc, #140]	; (8005348 <TIM_Base_SetConfig+0x13c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0xf8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40001800 	.word	0x40001800
 8005344:	40001c00 	.word	0x40001c00
 8005348:	40002000 	.word	0x40002000

0800534c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a20      	ldr	r2, [pc, #128]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC1_SetConfig+0x64>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10c      	bne.n	80053ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0308 	bic.w	r3, r3, #8
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC1_SetConfig+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d111      	bne.n	80053fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0320 	bic.w	r3, r3, #32
 8005476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x68>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10d      	bne.n	80054b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC2_SetConfig+0x94>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d113      	bne.n	80054e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10d      	bne.n	800559a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC3_SetConfig+0x92>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d113      	bne.n	80055d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010400 	.word	0x40010400

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <TIM_OC4_SetConfig+0xa4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0x68>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <TIM_OC4_SetConfig+0xa8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e05a      	b.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d01d      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d10c      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40001800 	.word	0x40001800

080057f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e03f      	b.n	80058aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc fd92 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2224      	movs	r2, #36	; 0x24
 8005848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f90b 	bl	8005a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b088      	sub	sp, #32
 80058b6:	af02      	add	r7, sp, #8
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	f040 8083 	bne.w	80059da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Transmit+0x2e>
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e07b      	b.n	80059dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Transmit+0x40>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e074      	b.n	80059dc <HAL_UART_Transmit+0x12a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2221      	movs	r2, #33	; 0x21
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005908:	f7fc ff24 	bl	8002754 <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005922:	e042      	b.n	80059aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	d122      	bne.n	8005982 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f84c 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e042      	b.n	80059dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005968:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3302      	adds	r3, #2
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	e017      	b.n	80059aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3301      	adds	r3, #1
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	e013      	b.n	80059aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f829 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e01f      	b.n	80059dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	60ba      	str	r2, [r7, #8]
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1b7      	bne.n	8005924 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f810 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e006      	b.n	80059dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f4:	e02c      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d028      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a04:	f7fc fea6 	bl	8002754 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d21d      	bcs.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e00f      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d0c3      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005aba:	f023 030c 	bic.w	r3, r3, #12
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae6:	f040 818b 	bne.w	8005e00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4ac1      	ldr	r2, [pc, #772]	; (8005df4 <UART_SetConfig+0x37c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d005      	beq.n	8005b00 <UART_SetConfig+0x88>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4abf      	ldr	r2, [pc, #764]	; (8005df8 <UART_SetConfig+0x380>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f040 80bd 	bne.w	8005c7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b00:	f7fe feca 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8005b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	461d      	mov	r5, r3
 8005b0a:	f04f 0600 	mov.w	r6, #0
 8005b0e:	46a8      	mov	r8, r5
 8005b10:	46b1      	mov	r9, r6
 8005b12:	eb18 0308 	adds.w	r3, r8, r8
 8005b16:	eb49 0409 	adc.w	r4, r9, r9
 8005b1a:	4698      	mov	r8, r3
 8005b1c:	46a1      	mov	r9, r4
 8005b1e:	eb18 0805 	adds.w	r8, r8, r5
 8005b22:	eb49 0906 	adc.w	r9, r9, r6
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	4691      	mov	r9, r2
 8005b3e:	eb18 0005 	adds.w	r0, r8, r5
 8005b42:	eb49 0106 	adc.w	r1, r9, r6
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	461d      	mov	r5, r3
 8005b4c:	f04f 0600 	mov.w	r6, #0
 8005b50:	196b      	adds	r3, r5, r5
 8005b52:	eb46 0406 	adc.w	r4, r6, r6
 8005b56:	461a      	mov	r2, r3
 8005b58:	4623      	mov	r3, r4
 8005b5a:	f7fa fb89 	bl	8000270 <__aeabi_uldivmod>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	461a      	mov	r2, r3
 8005b64:	4ba5      	ldr	r3, [pc, #660]	; (8005dfc <UART_SetConfig+0x384>)
 8005b66:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	461d      	mov	r5, r3
 8005b74:	f04f 0600 	mov.w	r6, #0
 8005b78:	46a9      	mov	r9, r5
 8005b7a:	46b2      	mov	sl, r6
 8005b7c:	eb19 0309 	adds.w	r3, r9, r9
 8005b80:	eb4a 040a 	adc.w	r4, sl, sl
 8005b84:	4699      	mov	r9, r3
 8005b86:	46a2      	mov	sl, r4
 8005b88:	eb19 0905 	adds.w	r9, r9, r5
 8005b8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ba0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ba4:	4689      	mov	r9, r1
 8005ba6:	4692      	mov	sl, r2
 8005ba8:	eb19 0005 	adds.w	r0, r9, r5
 8005bac:	eb4a 0106 	adc.w	r1, sl, r6
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	461d      	mov	r5, r3
 8005bb6:	f04f 0600 	mov.w	r6, #0
 8005bba:	196b      	adds	r3, r5, r5
 8005bbc:	eb46 0406 	adc.w	r4, r6, r6
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	f7fa fb54 	bl	8000270 <__aeabi_uldivmod>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b8b      	ldr	r3, [pc, #556]	; (8005dfc <UART_SetConfig+0x384>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	; 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	3332      	adds	r3, #50	; 0x32
 8005be2:	4a86      	ldr	r2, [pc, #536]	; (8005dfc <UART_SetConfig+0x384>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bf0:	4498      	add	r8, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	461d      	mov	r5, r3
 8005bf6:	f04f 0600 	mov.w	r6, #0
 8005bfa:	46a9      	mov	r9, r5
 8005bfc:	46b2      	mov	sl, r6
 8005bfe:	eb19 0309 	adds.w	r3, r9, r9
 8005c02:	eb4a 040a 	adc.w	r4, sl, sl
 8005c06:	4699      	mov	r9, r3
 8005c08:	46a2      	mov	sl, r4
 8005c0a:	eb19 0905 	adds.w	r9, r9, r5
 8005c0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c26:	4689      	mov	r9, r1
 8005c28:	4692      	mov	sl, r2
 8005c2a:	eb19 0005 	adds.w	r0, r9, r5
 8005c2e:	eb4a 0106 	adc.w	r1, sl, r6
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	461d      	mov	r5, r3
 8005c38:	f04f 0600 	mov.w	r6, #0
 8005c3c:	196b      	adds	r3, r5, r5
 8005c3e:	eb46 0406 	adc.w	r4, r6, r6
 8005c42:	461a      	mov	r2, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	f7fa fb13 	bl	8000270 <__aeabi_uldivmod>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <UART_SetConfig+0x384>)
 8005c52:	fba3 1302 	umull	r1, r3, r3, r2
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	2164      	movs	r1, #100	; 0x64
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	3332      	adds	r3, #50	; 0x32
 8005c64:	4a65      	ldr	r2, [pc, #404]	; (8005dfc <UART_SetConfig+0x384>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	f003 0207 	and.w	r2, r3, #7
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4442      	add	r2, r8
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	e26f      	b.n	800615a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c7a:	f7fe fdf9 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8005c7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	461d      	mov	r5, r3
 8005c84:	f04f 0600 	mov.w	r6, #0
 8005c88:	46a8      	mov	r8, r5
 8005c8a:	46b1      	mov	r9, r6
 8005c8c:	eb18 0308 	adds.w	r3, r8, r8
 8005c90:	eb49 0409 	adc.w	r4, r9, r9
 8005c94:	4698      	mov	r8, r3
 8005c96:	46a1      	mov	r9, r4
 8005c98:	eb18 0805 	adds.w	r8, r8, r5
 8005c9c:	eb49 0906 	adc.w	r9, r9, r6
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cb4:	4688      	mov	r8, r1
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	eb18 0005 	adds.w	r0, r8, r5
 8005cbc:	eb49 0106 	adc.w	r1, r9, r6
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	f04f 0600 	mov.w	r6, #0
 8005cca:	196b      	adds	r3, r5, r5
 8005ccc:	eb46 0406 	adc.w	r4, r6, r6
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	f7fa facc 	bl	8000270 <__aeabi_uldivmod>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <UART_SetConfig+0x384>)
 8005ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	461d      	mov	r5, r3
 8005cee:	f04f 0600 	mov.w	r6, #0
 8005cf2:	46a9      	mov	r9, r5
 8005cf4:	46b2      	mov	sl, r6
 8005cf6:	eb19 0309 	adds.w	r3, r9, r9
 8005cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8005cfe:	4699      	mov	r9, r3
 8005d00:	46a2      	mov	sl, r4
 8005d02:	eb19 0905 	adds.w	r9, r9, r5
 8005d06:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d0a:	f04f 0100 	mov.w	r1, #0
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d1e:	4689      	mov	r9, r1
 8005d20:	4692      	mov	sl, r2
 8005d22:	eb19 0005 	adds.w	r0, r9, r5
 8005d26:	eb4a 0106 	adc.w	r1, sl, r6
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	461d      	mov	r5, r3
 8005d30:	f04f 0600 	mov.w	r6, #0
 8005d34:	196b      	adds	r3, r5, r5
 8005d36:	eb46 0406 	adc.w	r4, r6, r6
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	f7fa fa97 	bl	8000270 <__aeabi_uldivmod>
 8005d42:	4603      	mov	r3, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	461a      	mov	r2, r3
 8005d48:	4b2c      	ldr	r3, [pc, #176]	; (8005dfc <UART_SetConfig+0x384>)
 8005d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	2164      	movs	r1, #100	; 0x64
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	3332      	adds	r3, #50	; 0x32
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <UART_SetConfig+0x384>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d6a:	4498      	add	r8, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	461d      	mov	r5, r3
 8005d70:	f04f 0600 	mov.w	r6, #0
 8005d74:	46a9      	mov	r9, r5
 8005d76:	46b2      	mov	sl, r6
 8005d78:	eb19 0309 	adds.w	r3, r9, r9
 8005d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d80:	4699      	mov	r9, r3
 8005d82:	46a2      	mov	sl, r4
 8005d84:	eb19 0905 	adds.w	r9, r9, r5
 8005d88:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d8c:	f04f 0100 	mov.w	r1, #0
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da0:	4689      	mov	r9, r1
 8005da2:	4692      	mov	sl, r2
 8005da4:	eb19 0005 	adds.w	r0, r9, r5
 8005da8:	eb4a 0106 	adc.w	r1, sl, r6
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	461d      	mov	r5, r3
 8005db2:	f04f 0600 	mov.w	r6, #0
 8005db6:	196b      	adds	r3, r5, r5
 8005db8:	eb46 0406 	adc.w	r4, r6, r6
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	f7fa fa56 	bl	8000270 <__aeabi_uldivmod>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <UART_SetConfig+0x384>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	2164      	movs	r1, #100	; 0x64
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	3332      	adds	r3, #50	; 0x32
 8005dde:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <UART_SetConfig+0x384>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 0207 	and.w	r2, r3, #7
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4442      	add	r2, r8
 8005df0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005df2:	e1b2      	b.n	800615a <UART_SetConfig+0x6e2>
 8005df4:	40011000 	.word	0x40011000
 8005df8:	40011400 	.word	0x40011400
 8005dfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4ad7      	ldr	r2, [pc, #860]	; (8006164 <UART_SetConfig+0x6ec>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d005      	beq.n	8005e16 <UART_SetConfig+0x39e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4ad6      	ldr	r2, [pc, #856]	; (8006168 <UART_SetConfig+0x6f0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	f040 80d1 	bne.w	8005fb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e16:	f7fe fd3f 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8005e1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	469a      	mov	sl, r3
 8005e20:	f04f 0b00 	mov.w	fp, #0
 8005e24:	46d0      	mov	r8, sl
 8005e26:	46d9      	mov	r9, fp
 8005e28:	eb18 0308 	adds.w	r3, r8, r8
 8005e2c:	eb49 0409 	adc.w	r4, r9, r9
 8005e30:	4698      	mov	r8, r3
 8005e32:	46a1      	mov	r9, r4
 8005e34:	eb18 080a 	adds.w	r8, r8, sl
 8005e38:	eb49 090b 	adc.w	r9, r9, fp
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e50:	4688      	mov	r8, r1
 8005e52:	4691      	mov	r9, r2
 8005e54:	eb1a 0508 	adds.w	r5, sl, r8
 8005e58:	eb4b 0609 	adc.w	r6, fp, r9
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4619      	mov	r1, r3
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	f04f 0400 	mov.w	r4, #0
 8005e6e:	0094      	lsls	r4, r2, #2
 8005e70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e74:	008b      	lsls	r3, r1, #2
 8005e76:	461a      	mov	r2, r3
 8005e78:	4623      	mov	r3, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	f7fa f9f7 	bl	8000270 <__aeabi_uldivmod>
 8005e82:	4603      	mov	r3, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	461a      	mov	r2, r3
 8005e88:	4bb8      	ldr	r3, [pc, #736]	; (800616c <UART_SetConfig+0x6f4>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	469b      	mov	fp, r3
 8005e98:	f04f 0c00 	mov.w	ip, #0
 8005e9c:	46d9      	mov	r9, fp
 8005e9e:	46e2      	mov	sl, ip
 8005ea0:	eb19 0309 	adds.w	r3, r9, r9
 8005ea4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ea8:	4699      	mov	r9, r3
 8005eaa:	46a2      	mov	sl, r4
 8005eac:	eb19 090b 	adds.w	r9, r9, fp
 8005eb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ec8:	4689      	mov	r9, r1
 8005eca:	4692      	mov	sl, r2
 8005ecc:	eb1b 0509 	adds.w	r5, fp, r9
 8005ed0:	eb4c 060a 	adc.w	r6, ip, sl
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	f04f 0400 	mov.w	r4, #0
 8005ee6:	0094      	lsls	r4, r2, #2
 8005ee8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eec:	008b      	lsls	r3, r1, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	f7fa f9bb 	bl	8000270 <__aeabi_uldivmod>
 8005efa:	4603      	mov	r3, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b9a      	ldr	r3, [pc, #616]	; (800616c <UART_SetConfig+0x6f4>)
 8005f02:	fba3 1302 	umull	r1, r3, r3, r2
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	2164      	movs	r1, #100	; 0x64
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	3332      	adds	r3, #50	; 0x32
 8005f14:	4a95      	ldr	r2, [pc, #596]	; (800616c <UART_SetConfig+0x6f4>)
 8005f16:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f20:	4498      	add	r8, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	469b      	mov	fp, r3
 8005f26:	f04f 0c00 	mov.w	ip, #0
 8005f2a:	46d9      	mov	r9, fp
 8005f2c:	46e2      	mov	sl, ip
 8005f2e:	eb19 0309 	adds.w	r3, r9, r9
 8005f32:	eb4a 040a 	adc.w	r4, sl, sl
 8005f36:	4699      	mov	r9, r3
 8005f38:	46a2      	mov	sl, r4
 8005f3a:	eb19 090b 	adds.w	r9, r9, fp
 8005f3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f42:	f04f 0100 	mov.w	r1, #0
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f56:	4689      	mov	r9, r1
 8005f58:	4692      	mov	sl, r2
 8005f5a:	eb1b 0509 	adds.w	r5, fp, r9
 8005f5e:	eb4c 060a 	adc.w	r6, ip, sl
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4619      	mov	r1, r3
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	f04f 0400 	mov.w	r4, #0
 8005f74:	0094      	lsls	r4, r2, #2
 8005f76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f7a:	008b      	lsls	r3, r1, #2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	4631      	mov	r1, r6
 8005f84:	f7fa f974 	bl	8000270 <__aeabi_uldivmod>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b77      	ldr	r3, [pc, #476]	; (800616c <UART_SetConfig+0x6f4>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	3332      	adds	r3, #50	; 0x32
 8005fa2:	4a72      	ldr	r2, [pc, #456]	; (800616c <UART_SetConfig+0x6f4>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4442      	add	r2, r8
 8005fb4:	609a      	str	r2, [r3, #8]
 8005fb6:	e0d0      	b.n	800615a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f7fe fc5a 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 8005fbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	469a      	mov	sl, r3
 8005fc2:	f04f 0b00 	mov.w	fp, #0
 8005fc6:	46d0      	mov	r8, sl
 8005fc8:	46d9      	mov	r9, fp
 8005fca:	eb18 0308 	adds.w	r3, r8, r8
 8005fce:	eb49 0409 	adc.w	r4, r9, r9
 8005fd2:	4698      	mov	r8, r3
 8005fd4:	46a1      	mov	r9, r4
 8005fd6:	eb18 080a 	adds.w	r8, r8, sl
 8005fda:	eb49 090b 	adc.w	r9, r9, fp
 8005fde:	f04f 0100 	mov.w	r1, #0
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ff2:	4688      	mov	r8, r1
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	eb1a 0508 	adds.w	r5, sl, r8
 8005ffa:	eb4b 0609 	adc.w	r6, fp, r9
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4619      	mov	r1, r3
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	f04f 0400 	mov.w	r4, #0
 8006010:	0094      	lsls	r4, r2, #2
 8006012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006016:	008b      	lsls	r3, r1, #2
 8006018:	461a      	mov	r2, r3
 800601a:	4623      	mov	r3, r4
 800601c:	4628      	mov	r0, r5
 800601e:	4631      	mov	r1, r6
 8006020:	f7fa f926 	bl	8000270 <__aeabi_uldivmod>
 8006024:	4603      	mov	r3, r0
 8006026:	460c      	mov	r4, r1
 8006028:	461a      	mov	r2, r3
 800602a:	4b50      	ldr	r3, [pc, #320]	; (800616c <UART_SetConfig+0x6f4>)
 800602c:	fba3 2302 	umull	r2, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	469b      	mov	fp, r3
 800603a:	f04f 0c00 	mov.w	ip, #0
 800603e:	46d9      	mov	r9, fp
 8006040:	46e2      	mov	sl, ip
 8006042:	eb19 0309 	adds.w	r3, r9, r9
 8006046:	eb4a 040a 	adc.w	r4, sl, sl
 800604a:	4699      	mov	r9, r3
 800604c:	46a2      	mov	sl, r4
 800604e:	eb19 090b 	adds.w	r9, r9, fp
 8006052:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006062:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006066:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800606a:	4689      	mov	r9, r1
 800606c:	4692      	mov	sl, r2
 800606e:	eb1b 0509 	adds.w	r5, fp, r9
 8006072:	eb4c 060a 	adc.w	r6, ip, sl
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	0094      	lsls	r4, r2, #2
 800608a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800608e:	008b      	lsls	r3, r1, #2
 8006090:	461a      	mov	r2, r3
 8006092:	4623      	mov	r3, r4
 8006094:	4628      	mov	r0, r5
 8006096:	4631      	mov	r1, r6
 8006098:	f7fa f8ea 	bl	8000270 <__aeabi_uldivmod>
 800609c:	4603      	mov	r3, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b32      	ldr	r3, [pc, #200]	; (800616c <UART_SetConfig+0x6f4>)
 80060a4:	fba3 1302 	umull	r1, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	2164      	movs	r1, #100	; 0x64
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	3332      	adds	r3, #50	; 0x32
 80060b6:	4a2d      	ldr	r2, [pc, #180]	; (800616c <UART_SetConfig+0x6f4>)
 80060b8:	fba2 2303 	umull	r2, r3, r2, r3
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c2:	4498      	add	r8, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	469b      	mov	fp, r3
 80060c8:	f04f 0c00 	mov.w	ip, #0
 80060cc:	46d9      	mov	r9, fp
 80060ce:	46e2      	mov	sl, ip
 80060d0:	eb19 0309 	adds.w	r3, r9, r9
 80060d4:	eb4a 040a 	adc.w	r4, sl, sl
 80060d8:	4699      	mov	r9, r3
 80060da:	46a2      	mov	sl, r4
 80060dc:	eb19 090b 	adds.w	r9, r9, fp
 80060e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f8:	4689      	mov	r9, r1
 80060fa:	4692      	mov	sl, r2
 80060fc:	eb1b 0509 	adds.w	r5, fp, r9
 8006100:	eb4c 060a 	adc.w	r6, ip, sl
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f04f 0400 	mov.w	r4, #0
 8006116:	0094      	lsls	r4, r2, #2
 8006118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800611c:	008b      	lsls	r3, r1, #2
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	4628      	mov	r0, r5
 8006124:	4631      	mov	r1, r6
 8006126:	f7fa f8a3 	bl	8000270 <__aeabi_uldivmod>
 800612a:	4603      	mov	r3, r0
 800612c:	460c      	mov	r4, r1
 800612e:	461a      	mov	r2, r3
 8006130:	4b0e      	ldr	r3, [pc, #56]	; (800616c <UART_SetConfig+0x6f4>)
 8006132:	fba3 1302 	umull	r1, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2164      	movs	r1, #100	; 0x64
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	; 0x32
 8006144:	4a09      	ldr	r2, [pc, #36]	; (800616c <UART_SetConfig+0x6f4>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4442      	add	r2, r8
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	e7ff      	b.n	800615a <UART_SetConfig+0x6e2>
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	40011000 	.word	0x40011000
 8006168:	40011400 	.word	0x40011400
 800616c:	51eb851f 	.word	0x51eb851f

08006170 <__errno>:
 8006170:	4b01      	ldr	r3, [pc, #4]	; (8006178 <__errno+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4e0d      	ldr	r6, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1ba4      	subs	r4, r4, r6
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2500      	movs	r5, #0
 8006188:	42a5      	cmp	r5, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4e0b      	ldr	r6, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f000 ff68 	bl	8007064 <_init>
 8006194:	1ba4      	subs	r4, r4, r6
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2500      	movs	r5, #0
 800619a:	42a5      	cmp	r5, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a4:	4798      	blx	r3
 80061a6:	3501      	adds	r5, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ae:	4798      	blx	r3
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	08007250 	.word	0x08007250
 80061b8:	08007250 	.word	0x08007250
 80061bc:	08007250 	.word	0x08007250
 80061c0:	08007254 	.word	0x08007254

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <iprintf>:
 80061d4:	b40f      	push	{r0, r1, r2, r3}
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <iprintf+0x2c>)
 80061d8:	b513      	push	{r0, r1, r4, lr}
 80061da:	681c      	ldr	r4, [r3, #0]
 80061dc:	b124      	cbz	r4, 80061e8 <iprintf+0x14>
 80061de:	69a3      	ldr	r3, [r4, #24]
 80061e0:	b913      	cbnz	r3, 80061e8 <iprintf+0x14>
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fa22 	bl	800662c <__sinit>
 80061e8:	ab05      	add	r3, sp, #20
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	68a1      	ldr	r1, [r4, #8]
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fbdb 	bl	80069ac <_vfiprintf_r>
 80061f6:	b002      	add	sp, #8
 80061f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fc:	b004      	add	sp, #16
 80061fe:	4770      	bx	lr
 8006200:	2000000c 	.word	0x2000000c

08006204 <_puts_r>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	460e      	mov	r6, r1
 8006208:	4605      	mov	r5, r0
 800620a:	b118      	cbz	r0, 8006214 <_puts_r+0x10>
 800620c:	6983      	ldr	r3, [r0, #24]
 800620e:	b90b      	cbnz	r3, 8006214 <_puts_r+0x10>
 8006210:	f000 fa0c 	bl	800662c <__sinit>
 8006214:	69ab      	ldr	r3, [r5, #24]
 8006216:	68ac      	ldr	r4, [r5, #8]
 8006218:	b913      	cbnz	r3, 8006220 <_puts_r+0x1c>
 800621a:	4628      	mov	r0, r5
 800621c:	f000 fa06 	bl	800662c <__sinit>
 8006220:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <_puts_r+0xac>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d117      	bne.n	8006256 <_puts_r+0x52>
 8006226:	686c      	ldr	r4, [r5, #4]
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	071b      	lsls	r3, r3, #28
 800622c:	d51d      	bpl.n	800626a <_puts_r+0x66>
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	b1db      	cbz	r3, 800626a <_puts_r+0x66>
 8006232:	3e01      	subs	r6, #1
 8006234:	68a3      	ldr	r3, [r4, #8]
 8006236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800623a:	3b01      	subs	r3, #1
 800623c:	60a3      	str	r3, [r4, #8]
 800623e:	b9e9      	cbnz	r1, 800627c <_puts_r+0x78>
 8006240:	2b00      	cmp	r3, #0
 8006242:	da2e      	bge.n	80062a2 <_puts_r+0x9e>
 8006244:	4622      	mov	r2, r4
 8006246:	210a      	movs	r1, #10
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f83f 	bl	80062cc <__swbuf_r>
 800624e:	3001      	adds	r0, #1
 8006250:	d011      	beq.n	8006276 <_puts_r+0x72>
 8006252:	200a      	movs	r0, #10
 8006254:	e011      	b.n	800627a <_puts_r+0x76>
 8006256:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <_puts_r+0xb0>)
 8006258:	429c      	cmp	r4, r3
 800625a:	d101      	bne.n	8006260 <_puts_r+0x5c>
 800625c:	68ac      	ldr	r4, [r5, #8]
 800625e:	e7e3      	b.n	8006228 <_puts_r+0x24>
 8006260:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <_puts_r+0xb4>)
 8006262:	429c      	cmp	r4, r3
 8006264:	bf08      	it	eq
 8006266:	68ec      	ldreq	r4, [r5, #12]
 8006268:	e7de      	b.n	8006228 <_puts_r+0x24>
 800626a:	4621      	mov	r1, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f000 f87f 	bl	8006370 <__swsetup_r>
 8006272:	2800      	cmp	r0, #0
 8006274:	d0dd      	beq.n	8006232 <_puts_r+0x2e>
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	2b00      	cmp	r3, #0
 800627e:	da04      	bge.n	800628a <_puts_r+0x86>
 8006280:	69a2      	ldr	r2, [r4, #24]
 8006282:	429a      	cmp	r2, r3
 8006284:	dc06      	bgt.n	8006294 <_puts_r+0x90>
 8006286:	290a      	cmp	r1, #10
 8006288:	d004      	beq.n	8006294 <_puts_r+0x90>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	6022      	str	r2, [r4, #0]
 8006290:	7019      	strb	r1, [r3, #0]
 8006292:	e7cf      	b.n	8006234 <_puts_r+0x30>
 8006294:	4622      	mov	r2, r4
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f818 	bl	80062cc <__swbuf_r>
 800629c:	3001      	adds	r0, #1
 800629e:	d1c9      	bne.n	8006234 <_puts_r+0x30>
 80062a0:	e7e9      	b.n	8006276 <_puts_r+0x72>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	200a      	movs	r0, #10
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	6022      	str	r2, [r4, #0]
 80062aa:	7018      	strb	r0, [r3, #0]
 80062ac:	e7e5      	b.n	800627a <_puts_r+0x76>
 80062ae:	bf00      	nop
 80062b0:	080071d4 	.word	0x080071d4
 80062b4:	080071f4 	.word	0x080071f4
 80062b8:	080071b4 	.word	0x080071b4

080062bc <puts>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <puts+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f7ff bf9f 	b.w	8006204 <_puts_r>
 80062c6:	bf00      	nop
 80062c8:	2000000c 	.word	0x2000000c

080062cc <__swbuf_r>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	460e      	mov	r6, r1
 80062d0:	4614      	mov	r4, r2
 80062d2:	4605      	mov	r5, r0
 80062d4:	b118      	cbz	r0, 80062de <__swbuf_r+0x12>
 80062d6:	6983      	ldr	r3, [r0, #24]
 80062d8:	b90b      	cbnz	r3, 80062de <__swbuf_r+0x12>
 80062da:	f000 f9a7 	bl	800662c <__sinit>
 80062de:	4b21      	ldr	r3, [pc, #132]	; (8006364 <__swbuf_r+0x98>)
 80062e0:	429c      	cmp	r4, r3
 80062e2:	d12a      	bne.n	800633a <__swbuf_r+0x6e>
 80062e4:	686c      	ldr	r4, [r5, #4]
 80062e6:	69a3      	ldr	r3, [r4, #24]
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	071a      	lsls	r2, r3, #28
 80062ee:	d52e      	bpl.n	800634e <__swbuf_r+0x82>
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	b363      	cbz	r3, 800634e <__swbuf_r+0x82>
 80062f4:	6923      	ldr	r3, [r4, #16]
 80062f6:	6820      	ldr	r0, [r4, #0]
 80062f8:	1ac0      	subs	r0, r0, r3
 80062fa:	6963      	ldr	r3, [r4, #20]
 80062fc:	b2f6      	uxtb	r6, r6
 80062fe:	4283      	cmp	r3, r0
 8006300:	4637      	mov	r7, r6
 8006302:	dc04      	bgt.n	800630e <__swbuf_r+0x42>
 8006304:	4621      	mov	r1, r4
 8006306:	4628      	mov	r0, r5
 8006308:	f000 f926 	bl	8006558 <_fflush_r>
 800630c:	bb28      	cbnz	r0, 800635a <__swbuf_r+0x8e>
 800630e:	68a3      	ldr	r3, [r4, #8]
 8006310:	3b01      	subs	r3, #1
 8006312:	60a3      	str	r3, [r4, #8]
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	6022      	str	r2, [r4, #0]
 800631a:	701e      	strb	r6, [r3, #0]
 800631c:	6963      	ldr	r3, [r4, #20]
 800631e:	3001      	adds	r0, #1
 8006320:	4283      	cmp	r3, r0
 8006322:	d004      	beq.n	800632e <__swbuf_r+0x62>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	07db      	lsls	r3, r3, #31
 8006328:	d519      	bpl.n	800635e <__swbuf_r+0x92>
 800632a:	2e0a      	cmp	r6, #10
 800632c:	d117      	bne.n	800635e <__swbuf_r+0x92>
 800632e:	4621      	mov	r1, r4
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f911 	bl	8006558 <_fflush_r>
 8006336:	b190      	cbz	r0, 800635e <__swbuf_r+0x92>
 8006338:	e00f      	b.n	800635a <__swbuf_r+0x8e>
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <__swbuf_r+0x9c>)
 800633c:	429c      	cmp	r4, r3
 800633e:	d101      	bne.n	8006344 <__swbuf_r+0x78>
 8006340:	68ac      	ldr	r4, [r5, #8]
 8006342:	e7d0      	b.n	80062e6 <__swbuf_r+0x1a>
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <__swbuf_r+0xa0>)
 8006346:	429c      	cmp	r4, r3
 8006348:	bf08      	it	eq
 800634a:	68ec      	ldreq	r4, [r5, #12]
 800634c:	e7cb      	b.n	80062e6 <__swbuf_r+0x1a>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 f80d 	bl	8006370 <__swsetup_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	d0cc      	beq.n	80062f4 <__swbuf_r+0x28>
 800635a:	f04f 37ff 	mov.w	r7, #4294967295
 800635e:	4638      	mov	r0, r7
 8006360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006362:	bf00      	nop
 8006364:	080071d4 	.word	0x080071d4
 8006368:	080071f4 	.word	0x080071f4
 800636c:	080071b4 	.word	0x080071b4

08006370 <__swsetup_r>:
 8006370:	4b32      	ldr	r3, [pc, #200]	; (800643c <__swsetup_r+0xcc>)
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	681d      	ldr	r5, [r3, #0]
 8006376:	4606      	mov	r6, r0
 8006378:	460c      	mov	r4, r1
 800637a:	b125      	cbz	r5, 8006386 <__swsetup_r+0x16>
 800637c:	69ab      	ldr	r3, [r5, #24]
 800637e:	b913      	cbnz	r3, 8006386 <__swsetup_r+0x16>
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f953 	bl	800662c <__sinit>
 8006386:	4b2e      	ldr	r3, [pc, #184]	; (8006440 <__swsetup_r+0xd0>)
 8006388:	429c      	cmp	r4, r3
 800638a:	d10f      	bne.n	80063ac <__swsetup_r+0x3c>
 800638c:	686c      	ldr	r4, [r5, #4]
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	b29a      	uxth	r2, r3
 8006394:	0715      	lsls	r5, r2, #28
 8006396:	d42c      	bmi.n	80063f2 <__swsetup_r+0x82>
 8006398:	06d0      	lsls	r0, r2, #27
 800639a:	d411      	bmi.n	80063c0 <__swsetup_r+0x50>
 800639c:	2209      	movs	r2, #9
 800639e:	6032      	str	r2, [r6, #0]
 80063a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	e03e      	b.n	800642a <__swsetup_r+0xba>
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <__swsetup_r+0xd4>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d101      	bne.n	80063b6 <__swsetup_r+0x46>
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	e7eb      	b.n	800638e <__swsetup_r+0x1e>
 80063b6:	4b24      	ldr	r3, [pc, #144]	; (8006448 <__swsetup_r+0xd8>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	bf08      	it	eq
 80063bc:	68ec      	ldreq	r4, [r5, #12]
 80063be:	e7e6      	b.n	800638e <__swsetup_r+0x1e>
 80063c0:	0751      	lsls	r1, r2, #29
 80063c2:	d512      	bpl.n	80063ea <__swsetup_r+0x7a>
 80063c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c6:	b141      	cbz	r1, 80063da <__swsetup_r+0x6a>
 80063c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063cc:	4299      	cmp	r1, r3
 80063ce:	d002      	beq.n	80063d6 <__swsetup_r+0x66>
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 fa19 	bl	8006808 <_free_r>
 80063d6:	2300      	movs	r3, #0
 80063d8:	6363      	str	r3, [r4, #52]	; 0x34
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063e0:	81a3      	strh	r3, [r4, #12]
 80063e2:	2300      	movs	r3, #0
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f043 0308 	orr.w	r3, r3, #8
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	b94b      	cbnz	r3, 800640a <__swsetup_r+0x9a>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	d003      	beq.n	800640a <__swsetup_r+0x9a>
 8006402:	4621      	mov	r1, r4
 8006404:	4630      	mov	r0, r6
 8006406:	f000 f9bf 	bl	8006788 <__smakebuf_r>
 800640a:	89a2      	ldrh	r2, [r4, #12]
 800640c:	f012 0301 	ands.w	r3, r2, #1
 8006410:	d00c      	beq.n	800642c <__swsetup_r+0xbc>
 8006412:	2300      	movs	r3, #0
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	6963      	ldr	r3, [r4, #20]
 8006418:	425b      	negs	r3, r3
 800641a:	61a3      	str	r3, [r4, #24]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	b953      	cbnz	r3, 8006436 <__swsetup_r+0xc6>
 8006420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006424:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006428:	d1ba      	bne.n	80063a0 <__swsetup_r+0x30>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	0792      	lsls	r2, r2, #30
 800642e:	bf58      	it	pl
 8006430:	6963      	ldrpl	r3, [r4, #20]
 8006432:	60a3      	str	r3, [r4, #8]
 8006434:	e7f2      	b.n	800641c <__swsetup_r+0xac>
 8006436:	2000      	movs	r0, #0
 8006438:	e7f7      	b.n	800642a <__swsetup_r+0xba>
 800643a:	bf00      	nop
 800643c:	2000000c 	.word	0x2000000c
 8006440:	080071d4 	.word	0x080071d4
 8006444:	080071f4 	.word	0x080071f4
 8006448:	080071b4 	.word	0x080071b4

0800644c <__sflush_r>:
 800644c:	898a      	ldrh	r2, [r1, #12]
 800644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	0710      	lsls	r0, r2, #28
 8006456:	460c      	mov	r4, r1
 8006458:	d458      	bmi.n	800650c <__sflush_r+0xc0>
 800645a:	684b      	ldr	r3, [r1, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dc05      	bgt.n	800646c <__sflush_r+0x20>
 8006460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	dc02      	bgt.n	800646c <__sflush_r+0x20>
 8006466:	2000      	movs	r0, #0
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646e:	2e00      	cmp	r6, #0
 8006470:	d0f9      	beq.n	8006466 <__sflush_r+0x1a>
 8006472:	2300      	movs	r3, #0
 8006474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006478:	682f      	ldr	r7, [r5, #0]
 800647a:	6a21      	ldr	r1, [r4, #32]
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	d032      	beq.n	80064e6 <__sflush_r+0x9a>
 8006480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	075a      	lsls	r2, r3, #29
 8006486:	d505      	bpl.n	8006494 <__sflush_r+0x48>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	1ac0      	subs	r0, r0, r3
 800648c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648e:	b10b      	cbz	r3, 8006494 <__sflush_r+0x48>
 8006490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	2300      	movs	r3, #0
 8006496:	4602      	mov	r2, r0
 8006498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800649a:	6a21      	ldr	r1, [r4, #32]
 800649c:	4628      	mov	r0, r5
 800649e:	47b0      	blx	r6
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	d106      	bne.n	80064b4 <__sflush_r+0x68>
 80064a6:	6829      	ldr	r1, [r5, #0]
 80064a8:	291d      	cmp	r1, #29
 80064aa:	d848      	bhi.n	800653e <__sflush_r+0xf2>
 80064ac:	4a29      	ldr	r2, [pc, #164]	; (8006554 <__sflush_r+0x108>)
 80064ae:	40ca      	lsrs	r2, r1
 80064b0:	07d6      	lsls	r6, r2, #31
 80064b2:	d544      	bpl.n	800653e <__sflush_r+0xf2>
 80064b4:	2200      	movs	r2, #0
 80064b6:	6062      	str	r2, [r4, #4]
 80064b8:	04d9      	lsls	r1, r3, #19
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	d504      	bpl.n	80064ca <__sflush_r+0x7e>
 80064c0:	1c42      	adds	r2, r0, #1
 80064c2:	d101      	bne.n	80064c8 <__sflush_r+0x7c>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b903      	cbnz	r3, 80064ca <__sflush_r+0x7e>
 80064c8:	6560      	str	r0, [r4, #84]	; 0x54
 80064ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064cc:	602f      	str	r7, [r5, #0]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d0c9      	beq.n	8006466 <__sflush_r+0x1a>
 80064d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d6:	4299      	cmp	r1, r3
 80064d8:	d002      	beq.n	80064e0 <__sflush_r+0x94>
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 f994 	bl	8006808 <_free_r>
 80064e0:	2000      	movs	r0, #0
 80064e2:	6360      	str	r0, [r4, #52]	; 0x34
 80064e4:	e7c0      	b.n	8006468 <__sflush_r+0x1c>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b0      	blx	r6
 80064ec:	1c41      	adds	r1, r0, #1
 80064ee:	d1c8      	bne.n	8006482 <__sflush_r+0x36>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0c5      	beq.n	8006482 <__sflush_r+0x36>
 80064f6:	2b1d      	cmp	r3, #29
 80064f8:	d001      	beq.n	80064fe <__sflush_r+0xb2>
 80064fa:	2b16      	cmp	r3, #22
 80064fc:	d101      	bne.n	8006502 <__sflush_r+0xb6>
 80064fe:	602f      	str	r7, [r5, #0]
 8006500:	e7b1      	b.n	8006466 <__sflush_r+0x1a>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	e7ad      	b.n	8006468 <__sflush_r+0x1c>
 800650c:	690f      	ldr	r7, [r1, #16]
 800650e:	2f00      	cmp	r7, #0
 8006510:	d0a9      	beq.n	8006466 <__sflush_r+0x1a>
 8006512:	0793      	lsls	r3, r2, #30
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	bf08      	it	eq
 8006518:	694b      	ldreq	r3, [r1, #20]
 800651a:	600f      	str	r7, [r1, #0]
 800651c:	bf18      	it	ne
 800651e:	2300      	movne	r3, #0
 8006520:	eba6 0807 	sub.w	r8, r6, r7
 8006524:	608b      	str	r3, [r1, #8]
 8006526:	f1b8 0f00 	cmp.w	r8, #0
 800652a:	dd9c      	ble.n	8006466 <__sflush_r+0x1a>
 800652c:	4643      	mov	r3, r8
 800652e:	463a      	mov	r2, r7
 8006530:	6a21      	ldr	r1, [r4, #32]
 8006532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006534:	4628      	mov	r0, r5
 8006536:	47b0      	blx	r6
 8006538:	2800      	cmp	r0, #0
 800653a:	dc06      	bgt.n	800654a <__sflush_r+0xfe>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	e78e      	b.n	8006468 <__sflush_r+0x1c>
 800654a:	4407      	add	r7, r0
 800654c:	eba8 0800 	sub.w	r8, r8, r0
 8006550:	e7e9      	b.n	8006526 <__sflush_r+0xda>
 8006552:	bf00      	nop
 8006554:	20400001 	.word	0x20400001

08006558 <_fflush_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	690b      	ldr	r3, [r1, #16]
 800655c:	4605      	mov	r5, r0
 800655e:	460c      	mov	r4, r1
 8006560:	b1db      	cbz	r3, 800659a <_fflush_r+0x42>
 8006562:	b118      	cbz	r0, 800656c <_fflush_r+0x14>
 8006564:	6983      	ldr	r3, [r0, #24]
 8006566:	b90b      	cbnz	r3, 800656c <_fflush_r+0x14>
 8006568:	f000 f860 	bl	800662c <__sinit>
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <_fflush_r+0x48>)
 800656e:	429c      	cmp	r4, r3
 8006570:	d109      	bne.n	8006586 <_fflush_r+0x2e>
 8006572:	686c      	ldr	r4, [r5, #4]
 8006574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006578:	b17b      	cbz	r3, 800659a <_fflush_r+0x42>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006582:	f7ff bf63 	b.w	800644c <__sflush_r>
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <_fflush_r+0x4c>)
 8006588:	429c      	cmp	r4, r3
 800658a:	d101      	bne.n	8006590 <_fflush_r+0x38>
 800658c:	68ac      	ldr	r4, [r5, #8]
 800658e:	e7f1      	b.n	8006574 <_fflush_r+0x1c>
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <_fflush_r+0x50>)
 8006592:	429c      	cmp	r4, r3
 8006594:	bf08      	it	eq
 8006596:	68ec      	ldreq	r4, [r5, #12]
 8006598:	e7ec      	b.n	8006574 <_fflush_r+0x1c>
 800659a:	2000      	movs	r0, #0
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	080071d4 	.word	0x080071d4
 80065a4:	080071f4 	.word	0x080071f4
 80065a8:	080071b4 	.word	0x080071b4

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	e9c0 3300 	strd	r3, r3, [r0]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	; 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	; 0x5c
 80065ca:	f7ff fdfb 	bl	80061c4 <memset>
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <std+0x38>)
 80065d0:	6263      	str	r3, [r4, #36]	; 0x24
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <std+0x3c>)
 80065d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <std+0x40>)
 80065d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <std+0x44>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	6323      	str	r3, [r4, #48]	; 0x30
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	08006f09 	.word	0x08006f09
 80065e8:	08006f2b 	.word	0x08006f2b
 80065ec:	08006f63 	.word	0x08006f63
 80065f0:	08006f87 	.word	0x08006f87

080065f4 <_cleanup_r>:
 80065f4:	4901      	ldr	r1, [pc, #4]	; (80065fc <_cleanup_r+0x8>)
 80065f6:	f000 b885 	b.w	8006704 <_fwalk_reent>
 80065fa:	bf00      	nop
 80065fc:	08006559 	.word	0x08006559

08006600 <__sfmoreglue>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	1e4a      	subs	r2, r1, #1
 8006604:	2568      	movs	r5, #104	; 0x68
 8006606:	4355      	muls	r5, r2
 8006608:	460e      	mov	r6, r1
 800660a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800660e:	f000 f949 	bl	80068a4 <_malloc_r>
 8006612:	4604      	mov	r4, r0
 8006614:	b140      	cbz	r0, 8006628 <__sfmoreglue+0x28>
 8006616:	2100      	movs	r1, #0
 8006618:	e9c0 1600 	strd	r1, r6, [r0]
 800661c:	300c      	adds	r0, #12
 800661e:	60a0      	str	r0, [r4, #8]
 8006620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006624:	f7ff fdce 	bl	80061c4 <memset>
 8006628:	4620      	mov	r0, r4
 800662a:	bd70      	pop	{r4, r5, r6, pc}

0800662c <__sinit>:
 800662c:	6983      	ldr	r3, [r0, #24]
 800662e:	b510      	push	{r4, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	bb33      	cbnz	r3, 8006682 <__sinit+0x56>
 8006634:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006638:	6503      	str	r3, [r0, #80]	; 0x50
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <__sinit+0x58>)
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <__sinit+0x5c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6282      	str	r2, [r0, #40]	; 0x28
 8006642:	4298      	cmp	r0, r3
 8006644:	bf04      	itt	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	6183      	streq	r3, [r0, #24]
 800664a:	f000 f81f 	bl	800668c <__sfp>
 800664e:	6060      	str	r0, [r4, #4]
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f81b 	bl	800668c <__sfp>
 8006656:	60a0      	str	r0, [r4, #8]
 8006658:	4620      	mov	r0, r4
 800665a:	f000 f817 	bl	800668c <__sfp>
 800665e:	2200      	movs	r2, #0
 8006660:	60e0      	str	r0, [r4, #12]
 8006662:	2104      	movs	r1, #4
 8006664:	6860      	ldr	r0, [r4, #4]
 8006666:	f7ff ffa1 	bl	80065ac <std>
 800666a:	2201      	movs	r2, #1
 800666c:	2109      	movs	r1, #9
 800666e:	68a0      	ldr	r0, [r4, #8]
 8006670:	f7ff ff9c 	bl	80065ac <std>
 8006674:	2202      	movs	r2, #2
 8006676:	2112      	movs	r1, #18
 8006678:	68e0      	ldr	r0, [r4, #12]
 800667a:	f7ff ff97 	bl	80065ac <std>
 800667e:	2301      	movs	r3, #1
 8006680:	61a3      	str	r3, [r4, #24]
 8006682:	bd10      	pop	{r4, pc}
 8006684:	080071b0 	.word	0x080071b0
 8006688:	080065f5 	.word	0x080065f5

0800668c <__sfp>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <__sfp+0x70>)
 8006690:	681e      	ldr	r6, [r3, #0]
 8006692:	69b3      	ldr	r3, [r6, #24]
 8006694:	4607      	mov	r7, r0
 8006696:	b913      	cbnz	r3, 800669e <__sfp+0x12>
 8006698:	4630      	mov	r0, r6
 800669a:	f7ff ffc7 	bl	800662c <__sinit>
 800669e:	3648      	adds	r6, #72	; 0x48
 80066a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	d503      	bpl.n	80066b0 <__sfp+0x24>
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	b133      	cbz	r3, 80066ba <__sfp+0x2e>
 80066ac:	6836      	ldr	r6, [r6, #0]
 80066ae:	e7f7      	b.n	80066a0 <__sfp+0x14>
 80066b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066b4:	b16d      	cbz	r5, 80066d2 <__sfp+0x46>
 80066b6:	3468      	adds	r4, #104	; 0x68
 80066b8:	e7f4      	b.n	80066a4 <__sfp+0x18>
 80066ba:	2104      	movs	r1, #4
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff ff9f 	bl	8006600 <__sfmoreglue>
 80066c2:	6030      	str	r0, [r6, #0]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1f1      	bne.n	80066ac <__sfp+0x20>
 80066c8:	230c      	movs	r3, #12
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4604      	mov	r4, r0
 80066ce:	4620      	mov	r0, r4
 80066d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d2:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <__sfp+0x74>)
 80066d4:	6665      	str	r5, [r4, #100]	; 0x64
 80066d6:	e9c4 5500 	strd	r5, r5, [r4]
 80066da:	60a5      	str	r5, [r4, #8]
 80066dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80066e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80066e4:	2208      	movs	r2, #8
 80066e6:	4629      	mov	r1, r5
 80066e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066ec:	f7ff fd6a 	bl	80061c4 <memset>
 80066f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066f8:	e7e9      	b.n	80066ce <__sfp+0x42>
 80066fa:	bf00      	nop
 80066fc:	080071b0 	.word	0x080071b0
 8006700:	ffff0001 	.word	0xffff0001

08006704 <_fwalk_reent>:
 8006704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006708:	4680      	mov	r8, r0
 800670a:	4689      	mov	r9, r1
 800670c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006710:	2600      	movs	r6, #0
 8006712:	b914      	cbnz	r4, 800671a <_fwalk_reent+0x16>
 8006714:	4630      	mov	r0, r6
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800671e:	3f01      	subs	r7, #1
 8006720:	d501      	bpl.n	8006726 <_fwalk_reent+0x22>
 8006722:	6824      	ldr	r4, [r4, #0]
 8006724:	e7f5      	b.n	8006712 <_fwalk_reent+0xe>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d907      	bls.n	800673c <_fwalk_reent+0x38>
 800672c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006730:	3301      	adds	r3, #1
 8006732:	d003      	beq.n	800673c <_fwalk_reent+0x38>
 8006734:	4629      	mov	r1, r5
 8006736:	4640      	mov	r0, r8
 8006738:	47c8      	blx	r9
 800673a:	4306      	orrs	r6, r0
 800673c:	3568      	adds	r5, #104	; 0x68
 800673e:	e7ee      	b.n	800671e <_fwalk_reent+0x1a>

08006740 <__swhatbuf_r>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	460e      	mov	r6, r1
 8006744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006748:	2900      	cmp	r1, #0
 800674a:	b096      	sub	sp, #88	; 0x58
 800674c:	4614      	mov	r4, r2
 800674e:	461d      	mov	r5, r3
 8006750:	da07      	bge.n	8006762 <__swhatbuf_r+0x22>
 8006752:	2300      	movs	r3, #0
 8006754:	602b      	str	r3, [r5, #0]
 8006756:	89b3      	ldrh	r3, [r6, #12]
 8006758:	061a      	lsls	r2, r3, #24
 800675a:	d410      	bmi.n	800677e <__swhatbuf_r+0x3e>
 800675c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006760:	e00e      	b.n	8006780 <__swhatbuf_r+0x40>
 8006762:	466a      	mov	r2, sp
 8006764:	f000 fc36 	bl	8006fd4 <_fstat_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	dbf2      	blt.n	8006752 <__swhatbuf_r+0x12>
 800676c:	9a01      	ldr	r2, [sp, #4]
 800676e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006772:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006776:	425a      	negs	r2, r3
 8006778:	415a      	adcs	r2, r3
 800677a:	602a      	str	r2, [r5, #0]
 800677c:	e7ee      	b.n	800675c <__swhatbuf_r+0x1c>
 800677e:	2340      	movs	r3, #64	; 0x40
 8006780:	2000      	movs	r0, #0
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	b016      	add	sp, #88	; 0x58
 8006786:	bd70      	pop	{r4, r5, r6, pc}

08006788 <__smakebuf_r>:
 8006788:	898b      	ldrh	r3, [r1, #12]
 800678a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800678c:	079d      	lsls	r5, r3, #30
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	d507      	bpl.n	80067a4 <__smakebuf_r+0x1c>
 8006794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	2301      	movs	r3, #1
 800679e:	6163      	str	r3, [r4, #20]
 80067a0:	b002      	add	sp, #8
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	ab01      	add	r3, sp, #4
 80067a6:	466a      	mov	r2, sp
 80067a8:	f7ff ffca 	bl	8006740 <__swhatbuf_r>
 80067ac:	9900      	ldr	r1, [sp, #0]
 80067ae:	4605      	mov	r5, r0
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 f877 	bl	80068a4 <_malloc_r>
 80067b6:	b948      	cbnz	r0, 80067cc <__smakebuf_r+0x44>
 80067b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067bc:	059a      	lsls	r2, r3, #22
 80067be:	d4ef      	bmi.n	80067a0 <__smakebuf_r+0x18>
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	81a3      	strh	r3, [r4, #12]
 80067ca:	e7e3      	b.n	8006794 <__smakebuf_r+0xc>
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <__smakebuf_r+0x7c>)
 80067ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	6020      	str	r0, [r4, #0]
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	6163      	str	r3, [r4, #20]
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	6120      	str	r0, [r4, #16]
 80067e2:	b15b      	cbz	r3, 80067fc <__smakebuf_r+0x74>
 80067e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 fc05 	bl	8006ff8 <_isatty_r>
 80067ee:	b128      	cbz	r0, 80067fc <__smakebuf_r+0x74>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	431d      	orrs	r5, r3
 8006800:	81a5      	strh	r5, [r4, #12]
 8006802:	e7cd      	b.n	80067a0 <__smakebuf_r+0x18>
 8006804:	080065f5 	.word	0x080065f5

08006808 <_free_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4605      	mov	r5, r0
 800680c:	2900      	cmp	r1, #0
 800680e:	d045      	beq.n	800689c <_free_r+0x94>
 8006810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006814:	1f0c      	subs	r4, r1, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfb8      	it	lt
 800681a:	18e4      	addlt	r4, r4, r3
 800681c:	f000 fc0e 	bl	800703c <__malloc_lock>
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <_free_r+0x98>)
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	4610      	mov	r0, r2
 8006826:	b933      	cbnz	r3, 8006836 <_free_r+0x2e>
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6014      	str	r4, [r2, #0]
 800682c:	4628      	mov	r0, r5
 800682e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006832:	f000 bc04 	b.w	800703e <__malloc_unlock>
 8006836:	42a3      	cmp	r3, r4
 8006838:	d90c      	bls.n	8006854 <_free_r+0x4c>
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	1862      	adds	r2, r4, r1
 800683e:	4293      	cmp	r3, r2
 8006840:	bf04      	itt	eq
 8006842:	681a      	ldreq	r2, [r3, #0]
 8006844:	685b      	ldreq	r3, [r3, #4]
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	bf04      	itt	eq
 800684a:	1852      	addeq	r2, r2, r1
 800684c:	6022      	streq	r2, [r4, #0]
 800684e:	6004      	str	r4, [r0, #0]
 8006850:	e7ec      	b.n	800682c <_free_r+0x24>
 8006852:	4613      	mov	r3, r2
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	b10a      	cbz	r2, 800685c <_free_r+0x54>
 8006858:	42a2      	cmp	r2, r4
 800685a:	d9fa      	bls.n	8006852 <_free_r+0x4a>
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	1858      	adds	r0, r3, r1
 8006860:	42a0      	cmp	r0, r4
 8006862:	d10b      	bne.n	800687c <_free_r+0x74>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	4401      	add	r1, r0
 8006868:	1858      	adds	r0, r3, r1
 800686a:	4282      	cmp	r2, r0
 800686c:	6019      	str	r1, [r3, #0]
 800686e:	d1dd      	bne.n	800682c <_free_r+0x24>
 8006870:	6810      	ldr	r0, [r2, #0]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	4401      	add	r1, r0
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	e7d7      	b.n	800682c <_free_r+0x24>
 800687c:	d902      	bls.n	8006884 <_free_r+0x7c>
 800687e:	230c      	movs	r3, #12
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	e7d3      	b.n	800682c <_free_r+0x24>
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	1821      	adds	r1, r4, r0
 8006888:	428a      	cmp	r2, r1
 800688a:	bf04      	itt	eq
 800688c:	6811      	ldreq	r1, [r2, #0]
 800688e:	6852      	ldreq	r2, [r2, #4]
 8006890:	6062      	str	r2, [r4, #4]
 8006892:	bf04      	itt	eq
 8006894:	1809      	addeq	r1, r1, r0
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	605c      	str	r4, [r3, #4]
 800689a:	e7c7      	b.n	800682c <_free_r+0x24>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	20000090 	.word	0x20000090

080068a4 <_malloc_r>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	1ccd      	adds	r5, r1, #3
 80068a8:	f025 0503 	bic.w	r5, r5, #3
 80068ac:	3508      	adds	r5, #8
 80068ae:	2d0c      	cmp	r5, #12
 80068b0:	bf38      	it	cc
 80068b2:	250c      	movcc	r5, #12
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	4606      	mov	r6, r0
 80068b8:	db01      	blt.n	80068be <_malloc_r+0x1a>
 80068ba:	42a9      	cmp	r1, r5
 80068bc:	d903      	bls.n	80068c6 <_malloc_r+0x22>
 80068be:	230c      	movs	r3, #12
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	2000      	movs	r0, #0
 80068c4:	bd70      	pop	{r4, r5, r6, pc}
 80068c6:	f000 fbb9 	bl	800703c <__malloc_lock>
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <_malloc_r+0xac>)
 80068cc:	6814      	ldr	r4, [r2, #0]
 80068ce:	4621      	mov	r1, r4
 80068d0:	b991      	cbnz	r1, 80068f8 <_malloc_r+0x54>
 80068d2:	4c20      	ldr	r4, [pc, #128]	; (8006954 <_malloc_r+0xb0>)
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	b91b      	cbnz	r3, 80068e0 <_malloc_r+0x3c>
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 fb05 	bl	8006ee8 <_sbrk_r>
 80068de:	6020      	str	r0, [r4, #0]
 80068e0:	4629      	mov	r1, r5
 80068e2:	4630      	mov	r0, r6
 80068e4:	f000 fb00 	bl	8006ee8 <_sbrk_r>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d124      	bne.n	8006936 <_malloc_r+0x92>
 80068ec:	230c      	movs	r3, #12
 80068ee:	6033      	str	r3, [r6, #0]
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 fba4 	bl	800703e <__malloc_unlock>
 80068f6:	e7e4      	b.n	80068c2 <_malloc_r+0x1e>
 80068f8:	680b      	ldr	r3, [r1, #0]
 80068fa:	1b5b      	subs	r3, r3, r5
 80068fc:	d418      	bmi.n	8006930 <_malloc_r+0x8c>
 80068fe:	2b0b      	cmp	r3, #11
 8006900:	d90f      	bls.n	8006922 <_malloc_r+0x7e>
 8006902:	600b      	str	r3, [r1, #0]
 8006904:	50cd      	str	r5, [r1, r3]
 8006906:	18cc      	adds	r4, r1, r3
 8006908:	4630      	mov	r0, r6
 800690a:	f000 fb98 	bl	800703e <__malloc_unlock>
 800690e:	f104 000b 	add.w	r0, r4, #11
 8006912:	1d23      	adds	r3, r4, #4
 8006914:	f020 0007 	bic.w	r0, r0, #7
 8006918:	1ac3      	subs	r3, r0, r3
 800691a:	d0d3      	beq.n	80068c4 <_malloc_r+0x20>
 800691c:	425a      	negs	r2, r3
 800691e:	50e2      	str	r2, [r4, r3]
 8006920:	e7d0      	b.n	80068c4 <_malloc_r+0x20>
 8006922:	428c      	cmp	r4, r1
 8006924:	684b      	ldr	r3, [r1, #4]
 8006926:	bf16      	itet	ne
 8006928:	6063      	strne	r3, [r4, #4]
 800692a:	6013      	streq	r3, [r2, #0]
 800692c:	460c      	movne	r4, r1
 800692e:	e7eb      	b.n	8006908 <_malloc_r+0x64>
 8006930:	460c      	mov	r4, r1
 8006932:	6849      	ldr	r1, [r1, #4]
 8006934:	e7cc      	b.n	80068d0 <_malloc_r+0x2c>
 8006936:	1cc4      	adds	r4, r0, #3
 8006938:	f024 0403 	bic.w	r4, r4, #3
 800693c:	42a0      	cmp	r0, r4
 800693e:	d005      	beq.n	800694c <_malloc_r+0xa8>
 8006940:	1a21      	subs	r1, r4, r0
 8006942:	4630      	mov	r0, r6
 8006944:	f000 fad0 	bl	8006ee8 <_sbrk_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d0cf      	beq.n	80068ec <_malloc_r+0x48>
 800694c:	6025      	str	r5, [r4, #0]
 800694e:	e7db      	b.n	8006908 <_malloc_r+0x64>
 8006950:	20000090 	.word	0x20000090
 8006954:	20000094 	.word	0x20000094

08006958 <__sfputc_r>:
 8006958:	6893      	ldr	r3, [r2, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	b410      	push	{r4}
 8006960:	6093      	str	r3, [r2, #8]
 8006962:	da08      	bge.n	8006976 <__sfputc_r+0x1e>
 8006964:	6994      	ldr	r4, [r2, #24]
 8006966:	42a3      	cmp	r3, r4
 8006968:	db01      	blt.n	800696e <__sfputc_r+0x16>
 800696a:	290a      	cmp	r1, #10
 800696c:	d103      	bne.n	8006976 <__sfputc_r+0x1e>
 800696e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006972:	f7ff bcab 	b.w	80062cc <__swbuf_r>
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	1c58      	adds	r0, r3, #1
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	7019      	strb	r1, [r3, #0]
 800697e:	4608      	mov	r0, r1
 8006980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006984:	4770      	bx	lr

08006986 <__sfputs_r>:
 8006986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4614      	mov	r4, r2
 800698e:	18d5      	adds	r5, r2, r3
 8006990:	42ac      	cmp	r4, r5
 8006992:	d101      	bne.n	8006998 <__sfputs_r+0x12>
 8006994:	2000      	movs	r0, #0
 8006996:	e007      	b.n	80069a8 <__sfputs_r+0x22>
 8006998:	463a      	mov	r2, r7
 800699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ffda 	bl	8006958 <__sfputc_r>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d1f3      	bne.n	8006990 <__sfputs_r+0xa>
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ac <_vfiprintf_r>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460c      	mov	r4, r1
 80069b2:	b09d      	sub	sp, #116	; 0x74
 80069b4:	4617      	mov	r7, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	4606      	mov	r6, r0
 80069ba:	b118      	cbz	r0, 80069c4 <_vfiprintf_r+0x18>
 80069bc:	6983      	ldr	r3, [r0, #24]
 80069be:	b90b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x18>
 80069c0:	f7ff fe34 	bl	800662c <__sinit>
 80069c4:	4b7c      	ldr	r3, [pc, #496]	; (8006bb8 <_vfiprintf_r+0x20c>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d158      	bne.n	8006a7c <_vfiprintf_r+0xd0>
 80069ca:	6874      	ldr	r4, [r6, #4]
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	0718      	lsls	r0, r3, #28
 80069d0:	d55e      	bpl.n	8006a90 <_vfiprintf_r+0xe4>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d05b      	beq.n	8006a90 <_vfiprintf_r+0xe4>
 80069d8:	2300      	movs	r3, #0
 80069da:	9309      	str	r3, [sp, #36]	; 0x24
 80069dc:	2320      	movs	r3, #32
 80069de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e2:	2330      	movs	r3, #48	; 0x30
 80069e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069e8:	9503      	str	r5, [sp, #12]
 80069ea:	f04f 0b01 	mov.w	fp, #1
 80069ee:	46b8      	mov	r8, r7
 80069f0:	4645      	mov	r5, r8
 80069f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069f6:	b10b      	cbz	r3, 80069fc <_vfiprintf_r+0x50>
 80069f8:	2b25      	cmp	r3, #37	; 0x25
 80069fa:	d154      	bne.n	8006aa6 <_vfiprintf_r+0xfa>
 80069fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006a00:	d00b      	beq.n	8006a1a <_vfiprintf_r+0x6e>
 8006a02:	4653      	mov	r3, sl
 8006a04:	463a      	mov	r2, r7
 8006a06:	4621      	mov	r1, r4
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7ff ffbc 	bl	8006986 <__sfputs_r>
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f000 80c2 	beq.w	8006b98 <_vfiprintf_r+0x1ec>
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	4453      	add	r3, sl
 8006a18:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1a:	f898 3000 	ldrb.w	r3, [r8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80ba 	beq.w	8006b98 <_vfiprintf_r+0x1ec>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9307      	str	r3, [sp, #28]
 8006a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a36:	931a      	str	r3, [sp, #104]	; 0x68
 8006a38:	46a8      	mov	r8, r5
 8006a3a:	2205      	movs	r2, #5
 8006a3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006a40:	485e      	ldr	r0, [pc, #376]	; (8006bbc <_vfiprintf_r+0x210>)
 8006a42:	f7f9 fbc5 	bl	80001d0 <memchr>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	bb78      	cbnz	r0, 8006aaa <_vfiprintf_r+0xfe>
 8006a4a:	06d9      	lsls	r1, r3, #27
 8006a4c:	bf44      	itt	mi
 8006a4e:	2220      	movmi	r2, #32
 8006a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a54:	071a      	lsls	r2, r3, #28
 8006a56:	bf44      	itt	mi
 8006a58:	222b      	movmi	r2, #43	; 0x2b
 8006a5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a5e:	782a      	ldrb	r2, [r5, #0]
 8006a60:	2a2a      	cmp	r2, #42	; 0x2a
 8006a62:	d02a      	beq.n	8006aba <_vfiprintf_r+0x10e>
 8006a64:	9a07      	ldr	r2, [sp, #28]
 8006a66:	46a8      	mov	r8, r5
 8006a68:	2000      	movs	r0, #0
 8006a6a:	250a      	movs	r5, #10
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a72:	3b30      	subs	r3, #48	; 0x30
 8006a74:	2b09      	cmp	r3, #9
 8006a76:	d969      	bls.n	8006b4c <_vfiprintf_r+0x1a0>
 8006a78:	b360      	cbz	r0, 8006ad4 <_vfiprintf_r+0x128>
 8006a7a:	e024      	b.n	8006ac6 <_vfiprintf_r+0x11a>
 8006a7c:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <_vfiprintf_r+0x214>)
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d101      	bne.n	8006a86 <_vfiprintf_r+0xda>
 8006a82:	68b4      	ldr	r4, [r6, #8]
 8006a84:	e7a2      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a86:	4b4f      	ldr	r3, [pc, #316]	; (8006bc4 <_vfiprintf_r+0x218>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	bf08      	it	eq
 8006a8c:	68f4      	ldreq	r4, [r6, #12]
 8006a8e:	e79d      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff fc6c 	bl	8006370 <__swsetup_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d09d      	beq.n	80069d8 <_vfiprintf_r+0x2c>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b01d      	add	sp, #116	; 0x74
 8006aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa6:	46a8      	mov	r8, r5
 8006aa8:	e7a2      	b.n	80069f0 <_vfiprintf_r+0x44>
 8006aaa:	4a44      	ldr	r2, [pc, #272]	; (8006bbc <_vfiprintf_r+0x210>)
 8006aac:	1a80      	subs	r0, r0, r2
 8006aae:	fa0b f000 	lsl.w	r0, fp, r0
 8006ab2:	4318      	orrs	r0, r3
 8006ab4:	9004      	str	r0, [sp, #16]
 8006ab6:	4645      	mov	r5, r8
 8006ab8:	e7be      	b.n	8006a38 <_vfiprintf_r+0x8c>
 8006aba:	9a03      	ldr	r2, [sp, #12]
 8006abc:	1d11      	adds	r1, r2, #4
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	9103      	str	r1, [sp, #12]
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	db01      	blt.n	8006aca <_vfiprintf_r+0x11e>
 8006ac6:	9207      	str	r2, [sp, #28]
 8006ac8:	e004      	b.n	8006ad4 <_vfiprintf_r+0x128>
 8006aca:	4252      	negs	r2, r2
 8006acc:	f043 0302 	orr.w	r3, r3, #2
 8006ad0:	9207      	str	r2, [sp, #28]
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	f898 3000 	ldrb.w	r3, [r8]
 8006ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8006ada:	d10e      	bne.n	8006afa <_vfiprintf_r+0x14e>
 8006adc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae2:	d138      	bne.n	8006b56 <_vfiprintf_r+0x1aa>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfb8      	it	lt
 8006af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af4:	f108 0802 	add.w	r8, r8, #2
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	4d33      	ldr	r5, [pc, #204]	; (8006bc8 <_vfiprintf_r+0x21c>)
 8006afc:	f898 1000 	ldrb.w	r1, [r8]
 8006b00:	2203      	movs	r2, #3
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fb64 	bl	80001d0 <memchr>
 8006b08:	b140      	cbz	r0, 8006b1c <_vfiprintf_r+0x170>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	4303      	orrs	r3, r0
 8006b16:	f108 0801 	add.w	r8, r8, #1
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	f898 1000 	ldrb.w	r1, [r8]
 8006b20:	482a      	ldr	r0, [pc, #168]	; (8006bcc <_vfiprintf_r+0x220>)
 8006b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b26:	2206      	movs	r2, #6
 8006b28:	f108 0701 	add.w	r7, r8, #1
 8006b2c:	f7f9 fb50 	bl	80001d0 <memchr>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d037      	beq.n	8006ba4 <_vfiprintf_r+0x1f8>
 8006b34:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <_vfiprintf_r+0x224>)
 8006b36:	bb1b      	cbnz	r3, 8006b80 <_vfiprintf_r+0x1d4>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	3307      	adds	r3, #7
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b46:	444b      	add	r3, r9
 8006b48:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4a:	e750      	b.n	80069ee <_vfiprintf_r+0x42>
 8006b4c:	fb05 3202 	mla	r2, r5, r2, r3
 8006b50:	2001      	movs	r0, #1
 8006b52:	4688      	mov	r8, r1
 8006b54:	e78a      	b.n	8006a6c <_vfiprintf_r+0xc0>
 8006b56:	2300      	movs	r3, #0
 8006b58:	f108 0801 	add.w	r8, r8, #1
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	250a      	movs	r5, #10
 8006b62:	4640      	mov	r0, r8
 8006b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b68:	3a30      	subs	r2, #48	; 0x30
 8006b6a:	2a09      	cmp	r2, #9
 8006b6c:	d903      	bls.n	8006b76 <_vfiprintf_r+0x1ca>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c3      	beq.n	8006afa <_vfiprintf_r+0x14e>
 8006b72:	9105      	str	r1, [sp, #20]
 8006b74:	e7c1      	b.n	8006afa <_vfiprintf_r+0x14e>
 8006b76:	fb05 2101 	mla	r1, r5, r1, r2
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	e7f0      	b.n	8006b62 <_vfiprintf_r+0x1b6>
 8006b80:	ab03      	add	r3, sp, #12
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4622      	mov	r2, r4
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <_vfiprintf_r+0x228>)
 8006b88:	a904      	add	r1, sp, #16
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f3af 8000 	nop.w
 8006b90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b94:	4681      	mov	r9, r0
 8006b96:	d1d5      	bne.n	8006b44 <_vfiprintf_r+0x198>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	065b      	lsls	r3, r3, #25
 8006b9c:	f53f af7e 	bmi.w	8006a9c <_vfiprintf_r+0xf0>
 8006ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba2:	e77d      	b.n	8006aa0 <_vfiprintf_r+0xf4>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4622      	mov	r2, r4
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <_vfiprintf_r+0x228>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f000 f888 	bl	8006cc4 <_printf_i>
 8006bb4:	e7ec      	b.n	8006b90 <_vfiprintf_r+0x1e4>
 8006bb6:	bf00      	nop
 8006bb8:	080071d4 	.word	0x080071d4
 8006bbc:	08007214 	.word	0x08007214
 8006bc0:	080071f4 	.word	0x080071f4
 8006bc4:	080071b4 	.word	0x080071b4
 8006bc8:	0800721a 	.word	0x0800721a
 8006bcc:	0800721e 	.word	0x0800721e
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	08006987 	.word	0x08006987

08006bd8 <_printf_common>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	4691      	mov	r9, r2
 8006bde:	461f      	mov	r7, r3
 8006be0:	688a      	ldr	r2, [r1, #8]
 8006be2:	690b      	ldr	r3, [r1, #16]
 8006be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bfb8      	it	lt
 8006bec:	4613      	movlt	r3, r2
 8006bee:	f8c9 3000 	str.w	r3, [r9]
 8006bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	b112      	cbz	r2, 8006c02 <_printf_common+0x2a>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c9 3000 	str.w	r3, [r9]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c0c:	3302      	addmi	r3, #2
 8006c0e:	f8c9 3000 	strmi.w	r3, [r9]
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	f015 0506 	ands.w	r5, r5, #6
 8006c18:	d107      	bne.n	8006c2a <_printf_common+0x52>
 8006c1a:	f104 0a19 	add.w	sl, r4, #25
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	f8d9 2000 	ldr.w	r2, [r9]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	42ab      	cmp	r3, r5
 8006c28:	dc28      	bgt.n	8006c7c <_printf_common+0xa4>
 8006c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	3300      	adds	r3, #0
 8006c32:	bf18      	it	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	0692      	lsls	r2, r2, #26
 8006c38:	d42d      	bmi.n	8006c96 <_printf_common+0xbe>
 8006c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4630      	mov	r0, r6
 8006c42:	47c0      	blx	r8
 8006c44:	3001      	adds	r0, #1
 8006c46:	d020      	beq.n	8006c8a <_printf_common+0xb2>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	68e5      	ldr	r5, [r4, #12]
 8006c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c50:	f003 0306 	and.w	r3, r3, #6
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	bf08      	it	eq
 8006c58:	1aad      	subeq	r5, r5, r2
 8006c5a:	68a3      	ldr	r3, [r4, #8]
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	bf0c      	ite	eq
 8006c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c64:	2500      	movne	r5, #0
 8006c66:	4293      	cmp	r3, r2
 8006c68:	bfc4      	itt	gt
 8006c6a:	1a9b      	subgt	r3, r3, r2
 8006c6c:	18ed      	addgt	r5, r5, r3
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	341a      	adds	r4, #26
 8006c74:	454d      	cmp	r5, r9
 8006c76:	d11a      	bne.n	8006cae <_printf_common+0xd6>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e008      	b.n	8006c8e <_printf_common+0xb6>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4639      	mov	r1, r7
 8006c82:	4630      	mov	r0, r6
 8006c84:	47c0      	blx	r8
 8006c86:	3001      	adds	r0, #1
 8006c88:	d103      	bne.n	8006c92 <_printf_common+0xba>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	3501      	adds	r5, #1
 8006c94:	e7c3      	b.n	8006c1e <_printf_common+0x46>
 8006c96:	18e1      	adds	r1, r4, r3
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	2030      	movs	r0, #48	; 0x30
 8006c9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ca0:	4422      	add	r2, r4
 8006ca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006caa:	3302      	adds	r3, #2
 8006cac:	e7c5      	b.n	8006c3a <_printf_common+0x62>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	47c0      	blx	r8
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d0e6      	beq.n	8006c8a <_printf_common+0xb2>
 8006cbc:	f109 0901 	add.w	r9, r9, #1
 8006cc0:	e7d8      	b.n	8006c74 <_printf_common+0x9c>
	...

08006cc4 <_printf_i>:
 8006cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ccc:	460c      	mov	r4, r1
 8006cce:	7e09      	ldrb	r1, [r1, #24]
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	296e      	cmp	r1, #110	; 0x6e
 8006cd4:	4617      	mov	r7, r2
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	4698      	mov	r8, r3
 8006cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cdc:	f000 80b3 	beq.w	8006e46 <_printf_i+0x182>
 8006ce0:	d822      	bhi.n	8006d28 <_printf_i+0x64>
 8006ce2:	2963      	cmp	r1, #99	; 0x63
 8006ce4:	d036      	beq.n	8006d54 <_printf_i+0x90>
 8006ce6:	d80a      	bhi.n	8006cfe <_printf_i+0x3a>
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	f000 80b9 	beq.w	8006e60 <_printf_i+0x19c>
 8006cee:	2958      	cmp	r1, #88	; 0x58
 8006cf0:	f000 8083 	beq.w	8006dfa <_printf_i+0x136>
 8006cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cfc:	e032      	b.n	8006d64 <_printf_i+0xa0>
 8006cfe:	2964      	cmp	r1, #100	; 0x64
 8006d00:	d001      	beq.n	8006d06 <_printf_i+0x42>
 8006d02:	2969      	cmp	r1, #105	; 0x69
 8006d04:	d1f6      	bne.n	8006cf4 <_printf_i+0x30>
 8006d06:	6820      	ldr	r0, [r4, #0]
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	0605      	lsls	r5, r0, #24
 8006d0c:	f103 0104 	add.w	r1, r3, #4
 8006d10:	d52a      	bpl.n	8006d68 <_printf_i+0xa4>
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da03      	bge.n	8006d22 <_printf_i+0x5e>
 8006d1a:	222d      	movs	r2, #45	; 0x2d
 8006d1c:	425b      	negs	r3, r3
 8006d1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d22:	486f      	ldr	r0, [pc, #444]	; (8006ee0 <_printf_i+0x21c>)
 8006d24:	220a      	movs	r2, #10
 8006d26:	e039      	b.n	8006d9c <_printf_i+0xd8>
 8006d28:	2973      	cmp	r1, #115	; 0x73
 8006d2a:	f000 809d 	beq.w	8006e68 <_printf_i+0x1a4>
 8006d2e:	d808      	bhi.n	8006d42 <_printf_i+0x7e>
 8006d30:	296f      	cmp	r1, #111	; 0x6f
 8006d32:	d020      	beq.n	8006d76 <_printf_i+0xb2>
 8006d34:	2970      	cmp	r1, #112	; 0x70
 8006d36:	d1dd      	bne.n	8006cf4 <_printf_i+0x30>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f043 0320 	orr.w	r3, r3, #32
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	e003      	b.n	8006d4a <_printf_i+0x86>
 8006d42:	2975      	cmp	r1, #117	; 0x75
 8006d44:	d017      	beq.n	8006d76 <_printf_i+0xb2>
 8006d46:	2978      	cmp	r1, #120	; 0x78
 8006d48:	d1d4      	bne.n	8006cf4 <_printf_i+0x30>
 8006d4a:	2378      	movs	r3, #120	; 0x78
 8006d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d50:	4864      	ldr	r0, [pc, #400]	; (8006ee4 <_printf_i+0x220>)
 8006d52:	e055      	b.n	8006e00 <_printf_i+0x13c>
 8006d54:	6813      	ldr	r3, [r2, #0]
 8006d56:	1d19      	adds	r1, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6011      	str	r1, [r2, #0]
 8006d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d64:	2301      	movs	r3, #1
 8006d66:	e08c      	b.n	8006e82 <_printf_i+0x1be>
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6011      	str	r1, [r2, #0]
 8006d6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d70:	bf18      	it	ne
 8006d72:	b21b      	sxthne	r3, r3
 8006d74:	e7cf      	b.n	8006d16 <_printf_i+0x52>
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	6825      	ldr	r5, [r4, #0]
 8006d7a:	1d18      	adds	r0, r3, #4
 8006d7c:	6010      	str	r0, [r2, #0]
 8006d7e:	0628      	lsls	r0, r5, #24
 8006d80:	d501      	bpl.n	8006d86 <_printf_i+0xc2>
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	e002      	b.n	8006d8c <_printf_i+0xc8>
 8006d86:	0668      	lsls	r0, r5, #25
 8006d88:	d5fb      	bpl.n	8006d82 <_printf_i+0xbe>
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	4854      	ldr	r0, [pc, #336]	; (8006ee0 <_printf_i+0x21c>)
 8006d8e:	296f      	cmp	r1, #111	; 0x6f
 8006d90:	bf14      	ite	ne
 8006d92:	220a      	movne	r2, #10
 8006d94:	2208      	moveq	r2, #8
 8006d96:	2100      	movs	r1, #0
 8006d98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9c:	6865      	ldr	r5, [r4, #4]
 8006d9e:	60a5      	str	r5, [r4, #8]
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	f2c0 8095 	blt.w	8006ed0 <_printf_i+0x20c>
 8006da6:	6821      	ldr	r1, [r4, #0]
 8006da8:	f021 0104 	bic.w	r1, r1, #4
 8006dac:	6021      	str	r1, [r4, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d13d      	bne.n	8006e2e <_printf_i+0x16a>
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	f040 808e 	bne.w	8006ed4 <_printf_i+0x210>
 8006db8:	4665      	mov	r5, ip
 8006dba:	2a08      	cmp	r2, #8
 8006dbc:	d10b      	bne.n	8006dd6 <_printf_i+0x112>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d508      	bpl.n	8006dd6 <_printf_i+0x112>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	bfde      	ittt	le
 8006dcc:	2330      	movle	r3, #48	; 0x30
 8006dce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dd6:	ebac 0305 	sub.w	r3, ip, r5
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	f8cd 8000 	str.w	r8, [sp]
 8006de0:	463b      	mov	r3, r7
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	4621      	mov	r1, r4
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff fef6 	bl	8006bd8 <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d14d      	bne.n	8006e8c <_printf_i+0x1c8>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b005      	add	sp, #20
 8006df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	4839      	ldr	r0, [pc, #228]	; (8006ee0 <_printf_i+0x21c>)
 8006dfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	6821      	ldr	r1, [r4, #0]
 8006e04:	1d1d      	adds	r5, r3, #4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6015      	str	r5, [r2, #0]
 8006e0a:	060a      	lsls	r2, r1, #24
 8006e0c:	d50b      	bpl.n	8006e26 <_printf_i+0x162>
 8006e0e:	07ca      	lsls	r2, r1, #31
 8006e10:	bf44      	itt	mi
 8006e12:	f041 0120 	orrmi.w	r1, r1, #32
 8006e16:	6021      	strmi	r1, [r4, #0]
 8006e18:	b91b      	cbnz	r3, 8006e22 <_printf_i+0x15e>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	f022 0220 	bic.w	r2, r2, #32
 8006e20:	6022      	str	r2, [r4, #0]
 8006e22:	2210      	movs	r2, #16
 8006e24:	e7b7      	b.n	8006d96 <_printf_i+0xd2>
 8006e26:	064d      	lsls	r5, r1, #25
 8006e28:	bf48      	it	mi
 8006e2a:	b29b      	uxthmi	r3, r3
 8006e2c:	e7ef      	b.n	8006e0e <_printf_i+0x14a>
 8006e2e:	4665      	mov	r5, ip
 8006e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e34:	fb02 3311 	mls	r3, r2, r1, r3
 8006e38:	5cc3      	ldrb	r3, [r0, r3]
 8006e3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e3e:	460b      	mov	r3, r1
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d1f5      	bne.n	8006e30 <_printf_i+0x16c>
 8006e44:	e7b9      	b.n	8006dba <_printf_i+0xf6>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	6825      	ldr	r5, [r4, #0]
 8006e4a:	6961      	ldr	r1, [r4, #20]
 8006e4c:	1d18      	adds	r0, r3, #4
 8006e4e:	6010      	str	r0, [r2, #0]
 8006e50:	0628      	lsls	r0, r5, #24
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	d501      	bpl.n	8006e5a <_printf_i+0x196>
 8006e56:	6019      	str	r1, [r3, #0]
 8006e58:	e002      	b.n	8006e60 <_printf_i+0x19c>
 8006e5a:	066a      	lsls	r2, r5, #25
 8006e5c:	d5fb      	bpl.n	8006e56 <_printf_i+0x192>
 8006e5e:	8019      	strh	r1, [r3, #0]
 8006e60:	2300      	movs	r3, #0
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	4665      	mov	r5, ip
 8006e66:	e7b9      	b.n	8006ddc <_printf_i+0x118>
 8006e68:	6813      	ldr	r3, [r2, #0]
 8006e6a:	1d19      	adds	r1, r3, #4
 8006e6c:	6011      	str	r1, [r2, #0]
 8006e6e:	681d      	ldr	r5, [r3, #0]
 8006e70:	6862      	ldr	r2, [r4, #4]
 8006e72:	2100      	movs	r1, #0
 8006e74:	4628      	mov	r0, r5
 8006e76:	f7f9 f9ab 	bl	80001d0 <memchr>
 8006e7a:	b108      	cbz	r0, 8006e80 <_printf_i+0x1bc>
 8006e7c:	1b40      	subs	r0, r0, r5
 8006e7e:	6060      	str	r0, [r4, #4]
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	6123      	str	r3, [r4, #16]
 8006e84:	2300      	movs	r3, #0
 8006e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8a:	e7a7      	b.n	8006ddc <_printf_i+0x118>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d0aa      	beq.n	8006df0 <_printf_i+0x12c>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	079b      	lsls	r3, r3, #30
 8006e9e:	d413      	bmi.n	8006ec8 <_printf_i+0x204>
 8006ea0:	68e0      	ldr	r0, [r4, #12]
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	4298      	cmp	r0, r3
 8006ea6:	bfb8      	it	lt
 8006ea8:	4618      	movlt	r0, r3
 8006eaa:	e7a3      	b.n	8006df4 <_printf_i+0x130>
 8006eac:	2301      	movs	r3, #1
 8006eae:	464a      	mov	r2, r9
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	47c0      	blx	r8
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d09a      	beq.n	8006df0 <_printf_i+0x12c>
 8006eba:	3501      	adds	r5, #1
 8006ebc:	68e3      	ldr	r3, [r4, #12]
 8006ebe:	9a03      	ldr	r2, [sp, #12]
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	42ab      	cmp	r3, r5
 8006ec4:	dcf2      	bgt.n	8006eac <_printf_i+0x1e8>
 8006ec6:	e7eb      	b.n	8006ea0 <_printf_i+0x1dc>
 8006ec8:	2500      	movs	r5, #0
 8006eca:	f104 0919 	add.w	r9, r4, #25
 8006ece:	e7f5      	b.n	8006ebc <_printf_i+0x1f8>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ac      	bne.n	8006e2e <_printf_i+0x16a>
 8006ed4:	7803      	ldrb	r3, [r0, #0]
 8006ed6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ede:	e76c      	b.n	8006dba <_printf_i+0xf6>
 8006ee0:	08007225 	.word	0x08007225
 8006ee4:	08007236 	.word	0x08007236

08006ee8 <_sbrk_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4c06      	ldr	r4, [pc, #24]	; (8006f04 <_sbrk_r+0x1c>)
 8006eec:	2300      	movs	r3, #0
 8006eee:	4605      	mov	r5, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	f7fb fb52 	bl	800259c <_sbrk>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_sbrk_r+0x1a>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_sbrk_r+0x1a>
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000650 	.word	0x20000650

08006f08 <__sread>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f10:	f000 f896 	bl	8007040 <_read_r>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	bfab      	itete	ge
 8006f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f1c:	181b      	addge	r3, r3, r0
 8006f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f22:	bfac      	ite	ge
 8006f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f26:	81a3      	strhlt	r3, [r4, #12]
 8006f28:	bd10      	pop	{r4, pc}

08006f2a <__swrite>:
 8006f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2e:	461f      	mov	r7, r3
 8006f30:	898b      	ldrh	r3, [r1, #12]
 8006f32:	05db      	lsls	r3, r3, #23
 8006f34:	4605      	mov	r5, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	4616      	mov	r6, r2
 8006f3a:	d505      	bpl.n	8006f48 <__swrite+0x1e>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	f000 f868 	bl	8007018 <_lseek_r>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	4632      	mov	r2, r6
 8006f56:	463b      	mov	r3, r7
 8006f58:	4628      	mov	r0, r5
 8006f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	f000 b817 	b.w	8006f90 <_write_r>

08006f62 <__sseek>:
 8006f62:	b510      	push	{r4, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6a:	f000 f855 	bl	8007018 <_lseek_r>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	bf15      	itete	ne
 8006f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f7e:	81a3      	strheq	r3, [r4, #12]
 8006f80:	bf18      	it	ne
 8006f82:	81a3      	strhne	r3, [r4, #12]
 8006f84:	bd10      	pop	{r4, pc}

08006f86 <__sclose>:
 8006f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8a:	f000 b813 	b.w	8006fb4 <_close_r>
	...

08006f90 <_write_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4c07      	ldr	r4, [pc, #28]	; (8006fb0 <_write_r+0x20>)
 8006f94:	4605      	mov	r5, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6022      	str	r2, [r4, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fb faab 	bl	80024fa <_write>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_write_r+0x1e>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_write_r+0x1e>
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20000650 	.word	0x20000650

08006fb4 <_close_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4c06      	ldr	r4, [pc, #24]	; (8006fd0 <_close_r+0x1c>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4605      	mov	r5, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	f7fb fab7 	bl	8002532 <_close>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_close_r+0x1a>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_close_r+0x1a>
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20000650 	.word	0x20000650

08006fd4 <_fstat_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4c07      	ldr	r4, [pc, #28]	; (8006ff4 <_fstat_r+0x20>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	f7fb fab2 	bl	800254a <_fstat>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d102      	bne.n	8006ff0 <_fstat_r+0x1c>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	b103      	cbz	r3, 8006ff0 <_fstat_r+0x1c>
 8006fee:	602b      	str	r3, [r5, #0]
 8006ff0:	bd38      	pop	{r3, r4, r5, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000650 	.word	0x20000650

08006ff8 <_isatty_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4c06      	ldr	r4, [pc, #24]	; (8007014 <_isatty_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4605      	mov	r5, r0
 8007000:	4608      	mov	r0, r1
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	f7fb fab1 	bl	800256a <_isatty>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_isatty_r+0x1a>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	b103      	cbz	r3, 8007012 <_isatty_r+0x1a>
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20000650 	.word	0x20000650

08007018 <_lseek_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4c07      	ldr	r4, [pc, #28]	; (8007038 <_lseek_r+0x20>)
 800701c:	4605      	mov	r5, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	6022      	str	r2, [r4, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fb faaa 	bl	8002580 <_lseek>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_lseek_r+0x1e>
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	b103      	cbz	r3, 8007036 <_lseek_r+0x1e>
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20000650 	.word	0x20000650

0800703c <__malloc_lock>:
 800703c:	4770      	bx	lr

0800703e <__malloc_unlock>:
 800703e:	4770      	bx	lr

08007040 <_read_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4c07      	ldr	r4, [pc, #28]	; (8007060 <_read_r+0x20>)
 8007044:	4605      	mov	r5, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	6022      	str	r2, [r4, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb fa36 	bl	80024c0 <_read>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_read_r+0x1e>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	b103      	cbz	r3, 800705e <_read_r+0x1e>
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000650 	.word	0x20000650

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
