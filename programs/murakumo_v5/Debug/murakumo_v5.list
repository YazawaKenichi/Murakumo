
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e0c  08008e0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008e0c  08008e0c  00018e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e14  08008e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000070  08008e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  08008e8c  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014300  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a22  00000000  00000000  000343a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021d23  00000000  00000000  00039578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef9f  00000000  00000000  0005b29b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9f3a  00000000  00000000  0006a23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb4  00000000  00000000  001341f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a80 	.word	0x08008a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008a80 	.word	0x08008a80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <read_byte>:

volatile Inertial inertial;
volatile Inertial inertial_offset;

uint8_t read_byte( uint8_t reg )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <read_byte+0x54>)
 800058c:	f004 fbae 	bl	8004cec <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8000590:	f107 010f 	add.w	r1, r7, #15
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <read_byte+0x58>)
 800059a:	f005 f9bd 	bl	8005918 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800059e:	f107 010e 	add.w	r1, r7, #14
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	2201      	movs	r2, #1
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <read_byte+0x58>)
 80005a8:	f005 faea 	bl	8005b80 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <read_byte+0x54>)
 80005b4:	f004 fb9a 	bl	8004cec <HAL_GPIO_WritePin>
#endif

	return val;
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400
 80005c8:	200000d0 	.word	0x200000d0

080005cc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <write_byte+0x54>)
 80005ee:	f004 fb7d 	bl	8004cec <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	2201      	movs	r2, #1
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <write_byte+0x58>)
 80005fc:	f005 f98c 	bl	8005918 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8000600:	1db9      	adds	r1, r7, #6
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	2201      	movs	r2, #1
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <write_byte+0x58>)
 8000608:	f005 f986 	bl	8005918 <HAL_SPI_Transmit>
#if USE_NCS
	CS_SET;
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <write_byte+0x54>)
 8000614:	f004 fb6a 	bl	8004cec <HAL_GPIO_WritePin>
#endif
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400
 8000624:	200000d0 	.word	0x200000d0

08000628 <IMU_init>:

uint8_t IMU_init(uint8_t* wai)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4829      	ldr	r0, [pc, #164]	; (80006dc <IMU_init+0xb4>)
 8000638:	f004 fb58 	bl	8004cec <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]

	inertial.accel.x = 0;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <IMU_init+0xb8>)
 8000642:	2200      	movs	r2, #0
 8000644:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = 0;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <IMU_init+0xb8>)
 8000648:	2200      	movs	r2, #0
 800064a:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = 0;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <IMU_init+0xb8>)
 800064e:	2200      	movs	r2, #0
 8000650:	809a      	strh	r2, [r3, #4]
	inertial.gyro = inertial.accel;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <IMU_init+0xb8>)
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <IMU_init+0xb8>)
 8000656:	3306      	adds	r3, #6
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	6019      	str	r1, [r3, #0]
 800065c:	8892      	ldrh	r2, [r2, #4]
 800065e:	809a      	strh	r2, [r3, #4]
	inertial_offset = inertial;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <IMU_init+0xbc>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <IMU_init+0xb8>)
 8000664:	6810      	ldr	r0, [r2, #0]
 8000666:	6851      	ldr	r1, [r2, #4]
 8000668:	6892      	ldr	r2, [r2, #8]
 800066a:	6018      	str	r0, [r3, #0]
 800066c:	6059      	str	r1, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
	xa = 0;
	ya = 0;
	za = 0;
	*/

	who_am_i = read_byte(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff7d 	bl	8000570 <read_byte>
 8000676:	4603      	mov	r3, r0
 8000678:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	701a      	strb	r2, [r3, #0]
	if ( who_am_i == 0xE0 )
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	2be0      	cmp	r3, #224	; 0xe0
 8000684:	d11e      	bne.n	80006c4 <IMU_init+0x9c>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
		write_byte(PWR_MGMT_1,0x01);	//PWR_MGMT_1
 800068a:	2101      	movs	r1, #1
 800068c:	2006      	movs	r0, #6
 800068e:	f7ff ff9d 	bl	80005cc <write_byte>
		HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f002 fd5c 	bl	8003150 <HAL_Delay>
		write_byte(USER_CTRL,0x10);	//USER_CTRL
 8000698:	2110      	movs	r1, #16
 800069a:	2003      	movs	r0, #3
 800069c:	f7ff ff96 	bl	80005cc <write_byte>
		write_byte(REG_BANK_SEL,0x20);	//USER_BANK2
 80006a0:	2120      	movs	r1, #32
 80006a2:	207f      	movs	r0, #127	; 0x7f
 80006a4:	f7ff ff92 	bl	80005cc <write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 80006a8:	2107      	movs	r1, #7
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ff8e 	bl	80005cc <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		write_byte(0x14,0x00);	//range±2g
 80006b0:	2100      	movs	r1, #0
 80006b2:	2014      	movs	r0, #20
 80006b4:	f7ff ff8a 	bl	80005cc <write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(REG_BANK_SEL,0x00);	//USER_BANK0
 80006b8:	2100      	movs	r1, #0
 80006ba:	207f      	movs	r0, #127	; 0x7f
 80006bc:	f7ff ff86 	bl	80005cc <write_byte>
		IMU_set_offset();
 80006c0:	f000 f812 	bl	80006e8 <IMU_set_offset>
	}
#if USE_NCS
	CS_SET;
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <IMU_init+0xb4>)
 80006cc:	f004 fb0e 	bl	8004cec <HAL_GPIO_WritePin>
#endif
	return ret;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020400 	.word	0x40020400
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	20000098 	.word	0x20000098

080006e8 <IMU_set_offset>:
	CS_SET;
#endif
}

void IMU_set_offset()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	IMU_read();
 80006ec:	f000 f80e 	bl	800070c <IMU_read>
	inertial_offset = inertial;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <IMU_set_offset+0x1c>)
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <IMU_set_offset+0x20>)
 80006f4:	6810      	ldr	r0, [r2, #0]
 80006f6:	6851      	ldr	r1, [r2, #4]
 80006f8:	6892      	ldr	r2, [r2, #8]
 80006fa:	6018      	str	r0, [r3, #0]
 80006fc:	6059      	str	r1, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	200000a4 	.word	0x200000a4

0800070c <IMU_read>:

void IMU_read()
{
 800070c:	b598      	push	{r3, r4, r7, lr}
 800070e:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)read_byte(ACCEL_XOUT_L));
 8000710:	202d      	movs	r0, #45	; 0x2d
 8000712:	f7ff ff2d 	bl	8000570 <read_byte>
 8000716:	4603      	mov	r3, r0
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b21c      	sxth	r4, r3
 800071c:	202e      	movs	r0, #46	; 0x2e
 800071e:	f7ff ff27 	bl	8000570 <read_byte>
 8000722:	4603      	mov	r3, r0
 8000724:	b21b      	sxth	r3, r3
 8000726:	4323      	orrs	r3, r4
 8000728:	b21a      	sxth	r2, r3
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <IMU_read+0xbc>)
 800072c:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)read_byte(ACCEL_YOUT_L));
 800072e:	202f      	movs	r0, #47	; 0x2f
 8000730:	f7ff ff1e 	bl	8000570 <read_byte>
 8000734:	4603      	mov	r3, r0
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21c      	sxth	r4, r3
 800073a:	2030      	movs	r0, #48	; 0x30
 800073c:	f7ff ff18 	bl	8000570 <read_byte>
 8000740:	4603      	mov	r3, r0
 8000742:	b21b      	sxth	r3, r3
 8000744:	4323      	orrs	r3, r4
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <IMU_read+0xbc>)
 800074a:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)read_byte(ACCEL_ZOUT_L));
 800074c:	2031      	movs	r0, #49	; 0x31
 800074e:	f7ff ff0f 	bl	8000570 <read_byte>
 8000752:	4603      	mov	r3, r0
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21c      	sxth	r4, r3
 8000758:	2032      	movs	r0, #50	; 0x32
 800075a:	f7ff ff09 	bl	8000570 <read_byte>
 800075e:	4603      	mov	r3, r0
 8000760:	b21b      	sxth	r3, r3
 8000762:	4323      	orrs	r3, r4
 8000764:	b21a      	sxth	r2, r3
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <IMU_read+0xbc>)
 8000768:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)read_byte(GYRO_XOUT_H) << 8) | ((int16_t)read_byte(GYRO_XOUT_L));
 800076a:	2033      	movs	r0, #51	; 0x33
 800076c:	f7ff ff00 	bl	8000570 <read_byte>
 8000770:	4603      	mov	r3, r0
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	b21c      	sxth	r4, r3
 8000776:	2034      	movs	r0, #52	; 0x34
 8000778:	f7ff fefa 	bl	8000570 <read_byte>
 800077c:	4603      	mov	r3, r0
 800077e:	b21b      	sxth	r3, r3
 8000780:	4323      	orrs	r3, r4
 8000782:	b21a      	sxth	r2, r3
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <IMU_read+0xbc>)
 8000786:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)read_byte(GYRO_YOUT_H) << 8) | ((int16_t)read_byte(GYRO_YOUT_L));
 8000788:	2035      	movs	r0, #53	; 0x35
 800078a:	f7ff fef1 	bl	8000570 <read_byte>
 800078e:	4603      	mov	r3, r0
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21c      	sxth	r4, r3
 8000794:	2036      	movs	r0, #54	; 0x36
 8000796:	f7ff feeb 	bl	8000570 <read_byte>
 800079a:	4603      	mov	r3, r0
 800079c:	b21b      	sxth	r3, r3
 800079e:	4323      	orrs	r3, r4
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <IMU_read+0xbc>)
 80007a4:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)read_byte(GYRO_ZOUT_L));
 80007a6:	2037      	movs	r0, #55	; 0x37
 80007a8:	f7ff fee2 	bl	8000570 <read_byte>
 80007ac:	4603      	mov	r3, r0
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	b21c      	sxth	r4, r3
 80007b2:	2038      	movs	r0, #56	; 0x38
 80007b4:	f7ff fedc 	bl	8000570 <read_byte>
 80007b8:	4603      	mov	r3, r0
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4323      	orrs	r3, r4
 80007be:	b21a      	sxth	r2, r3
 80007c0:	4b01      	ldr	r3, [pc, #4]	; (80007c8 <IMU_read+0xbc>)
 80007c2:	815a      	strh	r2, [r3, #10]
}
 80007c4:	bf00      	nop
 80007c6:	bd98      	pop	{r3, r4, r7, pc}
 80007c8:	200000a4 	.word	0x200000a4

080007cc <HAL_TIM_PeriodElapsedCallback>:
void loadFlash(uint32_t, uint8_t*, uint32_t);
#endif
void d_print();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a96      	ldr	r2, [pc, #600]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	f040 8168 	bne.w	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
	{
#if USE_MOTOR
		if(motorenable)
 80007e0:	4b95      	ldr	r3, [pc, #596]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 8153 	beq.w	8000a90 <HAL_TIM_PeriodElapsedCallback+0x2c4>
		{
#if !STATICMOTORPWM
			analogl = 0;
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 80007f0:	4b93      	ldr	r3, [pc, #588]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e059      	b.n	80008b0 <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				uint16_t analogbuf = analog[i];
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	4a91      	ldr	r2, [pc, #580]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000804:	81bb      	strh	r3, [r7, #12]
				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
				if(analogmax[i] < analogbuf)
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4a8f      	ldr	r2, [pc, #572]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800080a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080e:	89ba      	ldrh	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d904      	bls.n	800081e <HAL_TIM_PeriodElapsedCallback+0x52>
				{
					analogmax[i] = analogbuf;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	498c      	ldr	r1, [pc, #560]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000818:	89ba      	ldrh	r2, [r7, #12]
 800081a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if(analogmin[i] > analogbuf)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4a8a      	ldr	r2, [pc, #552]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000826:	89ba      	ldrh	r2, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d204      	bcs.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x6a>
				{
					analogmin[i] = analogbuf;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4987      	ldr	r1, [pc, #540]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000830:	89ba      	ldrh	r2, [r7, #12]
 8000832:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4a82      	ldr	r2, [pc, #520]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800083a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083e:	4619      	mov	r1, r3
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	4a82      	ldr	r2, [pc, #520]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000848:	1acb      	subs	r3, r1, r3
 800084a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084e:	fb02 f203 	mul.w	r2, r2, r3
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	497c      	ldr	r1, [pc, #496]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000856:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800085a:	4618      	mov	r0, r3
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	497b      	ldr	r1, [pc, #492]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000864:	1ac3      	subs	r3, r0, r3
 8000866:	fb92 f2f3 	sdiv	r2, r2, r3
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	b291      	uxth	r1, r2
 800086e:	4a78      	ldr	r2, [pc, #480]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if(i % 2 == 0)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10a      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0xca>
				{
				  analogl += analograte[i];
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	4a73      	ldr	r2, [pc, #460]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000884:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000888:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b6a      	ldr	r3, [pc, #424]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000892:	801a      	strh	r2, [r3, #0]
 8000894:	e009      	b.n	80008aa <HAL_TIM_PeriodElapsedCallback+0xde>
				}
				else
				{
				  analogr += analograte[i];
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	4a6d      	ldr	r2, [pc, #436]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800089a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800089e:	4b68      	ldr	r3, [pc, #416]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80008a8:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2b0b      	cmp	r3, #11
 80008b4:	d9a2      	bls.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x30>
				}
			}
			switch(rotary_value)
 80008b6:	4b67      	ldr	r3, [pc, #412]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	2b0d      	cmp	r3, #13
 80008be:	d833      	bhi.n	8000928 <HAL_TIM_PeriodElapsedCallback+0x15c>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	08000931 	.word	0x08000931
 80008cc:	08000901 	.word	0x08000901
 80008d0:	08000915 	.word	0x08000915
 80008d4:	08000929 	.word	0x08000929
 80008d8:	08000929 	.word	0x08000929
 80008dc:	08000929 	.word	0x08000929
 80008e0:	08000929 	.word	0x08000929
 80008e4:	08000929 	.word	0x08000929
 80008e8:	08000929 	.word	0x08000929
 80008ec:	08000929 	.word	0x08000929
 80008f0:	08000929 	.word	0x08000929
 80008f4:	08000929 	.word	0x08000929
 80008f8:	08000929 	.word	0x08000929
 80008fc:	08000931 	.word	0x08000931
			{
				case 0x1:
					break;
				case 0x2:
					commonspeed = flash_buffer.common_speed2[course_state_time];
 8000900:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4a55      	ldr	r2, [pc, #340]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000906:	3340      	adds	r3, #64	; 0x40
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000910:	801a      	strh	r2, [r3, #0]
					break;
 8000912:	e00e      	b.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x166>
				case 0x3:
					commonspeed = flash_buffer.common_speed3[course_state_time];
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x290>)
 800091a:	33c0      	adds	r3, #192	; 0xc0
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000924:	801a      	strh	r2, [r3, #0]
					break;
 8000926:	e004      	b.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x166>
				case 0xE:
					break;
				default:
					commonspeed = 0;
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]
					break;
 800092e:	e000      	b.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x166>
					break;
 8000930:	bf00      	nop
			}
			direction = (analogl - analogr);	// difference
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	4a49      	ldr	r2, [pc, #292]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000940:	6013      	str	r3, [r2, #0]
			leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * kpl - (direction - beforedirection) * kdl;
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a46      	ldr	r2, [pc, #280]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800094e:	fb82 0203 	smull	r0, r2, r2, r3
 8000952:	1092      	asrs	r2, r2, #2
 8000954:	17db      	asrs	r3, r3, #31
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	4a44      	ldr	r2, [pc, #272]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	1aca      	subs	r2, r1, r3
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000964:	6819      	ldr	r1, [r3, #0]
 8000966:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1acb      	subs	r3, r1, r3
 800096c:	4941      	ldr	r1, [pc, #260]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800096e:	7809      	ldrb	r1, [r1, #0]
 8000970:	fb01 f303 	mul.w	r3, r1, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000978:	6013      	str	r3, [r2, #0]
			rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * kpr + (direction - beforedirection) * kdr;
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000986:	fb82 0203 	smull	r0, r2, r2, r3
 800098a:	1092      	asrs	r2, r2, #2
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4a3a      	ldr	r2, [pc, #232]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	18ca      	adds	r2, r1, r3
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800099c:	6819      	ldr	r1, [r3, #0]
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	1acb      	subs	r3, r1, r3
 80009a4:	4936      	ldr	r1, [pc, #216]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009a6:	7809      	ldrb	r1, [r1, #0]
 80009a8:	fb01 f303 	mul.w	r3, r1, r3
 80009ac:	4413      	add	r3, r2
 80009ae:	4a35      	ldr	r2, [pc, #212]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009b0:	6013      	str	r3, [r2, #0]
			beforedirection = direction;
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009b8:	6013      	str	r3, [r2, #0]
#else	// !STATICMOTORPWM
			leftmotor = -COMMONSPEED;
			rightmotor = COMMONSPEED;
#endif	// !STATICMOTORPWM
			if(leftmotor < 0)
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da0a      	bge.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0x20c>
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2104      	movs	r1, #4
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009c8:	f004 f990 	bl	8004cec <HAL_GPIO_WritePin>
			  leftmotor *= -1;
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	425b      	negs	r3, r3
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e004      	b.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x216>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2104      	movs	r1, #4
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009de:	f004 f985 	bl	8004cec <HAL_GPIO_WritePin>
			}
			if(rightmotor < 0)
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da0b      	bge.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x236>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009f2:	f004 f97b 	bl	8004cec <HAL_GPIO_WritePin>
			  rightmotor *= -1;
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	425b      	negs	r3, r3
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e005      	b.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x242>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	4820      	ldr	r0, [pc, #128]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a0a:	f004 f96f 	bl	8004cec <HAL_GPIO_WritePin>
			}
			leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a16:	bfa8      	it	ge
 8000a18:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a1e:	6013      	str	r3, [r2, #0]
			rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a28:	bfa8      	it	ge
 8000a2a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e033      	b.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8000a34:	40001000 	.word	0x40001000
 8000a38:	200009c8 	.word	0x200009c8
 8000a3c:	20000256 	.word	0x20000256
 8000a40:	200009ca 	.word	0x200009ca
 8000a44:	200000b8 	.word	0x200000b8
 8000a48:	20000ae8 	.word	0x20000ae8
 8000a4c:	2000023c 	.word	0x2000023c
 8000a50:	2000037c 	.word	0x2000037c
 8000a54:	20000254 	.word	0x20000254
 8000a58:	20000b49 	.word	0x20000b49
 8000a5c:	20000480 	.word	0x20000480
 8000a60:	2000025e 	.word	0x2000025e
 8000a64:	200002a8 	.word	0x200002a8
 8000a68:	2aaaaaab 	.word	0x2aaaaaab
 8000a6c:	2000047c 	.word	0x2000047c
 8000a70:	20000b44 	.word	0x20000b44
 8000a74:	20000227 	.word	0x20000227
 8000a78:	20000234 	.word	0x20000234
 8000a7c:	20000b03 	.word	0x20000b03
 8000a80:	20000238 	.word	0x20000238
 8000a84:	20000228 	.word	0x20000228
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020800 	.word	0x40020800
		}
		else
		{
			leftmotor = 0;
 8000a90:	4b9a      	ldr	r3, [pc, #616]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
			rightmotor = 0;
 8000a96:	4b9a      	ldr	r3, [pc, #616]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		}

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8000a9c:	4b97      	ldr	r3, [pc, #604]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b98      	ldr	r3, [pc, #608]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8000aa6:	4b96      	ldr	r3, [pc, #600]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b96      	ldr	r3, [pc, #600]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	639a      	str	r2, [r3, #56]	; 0x38
			pwmsteptime = (pwmstepud == 255) ? pwmsteptime - 1 : pwmsteptime + 1;
		}
#endif	// D_PWM
#endif
	}	// TIM6
	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a94      	ldr	r2, [pc, #592]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	f040 80f4 	bne.w	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x4d8>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 8000abc:	2104      	movs	r1, #4
 8000abe:	4893      	ldr	r0, [pc, #588]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000ac0:	f004 f8fc 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	72fb      	strb	r3, [r7, #11]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 8000ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad6:	488d      	ldr	r0, [pc, #564]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000ad8:	f004 f8f0 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x31a>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e000      	b.n	8000ae8 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	4413      	add	r3, r2
 8000aee:	72fb      	strb	r3, [r7, #11]

		if(subsens != subsensbuf)
 8000af0:	4b87      	ldr	r3, [pc, #540]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	7afa      	ldrb	r2, [r7, #11]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d062      	beq.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>
		{
			subsensbuf = subsens;
 8000afa:	4a85      	ldr	r2, [pc, #532]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000afc:	7afb      	ldrb	r3, [r7, #11]
 8000afe:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 8000b00:	7afa      	ldrb	r2, [r7, #11]
 8000b02:	4b84      	ldr	r3, [pc, #528]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b82      	ldr	r3, [pc, #520]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b80      	ldr	r3, [pc, #512]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000b18:	701a      	strb	r2, [r3, #0]
			if(subsens == 0b00 && sidedeltacount != 0)
 8000b1a:	7afb      	ldrb	r3, [r7, #11]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d149      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x3e8>
 8000b20:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d045      	beq.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x3e8>
			{
				first = (marker & 0b0011);
 8000b28:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	72bb      	strb	r3, [r7, #10]
				second = (marker & 0b1100) >> 2;
 8000b32:	4b79      	ldr	r3, [pc, #484]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	109b      	asrs	r3, r3, #2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	727b      	strb	r3, [r7, #9]
				if(second == 0b00)
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d129      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x3ce>
				{
					if(first == 0b01)
 8000b46:	7abb      	ldrb	r3, [r7, #10]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10d      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x39c>
					{
						// right -> stop
						markerstate = 0b01;
 8000b4c:	4b73      	ldr	r3, [pc, #460]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
						if(rightmarkercount == 0)
 8000b52:	4b73      	ldr	r3, [pc, #460]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d122      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
						{
							rightmarkercount++;
 8000b5a:	4b71      	ldr	r3, [pc, #452]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b6f      	ldr	r3, [pc, #444]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e01b      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
						}
						else if(rightmarkercount == 1)
						{
						}
					}
					else if(first == 0b10)
 8000b68:	7abb      	ldrb	r3, [r7, #10]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d111      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x3c6>
					{
						// left -> curve
						markerstate = 0b10;
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
						course_state_time++;
 8000b74:	4b6b      	ldr	r3, [pc, #428]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b69      	ldr	r3, [pc, #420]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000b7e:	701a      	strb	r2, [r3, #0]
						if(course_state_time >= ENC_SIZE)
 8000b80:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da0a      	bge.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
						{
							motorenable = 0;
 8000b8a:	4b67      	ldr	r3, [pc, #412]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e006      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
#endif
					}
					else
					{
						// cross
						markerstate = 0b11;
 8000b92:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e002      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
					}
				}
				else
				{
					// cross
					markerstate = 0b11;
 8000b9a:	4b60      	ldr	r3, [pc, #384]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 8000ba0:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
				marker = 0;
 8000ba6:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e005      	b.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x3f4>
			}
			else
			{
				sidedeltacount++;
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b55      	ldr	r3, [pc, #340]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000bbe:	701a      	strb	r2, [r3, #0]
			}
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 8000bc0:	213c      	movs	r1, #60	; 0x3c
 8000bc2:	485a      	ldr	r0, [pc, #360]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000bc4:	f005 fd9d 	bl	8006702 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 8000bc8:	213c      	movs	r1, #60	; 0x3c
 8000bca:	4859      	ldr	r0, [pc, #356]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000bcc:	f005 fd99 	bl	8006702 <HAL_TIM_Encoder_Stop>

		encl_row = TIM1->CNT;
 8000bd0:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000bd8:	801a      	strh	r2, [r3, #0]
		encr_row = 65535 - TIM3->CNT;
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000be6:	801a      	strh	r2, [r3, #0]

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 8000be8:	213c      	movs	r1, #60	; 0x3c
 8000bea:	4850      	ldr	r0, [pc, #320]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000bec:	f005 fd52 	bl	8006694 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 8000bf0:	213c      	movs	r1, #60	; 0x3c
 8000bf2:	484f      	ldr	r0, [pc, #316]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000bf4:	f005 fd4e 	bl	8006694 <HAL_TIM_Encoder_Start>

		if(encl_row < encl)
 8000bf8:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d208      	bcs.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x44a>
		{
			dencl = encl_row + 65536 - encl;
 8000c04:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000c12:	801a      	strh	r2, [r3, #0]
 8000c14:	e007      	b.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x45a>
		}
		else
		{
			dencl = encl_row - encl;
 8000c16:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000c24:	801a      	strh	r2, [r3, #0]
		}
		if(encr_row < encr)
 8000c26:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d208      	bcs.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x478>
		{
			dencr = encr_row + 65536 - encr;
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000c40:	801a      	strh	r2, [r3, #0]
 8000c42:	e007      	b.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x488>
		}
		else
		{
			dencr = encr_row - encr;
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000c52:	801a      	strh	r2, [r3, #0]
		}

		encl = encl_row;
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000c5a:	801a      	strh	r2, [r3, #0]
		encr = encr_row;
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000c62:	801a      	strh	r2, [r3, #0]

#if USE_FLASH
		flash_buffer.sencl[course_state_time] += dencl;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000c6c:	5c9a      	ldrb	r2, [r3, r2]
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	492b      	ldr	r1, [pc, #172]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000c76:	7809      	ldrb	r1, [r1, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000c7e:	545a      	strb	r2, [r3, r1]
		flash_buffer.sencr[course_state_time] += dencr;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000c88:	4413      	add	r3, r2
 8000c8a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4923      	ldr	r1, [pc, #140]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000c96:	7809      	ldrb	r1, [r1, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		velocityr = lengthr / ENCODERPERIOD / 1000;
		*/
#endif	// USE_ENCODER
	}	// TIM10

	if(htim->Instance == TIM11)	// TIM11 // 1ms
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f040 8097 	bne.w	8000dde <HAL_TIM_PeriodElapsedCallback+0x612>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	4829      	ldr	r0, [pc, #164]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000cb6:	f004 f801 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf0c      	ite	eq
 8000cc0:	2301      	moveq	r3, #1
 8000cc2:	2300      	movne	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x590>)
 8000cce:	f003 fff5 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x510>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e000      	b.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x512>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8000ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cea:	481d      	ldr	r0, [pc, #116]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8000cec:	f003 ffe6 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d136      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x598>
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	e035      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x59a>
 8000cfa:	bf00      	nop
 8000cfc:	20000234 	.word	0x20000234
 8000d00:	20000228 	.word	0x20000228
 8000d04:	2000014c 	.word	0x2000014c
 8000d08:	40014400 	.word	0x40014400
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	20000258 	.word	0x20000258
 8000d14:	200002a2 	.word	0x200002a2
 8000d18:	200003f8 	.word	0x200003f8
 8000d1c:	200002f9 	.word	0x200002f9
 8000d20:	20000b48 	.word	0x20000b48
 8000d24:	20000b49 	.word	0x20000b49
 8000d28:	200009c8 	.word	0x200009c8
 8000d2c:	2000043c 	.word	0x2000043c
 8000d30:	20000260 	.word	0x20000260
 8000d34:	40010000 	.word	0x40010000
 8000d38:	2000022e 	.word	0x2000022e
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	2000022c 	.word	0x2000022c
 8000d44:	200002a0 	.word	0x200002a0
 8000d48:	2000025a 	.word	0x2000025a
 8000d4c:	200000b0 	.word	0x200000b0
 8000d50:	200000b2 	.word	0x200000b2
 8000d54:	20000480 	.word	0x20000480
 8000d58:	40014800 	.word	0x40014800
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	2300      	movs	r3, #0
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	7a3b      	ldrb	r3, [r7, #8]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8000d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8000d74:	f003 ffa2 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x5b6>
 8000d7e:	2308      	movs	r3, #8
 8000d80:	e000      	b.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x5b8>
 8000d82:	2300      	movs	r3, #0
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	7a3b      	ldrb	r3, [r7, #8]
 8000d88:	4413      	add	r3, r2
 8000d8a:	723b      	strb	r3, [r7, #8]
		rotary_value = rotary_value_row;
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x620>)
 8000d8e:	7a3b      	ldrb	r3, [r7, #8]
 8000d90:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8000d98:	f003 ff90 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10a      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x5ec>
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8000da8:	f003 ff88 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x5ec>
		{
			enter = 1;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8000dbe:	f003 ff7d 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00a      	beq.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x612>
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8000dce:	f003 ff75 	bl	8004cbc <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x612>
		{
			enter = 0;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM7)	// TIM7 // 0.1ms
	{
	}
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020800 	.word	0x40020800
 8000dec:	20000254 	.word	0x20000254
 8000df0:	20000b4a 	.word	0x20000b4a

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f002 f936 	bl	800306c <HAL_Init>
  /* USER CODE BEGIN Init */
#if USE_FLASH
	FlashBuffer readrom;
#endif

	enter = 0;
 8000e00:	4bcd      	ldr	r3, [pc, #820]	; (8001138 <main+0x344>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8000e06:	4bcd      	ldr	r3, [pc, #820]	; (800113c <main+0x348>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 8000e0c:	4bcc      	ldr	r3, [pc, #816]	; (8001140 <main+0x34c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 8000e12:	4bcc      	ldr	r3, [pc, #816]	; (8001144 <main+0x350>)
 8000e14:	2227      	movs	r2, #39	; 0x27
 8000e16:	601a      	str	r2, [r3, #0]
	commonspeed = 0;
 8000e18:	4bcb      	ldr	r3, [pc, #812]	; (8001148 <main+0x354>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 8000e24:	e011      	b.n	8000e4a <main+0x56>
	{
		analogmax[i] = 0;
 8000e26:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8000e2a:	4ac8      	ldr	r2, [pc, #800]	; (800114c <main+0x358>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 8000e32:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8000e36:	4ac6      	ldr	r2, [pc, #792]	; (8001150 <main+0x35c>)
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000e40:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8000e44:	3301      	adds	r3, #1
 8000e46:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 8000e4a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8000e4e:	2b0b      	cmp	r3, #11
 8000e50:	d9e9      	bls.n	8000e26 <main+0x32>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 fc3d 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f001 f8b9 	bl	8001fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e5a:	f001 f897 	bl	8001f8c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e5e:	f000 fca1 	bl	80017a4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000e62:	f001 f869 	bl	8001f38 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000e66:	f000 ff8f 	bl	8001d88 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000e6a:	f000 ff29 	bl	8001cc0 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000e6e:	f000 ffc1 	bl	8001df4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000e72:	f000 fe1f 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e76:	f000 fecf 	bl	8001c18 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000e7a:	f000 fff1 	bl	8001e60 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e7e:	f001 f813 	bl	8001ea8 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000e82:	f001 f835 	bl	8001ef0 <MX_TIM13_Init>
  MX_SPI2_Init();
 8000e86:	f000 fddf 	bl	8001a48 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000e8a:	f000 fdaf 	bl	80019ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 fe69 	bl	8001b64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8000e92:	48b0      	ldr	r0, [pc, #704]	; (8001154 <main+0x360>)
 8000e94:	f006 fe62 	bl	8007b5c <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8000e98:	48af      	ldr	r0, [pc, #700]	; (8001158 <main+0x364>)
 8000e9a:	f006 fee7 	bl	8007c6c <puts>

	printf("Starting Analog Read\r\n");
 8000e9e:	48af      	ldr	r0, [pc, #700]	; (800115c <main+0x368>)
 8000ea0:	f006 fee4 	bl	8007c6c <puts>
	if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 8000ea4:	48ae      	ldr	r0, [pc, #696]	; (8001160 <main+0x36c>)
 8000ea6:	f002 f975 	bl	8003194 <HAL_ADC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <main+0xc0>
 8000eb0:	f001 fc24 	bl	80026fc <Error_Handler>

	printf("Starting TIM11\r\n");
 8000eb4:	48ab      	ldr	r0, [pc, #684]	; (8001164 <main+0x370>)
 8000eb6:	f006 fed9 	bl	8007c6c <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8000eba:	48ab      	ldr	r0, [pc, #684]	; (8001168 <main+0x374>)
 8000ebc:	f005 fa47 	bl	800634e <HAL_TIM_Base_Start_IT>
		Error_Handler();
	}
#endif

#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 8000ec0:	48aa      	ldr	r0, [pc, #680]	; (800116c <main+0x378>)
 8000ec2:	f006 fed3 	bl	8007c6c <puts>
	uint8_t wai, ret;
	ret = IMU_init(&wai);
 8000ec6:	1cfb      	adds	r3, r7, #3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fbad 	bl	8000628 <IMU_init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507
	printf("who_am_i = %d\r\n", wai);
 8000ed4:	1cfb      	adds	r3, r7, #3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	48a5      	ldr	r0, [pc, #660]	; (8001170 <main+0x37c>)
 8000edc:	f006 fe3e 	bl	8007b5c <iprintf>
	if(ret == 1)
 8000ee0:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d103      	bne.n	8000ef0 <main+0xfc>
	{
		printf("SPI INIT COLLECT!\r\n");
 8000ee8:	48a2      	ldr	r0, [pc, #648]	; (8001174 <main+0x380>)
 8000eea:	f006 febf 	bl	8007c6c <puts>
 8000eee:	e002      	b.n	8000ef6 <main+0x102>
	}
	else
	{
		printf("SPI INIT FAILURE x_x \r\n");
 8000ef0:	48a1      	ldr	r0, [pc, #644]	; (8001178 <main+0x384>)
 8000ef2:	f006 febb 	bl	8007c6c <puts>
	printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial_offset.gyro.x, inertial_offset.gyro.y, inertial_offset.gyro.z);
#endif
#endif

#if D_ENCODER
	printf("LENGTHPERPULSE = %u\r\n", LENGTHPERPULSE);
 8000ef6:	4b93      	ldr	r3, [pc, #588]	; (8001144 <main+0x350>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4619      	mov	r1, r3
 8000efc:	489f      	ldr	r0, [pc, #636]	; (800117c <main+0x388>)
 8000efe:	f006 fe2d 	bl	8007b5c <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	led_rgb(1, 1, 1);	// White
 8000f02:	2201      	movs	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f001 f938 	bl	800217c <led_rgb>
	while (1)
	{
		printf("///// WHILE /////\n\r");
 8000f0c:	489c      	ldr	r0, [pc, #624]	; (8001180 <main+0x38c>)
 8000f0e:	f006 fe25 	bl	8007b5c <iprintf>
#if D_SWITCH
		printf("enter = %d\r\n", enter);
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <main+0x344>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	489a      	ldr	r0, [pc, #616]	; (8001184 <main+0x390>)
 8000f1a:	f006 fe1f 	bl	8007b5c <iprintf>
#endif
#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <main+0x34c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4898      	ldr	r0, [pc, #608]	; (8001188 <main+0x394>)
 8000f26:	f006 fe19 	bl	8007b5c <iprintf>
#endif
		if(enter)
 8000f2a:	4b83      	ldr	r3, [pc, #524]	; (8001138 <main+0x344>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0ec      	beq.n	8000f0c <main+0x118>
		{
			switch(rotary_value)
 8000f32:	4b83      	ldr	r3, [pc, #524]	; (8001140 <main+0x34c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d8e8      	bhi.n	8000f0c <main+0x118>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <main+0x14c>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f81 	.word	0x08000f81
 8000f44:	0800127f 	.word	0x0800127f
 8000f48:	080013fd 	.word	0x080013fd
 8000f4c:	08001455 	.word	0x08001455
 8000f50:	08000f0d 	.word	0x08000f0d
 8000f54:	08000f0d 	.word	0x08000f0d
 8000f58:	08000f0d 	.word	0x08000f0d
 8000f5c:	08000f0d 	.word	0x08000f0d
 8000f60:	08000f0d 	.word	0x08000f0d
 8000f64:	08000f0d 	.word	0x08000f0d
 8000f68:	08000f0d 	.word	0x08000f0d
 8000f6c:	08000f0d 	.word	0x08000f0d
 8000f70:	08000f0d 	.word	0x08000f0d
 8000f74:	080015cb 	.word	0x080015cb
 8000f78:	0800149f 	.word	0x0800149f
 8000f7c:	0800156d 	.word	0x0800156d
			{
				case 0x0:
					led_rgb(1, 1, 0);	// Yellow
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	2001      	movs	r0, #1
 8000f86:	f001 f8f9 	bl	800217c <led_rgb>

					sensor_initialize();
 8000f8a:	f001 f92d 	bl	80021e8 <sensor_initialize>

					while(enter)
 8000f8e:	e04d      	b.n	800102c <main+0x238>
					{
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 351e 	strb.w	r3, [r7, #1310]	; 0x51e
 8000f96:	e042      	b.n	800101e <main+0x22a>
						{
							uint16_t analogbuf = analog[j];
 8000f98:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000f9c:	4a7b      	ldr	r2, [pc, #492]	; (800118c <main+0x398>)
 8000f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa2:	f8a7 3504 	strh.w	r3, [r7, #1284]	; 0x504
							analogmax[j] = (analogmax[j] < analogbuf) ? analogbuf : analogmax[j];
 8000fa6:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000faa:	4a68      	ldr	r2, [pc, #416]	; (800114c <main+0x358>)
 8000fac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fb0:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000fb4:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	bf38      	it	cc
 8000fbc:	460a      	movcc	r2, r1
 8000fbe:	b291      	uxth	r1, r2
 8000fc0:	4a62      	ldr	r2, [pc, #392]	; (800114c <main+0x358>)
 8000fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							analogmin[j] = (analogmin[j] > analogbuf) ? analogbuf : analogmin[j];
 8000fc6:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000fca:	4a61      	ldr	r2, [pc, #388]	; (8001150 <main+0x35c>)
 8000fcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fd0:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000fd4:	f8b7 1504 	ldrh.w	r1, [r7, #1284]	; 0x504
 8000fd8:	428a      	cmp	r2, r1
 8000fda:	bf28      	it	cs
 8000fdc:	460a      	movcs	r2, r1
 8000fde:	b291      	uxth	r1, r2
 8000fe0:	4a5b      	ldr	r2, [pc, #364]	; (8001150 <main+0x35c>)
 8000fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if D_ANALOG
							printf("[%2d] = ", j);
 8000fe6:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8000fea:	4619      	mov	r1, r3
 8000fec:	4868      	ldr	r0, [pc, #416]	; (8001190 <main+0x39c>)
 8000fee:	f006 fdb5 	bl	8007b5c <iprintf>
							printf("%4d", analogbuf);
 8000ff2:	f8b7 3504 	ldrh.w	r3, [r7, #1284]	; 0x504
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4866      	ldr	r0, [pc, #408]	; (8001194 <main+0x3a0>)
 8000ffa:	f006 fdaf 	bl	8007b5c <iprintf>
							if(j != CALIBRATIONSIZE - 1)
 8000ffe:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8001002:	2b0b      	cmp	r3, #11
 8001004:	d003      	beq.n	800100e <main+0x21a>
							{
								printf(", ");
 8001006:	4864      	ldr	r0, [pc, #400]	; (8001198 <main+0x3a4>)
 8001008:	f006 fda8 	bl	8007b5c <iprintf>
 800100c:	e002      	b.n	8001014 <main+0x220>
							}
							else
							{
								printf("\r\n");
 800100e:	4863      	ldr	r0, [pc, #396]	; (800119c <main+0x3a8>)
 8001010:	f006 fe2c 	bl	8007c6c <puts>
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8001014:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8001018:	3301      	adds	r3, #1
 800101a:	f887 351e 	strb.w	r3, [r7, #1310]	; 0x51e
 800101e:	f897 351e 	ldrb.w	r3, [r7, #1310]	; 0x51e
 8001022:	2b0b      	cmp	r3, #11
 8001024:	d9b8      	bls.n	8000f98 <main+0x1a4>
							}
#endif
						}
						HAL_Delay(250);
 8001026:	20fa      	movs	r0, #250	; 0xfa
 8001028:	f002 f892 	bl	8003150 <HAL_Delay>
					while(enter)
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <main+0x344>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ad      	bne.n	8000f90 <main+0x19c>
					}
					sensor_finalize();
 8001034:	f001 f8f8 	bl	8002228 <sensor_finalize>
#if D_ANALOG
					printf(ESC_YEL);
 8001038:	4859      	ldr	r0, [pc, #356]	; (80011a0 <main+0x3ac>)
 800103a:	f006 fd8f 	bl	8007b5c <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 800103e:	2300      	movs	r3, #0
 8001040:	f887 351d 	strb.w	r3, [r7, #1309]	; 0x51d
 8001044:	e013      	b.n	800106e <main+0x27a>
					{
							printf("[%2d] = ", j);
 8001046:	f897 351d 	ldrb.w	r3, [r7, #1309]	; 0x51d
 800104a:	4619      	mov	r1, r3
 800104c:	4850      	ldr	r0, [pc, #320]	; (8001190 <main+0x39c>)
 800104e:	f006 fd85 	bl	8007b5c <iprintf>
							printf("%4d,", analogmax[j]);
 8001052:	f897 351d 	ldrb.w	r3, [r7, #1309]	; 0x51d
 8001056:	4a3d      	ldr	r2, [pc, #244]	; (800114c <main+0x358>)
 8001058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105c:	4619      	mov	r1, r3
 800105e:	4851      	ldr	r0, [pc, #324]	; (80011a4 <main+0x3b0>)
 8001060:	f006 fd7c 	bl	8007b5c <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8001064:	f897 351d 	ldrb.w	r3, [r7, #1309]	; 0x51d
 8001068:	3301      	adds	r3, #1
 800106a:	f887 351d 	strb.w	r3, [r7, #1309]	; 0x51d
 800106e:	f897 351d 	ldrb.w	r3, [r7, #1309]	; 0x51d
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d9e7      	bls.n	8001046 <main+0x252>
					}
					printf("\r\n");
 8001076:	4849      	ldr	r0, [pc, #292]	; (800119c <main+0x3a8>)
 8001078:	f006 fdf8 	bl	8007c6c <puts>
					printf(ESC_CYA);
 800107c:	484a      	ldr	r0, [pc, #296]	; (80011a8 <main+0x3b4>)
 800107e:	f006 fd6d 	bl	8007b5c <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8001082:	2300      	movs	r3, #0
 8001084:	f887 351c 	strb.w	r3, [r7, #1308]	; 0x51c
 8001088:	e013      	b.n	80010b2 <main+0x2be>
					{
							printf("[%2d] = ", j);
 800108a:	f897 351c 	ldrb.w	r3, [r7, #1308]	; 0x51c
 800108e:	4619      	mov	r1, r3
 8001090:	483f      	ldr	r0, [pc, #252]	; (8001190 <main+0x39c>)
 8001092:	f006 fd63 	bl	8007b5c <iprintf>
							printf("%4d,", analogmin[j]);
 8001096:	f897 351c 	ldrb.w	r3, [r7, #1308]	; 0x51c
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <main+0x35c>)
 800109c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4840      	ldr	r0, [pc, #256]	; (80011a4 <main+0x3b0>)
 80010a4:	f006 fd5a 	bl	8007b5c <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 80010a8:	f897 351c 	ldrb.w	r3, [r7, #1308]	; 0x51c
 80010ac:	3301      	adds	r3, #1
 80010ae:	f887 351c 	strb.w	r3, [r7, #1308]	; 0x51c
 80010b2:	f897 351c 	ldrb.w	r3, [r7, #1308]	; 0x51c
 80010b6:	2b0b      	cmp	r3, #11
 80010b8:	d9e7      	bls.n	800108a <main+0x296>
					}
					printf("\r\n");
 80010ba:	4838      	ldr	r0, [pc, #224]	; (800119c <main+0x3a8>)
 80010bc:	f006 fdd6 	bl	8007c6c <puts>
					printf(ESC_DEF);
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <main+0x360>)
 80010c2:	f006 fd4b 	bl	8007b5c <iprintf>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
 80010cc:	e007      	b.n	80010de <main+0x2ea>
					{
							printf("v");
 80010ce:	2076      	movs	r0, #118	; 0x76
 80010d0:	f006 fd5c 	bl	8007b8c <putchar>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 80010d4:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
 80010de:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80010e2:	2b3b      	cmp	r3, #59	; 0x3b
 80010e4:	d9f3      	bls.n	80010ce <main+0x2da>
					}
					printf("\r\n");
 80010e6:	482d      	ldr	r0, [pc, #180]	; (800119c <main+0x3a8>)
 80010e8:	f006 fdc0 	bl	8007c6c <puts>
					printf(ESC_YEL);
 80010ec:	482c      	ldr	r0, [pc, #176]	; (80011a0 <main+0x3ac>)
 80010ee:	f006 fd35 	bl	8007b5c <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 351a 	strb.w	r3, [r7, #1306]	; 0x51a
 80010f8:	e015      	b.n	8001126 <main+0x332>
					{
							printf("[%2d] = ", i * 2);
 80010fa:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4619      	mov	r1, r3
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <main+0x39c>)
 8001104:	f006 fd2a 	bl	8007b5c <iprintf>
							printf("%4d, ", analogmax[i * 2]);
 8001108:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <main+0x358>)
 8001110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001114:	4619      	mov	r1, r3
 8001116:	4825      	ldr	r0, [pc, #148]	; (80011ac <main+0x3b8>)
 8001118:	f006 fd20 	bl	8007b5c <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 800111c:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 8001120:	3301      	adds	r3, #1
 8001122:	f887 351a 	strb.w	r3, [r7, #1306]	; 0x51a
 8001126:	f897 351a 	ldrb.w	r3, [r7, #1306]	; 0x51a
 800112a:	2b05      	cmp	r3, #5
 800112c:	d9e5      	bls.n	80010fa <main+0x306>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 800112e:	2306      	movs	r3, #6
 8001130:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
 8001134:	e054      	b.n	80011e0 <main+0x3ec>
 8001136:	bf00      	nop
 8001138:	20000b4a 	.word	0x20000b4a
 800113c:	200009c8 	.word	0x200009c8
 8001140:	20000254 	.word	0x20000254
 8001144:	20000984 	.word	0x20000984
 8001148:	2000025e 	.word	0x2000025e
 800114c:	20000ae8 	.word	0x20000ae8
 8001150:	2000023c 	.word	0x2000023c
 8001154:	08008a98 	.word	0x08008a98
 8001158:	08008aa0 	.word	0x08008aa0
 800115c:	08008ac0 	.word	0x08008ac0
 8001160:	200002b0 	.word	0x200002b0
 8001164:	08008ad8 	.word	0x08008ad8
 8001168:	2000033c 	.word	0x2000033c
 800116c:	08008ae8 	.word	0x08008ae8
 8001170:	08008b00 	.word	0x08008b00
 8001174:	08008b10 	.word	0x08008b10
 8001178:	08008b24 	.word	0x08008b24
 800117c:	08008b3c 	.word	0x08008b3c
 8001180:	08008b54 	.word	0x08008b54
 8001184:	08008b68 	.word	0x08008b68
 8001188:	08008b78 	.word	0x08008b78
 800118c:	200000b8 	.word	0x200000b8
 8001190:	08008b8c 	.word	0x08008b8c
 8001194:	08008b98 	.word	0x08008b98
 8001198:	08008b9c 	.word	0x08008b9c
 800119c:	08008ba0 	.word	0x08008ba0
 80011a0:	08008ba4 	.word	0x08008ba4
 80011a4:	08008bac 	.word	0x08008bac
 80011a8:	08008bb4 	.word	0x08008bb4
 80011ac:	08008bbc 	.word	0x08008bbc
					{
							printf("[%2d] = ", i * 2 - 1);
 80011b0:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	48bd      	ldr	r0, [pc, #756]	; (80014b0 <main+0x6bc>)
 80011bc:	f006 fcce 	bl	8007b5c <iprintf>
							printf("%4d,", analogmax[i * 2 - 1]);
 80011c0:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	3b01      	subs	r3, #1
 80011c8:	4aba      	ldr	r2, [pc, #744]	; (80014b4 <main+0x6c0>)
 80011ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ce:	4619      	mov	r1, r3
 80011d0:	48b9      	ldr	r0, [pc, #740]	; (80014b8 <main+0x6c4>)
 80011d2:	f006 fcc3 	bl	8007b5c <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 80011d6:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80011da:	3b01      	subs	r3, #1
 80011dc:	f887 3519 	strb.w	r3, [r7, #1305]	; 0x519
 80011e0:	f897 3519 	ldrb.w	r3, [r7, #1305]	; 0x519
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e3      	bne.n	80011b0 <main+0x3bc>
					}
					printf("\r\n");
 80011e8:	48b4      	ldr	r0, [pc, #720]	; (80014bc <main+0x6c8>)
 80011ea:	f006 fd3f 	bl	8007c6c <puts>
					printf(ESC_CYA);
 80011ee:	48b4      	ldr	r0, [pc, #720]	; (80014c0 <main+0x6cc>)
 80011f0:	f006 fcb4 	bl	8007b5c <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3518 	strb.w	r3, [r7, #1304]	; 0x518
 80011fa:	e015      	b.n	8001228 <main+0x434>
					{
							printf("[%2d] = ", i * 2);
 80011fc:	f897 3518 	ldrb.w	r3, [r7, #1304]	; 0x518
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4619      	mov	r1, r3
 8001204:	48aa      	ldr	r0, [pc, #680]	; (80014b0 <main+0x6bc>)
 8001206:	f006 fca9 	bl	8007b5c <iprintf>
							printf("%4d, ", analogmin[i * 2]);
 800120a:	f897 3518 	ldrb.w	r3, [r7, #1304]	; 0x518
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4aac      	ldr	r2, [pc, #688]	; (80014c4 <main+0x6d0>)
 8001212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001216:	4619      	mov	r1, r3
 8001218:	48ab      	ldr	r0, [pc, #684]	; (80014c8 <main+0x6d4>)
 800121a:	f006 fc9f 	bl	8007b5c <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 800121e:	f897 3518 	ldrb.w	r3, [r7, #1304]	; 0x518
 8001222:	3301      	adds	r3, #1
 8001224:	f887 3518 	strb.w	r3, [r7, #1304]	; 0x518
 8001228:	f897 3518 	ldrb.w	r3, [r7, #1304]	; 0x518
 800122c:	2b05      	cmp	r3, #5
 800122e:	d9e5      	bls.n	80011fc <main+0x408>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8001230:	2306      	movs	r3, #6
 8001232:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
 8001236:	e017      	b.n	8001268 <main+0x474>
					{
							printf("[%2d] = ", i * 2 - 1);
 8001238:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3b01      	subs	r3, #1
 8001240:	4619      	mov	r1, r3
 8001242:	489b      	ldr	r0, [pc, #620]	; (80014b0 <main+0x6bc>)
 8001244:	f006 fc8a 	bl	8007b5c <iprintf>
							printf("%4d,", analogmin[i * 2 - 1]);
 8001248:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	3b01      	subs	r3, #1
 8001250:	4a9c      	ldr	r2, [pc, #624]	; (80014c4 <main+0x6d0>)
 8001252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001256:	4619      	mov	r1, r3
 8001258:	4897      	ldr	r0, [pc, #604]	; (80014b8 <main+0x6c4>)
 800125a:	f006 fc7f 	bl	8007b5c <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 800125e:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 8001262:	3b01      	subs	r3, #1
 8001264:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
 8001268:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e3      	bne.n	8001238 <main+0x444>
					}
					printf("\r\n");
 8001270:	4892      	ldr	r0, [pc, #584]	; (80014bc <main+0x6c8>)
 8001272:	f006 fcfb 	bl	8007c6c <puts>
					printf(ESC_DEF);
 8001276:	4895      	ldr	r0, [pc, #596]	; (80014cc <main+0x6d8>)
 8001278:	f006 fc70 	bl	8007b5c <iprintf>
#endif
					break;	// case 0x00:
 800127c:	e20a      	b.n	8001694 <main+0x8a0>
				case 0x1:
					commonspeed = COMMONSPEED1;
 800127e:	4b94      	ldr	r3, [pc, #592]	; (80014d0 <main+0x6dc>)
 8001280:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001284:	801a      	strh	r2, [r3, #0]
					kpl = KPL1;
 8001286:	4b93      	ldr	r3, [pc, #588]	; (80014d4 <main+0x6e0>)
 8001288:	2219      	movs	r2, #25
 800128a:	701a      	strb	r2, [r3, #0]
					kpr = KPR1;
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <main+0x6e4>)
 800128e:	2219      	movs	r2, #25
 8001290:	701a      	strb	r2, [r3, #0]
					kdl = KDL1;
 8001292:	4b92      	ldr	r3, [pc, #584]	; (80014dc <main+0x6e8>)
 8001294:	220a      	movs	r2, #10
 8001296:	701a      	strb	r2, [r3, #0]
					kdr = KDR1;
 8001298:	4b91      	ldr	r3, [pc, #580]	; (80014e0 <main+0x6ec>)
 800129a:	220a      	movs	r2, #10
 800129c:	701a      	strb	r2, [r3, #0]
					kil = KIL1;
 800129e:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <main+0x6f0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
					kir = KIR1;
 80012a4:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <main+0x6f4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
					running_initialize();
 80012aa:	f000 ffcb 	bl	8002244 <running_initialize>

					while(enter)
 80012ae:	e004      	b.n	80012ba <main+0x4c6>
					{
						d_print();
 80012b0:	f001 f86a 	bl	8002388 <d_print>
						HAL_Delay(250);
 80012b4:	20fa      	movs	r0, #250	; 0xfa
 80012b6:	f001 ff4b 	bl	8003150 <HAL_Delay>
					while(enter)
 80012ba:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <main+0x6f8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f6      	bne.n	80012b0 <main+0x4bc>
					}

					running_finalize();
 80012c2:	f001 f835 	bl	8002330 <running_finalize>
#if USE_FLASH
					for(int i = 0; i < ENC_SIZE; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80012cc:	e07c      	b.n	80013c8 <main+0x5d4>
					{
						flash_buffer.common_speed2[i] = (TREAD / 2) * (flash_buffer.sencl[i] + flash_buffer.sencr[i]) / (flash_buffer.sencl[i] - flash_buffer.sencr[i]);
 80012ce:	4a88      	ldr	r2, [pc, #544]	; (80014f0 <main+0x6fc>)
 80012d0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4a85      	ldr	r2, [pc, #532]	; (80014f0 <main+0x6fc>)
 80012dc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80012e0:	4413      	add	r3, r2
 80012e2:	3380      	adds	r3, #128	; 0x80
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	440b      	add	r3, r1
 80012e8:	f64c 122c 	movw	r2, #51500	; 0xc92c
 80012ec:	fb02 f203 	mul.w	r2, r2, r3
 80012f0:	497f      	ldr	r1, [pc, #508]	; (80014f0 <main+0x6fc>)
 80012f2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80012f6:	440b      	add	r3, r1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	497c      	ldr	r1, [pc, #496]	; (80014f0 <main+0x6fc>)
 80012fe:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001302:	440b      	add	r3, r1
 8001304:	3380      	adds	r3, #128	; 0x80
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	1ac3      	subs	r3, r0, r3
 800130a:	fb92 f3f3 	sdiv	r3, r2, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <main+0x6fc>)
 8001312:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001316:	3340      	adds	r3, #64	; 0x40
 8001318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flash_buffer.common_speed2[i] = COMMONSPEED1 + (COMMONSPEED2 - COMMONSPEED1) * (flash_buffer.common_speed2[course_state_time] - RMIN) / ((power(2, 8 * (sizeof(flash_buffer.common_speed2[0]))) - 1) - RMIN);
 800131c:	4b75      	ldr	r3, [pc, #468]	; (80014f4 <main+0x700>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4a73      	ldr	r2, [pc, #460]	; (80014f0 <main+0x6fc>)
 8001322:	3340      	adds	r3, #64	; 0x40
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	f640 12f6 	movw	r2, #2550	; 0x9f6
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	4c71      	ldr	r4, [pc, #452]	; (80014f8 <main+0x704>)
 8001332:	441c      	add	r4, r3
 8001334:	2120      	movs	r1, #32
 8001336:	2002      	movs	r0, #2
 8001338:	f001 f972 	bl	8002620 <power>
 800133c:	4603      	mov	r3, r0
 800133e:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001342:	3ba1      	subs	r3, #161	; 0xa1
 8001344:	fbb4 f3f3 	udiv	r3, r4, r3
 8001348:	f503 72e1 	add.w	r2, r3, #450	; 0x1c2
 800134c:	4968      	ldr	r1, [pc, #416]	; (80014f0 <main+0x6fc>)
 800134e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001352:	3340      	adds	r3, #64	; 0x40
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						flash_buffer.common_speed3[i] = (TREAD / 2) * (flash_buffer.sencl[i] + flash_buffer.sencr[i]) / (flash_buffer.sencl[i] - flash_buffer.sencr[i]);
 8001358:	4a65      	ldr	r2, [pc, #404]	; (80014f0 <main+0x6fc>)
 800135a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	4a62      	ldr	r2, [pc, #392]	; (80014f0 <main+0x6fc>)
 8001366:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800136a:	4413      	add	r3, r2
 800136c:	3380      	adds	r3, #128	; 0x80
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	440b      	add	r3, r1
 8001372:	f64c 122c 	movw	r2, #51500	; 0xc92c
 8001376:	fb02 f203 	mul.w	r2, r2, r3
 800137a:	495d      	ldr	r1, [pc, #372]	; (80014f0 <main+0x6fc>)
 800137c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001380:	440b      	add	r3, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	495a      	ldr	r1, [pc, #360]	; (80014f0 <main+0x6fc>)
 8001388:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800138c:	440b      	add	r3, r1
 800138e:	3380      	adds	r3, #128	; 0x80
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	1ac3      	subs	r3, r0, r3
 8001394:	fb92 f3f3 	sdiv	r3, r2, r3
 8001398:	4619      	mov	r1, r3
 800139a:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <main+0x6fc>)
 800139c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80013a0:	33c0      	adds	r3, #192	; 0xc0
 80013a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flash_buffer.common_speed3[i] = COMMONSPEED1 + (COMMONSPEED3 - COMMONSPEED1) * (flash_buffer.common_speed3[course_state_time] - RMIN) / ((power(2, 8 * (sizeof(flash_buffer.common_speed3[0]))) - 1) - RMIN);
 80013a6:	2120      	movs	r1, #32
 80013a8:	2002      	movs	r0, #2
 80013aa:	f001 f939 	bl	8002620 <power>
 80013ae:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <main+0x6fc>)
 80013b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80013b4:	33c0      	adds	r3, #192	; 0xc0
 80013b6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80013ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for(int i = 0; i < ENC_SIZE; i++)
 80013be:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80013c2:	3301      	adds	r3, #1
 80013c4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80013c8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80013cc:	2b7f      	cmp	r3, #127	; 0x7f
 80013ce:	f77f af7e 	ble.w	80012ce <main+0x4da>
					}
					for(int i = 0; i < ENC_SIZE; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80013d8:	e004      	b.n	80013e4 <main+0x5f0>
 80013da:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80013de:	3301      	adds	r3, #1
 80013e0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80013e4:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80013e8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ea:	ddf6      	ble.n	80013da <main+0x5e6>
					{
					}
					writeFlash(start_address, (uint8_t*)&flash_buffer, sizeof(FlashBuffer));
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <main+0x708>)
 80013ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80013f2:	493f      	ldr	r1, [pc, #252]	; (80014f0 <main+0x6fc>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 f947 	bl	8002688 <writeFlash>
#endif
					break;
 80013fa:	e14b      	b.n	8001694 <main+0x8a0>
				case 0x2:
					commonspeed = COMMONSPEED2;
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <main+0x6dc>)
 80013fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001402:	801a      	strh	r2, [r3, #0]
					kpl = KPL2;
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <main+0x6e0>)
 8001406:	2228      	movs	r2, #40	; 0x28
 8001408:	701a      	strb	r2, [r3, #0]
					kpr = KPR2;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <main+0x6e4>)
 800140c:	2228      	movs	r2, #40	; 0x28
 800140e:	701a      	strb	r2, [r3, #0]
					kdl = KDL2;
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <main+0x6e8>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
					kdr = KDR2;
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <main+0x6ec>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
					kil = KIL2;
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <main+0x6f0>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
					kir = KIR2;
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <main+0x6f4>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
					loadFlash(start_address, (uint8_t*)&flash_buffer, sizeof(FlashBuffer));
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <main+0x708>)
 800142a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800142e:	4930      	ldr	r1, [pc, #192]	; (80014f0 <main+0x6fc>)
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f953 	bl	80026dc <loadFlash>
#endif
					running_initialize();
 8001436:	f000 ff05 	bl	8002244 <running_initialize>

					while(enter)
 800143a:	e004      	b.n	8001446 <main+0x652>
					{
						d_print();
 800143c:	f000 ffa4 	bl	8002388 <d_print>
						HAL_Delay(250);
 8001440:	20fa      	movs	r0, #250	; 0xfa
 8001442:	f001 fe85 	bl	8003150 <HAL_Delay>
					while(enter)
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <main+0x6f8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f6      	bne.n	800143c <main+0x648>
					}

					running_finalize();
 800144e:	f000 ff6f 	bl	8002330 <running_finalize>
					break;
 8001452:	e11f      	b.n	8001694 <main+0x8a0>
				case 0x3:
					commonspeed = COMMONSPEED3;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <main+0x6dc>)
 8001456:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800145a:	801a      	strh	r2, [r3, #0]
					kpl = KPL3;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <main+0x6e0>)
 800145e:	2219      	movs	r2, #25
 8001460:	701a      	strb	r2, [r3, #0]
					kpr = KPR3;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <main+0x6e4>)
 8001464:	2219      	movs	r2, #25
 8001466:	701a      	strb	r2, [r3, #0]
					kdl = KDL3;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <main+0x6e8>)
 800146a:	220a      	movs	r2, #10
 800146c:	701a      	strb	r2, [r3, #0]
					kdr = KDR3;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <main+0x6ec>)
 8001470:	220a      	movs	r2, #10
 8001472:	701a      	strb	r2, [r3, #0]
					kil = KIL3;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <main+0x6f0>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
					kir = KIR3;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <main+0x6f4>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
					running_initialize();
 8001480:	f000 fee0 	bl	8002244 <running_initialize>

					while(enter)
 8001484:	e004      	b.n	8001490 <main+0x69c>
					{
						d_print();
 8001486:	f000 ff7f 	bl	8002388 <d_print>
						HAL_Delay(250);
 800148a:	20fa      	movs	r0, #250	; 0xfa
 800148c:	f001 fe60 	bl	8003150 <HAL_Delay>
					while(enter)
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <main+0x6f8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f6      	bne.n	8001486 <main+0x692>
					}

					running_finalize();
 8001498:	f000 ff4a 	bl	8002330 <running_finalize>
					break;
 800149c:	e0fa      	b.n	8001694 <main+0x8a0>
				case 0xE:
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 800149e:	2100      	movs	r1, #0
 80014a0:	4817      	ldr	r0, [pc, #92]	; (8001500 <main+0x70c>)
 80014a2:	f004 ffcf 	bl	8006444 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014a6:	2104      	movs	r1, #4
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <main+0x70c>)
 80014aa:	f004 ffcb 	bl	8006444 <HAL_TIM_PWM_Start>
					while(enter)
 80014ae:	e050      	b.n	8001552 <main+0x75e>
 80014b0:	08008b8c 	.word	0x08008b8c
 80014b4:	20000ae8 	.word	0x20000ae8
 80014b8:	08008bac 	.word	0x08008bac
 80014bc:	08008ba0 	.word	0x08008ba0
 80014c0:	08008bb4 	.word	0x08008bb4
 80014c4:	2000023c 	.word	0x2000023c
 80014c8:	08008bbc 	.word	0x08008bbc
 80014cc:	08008a98 	.word	0x08008a98
 80014d0:	2000025e 	.word	0x2000025e
 80014d4:	2000047c 	.word	0x2000047c
 80014d8:	20000b03 	.word	0x20000b03
 80014dc:	20000227 	.word	0x20000227
 80014e0:	20000238 	.word	0x20000238
 80014e4:	20000239 	.word	0x20000239
 80014e8:	2000025c 	.word	0x2000025c
 80014ec:	20000b4a 	.word	0x20000b4a
 80014f0:	20000480 	.word	0x20000480
 80014f4:	20000b49 	.word	0x20000b49
 80014f8:	f0cd0240 	.word	0xf0cd0240
 80014fc:	080e0000 	.word	0x080e0000
 8001500:	2000014c 	.word	0x2000014c
					{
						// MOTOR TEST
						commonspeed = 3360 * rotary_value / 16;
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <main+0x8a4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 800150e:	fb03 f302 	mul.w	r3, r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	da00      	bge.n	8001518 <main+0x724>
 8001516:	330f      	adds	r3, #15
 8001518:	111b      	asrs	r3, r3, #4
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <main+0x8a8>)
 800151e:	801a      	strh	r2, [r3, #0]
						leftmotor = commonspeed;
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <main+0x8a8>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <main+0x8ac>)
 8001528:	601a      	str	r2, [r3, #0]
						rightmotor = commonspeed;
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <main+0x8a8>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <main+0x8b0>)
 8001532:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <main+0x8ac>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <main+0x8b4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 800153e:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <main+0x8b0>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <main+0x8b4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
						d_print();
 8001548:	f000 ff1e 	bl	8002388 <d_print>
						HAL_Delay(250);
 800154c:	20fa      	movs	r0, #250	; 0xfa
 800154e:	f001 fdff 	bl	8003150 <HAL_Delay>
					while(enter)
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <main+0x8b8>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1d4      	bne.n	8001504 <main+0x710>
					}
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 800155a:	2100      	movs	r1, #0
 800155c:	4852      	ldr	r0, [pc, #328]	; (80016a8 <main+0x8b4>)
 800155e:	f004 ffaf 	bl	80064c0 <HAL_TIM_PWM_Stop>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001562:	2104      	movs	r1, #4
 8001564:	4850      	ldr	r0, [pc, #320]	; (80016a8 <main+0x8b4>)
 8001566:	f004 ffab 	bl	80064c0 <HAL_TIM_PWM_Stop>
					break;
 800156a:	e093      	b.n	8001694 <main+0x8a0>
				case 0xF:
#if USE_FLASH
					// FLASH PRINT
					loadFlash(start_address, (uint8_t*)&readrom, sizeof(FlashBuffer));
 800156c:	4850      	ldr	r0, [pc, #320]	; (80016b0 <main+0x8bc>)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001574:	4619      	mov	r1, r3
 8001576:	f001 f8b1 	bl	80026dc <loadFlash>
					for(int i = 0; i < ENC_SIZE; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8001580:	e016      	b.n	80015b0 <main+0x7bc>
					{
						printf("%2d, %4d, %4d\r\n", i, readrom.sencl[i], readrom.sencr[i]);
 8001582:	1d3a      	adds	r2, r7, #4
 8001584:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	1d3a      	adds	r2, r7, #4
 8001590:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8001594:	4413      	add	r3, r2
 8001596:	3380      	adds	r3, #128	; 0x80
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	460a      	mov	r2, r1
 800159c:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80015a0:	4844      	ldr	r0, [pc, #272]	; (80016b4 <main+0x8c0>)
 80015a2:	f006 fadb 	bl	8007b5c <iprintf>
					for(int i = 0; i < ENC_SIZE; i++)
 80015a6:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80015aa:	3301      	adds	r3, #1
 80015ac:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 80015b0:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80015b4:	2b7f      	cmp	r3, #127	; 0x7f
 80015b6:	dde4      	ble.n	8001582 <main+0x78e>
					}
#endif

					while(enter)
 80015b8:	e002      	b.n	80015c0 <main+0x7cc>
					{
						HAL_Delay(250);
 80015ba:	20fa      	movs	r0, #250	; 0xfa
 80015bc:	f001 fdc8 	bl	8003150 <HAL_Delay>
					while(enter)
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <main+0x8b8>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f8      	bne.n	80015ba <main+0x7c6>
					}
					break;
 80015c8:	e064      	b.n	8001694 <main+0x8a0>
				case 0xD:
#if USE_IMU
					// IMU TEST
					IMU_set_offset();
 80015ca:	f7ff f88d 	bl	80006e8 <IMU_set_offset>
					printf("inertial offset\r\n");
 80015ce:	483a      	ldr	r0, [pc, #232]	; (80016b8 <main+0x8c4>)
 80015d0:	f006 fb4c 	bl	8007c6c <puts>
					printf("ax = %4d, ay = %4d, az = %4d\r\n", inertial_offset.accel.x, inertial_offset.accel.y, inertial_offset.accel.z);
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <main+0x8c8>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <main+0x8c8>)
 80015de:	885b      	ldrh	r3, [r3, #2]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <main+0x8c8>)
 80015e6:	889b      	ldrh	r3, [r3, #4]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4835      	ldr	r0, [pc, #212]	; (80016c0 <main+0x8cc>)
 80015ec:	f006 fab6 	bl	8007b5c <iprintf>
					printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial_offset.gyro.x, inertial_offset.gyro.y, inertial_offset.gyro.z);
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <main+0x8c8>)
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <main+0x8c8>)
 80015fa:	891b      	ldrh	r3, [r3, #8]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <main+0x8c8>)
 8001602:	895b      	ldrh	r3, [r3, #10]
 8001604:	b21b      	sxth	r3, r3
 8001606:	482f      	ldr	r0, [pc, #188]	; (80016c4 <main+0x8d0>)
 8001608:	f006 faa8 	bl	8007b5c <iprintf>
					while(enter)
 800160c:	e03d      	b.n	800168a <main+0x896>
					{
						printf("////////// IMU ///////////\r\n");
 800160e:	482e      	ldr	r0, [pc, #184]	; (80016c8 <main+0x8d4>)
 8001610:	f006 fb2c 	bl	8007c6c <puts>
						IMU_read();
 8001614:	f7ff f87a 	bl	800070c <IMU_read>
						printf("ax = %4d, ay = %4d, az = %4d\r\n", inertial.accel.x - inertial_offset.accel.x, inertial.accel.y - inertial_offset.accel.y, inertial.accel.z - inertial_offset.accel.z);
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <main+0x8d8>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b21b      	sxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <main+0x8c8>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b21b      	sxth	r3, r3
 8001626:	1ad1      	subs	r1, r2, r3
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <main+0x8d8>)
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	b21b      	sxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <main+0x8c8>)
 8001632:	885b      	ldrh	r3, [r3, #2]
 8001634:	b21b      	sxth	r3, r3
 8001636:	1ad2      	subs	r2, r2, r3
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <main+0x8d8>)
 800163a:	889b      	ldrh	r3, [r3, #4]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <main+0x8c8>)
 8001642:	889b      	ldrh	r3, [r3, #4]
 8001644:	b21b      	sxth	r3, r3
 8001646:	1ac3      	subs	r3, r0, r3
 8001648:	481d      	ldr	r0, [pc, #116]	; (80016c0 <main+0x8cc>)
 800164a:	f006 fa87 	bl	8007b5c <iprintf>
						printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial.gyro.x - inertial_offset.gyro.x, inertial.gyro.y - inertial_offset.gyro.y, inertial.gyro.z - inertial_offset.gyro.z);
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <main+0x8d8>)
 8001650:	88db      	ldrh	r3, [r3, #6]
 8001652:	b21b      	sxth	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <main+0x8c8>)
 8001658:	88db      	ldrh	r3, [r3, #6]
 800165a:	b21b      	sxth	r3, r3
 800165c:	1ad1      	subs	r1, r2, r3
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <main+0x8d8>)
 8001660:	891b      	ldrh	r3, [r3, #8]
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0x8c8>)
 8001668:	891b      	ldrh	r3, [r3, #8]
 800166a:	b21b      	sxth	r3, r3
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <main+0x8d8>)
 8001670:	895b      	ldrh	r3, [r3, #10]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <main+0x8c8>)
 8001678:	895b      	ldrh	r3, [r3, #10]
 800167a:	b21b      	sxth	r3, r3
 800167c:	1ac3      	subs	r3, r0, r3
 800167e:	4811      	ldr	r0, [pc, #68]	; (80016c4 <main+0x8d0>)
 8001680:	f006 fa6c 	bl	8007b5c <iprintf>
						HAL_Delay(250);
 8001684:	20fa      	movs	r0, #250	; 0xfa
 8001686:	f001 fd63 	bl	8003150 <HAL_Delay>
					while(enter)
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <main+0x8b8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1bd      	bne.n	800160e <main+0x81a>
					}
#endif
					break;
 8001692:	bf00      	nop
		printf("///// WHILE /////\n\r");
 8001694:	e43a      	b.n	8000f0c <main+0x118>
 8001696:	bf00      	nop
 8001698:	20000254 	.word	0x20000254
 800169c:	2000025e 	.word	0x2000025e
 80016a0:	20000234 	.word	0x20000234
 80016a4:	20000228 	.word	0x20000228
 80016a8:	2000014c 	.word	0x2000014c
 80016ac:	20000b4a 	.word	0x20000b4a
 80016b0:	080e0000 	.word	0x080e0000
 80016b4:	08008bc4 	.word	0x08008bc4
 80016b8:	08008bd4 	.word	0x08008bd4
 80016bc:	20000098 	.word	0x20000098
 80016c0:	08008be8 	.word	0x08008be8
 80016c4:	08008c08 	.word	0x08008c08
 80016c8:	08008c28 	.word	0x08008c28
 80016cc:	200000a4 	.word	0x200000a4

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fa33 	bl	8007b4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <SystemClock_Config+0xcc>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <SystemClock_Config+0xcc>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <SystemClock_Config+0xd0>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <SystemClock_Config+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001740:	2308      	movs	r3, #8
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001744:	23a8      	movs	r3, #168	; 0xa8
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fc1b 	bl	8004f90 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001760:	f000 ffcc 	bl	80026fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2105      	movs	r1, #5
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fe74 	bl	8005470 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800178e:	f000 ffb5 	bl	80026fc <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017b6:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017b8:	4a8a      	ldr	r2, [pc, #552]	; (80019e4 <MX_ADC1_Init+0x240>)
 80017ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c4:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017ca:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d0:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b82      	ldr	r3, [pc, #520]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017de:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e4:	4b7e      	ldr	r3, [pc, #504]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017e6:	4a80      	ldr	r2, [pc, #512]	; (80019e8 <MX_ADC1_Init+0x244>)
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80017f0:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017f2:	2210      	movs	r2, #16
 80017f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017f6:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001800:	2201      	movs	r2, #1
 8001802:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001804:	4876      	ldr	r0, [pc, #472]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001806:	f001 fcc5 	bl	8003194 <HAL_ADC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001810:	f000 ff74 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001814:	2309      	movs	r3, #9
 8001816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800181c:	2303      	movs	r3, #3
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	486e      	ldr	r0, [pc, #440]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001826:	f001 fe49 	bl	80034bc <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001830:	f000 ff64 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001834:	230a      	movs	r3, #10
 8001836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001838:	2302      	movs	r3, #2
 800183a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4867      	ldr	r0, [pc, #412]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001842:	f001 fe3b 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800184c:	f000 ff56 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001850:	2308      	movs	r3, #8
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001854:	2303      	movs	r3, #3
 8001856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	4860      	ldr	r0, [pc, #384]	; (80019e0 <MX_ADC1_Init+0x23c>)
 800185e:	f001 fe2d 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001868:	f000 ff48 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800186c:	230b      	movs	r3, #11
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001870:	2304      	movs	r3, #4
 8001872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4859      	ldr	r0, [pc, #356]	; (80019e0 <MX_ADC1_Init+0x23c>)
 800187a:	f001 fe1f 	bl	80034bc <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001884:	f000 ff3a 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001888:	230e      	movs	r3, #14
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800188c:	2305      	movs	r3, #5
 800188e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4852      	ldr	r0, [pc, #328]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001896:	f001 fe11 	bl	80034bc <HAL_ADC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80018a0:	f000 ff2c 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018a4:	230f      	movs	r3, #15
 80018a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80018a8:	2306      	movs	r3, #6
 80018aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	484b      	ldr	r0, [pc, #300]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80018b2:	f001 fe03 	bl	80034bc <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80018bc:	f000 ff1e 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018c0:	230c      	movs	r3, #12
 80018c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80018c4:	2307      	movs	r3, #7
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4844      	ldr	r0, [pc, #272]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80018ce:	f001 fdf5 	bl	80034bc <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80018d8:	f000 ff10 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018dc:	230d      	movs	r3, #13
 80018de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80018e0:	2308      	movs	r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	483d      	ldr	r0, [pc, #244]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80018ea:	f001 fde7 	bl	80034bc <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80018f4:	f000 ff02 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80018fc:	2309      	movs	r3, #9
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4836      	ldr	r0, [pc, #216]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001906:	f001 fdd9 	bl	80034bc <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001910:	f000 fef4 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001918:	230a      	movs	r3, #10
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	482f      	ldr	r0, [pc, #188]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001922:	f001 fdcb 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800192c:	f000 fee6 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001930:	2306      	movs	r3, #6
 8001932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001934:	230b      	movs	r3, #11
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4828      	ldr	r0, [pc, #160]	; (80019e0 <MX_ADC1_Init+0x23c>)
 800193e:	f001 fdbd 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001948:	f000 fed8 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800194c:	2301      	movs	r3, #1
 800194e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001950:	230c      	movs	r3, #12
 8001952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4821      	ldr	r0, [pc, #132]	; (80019e0 <MX_ADC1_Init+0x23c>)
 800195a:	f001 fdaf 	bl	80034bc <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001964:	f000 feca 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001968:	2305      	movs	r3, #5
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800196c:	230d      	movs	r3, #13
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	481a      	ldr	r0, [pc, #104]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001976:	f001 fda1 	bl	80034bc <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001980:	f000 febc 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001984:	2302      	movs	r3, #2
 8001986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001988:	230e      	movs	r3, #14
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_ADC1_Init+0x23c>)
 8001992:	f001 fd93 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800199c:	f000 feae 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019a0:	2304      	movs	r3, #4
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80019a4:	230f      	movs	r3, #15
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80019ae:	f001 fd85 	bl	80034bc <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80019b8:	f000 fea0 	bl	80026fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019bc:	2303      	movs	r3, #3
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80019c0:	2310      	movs	r3, #16
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_ADC1_Init+0x23c>)
 80019ca:	f001 fd77 	bl	80034bc <HAL_ADC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80019d4:	f000 fe92 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200002b0 	.word	0x200002b0
 80019e4:	40012000 	.word	0x40012000
 80019e8:	0f000001 	.word	0x0f000001

080019ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <MX_I2C1_Init+0x54>)
 80019f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_I2C1_Init+0x58>)
 80019fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_I2C1_Init+0x50>)
 8001a2a:	f003 f979 	bl	8004d20 <HAL_I2C_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a34:	f000 fe62 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000190 	.word	0x20000190
 8001a40:	40005400 	.word	0x40005400
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <MX_SPI2_Init+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a94:	220a      	movs	r2, #10
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_SPI2_Init+0x64>)
 8001a9a:	f003 fed9 	bl	8005850 <HAL_SPI_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001aa4:	f000 fe2a 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000d0 	.word	0x200000d0
 8001ab0:	40003800 	.word	0x40003800

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 f841 	bl	8007b4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <MX_TIM1_Init+0xac>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afc:	2303      	movs	r3, #3
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001b28:	f004 fd22 	bl	8006570 <HAL_TIM_Encoder_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b32:	f000 fde3 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001b44:	f005 fa90 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b4e:	f000 fdd5 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	; 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000043c 	.word	0x2000043c
 8001b60:	40010000 	.word	0x40010000

08001b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 256;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1485;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001b9e:	f240 52cd 	movw	r2, #1485	; 0x5cd
 8001ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb0:	4818      	ldr	r0, [pc, #96]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001bb2:	f004 fc1b 	bl	80063ec <HAL_TIM_PWM_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001bbc:	f000 fd9e 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4811      	ldr	r0, [pc, #68]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001bd0:	f005 fa4a 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001bda:	f000 fd8f 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bde:	2360      	movs	r3, #96	; 0x60
 8001be0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001bf6:	f004 fed3 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c00:	f000 fd7c 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM2_Init+0xb0>)
 8001c06:	f001 f841 	bl	8002c8c <HAL_TIM_MspPostInit>

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200009cc 	.word	0x200009cc

08001c18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f005 ff8f 	bl	8007b4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <MX_TIM3_Init+0xa4>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c72:	2301      	movs	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001c86:	f004 fc73 	bl	8006570 <HAL_TIM_Encoder_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c90:	f000 fd34 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_TIM3_Init+0xa0>)
 8001ca2:	f005 f9e1 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001cac:	f000 fd26 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000260 	.word	0x20000260
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <MX_TIM4_Init+0xc4>)
 8001ce6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3359;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001cf6:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001cfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d08:	481d      	ldr	r0, [pc, #116]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d0a:	f004 fb6f 	bl	80063ec <HAL_TIM_PWM_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d14:	f000 fcf2 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4619      	mov	r1, r3
 8001d26:	4816      	ldr	r0, [pc, #88]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d28:	f005 f99e 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d32:	f000 fce3 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d36:	2360      	movs	r3, #96	; 0x60
 8001d38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d4e:	f004 fe27 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d58:	f000 fcd0 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d64:	f004 fe1c 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d6e:	f000 fcc5 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d72:	4803      	ldr	r0, [pc, #12]	; (8001d80 <MX_TIM4_Init+0xc0>)
 8001d74:	f000 ff8a 	bl	8002c8c <HAL_TIM_MspPostInit>

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000014c 	.word	0x2000014c
 8001d84:	40000800 	.word	0x40000800

08001d88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_TIM6_Init+0x64>)
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <MX_TIM6_Init+0x68>)
 8001d9a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_TIM6_Init+0x64>)
 8001d9e:	2202      	movs	r2, #2
 8001da0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_TIM6_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55999;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MX_TIM6_Init+0x64>)
 8001daa:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001dae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_TIM6_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_TIM6_Init+0x64>)
 8001db8:	f004 fa9e 	bl	80062f8 <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001dc2:	f000 fc9b 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_TIM6_Init+0x64>)
 8001dd4:	f005 f948 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001dde:	f000 fc8d 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200003fc 	.word	0x200003fc
 8001df0:	40001000 	.word	0x40001000

08001df4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e04:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <MX_TIM7_Init+0x68>)
 8001e06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16799;
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e16:	f244 129f 	movw	r2, #16799	; 0x419f
 8001e1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e24:	f004 fa68 	bl	80062f8 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e2e:	f000 fc65 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_TIM7_Init+0x64>)
 8001e40:	f005 f912 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e4a:	f000 fc57 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000b04 	.word	0x20000b04
 8001e5c:	40001400 	.word	0x40001400

08001e60 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <MX_TIM10_Init+0x44>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 55999;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e78:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001e7c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_TIM10_Init+0x40>)
 8001e8c:	f004 fa34 	bl	80062f8 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e96:	f000 fc31 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001e4 	.word	0x200001e4
 8001ea4:	40014400 	.word	0x40014400

08001ea8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <MX_TIM11_Init+0x44>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 55999;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001ec0:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001ec4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM11_Init+0x40>)
 8001ed4:	f004 fa10 	bl	80062f8 <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ede:	f000 fc0d 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000033c 	.word	0x2000033c
 8001eec:	40014800 	.word	0x40014800

08001ef0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <MX_TIM13_Init+0x44>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 55999;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001f08:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001f0c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_TIM13_Init+0x40>)
 8001f1c:	f004 f9ec 	bl	80062f8 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001f26:	f000 fbe9 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002fc 	.word	0x200002fc
 8001f34:	40001c00 	.word	0x40001c00

08001f38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_USART6_UART_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_USART6_UART_Init+0x4c>)
 8001f70:	f005 f90a 	bl	8007188 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f000 fbbf 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000988 	.word	0x20000988
 8001f88:	40011400 	.word	0x40011400

08001f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2038      	movs	r0, #56	; 0x38
 8001fb4:	f001 fdfd 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fb8:	2038      	movs	r0, #56	; 0x38
 8001fba:	f001 fe16 	bl	8003bea <HAL_NVIC_EnableIRQ>

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <MX_GPIO_Init+0x19c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a5f      	ldr	r2, [pc, #380]	; (8002168 <MX_GPIO_Init+0x19c>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <MX_GPIO_Init+0x19c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a58      	ldr	r2, [pc, #352]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b56      	ldr	r3, [pc, #344]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b52      	ldr	r3, [pc, #328]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a51      	ldr	r2, [pc, #324]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <MX_GPIO_Init+0x19c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <MX_GPIO_Init+0x19c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b48      	ldr	r3, [pc, #288]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a43      	ldr	r2, [pc, #268]	; (8002168 <MX_GPIO_Init+0x19c>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <MX_GPIO_Init+0x19c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002074:	483d      	ldr	r0, [pc, #244]	; (800216c <MX_GPIO_Init+0x1a0>)
 8002076:	f002 fe39 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002080:	483b      	ldr	r0, [pc, #236]	; (8002170 <MX_GPIO_Init+0x1a4>)
 8002082:	f002 fe33 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800208c:	4839      	ldr	r0, [pc, #228]	; (8002174 <MX_GPIO_Init+0x1a8>)
 800208e:	f002 fe2d 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2104      	movs	r1, #4
 8002096:	4838      	ldr	r0, [pc, #224]	; (8002178 <MX_GPIO_Init+0x1ac>)
 8002098:	f002 fe28 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 800209c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	482d      	ldr	r0, [pc, #180]	; (800216c <MX_GPIO_Init+0x1a0>)
 80020b6:	f002 fc67 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 80020ba:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80020be:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <MX_GPIO_Init+0x1a0>)
 80020d0:	f002 fc5a 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80020d4:	f640 0304 	movw	r3, #2052	; 0x804
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4821      	ldr	r0, [pc, #132]	; (8002170 <MX_GPIO_Init+0x1a4>)
 80020ea:	f002 fc4d 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80020ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	481a      	ldr	r0, [pc, #104]	; (8002170 <MX_GPIO_Init+0x1a4>)
 8002108:	f002 fc3e 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 800210c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_GPIO_Init+0x1a8>)
 8002126:	f002 fc2f 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_GPIO_Init+0x1a8>)
 8002140:	f002 fc22 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002144:	2304      	movs	r3, #4
 8002146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002148:	2301      	movs	r3, #1
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_GPIO_Init+0x1ac>)
 800215c:	f002 fc14 	bl	8004988 <HAL_GPIO_Init>

}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400
 8002174:	40020000 	.word	0x40020000
 8002178:	40020c00 	.word	0x40020c00

0800217c <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	460b      	mov	r3, r1
 8002188:	71bb      	strb	r3, [r7, #6]
 800218a:	4613      	mov	r3, r2
 800218c:	717b      	strb	r3, [r7, #5]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <led_rgb+0x64>)
 80021a2:	f002 fda3 	bl	8004cec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80021a6:	79bb      	ldrb	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <led_rgb+0x64>)
 80021ba:	f002 fd97 	bl	8004cec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_B ON
 80021be:	797b      	ldrb	r3, [r7, #5]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <led_rgb+0x68>)
 80021d2:	f002 fd8b 	bl	8004cec <HAL_GPIO_WritePin>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020800 	.word	0x40020800

080021e8 <sensor_initialize>:

void sensor_initialize()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	sensgettime = 0;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <sensor_initialize+0x30>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analograw, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) { Error_Handler(); }
 80021f2:	2210      	movs	r2, #16
 80021f4:	4909      	ldr	r1, [pc, #36]	; (800221c <sensor_initialize+0x34>)
 80021f6:	480a      	ldr	r0, [pc, #40]	; (8002220 <sensor_initialize+0x38>)
 80021f8:	f001 f810 	bl	800321c <HAL_ADC_Start_DMA>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <sensor_initialize+0x1e>
 8002202:	f000 fa7b 	bl	80026fc <Error_Handler>
	HAL_TIM_Base_Start_IT(&htim7);	// SENSORGET SORT
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <sensor_initialize+0x3c>)
 8002208:	f004 f8a1 	bl	800634e <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 800220c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002210:	f000 ff9e 	bl	8003150 <HAL_Delay>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000128 	.word	0x20000128
 800221c:	2000012c 	.word	0x2000012c
 8002220:	200002b0 	.word	0x200002b0
 8002224:	20000b04 	.word	0x20000b04

08002228 <sensor_finalize>:

void sensor_finalize()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <sensor_finalize+0x14>)
 800222e:	f004 f8b2 	bl	8006396 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <sensor_finalize+0x18>)
 8002234:	f001 f8e4 	bl	8003400 <HAL_ADC_Stop_DMA>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000b04 	.word	0x20000b04
 8002240:	200002b0 	.word	0x200002b0

08002244 <running_initialize>:

void running_initialize()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	sensor_initialize();
 8002248:	f7ff ffce 	bl	80021e8 <sensor_initialize>
	printf("Encoder_Start\r\n");
 800224c:	4823      	ldr	r0, [pc, #140]	; (80022dc <running_initialize+0x98>)
 800224e:	f005 fd0d 	bl	8007c6c <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002252:	213c      	movs	r1, #60	; 0x3c
 8002254:	4822      	ldr	r0, [pc, #136]	; (80022e0 <running_initialize+0x9c>)
 8002256:	f004 fa1d 	bl	8006694 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800225a:	213c      	movs	r1, #60	; 0x3c
 800225c:	4821      	ldr	r0, [pc, #132]	; (80022e4 <running_initialize+0xa0>)
 800225e:	f004 fa19 	bl	8006694 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <running_initialize+0xa4>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
	marker = 0;
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <running_initialize+0xa8>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <running_initialize+0xac>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <running_initialize+0xb0>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <running_initialize+0xb4>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
	prelengthl = 0;
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <running_initialize+0xb8>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
	prelengthr = 0;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <running_initialize+0xbc>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
	course_state_time = 0;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <running_initialize+0xc0>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
#endif
	printf("SIDESENSOR ENCODER\r\n");
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <running_initialize+0xc4>)
 8002294:	f005 fcea 	bl	8007c6c <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 8002298:	481c      	ldr	r0, [pc, #112]	; (800230c <running_initialize+0xc8>)
 800229a:	f004 f858 	bl	800634e <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <running_initialize+0xcc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	rightmotor = 0;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <running_initialize+0xd0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
	beforedirection = 0;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <running_initialize+0xd4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
	printf("PWM_Start\r\n");
 80022b0:	481a      	ldr	r0, [pc, #104]	; (800231c <running_initialize+0xd8>)
 80022b2:	f005 fcdb 	bl	8007c6c <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4819      	ldr	r0, [pc, #100]	; (8002320 <running_initialize+0xdc>)
 80022ba:	f004 f8c3 	bl	8006444 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022be:	2104      	movs	r1, #4
 80022c0:	4817      	ldr	r0, [pc, #92]	; (8002320 <running_initialize+0xdc>)
 80022c2:	f004 f8bf 	bl	8006444 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 80022c6:	4817      	ldr	r0, [pc, #92]	; (8002324 <running_initialize+0xe0>)
 80022c8:	f005 fcd0 	bl	8007c6c <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 80022cc:	4816      	ldr	r0, [pc, #88]	; (8002328 <running_initialize+0xe4>)
 80022ce:	f004 f83e 	bl	800634e <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <running_initialize+0xe8>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
#endif
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	08008c44 	.word	0x08008c44
 80022e0:	2000043c 	.word	0x2000043c
 80022e4:	20000260 	.word	0x20000260
 80022e8:	20000258 	.word	0x20000258
 80022ec:	200003f8 	.word	0x200003f8
 80022f0:	200002a2 	.word	0x200002a2
 80022f4:	200002f9 	.word	0x200002f9
 80022f8:	20000b48 	.word	0x20000b48
 80022fc:	200002a3 	.word	0x200002a3
 8002300:	2000018c 	.word	0x2000018c
 8002304:	20000b49 	.word	0x20000b49
 8002308:	08008c54 	.word	0x08008c54
 800230c:	200001e4 	.word	0x200001e4
 8002310:	20000234 	.word	0x20000234
 8002314:	20000228 	.word	0x20000228
 8002318:	20000b44 	.word	0x20000b44
 800231c:	08008c68 	.word	0x08008c68
 8002320:	2000014c 	.word	0x2000014c
 8002324:	08008c74 	.word	0x08008c74
 8002328:	200003fc 	.word	0x200003fc
 800232c:	200009c8 	.word	0x200009c8

08002330 <running_finalize>:

void running_finalize()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	motorenable = 0;
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <running_finalize+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 800233a:	f7ff ff75 	bl	8002228 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <running_finalize+0x44>)
 8002340:	f004 f829 	bl	8006396 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002344:	2104      	movs	r1, #4
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <running_finalize+0x48>)
 8002348:	f004 f8ba 	bl	80064c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800234c:	2100      	movs	r1, #0
 800234e:	480a      	ldr	r0, [pc, #40]	; (8002378 <running_finalize+0x48>)
 8002350:	f004 f8b6 	bl	80064c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim10);
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <running_finalize+0x4c>)
 8002356:	f004 f81e 	bl	8006396 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 800235a:	213c      	movs	r1, #60	; 0x3c
 800235c:	4808      	ldr	r0, [pc, #32]	; (8002380 <running_finalize+0x50>)
 800235e:	f004 f9d0 	bl	8006702 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002362:	213c      	movs	r1, #60	; 0x3c
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <running_finalize+0x54>)
 8002366:	f004 f9cc 	bl	8006702 <HAL_TIM_Encoder_Stop>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200009c8 	.word	0x200009c8
 8002374:	200003fc 	.word	0x200003fc
 8002378:	2000014c 	.word	0x2000014c
 800237c:	200001e4 	.word	0x200001e4
 8002380:	20000260 	.word	0x20000260
 8002384:	2000043c 	.word	0x2000043c

08002388 <d_print>:

void d_print()
{
 8002388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800238c:	b08c      	sub	sp, #48	; 0x30
 800238e:	af0a      	add	r7, sp, #40	; 0x28
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
#else	// ATTACH_LONGSENSOR
#if !USE_LONGSENSOR
	// only use normal sensor
	printf("\x1b[24C");	// Cursor move right *24
 8002390:	4840      	ldr	r0, [pc, #256]	; (8002494 <d_print+0x10c>)
 8002392:	f005 fbe3 	bl	8007b5c <iprintf>
	printf(ESC_RED);
 8002396:	4840      	ldr	r0, [pc, #256]	; (8002498 <d_print+0x110>)
 8002398:	f005 fbe0 	bl	8007b5c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <d_print+0x114>)
 800239e:	895b      	ldrh	r3, [r3, #10]
 80023a0:	4619      	mov	r1, r3
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <d_print+0x114>)
 80023a4:	891b      	ldrh	r3, [r3, #8]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b3c      	ldr	r3, [pc, #240]	; (800249c <d_print+0x114>)
 80023aa:	88db      	ldrh	r3, [r3, #6]
 80023ac:	4618      	mov	r0, r3
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <d_print+0x114>)
 80023b0:	889b      	ldrh	r3, [r3, #4]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4603      	mov	r3, r0
 80023b6:	483a      	ldr	r0, [pc, #232]	; (80024a0 <d_print+0x118>)
 80023b8:	f005 fbd0 	bl	8007b5c <iprintf>
	printf(ESC_DEF);
 80023bc:	4839      	ldr	r0, [pc, #228]	; (80024a4 <d_print+0x11c>)
 80023be:	f005 fbcd 	bl	8007b5c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <d_print+0x114>)
 80023c4:	8a5b      	ldrh	r3, [r3, #18]
 80023c6:	469c      	mov	ip, r3
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <d_print+0x114>)
 80023ca:	8a1b      	ldrh	r3, [r3, #16]
 80023cc:	469e      	mov	lr, r3
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <d_print+0x114>)
 80023d0:	8bdb      	ldrh	r3, [r3, #30]
 80023d2:	4698      	mov	r8, r3
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <d_print+0x114>)
 80023d6:	8b9b      	ldrh	r3, [r3, #28]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <d_print+0x114>)
 80023dc:	89db      	ldrh	r3, [r3, #14]
 80023de:	4619      	mov	r1, r3
 80023e0:	4b2e      	ldr	r3, [pc, #184]	; (800249c <d_print+0x114>)
 80023e2:	899b      	ldrh	r3, [r3, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <d_print+0x114>)
 80023e8:	885b      	ldrh	r3, [r3, #2]
 80023ea:	461c      	mov	r4, r3
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <d_print+0x114>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	461d      	mov	r5, r3
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <d_print+0x114>)
 80023f4:	8b5b      	ldrh	r3, [r3, #26]
 80023f6:	461e      	mov	r6, r3
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <d_print+0x114>)
 80023fa:	8b1b      	ldrh	r3, [r3, #24]
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <d_print+0x114>)
 8002400:	8adb      	ldrh	r3, [r3, #22]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <d_print+0x114>)
 8002406:	8a9b      	ldrh	r3, [r3, #20]
 8002408:	9308      	str	r3, [sp, #32]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9307      	str	r3, [sp, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	9306      	str	r3, [sp, #24]
 8002412:	9605      	str	r6, [sp, #20]
 8002414:	9504      	str	r5, [sp, #16]
 8002416:	9403      	str	r4, [sp, #12]
 8002418:	9002      	str	r0, [sp, #8]
 800241a:	9101      	str	r1, [sp, #4]
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	4643      	mov	r3, r8
 8002420:	4672      	mov	r2, lr
 8002422:	4661      	mov	r1, ip
 8002424:	4820      	ldr	r0, [pc, #128]	; (80024a8 <d_print+0x120>)
 8002426:	f005 fb99 	bl	8007b5c <iprintf>
	printf(ESC_RED);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
	printf(ESC_DEF);
#endif	// !USE_LONGSENSOR
#endif	// ATTACH_LONGSENSOR
	printf("\r\n");
 800242a:	4820      	ldr	r0, [pc, #128]	; (80024ac <d_print+0x124>)
 800242c:	f005 fc1e 	bl	8007c6c <puts>
	printf("\r\n");
#endif	// !CSV_FORMAT
#endif	// D_ANALOG

#if D_ENCODER
	printf("encl = %d, encr = %d \r\ndencl = %d, dencr = %d\r\n", encl, encr, dencl, dencr);
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <d_print+0x128>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <d_print+0x12c>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <d_print+0x130>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <d_print+0x134>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4603      	mov	r3, r0
 800244a:	481d      	ldr	r0, [pc, #116]	; (80024c0 <d_print+0x138>)
 800244c:	f005 fb86 	bl	8007b5c <iprintf>
	printf("lengthl = %d, lengthr = %d \r\nvelocityl = %d, velocityr = %d\r\n", lengthl, lengthr, velocityl, velocityr);
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <d_print+0x13c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <d_print+0x140>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <d_print+0x144>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <d_print+0x148>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4603      	mov	r3, r0
 800246a:	481a      	ldr	r0, [pc, #104]	; (80024d4 <d_print+0x14c>)
 800246c:	f005 fb76 	bl	8007b5c <iprintf>
#if D_PWM
	printf("pwmstepoutput = %5d, pwmsteptime = %5d, pwmstepud = %d\r\n", pwmstepoutput, pwmsteptime, pwmstepud);
#endif

#if D_ROTARY
	printf("rotary_value = %x\r\n", rotary_value);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <d_print+0x150>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <d_print+0x154>)
 8002478:	f005 fb70 	bl	8007b5c <iprintf>
#endif

#if D_SWITCH
	printf("enter = %d\r\n", enter);
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <d_print+0x158>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	4818      	ldr	r0, [pc, #96]	; (80024e4 <d_print+0x15c>)
 8002484:	f005 fb6a 	bl	8007b5c <iprintf>
#endif
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002492:	bf00      	nop
 8002494:	08008c7c 	.word	0x08008c7c
 8002498:	08008c84 	.word	0x08008c84
 800249c:	200000b8 	.word	0x200000b8
 80024a0:	08008c8c 	.word	0x08008c8c
 80024a4:	08008a98 	.word	0x08008a98
 80024a8:	08008ca4 	.word	0x08008ca4
 80024ac:	08008ba0 	.word	0x08008ba0
 80024b0:	200002a0 	.word	0x200002a0
 80024b4:	200000b0 	.word	0x200000b0
 80024b8:	2000025a 	.word	0x2000025a
 80024bc:	200000b2 	.word	0x200000b2
 80024c0:	08008ce4 	.word	0x08008ce4
 80024c4:	20000980 	.word	0x20000980
 80024c8:	20000b02 	.word	0x20000b02
 80024cc:	200000b4 	.word	0x200000b4
 80024d0:	20000226 	.word	0x20000226
 80024d4:	08008d14 	.word	0x08008d14
 80024d8:	20000254 	.word	0x20000254
 80024dc:	08008b78 	.word	0x08008b78
 80024e0:	20000b4a 	.word	0x20000b4a
 80024e4:	08008b68 	.word	0x08008b68

080024e8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 80024f0:	1d39      	adds	r1, r7, #4
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	2201      	movs	r2, #1
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <__io_putchar+0x20>)
 80024fa:	f004 fe92 	bl	8007222 <HAL_UART_Transmit>
	return ch;
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000988 	.word	0x20000988

0800250c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 800250c:	b4b0      	push	{r4, r5, r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	if(sensgettime >= SENSGETCOUNT)
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_ADC_ConvCpltCallback+0x104>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d954      	bls.n	80025c6 <HAL_ADC_ConvCpltCallback+0xba>
	{
		sensgettime = 0;
 800251c:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <HAL_ADC_ConvCpltCallback+0x104>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e04b      	b.n	80025c0 <HAL_ADC_ConvCpltCallback+0xb4>
		{
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8002528:	2300      	movs	r3, #0
 800252a:	73bb      	strb	r3, [r7, #14]
 800252c:	e039      	b.n	80025a2 <HAL_ADC_ConvCpltCallback+0x96>
			{
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 800252e:	2300      	movs	r3, #0
 8002530:	737b      	strb	r3, [r7, #13]
 8002532:	e02f      	b.n	8002594 <HAL_ADC_ConvCpltCallback+0x88>
				{
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	7bf9      	ldrb	r1, [r7, #15]
 800253a:	4836      	ldr	r0, [pc, #216]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800254a:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 800254c:	7b79      	ldrb	r1, [r7, #13]
 800254e:	7bfc      	ldrb	r4, [r7, #15]
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	7bf8      	ldrb	r0, [r7, #15]
 8002556:	4d2f      	ldr	r5, [pc, #188]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 8002558:	460b      	mov	r3, r1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	440b      	add	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4423      	add	r3, r4
 8002562:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8002566:	492b      	ldr	r1, [pc, #172]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	4622      	mov	r2, r4
 8002574:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8002578:	7b7a      	ldrb	r2, [r7, #13]
 800257a:	7bf9      	ldrb	r1, [r7, #15]
 800257c:	4825      	ldr	r0, [pc, #148]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	897a      	ldrh	r2, [r7, #10]
 800258a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	3b01      	subs	r3, #1
 8002592:	737b      	strb	r3, [r7, #13]
 8002594:	7b7a      	ldrb	r2, [r7, #13]
 8002596:	7bbb      	ldrb	r3, [r7, #14]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8cb      	bhi.n	8002534 <HAL_ADC_ConvCpltCallback+0x28>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	3301      	adds	r3, #1
 80025a0:	73bb      	strb	r3, [r7, #14]
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d9c2      	bls.n	800252e <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4919      	ldr	r1, [pc, #100]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 80025ae:	3230      	adds	r2, #48	; 0x30
 80025b0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_ADC_ConvCpltCallback+0x10c>)
 80025b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	3301      	adds	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b0b      	cmp	r3, #11
 80025c4:	d9b0      	bls.n	8002528 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	733b      	strb	r3, [r7, #12]
 80025ca:	e013      	b.n	80025f4 <HAL_ADC_ConvCpltCallback+0xe8>
	{
		analogbuffers[sensgettime][index] = analograw[index];
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_ADC_ConvCpltCallback+0x104>)
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	4610      	mov	r0, r2
 80025d4:	7b3a      	ldrb	r2, [r7, #12]
 80025d6:	4911      	ldr	r1, [pc, #68]	; (800261c <HAL_ADC_ConvCpltCallback+0x110>)
 80025d8:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 80025dc:	490d      	ldr	r1, [pc, #52]	; (8002614 <HAL_ADC_ConvCpltCallback+0x108>)
 80025de:	4603      	mov	r3, r0
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4403      	add	r3, r0
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	4622      	mov	r2, r4
 80025ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 80025ee:	7b3b      	ldrb	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	733b      	strb	r3, [r7, #12]
 80025f4:	7b3b      	ldrb	r3, [r7, #12]
 80025f6:	2b0b      	cmp	r3, #11
 80025f8:	d9e8      	bls.n	80025cc <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_ADC_ConvCpltCallback+0x104>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_ADC_ConvCpltCallback+0x104>)
 8002604:	701a      	strb	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bcb0      	pop	{r4, r5, r7}
 800260e:	4770      	bx	lr
 8002610:	20000128 	.word	0x20000128
 8002614:	20000a10 	.word	0x20000a10
 8002618:	200000b8 	.word	0x200000b8
 800261c:	2000012c 	.word	0x2000012c

08002620 <power>:

uint32_t power(uint8_t a, uint8_t b)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	460a      	mov	r2, r1
 800262a:	71fb      	strb	r3, [r7, #7]
 800262c:	4613      	mov	r3, r2
 800262e:	71bb      	strb	r3, [r7, #6]
	uint32_t r;
	for(int i = b; i > 0; i--)
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	e007      	b.n	8002646 <power+0x26>
	{
		r = r * a;
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
	for(int i = b; i > 0; i--)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3b01      	subs	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dcf4      	bgt.n	8002636 <power+0x16>
	}

	return r;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <eraseFlash>:

#if USE_FLASH
void eraseFlash(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8002664:	230b      	movs	r3, #11
 8002666:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800266c:	2302      	movs	r3, #2
 800266e:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002674:	463a      	mov	r2, r7
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f002 f862 	bl	8004744 <HAL_FLASHEx_Erase>
}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <writeFlash>:

void writeFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8002694:	f001 fef6 	bl	8004484 <HAL_FLASH_Unlock>
	eraseFlash();
 8002698:	f7ff ffdf 	bl	800265a <eraseFlash>

	for(uint32_t add = address; add < (address + size); add++)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e010      	b.n	80026c4 <writeFlash+0x3c>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	6979      	ldr	r1, [r7, #20]
 80026b2:	2000      	movs	r0, #0
 80026b4:	f001 fe92 	bl	80043dc <HAL_FLASH_Program>
		data++;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3301      	adds	r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
	for(uint32_t add = address; add < (address + size); add++)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3e8      	bcc.n	80026a2 <writeFlash+0x1a>
	}

	HAL_FLASH_Lock();
 80026d0:	f001 fefa 	bl	80044c8 <HAL_FLASH_Lock>
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <loadFlash>:

void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address, size);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	f005 fa20 	bl	8007b34 <memcpy>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002702:	e7fe      	b.n	8002702 <Error_Handler+0x6>

08002704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_MspInit+0x4c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_MspInit+0x4c>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_MspInit+0x4c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_MspInit+0x4c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a49      	ldr	r2, [pc, #292]	; (8002898 <HAL_ADC_MspInit+0x144>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 808c 	bne.w	8002890 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_ADC_MspInit+0x148>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4a46      	ldr	r2, [pc, #280]	; (800289c <HAL_ADC_MspInit+0x148>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6453      	str	r3, [r2, #68]	; 0x44
 8002788:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_ADC_MspInit+0x148>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_ADC_MspInit+0x148>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a3f      	ldr	r2, [pc, #252]	; (800289c <HAL_ADC_MspInit+0x148>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a31      	ldr	r2, [pc, #196]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_ADC_MspInit+0x148>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027e8:	233f      	movs	r3, #63	; 0x3f
 80027ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ec:	2303      	movs	r3, #3
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4619      	mov	r1, r3
 80027fa:	4829      	ldr	r0, [pc, #164]	; (80028a0 <HAL_ADC_MspInit+0x14c>)
 80027fc:	f002 f8c4 	bl	8004988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002800:	23ff      	movs	r3, #255	; 0xff
 8002802:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	4824      	ldr	r0, [pc, #144]	; (80028a4 <HAL_ADC_MspInit+0x150>)
 8002814:	f002 f8b8 	bl	8004988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002818:	2303      	movs	r3, #3
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	481f      	ldr	r0, [pc, #124]	; (80028a8 <HAL_ADC_MspInit+0x154>)
 800282c:	f002 f8ac 	bl	8004988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_ADC_MspInit+0x15c>)
 8002834:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_ADC_MspInit+0x158>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_ADC_MspInit+0x158>)
 800284a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002856:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_ADC_MspInit+0x158>)
 800285a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002866:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_ADC_MspInit+0x158>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002876:	f001 f9d3 	bl	8003c20 <HAL_DMA_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002880:	f7ff ff3c 	bl	80026fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_ADC_MspInit+0x158>)
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_ADC_MspInit+0x158>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3730      	adds	r7, #48	; 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40012000 	.word	0x40012000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	20000398 	.word	0x20000398
 80028b0:	40026410 	.word	0x40026410

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_I2C_MspInit+0x84>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12c      	bne.n	8002930 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_I2C_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_I2C_MspInit+0x88>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_I2C_MspInit+0x88>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f8:	2312      	movs	r3, #18
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002904:	2304      	movs	r3, #4
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	480c      	ldr	r0, [pc, #48]	; (8002940 <HAL_I2C_MspInit+0x8c>)
 8002910:	f002 f83a 	bl	8004988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_I2C_MspInit+0x88>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_I2C_MspInit+0x88>)
 800291e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_I2C_MspInit+0x88>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40005400 	.word	0x40005400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400

08002944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_SPI_MspInit+0x84>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12c      	bne.n	80029c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_SPI_MspInit+0x88>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_SPI_MspInit+0x88>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_SPI_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800299e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b0:	2305      	movs	r3, #5
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <HAL_SPI_MspInit+0x8c>)
 80029bc:	f001 ffe4 	bl	8004988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40003800 	.word	0x40003800
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020400 	.word	0x40020400

080029d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3a      	ldr	r2, [pc, #232]	; (8002adc <HAL_TIM_Encoder_MspInit+0x108>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d13d      	bne.n	8002a72 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8002a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a40:	2301      	movs	r3, #1
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4826      	ldr	r0, [pc, #152]	; (8002ae4 <HAL_TIM_Encoder_MspInit+0x110>)
 8002a4c:	f001 ff9c 	bl	8004988 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2019      	movs	r0, #25
 8002a56:	f001 f8ac 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a5a:	2019      	movs	r0, #25
 8002a5c:	f001 f8c5 	bl	8003bea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2100      	movs	r1, #0
 8002a64:	201a      	movs	r0, #26
 8002a66:	f001 f8a4 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a6a:	201a      	movs	r0, #26
 8002a6c:	f001 f8bd 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a70:	e030      	b.n	8002ad4 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_TIM_Encoder_MspInit+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d12b      	bne.n	8002ad4 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002ab4:	2330      	movs	r3, #48	; 0x30
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <HAL_TIM_Encoder_MspInit+0x118>)
 8002ad0:	f001 ff5a 	bl	8004988 <HAL_GPIO_Init>
}
 8002ad4:	bf00      	nop
 8002ad6:	3730      	adds	r7, #48	; 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40020400 	.word	0x40020400

08002af0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b1e:	e012      	b.n	8002b46 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <HAL_TIM_PWM_MspInit+0x68>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10d      	bne.n	8002b46 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_TIM_PWM_MspInit+0x64>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40000800 	.word	0x40000800

08002b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <HAL_TIM_Base_MspInit+0x118>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d116      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a40      	ldr	r2, [pc, #256]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2036      	movs	r0, #54	; 0x36
 8002b90:	f001 f80f 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b94:	2036      	movs	r0, #54	; 0x36
 8002b96:	f001 f828 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002b9a:	e066      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_TIM_Base_MspInit+0x120>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d116      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a32      	ldr	r2, [pc, #200]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002bb0:	f043 0320 	orr.w	r3, r3, #32
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2037      	movs	r0, #55	; 0x37
 8002bc8:	f000 fff3 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bcc:	2037      	movs	r0, #55	; 0x37
 8002bce:	f001 f80c 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8002bd2:	e04a      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_TIM_Base_MspInit+0x124>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d116      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2019      	movs	r0, #25
 8002c00:	f000 ffd7 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c04:	2019      	movs	r0, #25
 8002c06:	f000 fff0 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8002c0a:	e02e      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <HAL_TIM_Base_MspInit+0x128>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d116      	bne.n	8002c44 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	201a      	movs	r0, #26
 8002c38:	f000 ffbb 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c3c:	201a      	movs	r0, #26
 8002c3e:	f000 ffd4 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8002c42:	e012      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_TIM_Base_MspInit+0x12c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10d      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_TIM_Base_MspInit+0x11c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40001000 	.word	0x40001000
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40001400 	.word	0x40001400
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800
 8002c88:	40001c00 	.word	0x40001c00

08002c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cac:	d11f      	bne.n	8002cee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4816      	ldr	r0, [pc, #88]	; (8002d40 <HAL_TIM_MspPostInit+0xb4>)
 8002ce8:	f001 fe4e 	bl	8004988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cec:	e022      	b.n	8002d34 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <HAL_TIM_MspPostInit+0xb8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d11d      	bne.n	8002d34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_TIM_MspPostInit+0xb0>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8002d14:	23c0      	movs	r3, #192	; 0xc0
 8002d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d24:	2302      	movs	r3, #2
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4806      	ldr	r0, [pc, #24]	; (8002d48 <HAL_TIM_MspPostInit+0xbc>)
 8002d30:	f001 fe2a 	bl	8004988 <HAL_GPIO_Init>
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40020400 	.word	0x40020400

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_UART_MspInit+0x84>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12b      	bne.n	8002dc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_UART_MspInit+0x88>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da6:	23c0      	movs	r3, #192	; 0xc0
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002db6:	2308      	movs	r3, #8
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <HAL_UART_MspInit+0x8c>)
 8002dc2:	f001 fde1 	bl	8004988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002dc6:	bf00      	nop
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020800 	.word	0x40020800

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler+0x4>

08002dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <BusFault_Handler+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <UsageFault_Handler+0x4>

08002dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 f972 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002e36:	f003 fcab 	bl	8006790 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002e3c:	f003 fca8 	bl	8006790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	2000043c 	.word	0x2000043c
 8002e48:	200001e4 	.word	0x200001e4

08002e4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e50:	4803      	ldr	r0, [pc, #12]	; (8002e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e52:	f003 fc9d 	bl	8006790 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e58:	f003 fc9a 	bl	8006790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000043c 	.word	0x2000043c
 8002e64:	2000033c 	.word	0x2000033c

08002e68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM6_DAC_IRQHandler+0x10>)
 8002e6e:	f003 fc8f 	bl	8006790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200003fc 	.word	0x200003fc

08002e7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM7_IRQHandler+0x10>)
 8002e82:	f003 fc85 	bl	8006790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000b04 	.word	0x20000b04

08002e90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <DMA2_Stream0_IRQHandler+0x10>)
 8002e96:	f001 f839 	bl	8003f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000398 	.word	0x20000398

08002ea4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e00a      	b.n	8002ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eb6:	f3af 8000 	nop.w
 8002eba:	4601      	mov	r1, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbf0      	blt.n	8002eb6 <_read+0x12>
	}

return len;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e009      	b.n	8002f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	60ba      	str	r2, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff faf5 	bl	80024e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf1      	blt.n	8002ef0 <_write+0x12>
	}
	return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_close>:

int _close(int file)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_isatty>:

int _isatty(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
	return 1;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f004 fd96 	bl	8007ae0 <__errno>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20020000 	.word	0x20020000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	2000008c 	.word	0x2000008c
 8002fe8:	20000b78 	.word	0x20000b78

08002fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <SystemInit+0x28>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <SystemInit+0x28>)
 8002ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SystemInit+0x28>)
 8003002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003006:	609a      	str	r2, [r3, #8]
#endif
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800301c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800301e:	e003      	b.n	8003028 <LoopCopyDataInit>

08003020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003026:	3104      	adds	r1, #4

08003028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003028:	480b      	ldr	r0, [pc, #44]	; (8003058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800302c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800302e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003030:	d3f6      	bcc.n	8003020 <CopyDataInit>
  ldr  r2, =_sbss
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003034:	e002      	b.n	800303c <LoopFillZerobss>

08003036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003038:	f842 3b04 	str.w	r3, [r2], #4

0800303c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800303e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003040:	d3f9      	bcc.n	8003036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003042:	f7ff ffd3 	bl	8002fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003046:	f004 fd51 	bl	8007aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7fd fed3 	bl	8000df4 <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003050:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003054:	08008e1c 	.word	0x08008e1c
  ldr  r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800305c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003060:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003064:	20000b74 	.word	0x20000b74

08003068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC_IRQHandler>
	...

0800306c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <HAL_Init+0x40>)
 8003076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_Init+0x40>)
 8003082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_Init+0x40>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003094:	2003      	movs	r0, #3
 8003096:	f000 fd81 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309a:	2000      	movs	r0, #0
 800309c:	f000 f808 	bl	80030b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a0:	f7ff fb30 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_InitTick+0x54>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_InitTick+0x58>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd99 	bl	8003c06 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f000 fd61 	bl	8003bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_InitTick+0x5c>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000000 	.word	0x20000000
 8003108:	20000008 	.word	0x20000008
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000008 	.word	0x20000008
 8003134:	20000b4c 	.word	0x20000b4c

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000b4c 	.word	0x20000b4c

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_Delay+0x40>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e033      	b.n	8003212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff face 	bl	8002754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031da:	f023 0302 	bic.w	r3, r3, #2
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa8a 	bl	8003700 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
 8003202:	e001      	b.n	8003208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Start_DMA+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0cc      	b.n	80033d4 <HAL_ADC_Start_DMA+0x1b8>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d018      	beq.n	8003282 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003260:	4b5e      	ldr	r3, [pc, #376]	; (80033dc <HAL_ADC_Start_DMA+0x1c0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <HAL_ADC_Start_DMA+0x1c4>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0c9a      	lsrs	r2, r3, #18
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003274:	e002      	b.n	800327c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3b01      	subs	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f9      	bne.n	8003276 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	f040 80a0 	bne.w	80033d2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d0:	d106      	bne.n	80032e0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f023 0206 	bic.w	r2, r3, #6
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
 80032de:	e002      	b.n	80032e6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_ADC_Start_DMA+0x1c8>)
 80032f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_ADC_Start_DMA+0x1cc>)
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <HAL_ADC_Start_DMA+0x1d0>)
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <HAL_ADC_Start_DMA+0x1d4>)
 8003308:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003312:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003322:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003332:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	334c      	adds	r3, #76	; 0x4c
 800333e:	4619      	mov	r1, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f000 fd1a 	bl	8003d7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2b00      	cmp	r3, #0
 8003352:	d12a      	bne.n	80033aa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_ADC_Start_DMA+0x1d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d015      	beq.n	800338a <HAL_ADC_Start_DMA+0x16e>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <HAL_ADC_Start_DMA+0x1dc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d105      	bne.n	8003374 <HAL_ADC_Start_DMA+0x158>
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_ADC_Start_DMA+0x1c8>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_ADC_Start_DMA+0x1e0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d129      	bne.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_ADC_Start_DMA+0x1c8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2b0f      	cmp	r3, #15
 8003388:	d823      	bhi.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11c      	bne.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	e013      	b.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <HAL_ADC_Start_DMA+0x1d8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10e      	bne.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033d0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000000 	.word	0x20000000
 80033e0:	431bde83 	.word	0x431bde83
 80033e4:	40012300 	.word	0x40012300
 80033e8:	080038f9 	.word	0x080038f9
 80033ec:	080039b3 	.word	0x080039b3
 80033f0:	080039cf 	.word	0x080039cf
 80033f4:	40012000 	.word	0x40012000
 80033f8:	40012100 	.word	0x40012100
 80033fc:	40012200 	.word	0x40012200

08003400 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_ADC_Stop_DMA+0x1a>
 8003416:	2302      	movs	r3, #2
 8003418:	e038      	b.n	800348c <HAL_ADC_Stop_DMA+0x8c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d120      	bne.n	8003482 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fce9 	bl	8003e2c <HAL_DMA_Abort>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800346c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e105      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x228>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d925      	bls.n	8003534 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	3b1e      	subs	r3, #30
 80034fe:	2207      	movs	r2, #7
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43da      	mvns	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	400a      	ands	r2, r1
 800350c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	4603      	mov	r3, r0
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4403      	add	r3, r0
 8003526:	3b1e      	subs	r3, #30
 8003528:	409a      	lsls	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e022      	b.n	800357a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	2207      	movs	r2, #7
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	400a      	ands	r2, r1
 8003556:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	4603      	mov	r3, r0
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4403      	add	r3, r0
 8003570:	409a      	lsls	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d824      	bhi.n	80035cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b05      	subs	r3, #5
 8003594:	221f      	movs	r2, #31
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	400a      	ands	r2, r1
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	3b05      	subs	r3, #5
 80035be:	fa00 f203 	lsl.w	r2, r0, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34
 80035ca:	e04c      	b.n	8003666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d824      	bhi.n	800361e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3b23      	subs	r3, #35	; 0x23
 80035e6:	221f      	movs	r2, #31
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43da      	mvns	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	400a      	ands	r2, r1
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b23      	subs	r3, #35	; 0x23
 8003610:	fa00 f203 	lsl.w	r2, r0, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
 800361c:	e023      	b.n	8003666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	3b41      	subs	r3, #65	; 0x41
 8003630:	221f      	movs	r2, #31
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	400a      	ands	r2, r1
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4618      	mov	r0, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	3b41      	subs	r3, #65	; 0x41
 800365a:	fa00 f203 	lsl.w	r2, r0, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_ADC_ConfigChannel+0x234>)
 8003668:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_ADC_ConfigChannel+0x238>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d109      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1cc>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b12      	cmp	r3, #18
 800367a:	d105      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_ADC_ConfigChannel+0x238>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d123      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b10      	cmp	r3, #16
 8003698:	d003      	beq.n	80036a2 <HAL_ADC_ConfigChannel+0x1e6>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b11      	cmp	r3, #17
 80036a0:	d11b      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d111      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_ADC_ConfigChannel+0x23c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_ADC_ConfigChannel+0x240>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	0c9a      	lsrs	r2, r3, #18
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036cc:	e002      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f9      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012300 	.word	0x40012300
 80036f4:	40012000 	.word	0x40012000
 80036f8:	20000000 	.word	0x20000000
 80036fc:	431bde83 	.word	0x431bde83

08003700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <ADC_Init+0x1f0>)
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <ADC_Init+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e00f      	b.n	80037fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0202 	bic.w	r2, r2, #2
 800380c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800384a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	035a      	lsls	r2, r3, #13
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e007      	b.n	8003874 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	3b01      	subs	r3, #1
 8003890:	051a      	lsls	r2, r3, #20
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038b6:	025a      	lsls	r2, r3, #9
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	029a      	lsls	r2, r3, #10
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40012300 	.word	0x40012300
 80038f4:	0f000001 	.word	0x0f000001

080038f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13c      	bne.n	800398c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d12b      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003930:	2b00      	cmp	r3, #0
 8003932:	d127      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800394c:	2b00      	cmp	r3, #0
 800394e:	d119      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0220 	bic.w	r2, r2, #32
 800395e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7fe fdc1 	bl	800250c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800398a:	e00e      	b.n	80039aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fd85 	bl	80034a8 <HAL_ADC_ErrorCallback>
}
 800399e:	e004      	b.n	80039aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fd67 	bl	8003494 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fd5a 	bl	80034a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2e:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	60d3      	str	r3, [r2, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <__NVIC_GetPriorityGrouping+0x18>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0307 	and.w	r3, r3, #7
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db0b      	blt.n	8003a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4907      	ldr	r1, [pc, #28]	; (8003a98 <__NVIC_EnableIRQ+0x38>)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2001      	movs	r0, #1
 8003a82:	fa00 f202 	lsl.w	r2, r0, r2
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b68:	d301      	bcc.n	8003b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00f      	b.n	8003b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <SysTick_Config+0x40>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b76:	210f      	movs	r1, #15
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f7ff ff8e 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SysTick_Config+0x40>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SysTick_Config+0x40>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff29 	bl	80039fc <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc4:	f7ff ff3e 	bl	8003a44 <__NVIC_GetPriorityGrouping>
 8003bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff8e 	bl	8003af0 <NVIC_EncodePriority>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff5d 	bl	8003a9c <__NVIC_SetPriority>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff31 	bl	8003a60 <__NVIC_EnableIRQ>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ffa2 	bl	8003b58 <SysTick_Config>
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7ff fa84 	bl	8003138 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e099      	b.n	8003d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5c:	e00f      	b.n	8003c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5e:	f7ff fa6b 	bl	8003138 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d908      	bls.n	8003c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e078      	b.n	8003d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e8      	bne.n	8003c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_DMA_Init+0x158>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d107      	bne.n	8003ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0307 	bic.w	r3, r3, #7
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d117      	bne.n	8003d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fadf 	bl	80042e8 <DMA_CheckFifoParam>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e016      	b.n	8003d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa96 	bl	800427c <DMA_CalcBaseAndBitshift>
 8003d50:	4603      	mov	r3, r0
 8003d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	f010803f 	.word	0xf010803f

08003d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Start_IT+0x26>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e040      	b.n	8003e24 <HAL_DMA_Start_IT+0xa8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d12f      	bne.n	8003e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa28 	bl	8004220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	223f      	movs	r2, #63	; 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0216 	orr.w	r2, r2, #22
 8003dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e005      	b.n	8003e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7ff f97d 	bl	8003138 <HAL_GetTick>
 8003e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d008      	beq.n	8003e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e052      	b.n	8003f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0216 	bic.w	r2, r2, #22
 8003e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_DMA_Abort+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0208 	bic.w	r2, r2, #8
 8003e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	e013      	b.n	8003ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb0:	f7ff f942 	bl	8003138 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d90c      	bls.n	8003ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e015      	b.n	8003f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e4      	bne.n	8003eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	223f      	movs	r2, #63	; 0x3f
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f18:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_DMA_IRQHandler+0x258>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a92      	ldr	r2, [pc, #584]	; (8004168 <HAL_DMA_IRQHandler+0x25c>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a9b      	lsrs	r3, r3, #10
 8003f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	2208      	movs	r2, #8
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01a      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2208      	movs	r2, #8
 8003f66:	409a      	lsls	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d012      	beq.n	8003fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f043 0202 	orr.w	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d012      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	2210      	movs	r2, #16
 8003fea:	409a      	lsls	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d043      	beq.n	800407c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03c      	beq.n	800407c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	2210      	movs	r2, #16
 8004008:	409a      	lsls	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d024      	beq.n	800407c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
 800403a:	e01f      	b.n	800407c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
 800404c:	e016      	b.n	800407c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0208 	bic.w	r2, r2, #8
 800406a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	2220      	movs	r2, #32
 8004082:	409a      	lsls	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 808e 	beq.w	80041aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8086 	beq.w	80041aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	2220      	movs	r2, #32
 80040a4:	409a      	lsls	r2, r3
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d136      	bne.n	8004124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0216 	bic.w	r2, r2, #22
 80040c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_DMA_IRQHandler+0x1da>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0208 	bic.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	223f      	movs	r2, #63	; 0x3f
 80040fc:	409a      	lsls	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d07d      	beq.n	8004216 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
        }
        return;
 8004122:	e078      	b.n	8004216 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	2b00      	cmp	r3, #0
 8004146:	d030      	beq.n	80041aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
 8004150:	e02b      	b.n	80041aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d027      	beq.n	80041aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e022      	b.n	80041aa <HAL_DMA_IRQHandler+0x29e>
 8004164:	20000000 	.word	0x20000000
 8004168:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0210 	bic.w	r2, r2, #16
 8004188:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d032      	beq.n	8004218 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d022      	beq.n	8004204 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2205      	movs	r2, #5
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d307      	bcc.n	80041f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f2      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x2ca>
 80041f0:	e000      	b.n	80041f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e000      	b.n	8004218 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004216:	bf00      	nop
    }
  }
}
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop

08004220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800423c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d108      	bne.n	8004260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800425e:	e007      	b.n	8004270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3b10      	subs	r3, #16
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <DMA_CalcBaseAndBitshift+0x64>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d909      	bls.n	80042be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	659a      	str	r2, [r3, #88]	; 0x58
 80042bc:	e007      	b.n	80042ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	aaaaaaab 	.word	0xaaaaaaab
 80042e4:	08008d6c 	.word	0x08008d6c

080042e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d11f      	bne.n	8004342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d855      	bhi.n	80043b4 <DMA_CheckFifoParam+0xcc>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <DMA_CheckFifoParam+0x28>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004321 	.word	0x08004321
 8004314:	08004333 	.word	0x08004333
 8004318:	08004321 	.word	0x08004321
 800431c:	080043b5 	.word	0x080043b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d045      	beq.n	80043b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004330:	e042      	b.n	80043b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800433a:	d13f      	bne.n	80043bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004340:	e03c      	b.n	80043bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	d121      	bne.n	8004390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d836      	bhi.n	80043c0 <DMA_CheckFifoParam+0xd8>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <DMA_CheckFifoParam+0x70>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	0800436f 	.word	0x0800436f
 8004360:	08004369 	.word	0x08004369
 8004364:	08004381 	.word	0x08004381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      break;
 800436c:	e02f      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d024      	beq.n	80043c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e021      	b.n	80043c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004388:	d11e      	bne.n	80043c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800438e:	e01b      	b.n	80043c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d902      	bls.n	800439c <DMA_CheckFifoParam+0xb4>
 8004396:	2b03      	cmp	r3, #3
 8004398:	d003      	beq.n	80043a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800439a:	e018      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      break;
 80043a0:	e015      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      break;
 80043b2:	e00b      	b.n	80043cc <DMA_CheckFifoParam+0xe4>
      break;
 80043b4:	bf00      	nop
 80043b6:	e00a      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043b8:	bf00      	nop
 80043ba:	e008      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043bc:	bf00      	nop
 80043be:	e006      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043c0:	bf00      	nop
 80043c2:	e004      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;   
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043cc:	bf00      	nop
    }
  } 
  
  return status; 
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <HAL_FLASH_Program+0xa0>)
 80043f0:	7e1b      	ldrb	r3, [r3, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_FLASH_Program+0x1e>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e03b      	b.n	8004472 <HAL_FLASH_Program+0x96>
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <HAL_FLASH_Program+0xa0>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004404:	f000 f870 	bl	80044e8 <FLASH_WaitForLastOperation>
 8004408:	4603      	mov	r3, r0
 800440a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d12b      	bne.n	800446a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004418:	783b      	ldrb	r3, [r7, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	68b8      	ldr	r0, [r7, #8]
 800441e:	f000 f919 	bl	8004654 <FLASH_Program_Byte>
 8004422:	e016      	b.n	8004452 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800442a:	883b      	ldrh	r3, [r7, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f000 f8ec 	bl	800460c <FLASH_Program_HalfWord>
 8004434:	e00d      	b.n	8004452 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d105      	bne.n	8004448 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4619      	mov	r1, r3
 8004440:	68b8      	ldr	r0, [r7, #8]
 8004442:	f000 f8c1 	bl	80045c8 <FLASH_Program_Word>
 8004446:	e004      	b.n	8004452 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	f000 f88b 	bl	8004568 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004452:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004456:	f000 f847 	bl	80044e8 <FLASH_WaitForLastOperation>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_FLASH_Program+0xa4>)
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4a07      	ldr	r2, [pc, #28]	; (8004480 <HAL_FLASH_Program+0xa4>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_FLASH_Program+0xa0>)
 800446c:	2200      	movs	r2, #0
 800446e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004470:	7dfb      	ldrb	r3, [r7, #23]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000b50 	.word	0x20000b50
 8004480:	40023c00 	.word	0x40023c00

08004484 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_FLASH_Unlock+0x38>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da0b      	bge.n	80044ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_FLASH_Unlock+0x38>)
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_FLASH_Unlock+0x3c>)
 800449a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_FLASH_Unlock+0x38>)
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <HAL_FLASH_Unlock+0x40>)
 80044a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_FLASH_Unlock+0x38>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	da01      	bge.n	80044ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80044ae:	79fb      	ldrb	r3, [r7, #7]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40023c00 	.word	0x40023c00
 80044c0:	45670123 	.word	0x45670123
 80044c4:	cdef89ab 	.word	0xcdef89ab

080044c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_FLASH_Lock+0x1c>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_FLASH_Lock+0x1c>)
 80044d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <FLASH_WaitForLastOperation+0x78>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80044fa:	f7fe fe1d 	bl	8003138 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004500:	e010      	b.n	8004524 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d00c      	beq.n	8004524 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <FLASH_WaitForLastOperation+0x38>
 8004510:	f7fe fe12 	bl	8003138 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d201      	bcs.n	8004524 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e019      	b.n	8004558 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <FLASH_WaitForLastOperation+0x7c>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e8      	bne.n	8004502 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <FLASH_WaitForLastOperation+0x7c>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <FLASH_WaitForLastOperation+0x7c>)
 800453e:	2201      	movs	r2, #1
 8004540:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <FLASH_WaitForLastOperation+0x7c>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800454e:	f000 f8a3 	bl	8004698 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
  
}  
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000b50 	.word	0x20000b50
 8004564:	40023c00 	.word	0x40023c00

08004568 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004568:	b490      	push	{r4, r7}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 8004586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800458a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <FLASH_Program_DoubleWord+0x5c>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800459e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80045a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	0013      	movs	r3, r2
 80045b0:	2400      	movs	r4, #0
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	3204      	adds	r2, #4
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc90      	pop	{r4, r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023c00 	.word	0x40023c00

080045c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <FLASH_Program_Word+0x40>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <FLASH_Program_Word+0x40>)
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <FLASH_Program_Word+0x40>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <FLASH_Program_Word+0x40>)
 80045e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <FLASH_Program_Word+0x40>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4a06      	ldr	r2, [pc, #24]	; (8004608 <FLASH_Program_Word+0x40>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40023c00 	.word	0x40023c00

0800460c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <FLASH_Program_HalfWord+0x44>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	801a      	strh	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023c00 	.word	0x40023c00

08004654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <FLASH_Program_Byte+0x40>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <FLASH_Program_Byte+0x40>)
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <FLASH_Program_Byte+0x40>)
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <FLASH_Program_Byte+0x40>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <FLASH_Program_Byte+0x40>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <FLASH_Program_Byte+0x40>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	701a      	strb	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00

08004698 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800469c:	4b27      	ldr	r3, [pc, #156]	; (800473c <FLASH_SetErrorCode+0xa4>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f043 0310 	orr.w	r3, r3, #16
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046b6:	2210      	movs	r2, #16
 80046b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f043 0308 	orr.w	r3, r3, #8
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046d4:	2220      	movs	r2, #32
 80046d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 80046ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046f2:	2240      	movs	r2, #64	; 0x40
 80046f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <FLASH_SetErrorCode+0xa4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 800470c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <FLASH_SetErrorCode+0xa4>)
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <FLASH_SetErrorCode+0xa4>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f043 0320 	orr.w	r3, r3, #32
 8004728:	4a05      	ldr	r2, [pc, #20]	; (8004740 <FLASH_SetErrorCode+0xa8>)
 800472a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <FLASH_SetErrorCode+0xa4>)
 800472e:	2202      	movs	r2, #2
 8004730:	60da      	str	r2, [r3, #12]
  }
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40023c00 	.word	0x40023c00
 8004740:	20000b50 	.word	0x20000b50

08004744 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004756:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_FLASHEx_Erase+0xd8>)
 8004758:	7e1b      	ldrb	r3, [r3, #24]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_FLASHEx_Erase+0x1e>
 800475e:	2302      	movs	r3, #2
 8004760:	e058      	b.n	8004814 <HAL_FLASHEx_Erase+0xd0>
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <HAL_FLASHEx_Erase+0xd8>)
 8004764:	2201      	movs	r2, #1
 8004766:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004768:	f24c 3050 	movw	r0, #50000	; 0xc350
 800476c:	f7ff febc 	bl	80044e8 <FLASH_WaitForLastOperation>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d148      	bne.n	800480c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f04f 32ff 	mov.w	r2, #4294967295
 8004780:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d115      	bne.n	80047b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 f844 	bl	8004824 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800479c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047a0:	f7ff fea2 	bl	80044e8 <FLASH_WaitForLastOperation>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_FLASHEx_Erase+0xdc>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_FLASHEx_Erase+0xdc>)
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	6113      	str	r3, [r2, #16]
 80047b4:	e028      	b.n	8004808 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e01c      	b.n	80047f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	4619      	mov	r1, r3
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f000 f850 	bl	800486c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047d0:	f7ff fe8a 	bl	80044e8 <FLASH_WaitForLastOperation>
 80047d4:	4603      	mov	r3, r0
 80047d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_FLASHEx_Erase+0xdc>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4a10      	ldr	r2, [pc, #64]	; (8004820 <HAL_FLASHEx_Erase+0xdc>)
 80047de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80047e2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	601a      	str	r2, [r3, #0]
          break;
 80047f0:	e00a      	b.n	8004808 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4413      	add	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d3da      	bcc.n	80047be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004808:	f000 f878 	bl	80048fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_FLASHEx_Erase+0xd8>)
 800480e:	2200      	movs	r2, #0
 8004810:	761a      	strb	r2, [r3, #24]

  return status;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000b50 	.word	0x20000b50
 8004820:	40023c00 	.word	0x40023c00

08004824 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <FLASH_MassErase+0x44>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <FLASH_MassErase+0x44>)
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <FLASH_MassErase+0x44>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	4a09      	ldr	r2, [pc, #36]	; (8004868 <FLASH_MassErase+0x44>)
 8004842:	f043 0304 	orr.w	r3, r3, #4
 8004846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <FLASH_MassErase+0x44>)
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	4313      	orrs	r3, r2
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <FLASH_MassErase+0x44>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6113      	str	r3, [r2, #16]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00

0800486c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e010      	b.n	80048aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d103      	bne.n	8004896 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800488e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e009      	b.n	80048aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d103      	bne.n	80048a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800489c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e002      	b.n	80048aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80048a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	490f      	ldr	r1, [pc, #60]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048da:	f043 0302 	orr.w	r3, r3, #2
 80048de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <FLASH_Erase_Sector+0x8c>)
 80048e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ea:	6113      	str	r3, [r2, #16]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40023c00 	.word	0x40023c00

080048fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004900:	4b20      	ldr	r3, [pc, #128]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <FLASH_FlushCaches+0x88>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004912:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004916:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <FLASH_FlushCaches+0x88>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <FLASH_FlushCaches+0x88>)
 800491e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <FLASH_FlushCaches+0x88>)
 800492a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <FLASH_FlushCaches+0x88>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <FLASH_FlushCaches+0x88>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <FLASH_FlushCaches+0x88>)
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <FLASH_FlushCaches+0x88>)
 800495a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a07      	ldr	r2, [pc, #28]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800496a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <FLASH_FlushCaches+0x88>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <FLASH_FlushCaches+0x88>)
 8004972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004976:	6013      	str	r3, [r2, #0]
  }
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40023c00 	.word	0x40023c00

08004988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e16b      	b.n	8004c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a4:	2201      	movs	r2, #1
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	429a      	cmp	r2, r3
 80049be:	f040 815a 	bne.w	8004c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d00b      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d007      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049d6:	2b11      	cmp	r3, #17
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b12      	cmp	r3, #18
 80049e0:	d130      	bne.n	8004a44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0201 	and.w	r2, r3, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0xfc>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b12      	cmp	r3, #18
 8004a82:	d123      	bne.n	8004acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	08da      	lsrs	r2, r3, #3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3208      	adds	r2, #8
 8004a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	220f      	movs	r2, #15
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	08da      	lsrs	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3208      	adds	r2, #8
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0203 	and.w	r2, r3, #3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80b4 	beq.w	8004c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b2a:	4a5a      	ldr	r2, [pc, #360]	; (8004c94 <HAL_GPIO_Init+0x30c>)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	3302      	adds	r3, #2
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_GPIO_Init+0x310>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <HAL_GPIO_Init+0x226>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	; (8004c9c <HAL_GPIO_Init+0x314>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d025      	beq.n	8004baa <HAL_GPIO_Init+0x222>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	; (8004ca0 <HAL_GPIO_Init+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <HAL_GPIO_Init+0x21e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_GPIO_Init+0x31c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d019      	beq.n	8004ba2 <HAL_GPIO_Init+0x21a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4d      	ldr	r2, [pc, #308]	; (8004ca8 <HAL_GPIO_Init+0x320>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0x216>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <HAL_GPIO_Init+0x324>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00d      	beq.n	8004b9a <HAL_GPIO_Init+0x212>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_GPIO_Init+0x328>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_GPIO_Init+0x20e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_GPIO_Init+0x32c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_GPIO_Init+0x20a>
 8004b8e:	2307      	movs	r3, #7
 8004b90:	e00e      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b92:	2308      	movs	r3, #8
 8004b94:	e00c      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b96:	2306      	movs	r3, #6
 8004b98:	e00a      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	e008      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e006      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e004      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	f002 0203 	and.w	r2, r2, #3
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	4093      	lsls	r3, r2
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc0:	4934      	ldr	r1, [pc, #208]	; (8004c94 <HAL_GPIO_Init+0x30c>)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bce:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c22:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	f67f ae90 	bls.w	80049a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3724      	adds	r7, #36	; 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e001      	b.n	8004cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cfc:	787b      	ldrb	r3, [r7, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d08:	e003      	b.n	8004d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	041a      	lsls	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e11f      	b.n	8004f72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fd fdb4 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d84:	f000 fd3c 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a7b      	ldr	r2, [pc, #492]	; (8004f7c <HAL_I2C_Init+0x25c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d807      	bhi.n	8004da4 <HAL_I2C_Init+0x84>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a7a      	ldr	r2, [pc, #488]	; (8004f80 <HAL_I2C_Init+0x260>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bf94      	ite	ls
 8004d9c:	2301      	movls	r3, #1
 8004d9e:	2300      	movhi	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e006      	b.n	8004db2 <HAL_I2C_Init+0x92>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_I2C_Init+0x264>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf94      	ite	ls
 8004dac:	2301      	movls	r3, #1
 8004dae:	2300      	movhi	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0db      	b.n	8004f72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a72      	ldr	r2, [pc, #456]	; (8004f88 <HAL_I2C_Init+0x268>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0c9b      	lsrs	r3, r3, #18
 8004dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a64      	ldr	r2, [pc, #400]	; (8004f7c <HAL_I2C_Init+0x25c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d802      	bhi.n	8004df4 <HAL_I2C_Init+0xd4>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3301      	adds	r3, #1
 8004df2:	e009      	b.n	8004e08 <HAL_I2C_Init+0xe8>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	4a63      	ldr	r2, [pc, #396]	; (8004f8c <HAL_I2C_Init+0x26c>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	3301      	adds	r3, #1
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4956      	ldr	r1, [pc, #344]	; (8004f7c <HAL_I2C_Init+0x25c>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d80d      	bhi.n	8004e44 <HAL_I2C_Init+0x124>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1e59      	subs	r1, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	bf38      	it	cc
 8004e40:	2304      	movcc	r3, #4
 8004e42:	e04f      	b.n	8004ee4 <HAL_I2C_Init+0x1c4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d111      	bne.n	8004e70 <HAL_I2C_Init+0x150>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1e58      	subs	r0, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	440b      	add	r3, r1
 8004e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e012      	b.n	8004e96 <HAL_I2C_Init+0x176>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1e58      	subs	r0, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	0099      	lsls	r1, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Init+0x17e>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e022      	b.n	8004ee4 <HAL_I2C_Init+0x1c4>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_I2C_Init+0x1a4>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1e58      	subs	r0, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	440b      	add	r3, r1
 8004eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	e00f      	b.n	8004ee4 <HAL_I2C_Init+0x1c4>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e58      	subs	r0, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	0099      	lsls	r1, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eda:	3301      	adds	r3, #1
 8004edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	6809      	ldr	r1, [r1, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6911      	ldr	r1, [r2, #16]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	000186a0 	.word	0x000186a0
 8004f80:	001e847f 	.word	0x001e847f
 8004f84:	003d08ff 	.word	0x003d08ff
 8004f88:	431bde83 	.word	0x431bde83
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e25b      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d075      	beq.n	800509a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fae:	4ba3      	ldr	r3, [pc, #652]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fba:	4ba0      	ldr	r3, [pc, #640]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d112      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc6:	4b9d      	ldr	r3, [pc, #628]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd2:	d10b      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd4:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d05b      	beq.n	8005098 <HAL_RCC_OscConfig+0x108>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d157      	bne.n	8005098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e236      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d106      	bne.n	8005004 <HAL_RCC_OscConfig+0x74>
 8004ff6:	4b91      	ldr	r3, [pc, #580]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a90      	ldr	r2, [pc, #576]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e01d      	b.n	8005040 <HAL_RCC_OscConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x98>
 800500e:	4b8b      	ldr	r3, [pc, #556]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a8a      	ldr	r2, [pc, #552]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a87      	ldr	r2, [pc, #540]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0xb0>
 8005028:	4b84      	ldr	r3, [pc, #528]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a83      	ldr	r2, [pc, #524]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a80      	ldr	r2, [pc, #512]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800503a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe f876 	bl	8003138 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005050:	f7fe f872 	bl	8003138 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1fb      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0xc0>
 800506e:	e014      	b.n	800509a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fe f862 	bl	8003138 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005078:	f7fe f85e 	bl	8003138 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e1e7      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0xe8>
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d063      	beq.n	800516e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a6:	4b65      	ldr	r3, [pc, #404]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b2:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d11c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050be:	4b5f      	ldr	r3, [pc, #380]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d116      	bne.n	80050f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	4b5c      	ldr	r3, [pc, #368]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x152>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1bb      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b56      	ldr	r3, [pc, #344]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4952      	ldr	r1, [pc, #328]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	e03a      	b.n	800516e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d020      	beq.n	8005142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005100:	4b4f      	ldr	r3, [pc, #316]	; (8005240 <HAL_RCC_OscConfig+0x2b0>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fe f817 	bl	8003138 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510e:	f7fe f813 	bl	8003138 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e19c      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	4b43      	ldr	r3, [pc, #268]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4940      	ldr	r1, [pc, #256]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]
 8005140:	e015      	b.n	800516e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005142:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCC_OscConfig+0x2b0>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd fff6 	bl	8003138 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005150:	f7fd fff2 	bl	8003138 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e17b      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d030      	beq.n	80051dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d016      	beq.n	80051b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005182:	4b30      	ldr	r3, [pc, #192]	; (8005244 <HAL_RCC_OscConfig+0x2b4>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fd ffd6 	bl	8003138 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005190:	f7fd ffd2 	bl	8003138 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e15b      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x200>
 80051ae:	e015      	b.n	80051dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b0:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_OscConfig+0x2b4>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fd ffbf 	bl	8003138 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051be:	f7fd ffbb 	bl	8003138 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e144      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a0 	beq.w	800532a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_OscConfig+0x2b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d121      	bne.n	800526a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_RCC_OscConfig+0x2b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <HAL_RCC_OscConfig+0x2b8>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fd ff81 	bl	8003138 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	e011      	b.n	800525e <HAL_RCC_OscConfig+0x2ce>
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	42470000 	.word	0x42470000
 8005244:	42470e80 	.word	0x42470e80
 8005248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fd ff74 	bl	8003138 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0fd      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525e:	4b81      	ldr	r3, [pc, #516]	; (8005464 <HAL_RCC_OscConfig+0x4d4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d106      	bne.n	8005280 <HAL_RCC_OscConfig+0x2f0>
 8005272:	4b7d      	ldr	r3, [pc, #500]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a7c      	ldr	r2, [pc, #496]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
 800527e:	e01c      	b.n	80052ba <HAL_RCC_OscConfig+0x32a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d10c      	bne.n	80052a2 <HAL_RCC_OscConfig+0x312>
 8005288:	4b77      	ldr	r3, [pc, #476]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	4a76      	ldr	r2, [pc, #472]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800528e:	f043 0304 	orr.w	r3, r3, #4
 8005292:	6713      	str	r3, [r2, #112]	; 0x70
 8005294:	4b74      	ldr	r3, [pc, #464]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	4a73      	ldr	r2, [pc, #460]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6713      	str	r3, [r2, #112]	; 0x70
 80052a0:	e00b      	b.n	80052ba <HAL_RCC_OscConfig+0x32a>
 80052a2:	4b71      	ldr	r3, [pc, #452]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	4a70      	ldr	r2, [pc, #448]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6713      	str	r3, [r2, #112]	; 0x70
 80052ae:	4b6e      	ldr	r3, [pc, #440]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	4a6d      	ldr	r2, [pc, #436]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d015      	beq.n	80052ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fd ff39 	bl	8003138 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fd ff35 	bl	8003138 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0bc      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e0:	4b61      	ldr	r3, [pc, #388]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ee      	beq.n	80052ca <HAL_RCC_OscConfig+0x33a>
 80052ec:	e014      	b.n	8005318 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fd ff23 	bl	8003138 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fd ff1f 	bl	8003138 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e0a6      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530c:	4b56      	ldr	r3, [pc, #344]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ee      	bne.n	80052f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d105      	bne.n	800532a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531e:	4b52      	ldr	r3, [pc, #328]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	4a51      	ldr	r2, [pc, #324]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8092 	beq.w	8005458 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d05c      	beq.n	80053fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d141      	bne.n	80053cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005348:	4b48      	ldr	r3, [pc, #288]	; (800546c <HAL_RCC_OscConfig+0x4dc>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fd fef3 	bl	8003138 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fd feef 	bl	8003138 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e078      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005368:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	019b      	lsls	r3, r3, #6
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	3b01      	subs	r3, #1
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	4933      	ldr	r1, [pc, #204]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCC_OscConfig+0x4dc>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fd fec8 	bl	8003138 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fd fec4 	bl	8003138 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e04d      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x41c>
 80053ca:	e045      	b.n	8005458 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <HAL_RCC_OscConfig+0x4dc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd feb1 	bl	8003138 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053da:	f7fd fead 	bl	8003138 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e036      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ec:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x44a>
 80053f8:	e02e      	b.n	8005458 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e029      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <HAL_RCC_OscConfig+0x4d8>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	429a      	cmp	r2, r3
 8005418:	d11c      	bne.n	8005454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d115      	bne.n	8005454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800542e:	4013      	ands	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005434:	4293      	cmp	r3, r2
 8005436:	d10d      	bne.n	8005454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d106      	bne.n	8005454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40007000 	.word	0x40007000
 8005468:	40023800 	.word	0x40023800
 800546c:	42470060 	.word	0x42470060

08005470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0cc      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005484:	4b68      	ldr	r3, [pc, #416]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d90c      	bls.n	80054ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b65      	ldr	r3, [pc, #404]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b63      	ldr	r3, [pc, #396]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0b8      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d020      	beq.n	80054fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a58      	ldr	r2, [pc, #352]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054dc:	4b53      	ldr	r3, [pc, #332]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a52      	ldr	r2, [pc, #328]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e8:	4b50      	ldr	r3, [pc, #320]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	494d      	ldr	r1, [pc, #308]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d044      	beq.n	8005590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b47      	ldr	r3, [pc, #284]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d119      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e07f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d003      	beq.n	800552e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	2b03      	cmp	r3, #3
 800552c:	d107      	bne.n	800553e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552e:	4b3f      	ldr	r3, [pc, #252]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e06f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e067      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4934      	ldr	r1, [pc, #208]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005560:	f7fd fdea 	bl	8003138 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	e00a      	b.n	800557e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005568:	f7fd fde6 	bl	8003138 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e04f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 020c 	and.w	r2, r3, #12
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	429a      	cmp	r2, r3
 800558e:	d1eb      	bne.n	8005568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d20c      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e032      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4916      	ldr	r1, [pc, #88]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	490e      	ldr	r1, [pc, #56]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f6:	f000 f821 	bl	800563c <HAL_RCC_GetSysClockFreq>
 80055fa:	4601      	mov	r1, r0
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	5cd3      	ldrb	r3, [r2, r3]
 800560a:	fa21 f303 	lsr.w	r3, r1, r3
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1c8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fd4a 	bl	80030b0 <HAL_InitTick>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40023c00 	.word	0x40023c00
 800562c:	40023800 	.word	0x40023800
 8005630:	08008d54 	.word	0x08008d54
 8005634:	20000000 	.word	0x20000000
 8005638:	20000004 	.word	0x20000004

0800563c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	2300      	movs	r3, #0
 800564c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005652:	4b63      	ldr	r3, [pc, #396]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b04      	cmp	r3, #4
 800565c:	d007      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x32>
 800565e:	2b08      	cmp	r3, #8
 8005660:	d008      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x38>
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 80b4 	bne.w	80057d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b5e      	ldr	r3, [pc, #376]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800566a:	60bb      	str	r3, [r7, #8]
       break;
 800566c:	e0b3      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566e:	4b5d      	ldr	r3, [pc, #372]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005670:	60bb      	str	r3, [r7, #8]
      break;
 8005672:	e0b0      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005674:	4b5a      	ldr	r3, [pc, #360]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800567c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567e:	4b58      	ldr	r3, [pc, #352]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04a      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568a:	4b55      	ldr	r3, [pc, #340]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	f04f 0400 	mov.w	r4, #0
 8005694:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	ea03 0501 	and.w	r5, r3, r1
 80056a0:	ea04 0602 	and.w	r6, r4, r2
 80056a4:	4629      	mov	r1, r5
 80056a6:	4632      	mov	r2, r6
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	0154      	lsls	r4, r2, #5
 80056b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056b6:	014b      	lsls	r3, r1, #5
 80056b8:	4619      	mov	r1, r3
 80056ba:	4622      	mov	r2, r4
 80056bc:	1b49      	subs	r1, r1, r5
 80056be:	eb62 0206 	sbc.w	r2, r2, r6
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	f04f 0400 	mov.w	r4, #0
 80056ca:	0194      	lsls	r4, r2, #6
 80056cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056d0:	018b      	lsls	r3, r1, #6
 80056d2:	1a5b      	subs	r3, r3, r1
 80056d4:	eb64 0402 	sbc.w	r4, r4, r2
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	00e2      	lsls	r2, r4, #3
 80056e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056e6:	00d9      	lsls	r1, r3, #3
 80056e8:	460b      	mov	r3, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	195b      	adds	r3, r3, r5
 80056ee:	eb44 0406 	adc.w	r4, r4, r6
 80056f2:	f04f 0100 	mov.w	r1, #0
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	02a2      	lsls	r2, r4, #10
 80056fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005700:	0299      	lsls	r1, r3, #10
 8005702:	460b      	mov	r3, r1
 8005704:	4614      	mov	r4, r2
 8005706:	4618      	mov	r0, r3
 8005708:	4621      	mov	r1, r4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	461a      	mov	r2, r3
 8005712:	4623      	mov	r3, r4
 8005714:	f7fa fdac 	bl	8000270 <__aeabi_uldivmod>
 8005718:	4603      	mov	r3, r0
 800571a:	460c      	mov	r4, r1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e049      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005720:	4b2f      	ldr	r3, [pc, #188]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	099b      	lsrs	r3, r3, #6
 8005726:	f04f 0400 	mov.w	r4, #0
 800572a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	ea03 0501 	and.w	r5, r3, r1
 8005736:	ea04 0602 	and.w	r6, r4, r2
 800573a:	4629      	mov	r1, r5
 800573c:	4632      	mov	r2, r6
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	f04f 0400 	mov.w	r4, #0
 8005746:	0154      	lsls	r4, r2, #5
 8005748:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800574c:	014b      	lsls	r3, r1, #5
 800574e:	4619      	mov	r1, r3
 8005750:	4622      	mov	r2, r4
 8005752:	1b49      	subs	r1, r1, r5
 8005754:	eb62 0206 	sbc.w	r2, r2, r6
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	f04f 0400 	mov.w	r4, #0
 8005760:	0194      	lsls	r4, r2, #6
 8005762:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005766:	018b      	lsls	r3, r1, #6
 8005768:	1a5b      	subs	r3, r3, r1
 800576a:	eb64 0402 	sbc.w	r4, r4, r2
 800576e:	f04f 0100 	mov.w	r1, #0
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	00e2      	lsls	r2, r4, #3
 8005778:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800577c:	00d9      	lsls	r1, r3, #3
 800577e:	460b      	mov	r3, r1
 8005780:	4614      	mov	r4, r2
 8005782:	195b      	adds	r3, r3, r5
 8005784:	eb44 0406 	adc.w	r4, r4, r6
 8005788:	f04f 0100 	mov.w	r1, #0
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	02a2      	lsls	r2, r4, #10
 8005792:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005796:	0299      	lsls	r1, r3, #10
 8005798:	460b      	mov	r3, r1
 800579a:	4614      	mov	r4, r2
 800579c:	4618      	mov	r0, r3
 800579e:	4621      	mov	r1, r4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	461a      	mov	r2, r3
 80057a8:	4623      	mov	r3, r4
 80057aa:	f7fa fd61 	bl	8000270 <__aeabi_uldivmod>
 80057ae:	4603      	mov	r3, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	60bb      	str	r3, [r7, #8]
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057d2:	60bb      	str	r3, [r7, #8]
      break;
 80057d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d6:	68bb      	ldr	r3, [r7, #8]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	00f42400 	.word	0x00f42400

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000000 	.word	0x20000000

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4601      	mov	r1, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4a03      	ldr	r2, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	08008d64 	.word	0x08008d64

08005828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800582c:	f7ff ffdc 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005830:	4601      	mov	r1, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0b5b      	lsrs	r3, r3, #13
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4a03      	ldr	r2, [pc, #12]	; (800584c <HAL_RCC_GetPCLK2Freq+0x24>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
 8005840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	08008d64 	.word	0x08008d64

08005850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e056      	b.n	8005910 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fd f861 	bl	8002944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005898:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	f003 0104 	and.w	r1, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_SPI_Transmit+0x22>
 8005936:	2302      	movs	r3, #2
 8005938:	e11e      	b.n	8005b78 <HAL_SPI_Transmit+0x260>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005942:	f7fd fbf9 	bl	8003138 <HAL_GetTick>
 8005946:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d002      	beq.n	800595e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800595c:	e103      	b.n	8005b66 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_SPI_Transmit+0x52>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800596e:	e0fa      	b.n	8005b66 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d107      	bne.n	80059c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d007      	beq.n	80059e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ee:	d14b      	bne.n	8005a88 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_Transmit+0xe6>
 80059f8:	8afb      	ldrh	r3, [r7, #22]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d13e      	bne.n	8005a7c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a22:	e02b      	b.n	8005a7c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d112      	bne.n	8005a58 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	881a      	ldrh	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a56:	e011      	b.n	8005a7c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a58:	f7fd fb6e 	bl	8003138 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d803      	bhi.n	8005a70 <HAL_SPI_Transmit+0x158>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Transmit+0x15e>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a7a:	e074      	b.n	8005b66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ce      	bne.n	8005a24 <HAL_SPI_Transmit+0x10c>
 8005a86:	e04c      	b.n	8005b22 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_SPI_Transmit+0x17e>
 8005a90:	8afb      	ldrh	r3, [r7, #22]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d140      	bne.n	8005b18 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005abc:	e02c      	b.n	8005b18 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d113      	bne.n	8005af4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005af2:	e011      	b.n	8005b18 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af4:	f7fd fb20 	bl	8003138 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d803      	bhi.n	8005b0c <HAL_SPI_Transmit+0x1f4>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d102      	bne.n	8005b12 <HAL_SPI_Transmit+0x1fa>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b16:	e026      	b.n	8005b66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1cd      	bne.n	8005abe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fba4 	bl	8006274 <SPI_EndRxTxTransaction>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e000      	b.n	8005b66 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9c:	d112      	bne.n	8005bc4 <HAL_SPI_Receive+0x44>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f8e9 	bl	8005d92 <HAL_SPI_TransmitReceive>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	e0e2      	b.n	8005d8a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_SPI_Receive+0x52>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0db      	b.n	8005d8a <HAL_SPI_Receive+0x20a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bda:	f7fd faad 	bl	8003138 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bf0:	e0c2      	b.n	8005d78 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Receive+0x7e>
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c02:	e0b9      	b.n	8005d78 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2204      	movs	r2, #4
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4a:	d107      	bne.n	8005c5c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d162      	bne.n	8005d48 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c82:	e02e      	b.n	8005ce2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d115      	bne.n	8005cbe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f103 020c 	add.w	r2, r3, #12
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cbc:	e011      	b.n	8005ce2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbe:	f7fd fa3b 	bl	8003138 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <HAL_SPI_Receive+0x156>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_Receive+0x15c>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ce0:	e04a      	b.n	8005d78 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1cb      	bne.n	8005c84 <HAL_SPI_Receive+0x104>
 8005cec:	e031      	b.n	8005d52 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d113      	bne.n	8005d24 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	b292      	uxth	r2, r2
 8005d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d22:	e011      	b.n	8005d48 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d24:	f7fd fa08 	bl	8003138 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d803      	bhi.n	8005d3c <HAL_SPI_Receive+0x1bc>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d102      	bne.n	8005d42 <HAL_SPI_Receive+0x1c2>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d46:	e017      	b.n	8005d78 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1cd      	bne.n	8005cee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fa27 	bl	80061aa <SPI_EndRxTransaction>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e000      	b.n	8005d78 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005d76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08c      	sub	sp, #48	; 0x30
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005da0:	2301      	movs	r3, #1
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x26>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e18a      	b.n	80060ce <HAL_SPI_TransmitReceive+0x33c>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc0:	f7fd f9ba 	bl	8003138 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005dd6:	887b      	ldrh	r3, [r7, #2]
 8005dd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d00f      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x70>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de8:	d107      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x68>
 8005df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d003      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e00:	e15b      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x82>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x82>
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e1a:	e14e      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d003      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	887a      	ldrh	r2, [r7, #2]
 8005e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	887a      	ldrh	r2, [r7, #2]
 8005e46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8c:	d178      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x10a>
 8005e96:	8b7b      	ldrh	r3, [r7, #26]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d166      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec0:	e053      	b.n	8005f6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d11b      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x176>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x176>
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d113      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d119      	bne.n	8005f4a <HAL_SPI_TransmitReceive+0x1b8>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d014      	beq.n	8005f4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f46:	2301      	movs	r3, #1
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f4a:	f7fd f8f5 	bl	8003138 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d807      	bhi.n	8005f6a <HAL_SPI_TransmitReceive+0x1d8>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d003      	beq.n	8005f6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f68:	e0a7      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1a6      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x130>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1a1      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x130>
 8005f7e:	e07c      	b.n	800607a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x1fc>
 8005f88:	8b7b      	ldrh	r3, [r7, #26]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d16b      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb4:	e057      	b.n	8006066 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d11c      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x26c>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d017      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x26c>
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d114      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	7812      	ldrb	r2, [r2, #0]
 8005fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d119      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x2ae>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800603c:	2301      	movs	r3, #1
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006040:	f7fd f87a 	bl	8003138 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800604c:	429a      	cmp	r2, r3
 800604e:	d803      	bhi.n	8006058 <HAL_SPI_TransmitReceive+0x2c6>
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d102      	bne.n	800605e <HAL_SPI_TransmitReceive+0x2cc>
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006064:	e029      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1a2      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x224>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d19d      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800607a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f8f8 	bl	8006274 <SPI_EndRxTxTransaction>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006096:	e010      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	e000      	b.n	80060ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3730      	adds	r7, #48	; 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060e6:	e04c      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d048      	beq.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80060f0:	f7fd f822 	bl	8003138 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d902      	bls.n	8006106 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d13d      	bne.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611e:	d111      	bne.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006128:	d004      	beq.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d107      	bne.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d10f      	bne.n	800616e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800616c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d1a3      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af02      	add	r7, sp, #8
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061be:	d111      	bne.n	80061e4 <SPI_EndRxTransaction+0x3a>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c8:	d004      	beq.n	80061d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d2:	d107      	bne.n	80061e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ec:	d12a      	bne.n	8006244 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	d012      	beq.n	800621e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	2180      	movs	r1, #128	; 0x80
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f7ff ff67 	bl	80060d6 <SPI_WaitFlagStateUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d02d      	beq.n	800626a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e026      	b.n	800626c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	2101      	movs	r1, #1
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff ff54 	bl	80060d6 <SPI_WaitFlagStateUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01a      	beq.n	800626a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e013      	b.n	800626c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	2101      	movs	r1, #1
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ff41 	bl	80060d6 <SPI_WaitFlagStateUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e000      	b.n	800626c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <SPI_EndRxTxTransaction+0x7c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <SPI_EndRxTxTransaction+0x80>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0d5b      	lsrs	r3, r3, #21
 800628c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d112      	bne.n	80062c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff ff13 	bl	80060d6 <SPI_WaitFlagStateUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e00f      	b.n	80062e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d0f2      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x52>
 80062e0:	e000      	b.n	80062e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062e2:	bf00      	nop
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000000 	.word	0x20000000
 80062f4:	165e9f81 	.word	0x165e9f81

080062f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e01d      	b.n	8006346 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fc fc1c 	bl	8002b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f000 fc20 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b06      	cmp	r3, #6
 8006376:	d007      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <HAL_TIM_Base_Stop_IT+0x48>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	f240 4344 	movw	r3, #1092	; 0x444
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <HAL_TIM_Base_Stop_IT+0x48>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e01d      	b.n	800643a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fc fb6c 	bl	8002af0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f000 fba6 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fde0 	bl	800701c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <HAL_TIM_PWM_Start+0x74>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_TIM_PWM_Start+0x2c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a14      	ldr	r2, [pc, #80]	; (80064bc <HAL_TIM_PWM_Start+0x78>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_TIM_PWM_Start+0x30>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_TIM_PWM_Start+0x32>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d007      	beq.n	80064ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fda2 	bl	800701c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_TIM_PWM_Stop+0xa8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIM_PWM_Stop+0x2c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_TIM_PWM_Stop+0xac>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_PWM_Stop+0x30>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <HAL_TIM_PWM_Stop+0x32>
 80064f0:	2300      	movs	r3, #0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d017      	beq.n	8006526 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <HAL_TIM_PWM_Stop+0x66>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1a      	ldr	r2, [r3, #32]
 800650c:	f240 4344 	movw	r3, #1092	; 0x444
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <HAL_TIM_PWM_Stop+0x66>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006524:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <HAL_TIM_PWM_Stop+0x96>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	f240 4344 	movw	r3, #1092	; 0x444
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <HAL_TIM_PWM_Stop+0x96>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e083      	b.n	800668c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fc fa1b 	bl	80029d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f000 fad9 	bl	8006b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	4313      	orrs	r3, r2
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006610:	f023 030c 	bic.w	r3, r3, #12
 8006614:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800661c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	4313      	orrs	r3, r2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	011a      	lsls	r2, r3, #4
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	031b      	lsls	r3, r3, #12
 8006640:	4313      	orrs	r3, r2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4313      	orrs	r3, r2
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_TIM_Encoder_Start+0x16>
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d008      	beq.n	80066ba <HAL_TIM_Encoder_Start+0x26>
 80066a8:	e00f      	b.n	80066ca <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fcb2 	bl	800701c <TIM_CCxChannelCmd>
      break;
 80066b8:	e016      	b.n	80066e8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	2104      	movs	r1, #4
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fcaa 	bl	800701c <TIM_CCxChannelCmd>
      break;
 80066c8:	e00e      	b.n	80066e8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2201      	movs	r2, #1
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fca2 	bl	800701c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	2104      	movs	r1, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fc9b 	bl	800701c <TIM_CCxChannelCmd>
      break;
 80066e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_TIM_Encoder_Stop+0x16>
 8006712:	2b04      	cmp	r3, #4
 8006714:	d008      	beq.n	8006728 <HAL_TIM_Encoder_Stop+0x26>
 8006716:	e00f      	b.n	8006738 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fc7b 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006726:	e016      	b.n	8006756 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2200      	movs	r2, #0
 800672e:	2104      	movs	r1, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fc73 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006736:	e00e      	b.n	8006756 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fc6b 	bl	800701c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	2104      	movs	r1, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc64 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006754:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10f      	bne.n	8006786 <HAL_TIM_Encoder_Stop+0x84>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	f240 4344 	movw	r3, #1092	; 0x444
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <HAL_TIM_Encoder_Stop+0x84>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0202 	mvn.w	r2, #2
 80067bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9b4 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9a6 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9b7 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b04      	cmp	r3, #4
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0204 	mvn.w	r2, #4
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f98a 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f97c 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f98d 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b08      	cmp	r3, #8
 800684c:	d122      	bne.n	8006894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b08      	cmp	r3, #8
 800685a:	d11b      	bne.n	8006894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0208 	mvn.w	r2, #8
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2204      	movs	r2, #4
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f960 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f952 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f963 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d122      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d11b      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0210 	mvn.w	r2, #16
 80068b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2208      	movs	r2, #8
 80068be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f936 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f928 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f939 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10e      	bne.n	8006914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d107      	bne.n	8006914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0201 	mvn.w	r2, #1
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7f9 ff5c 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d10e      	bne.n	8006940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b80      	cmp	r3, #128	; 0x80
 800692e:	d107      	bne.n	8006940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fc1a 	bl	8007174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d10e      	bne.n	800696c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d107      	bne.n	800696c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8fe 	bl	8006b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b20      	cmp	r3, #32
 8006978:	d10e      	bne.n	8006998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b20      	cmp	r3, #32
 8006986:	d107      	bne.n	8006998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0220 	mvn.w	r2, #32
 8006990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbe4 	bl	8007160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e0b4      	b.n	8006b24 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	f200 809f 	bhi.w	8006b10 <HAL_TIM_PWM_ConfigChannel+0x170>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006b11 	.word	0x08006b11
 80069e0:	08006b11 	.word	0x08006b11
 80069e4:	08006b11 	.word	0x08006b11
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006b11 	.word	0x08006b11
 80069f0:	08006b11 	.word	0x08006b11
 80069f4:	08006b11 	.word	0x08006b11
 80069f8:	08006a8f 	.word	0x08006a8f
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b11 	.word	0x08006b11
 8006a04:	08006b11 	.word	0x08006b11
 8006a08:	08006acf 	.word	0x08006acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f952 	bl	8006cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0208 	orr.w	r2, r2, #8
 8006a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	619a      	str	r2, [r3, #24]
      break;
 8006a4a:	e062      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f9a2 	bl	8006d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	021a      	lsls	r2, r3, #8
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
      break;
 8006a8c:	e041      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f9f7 	bl	8006e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0208 	orr.w	r2, r2, #8
 8006aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0204 	bic.w	r2, r2, #4
 8006ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69d9      	ldr	r1, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
      break;
 8006acc:	e021      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fa4b 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	021a      	lsls	r2, r3, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	61da      	str	r2, [r3, #28]
      break;
 8006b0e:	e000      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d00f      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d027      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d023      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_Base_SetConfig+0x128>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <TIM_Base_SetConfig+0x12c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	; (8006cac <TIM_Base_SetConfig+0x130>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <TIM_Base_SetConfig+0x134>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <TIM_Base_SetConfig+0x138>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <TIM_Base_SetConfig+0x13c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d103      	bne.n	8006c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	615a      	str	r2, [r3, #20]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40010400 	.word	0x40010400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	40001c00 	.word	0x40001c00
 8006cb8:	40002000 	.word	0x40002000

08006cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC1_SetConfig+0x64>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d10c      	bne.n	8006d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0308 	bic.w	r3, r3, #8
 8006d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <TIM_OC1_SetConfig+0xd8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC1_SetConfig+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <TIM_OC1_SetConfig+0xdc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f023 0210 	bic.w	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a22      	ldr	r2, [pc, #136]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x68>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x94>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x92>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a12      	ldr	r2, [pc, #72]	; (8007014 <TIM_OC4_SetConfig+0xa4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <TIM_OC4_SetConfig+0xa8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2201      	movs	r2, #1
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	43db      	mvns	r3, r3
 800703e:	401a      	ands	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1a      	ldr	r2, [r3, #32]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e05a      	b.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a21      	ldr	r2, [pc, #132]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d01d      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a18      	ldr	r2, [pc, #96]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4313      	orrs	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40010400 	.word	0x40010400
 8007158:	40014000 	.word	0x40014000
 800715c:	40001800 	.word	0x40001800

08007160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e03f      	b.n	800721a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fb fdcc 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2224      	movs	r2, #36	; 0x24
 80071b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f90b 	bl	80073e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695a      	ldr	r2, [r3, #20]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b088      	sub	sp, #32
 8007226:	af02      	add	r7, sp, #8
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	f040 8083 	bne.w	800734a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_UART_Transmit+0x2e>
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e07b      	b.n	800734c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_UART_Transmit+0x40>
 800725e:	2302      	movs	r3, #2
 8007260:	e074      	b.n	800734c <HAL_UART_Transmit+0x12a>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2221      	movs	r2, #33	; 0x21
 8007274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007278:	f7fb ff5e 	bl	8003138 <HAL_GetTick>
 800727c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007292:	e042      	b.n	800731a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d122      	bne.n	80072f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2200      	movs	r2, #0
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f84c 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e042      	b.n	800734c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3302      	adds	r3, #2
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	e017      	b.n	800731a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60bb      	str	r3, [r7, #8]
 80072f0:	e013      	b.n	800731a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f829 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e01f      	b.n	800734c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	60ba      	str	r2, [r7, #8]
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1b7      	bne.n	8007294 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	2140      	movs	r1, #64	; 0x40
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f810 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e006      	b.n	800734c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007364:	e02c      	b.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d028      	beq.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <UART_WaitOnFlagUntilTimeout+0x30>
 8007374:	f7fb fee0 	bl	8003138 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	429a      	cmp	r2, r3
 8007382:	d21d      	bcs.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007392:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0201 	bic.w	r2, r2, #1
 80073a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e00f      	b.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4013      	ands	r3, r2
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d0c3      	beq.n	8007366 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	b085      	sub	sp, #20
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800742a:	f023 030c 	bic.w	r3, r3, #12
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	430b      	orrs	r3, r1
 8007436:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007456:	f040 818b 	bne.w	8007770 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4ac1      	ldr	r2, [pc, #772]	; (8007764 <UART_SetConfig+0x37c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d005      	beq.n	8007470 <UART_SetConfig+0x88>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4abf      	ldr	r2, [pc, #764]	; (8007768 <UART_SetConfig+0x380>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f040 80bd 	bne.w	80075ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007470:	f7fe f9da 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 8007474:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	461d      	mov	r5, r3
 800747a:	f04f 0600 	mov.w	r6, #0
 800747e:	46a8      	mov	r8, r5
 8007480:	46b1      	mov	r9, r6
 8007482:	eb18 0308 	adds.w	r3, r8, r8
 8007486:	eb49 0409 	adc.w	r4, r9, r9
 800748a:	4698      	mov	r8, r3
 800748c:	46a1      	mov	r9, r4
 800748e:	eb18 0805 	adds.w	r8, r8, r5
 8007492:	eb49 0906 	adc.w	r9, r9, r6
 8007496:	f04f 0100 	mov.w	r1, #0
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074aa:	4688      	mov	r8, r1
 80074ac:	4691      	mov	r9, r2
 80074ae:	eb18 0005 	adds.w	r0, r8, r5
 80074b2:	eb49 0106 	adc.w	r1, r9, r6
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	461d      	mov	r5, r3
 80074bc:	f04f 0600 	mov.w	r6, #0
 80074c0:	196b      	adds	r3, r5, r5
 80074c2:	eb46 0406 	adc.w	r4, r6, r6
 80074c6:	461a      	mov	r2, r3
 80074c8:	4623      	mov	r3, r4
 80074ca:	f7f8 fed1 	bl	8000270 <__aeabi_uldivmod>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	461a      	mov	r2, r3
 80074d4:	4ba5      	ldr	r3, [pc, #660]	; (800776c <UART_SetConfig+0x384>)
 80074d6:	fba3 2302 	umull	r2, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	461d      	mov	r5, r3
 80074e4:	f04f 0600 	mov.w	r6, #0
 80074e8:	46a9      	mov	r9, r5
 80074ea:	46b2      	mov	sl, r6
 80074ec:	eb19 0309 	adds.w	r3, r9, r9
 80074f0:	eb4a 040a 	adc.w	r4, sl, sl
 80074f4:	4699      	mov	r9, r3
 80074f6:	46a2      	mov	sl, r4
 80074f8:	eb19 0905 	adds.w	r9, r9, r5
 80074fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800750c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007514:	4689      	mov	r9, r1
 8007516:	4692      	mov	sl, r2
 8007518:	eb19 0005 	adds.w	r0, r9, r5
 800751c:	eb4a 0106 	adc.w	r1, sl, r6
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	461d      	mov	r5, r3
 8007526:	f04f 0600 	mov.w	r6, #0
 800752a:	196b      	adds	r3, r5, r5
 800752c:	eb46 0406 	adc.w	r4, r6, r6
 8007530:	461a      	mov	r2, r3
 8007532:	4623      	mov	r3, r4
 8007534:	f7f8 fe9c 	bl	8000270 <__aeabi_uldivmod>
 8007538:	4603      	mov	r3, r0
 800753a:	460c      	mov	r4, r1
 800753c:	461a      	mov	r2, r3
 800753e:	4b8b      	ldr	r3, [pc, #556]	; (800776c <UART_SetConfig+0x384>)
 8007540:	fba3 1302 	umull	r1, r3, r3, r2
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	2164      	movs	r1, #100	; 0x64
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3332      	adds	r3, #50	; 0x32
 8007552:	4a86      	ldr	r2, [pc, #536]	; (800776c <UART_SetConfig+0x384>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007560:	4498      	add	r8, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	461d      	mov	r5, r3
 8007566:	f04f 0600 	mov.w	r6, #0
 800756a:	46a9      	mov	r9, r5
 800756c:	46b2      	mov	sl, r6
 800756e:	eb19 0309 	adds.w	r3, r9, r9
 8007572:	eb4a 040a 	adc.w	r4, sl, sl
 8007576:	4699      	mov	r9, r3
 8007578:	46a2      	mov	sl, r4
 800757a:	eb19 0905 	adds.w	r9, r9, r5
 800757e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007582:	f04f 0100 	mov.w	r1, #0
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800758e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007596:	4689      	mov	r9, r1
 8007598:	4692      	mov	sl, r2
 800759a:	eb19 0005 	adds.w	r0, r9, r5
 800759e:	eb4a 0106 	adc.w	r1, sl, r6
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	461d      	mov	r5, r3
 80075a8:	f04f 0600 	mov.w	r6, #0
 80075ac:	196b      	adds	r3, r5, r5
 80075ae:	eb46 0406 	adc.w	r4, r6, r6
 80075b2:	461a      	mov	r2, r3
 80075b4:	4623      	mov	r3, r4
 80075b6:	f7f8 fe5b 	bl	8000270 <__aeabi_uldivmod>
 80075ba:	4603      	mov	r3, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	461a      	mov	r2, r3
 80075c0:	4b6a      	ldr	r3, [pc, #424]	; (800776c <UART_SetConfig+0x384>)
 80075c2:	fba3 1302 	umull	r1, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2164      	movs	r1, #100	; 0x64
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	3332      	adds	r3, #50	; 0x32
 80075d4:	4a65      	ldr	r2, [pc, #404]	; (800776c <UART_SetConfig+0x384>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f003 0207 	and.w	r2, r3, #7
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4442      	add	r2, r8
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	e26f      	b.n	8007aca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075ea:	f7fe f909 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 80075ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	461d      	mov	r5, r3
 80075f4:	f04f 0600 	mov.w	r6, #0
 80075f8:	46a8      	mov	r8, r5
 80075fa:	46b1      	mov	r9, r6
 80075fc:	eb18 0308 	adds.w	r3, r8, r8
 8007600:	eb49 0409 	adc.w	r4, r9, r9
 8007604:	4698      	mov	r8, r3
 8007606:	46a1      	mov	r9, r4
 8007608:	eb18 0805 	adds.w	r8, r8, r5
 800760c:	eb49 0906 	adc.w	r9, r9, r6
 8007610:	f04f 0100 	mov.w	r1, #0
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800761c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007620:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007624:	4688      	mov	r8, r1
 8007626:	4691      	mov	r9, r2
 8007628:	eb18 0005 	adds.w	r0, r8, r5
 800762c:	eb49 0106 	adc.w	r1, r9, r6
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	461d      	mov	r5, r3
 8007636:	f04f 0600 	mov.w	r6, #0
 800763a:	196b      	adds	r3, r5, r5
 800763c:	eb46 0406 	adc.w	r4, r6, r6
 8007640:	461a      	mov	r2, r3
 8007642:	4623      	mov	r3, r4
 8007644:	f7f8 fe14 	bl	8000270 <__aeabi_uldivmod>
 8007648:	4603      	mov	r3, r0
 800764a:	460c      	mov	r4, r1
 800764c:	461a      	mov	r2, r3
 800764e:	4b47      	ldr	r3, [pc, #284]	; (800776c <UART_SetConfig+0x384>)
 8007650:	fba3 2302 	umull	r2, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	461d      	mov	r5, r3
 800765e:	f04f 0600 	mov.w	r6, #0
 8007662:	46a9      	mov	r9, r5
 8007664:	46b2      	mov	sl, r6
 8007666:	eb19 0309 	adds.w	r3, r9, r9
 800766a:	eb4a 040a 	adc.w	r4, sl, sl
 800766e:	4699      	mov	r9, r3
 8007670:	46a2      	mov	sl, r4
 8007672:	eb19 0905 	adds.w	r9, r9, r5
 8007676:	eb4a 0a06 	adc.w	sl, sl, r6
 800767a:	f04f 0100 	mov.w	r1, #0
 800767e:	f04f 0200 	mov.w	r2, #0
 8007682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007686:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800768a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800768e:	4689      	mov	r9, r1
 8007690:	4692      	mov	sl, r2
 8007692:	eb19 0005 	adds.w	r0, r9, r5
 8007696:	eb4a 0106 	adc.w	r1, sl, r6
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	461d      	mov	r5, r3
 80076a0:	f04f 0600 	mov.w	r6, #0
 80076a4:	196b      	adds	r3, r5, r5
 80076a6:	eb46 0406 	adc.w	r4, r6, r6
 80076aa:	461a      	mov	r2, r3
 80076ac:	4623      	mov	r3, r4
 80076ae:	f7f8 fddf 	bl	8000270 <__aeabi_uldivmod>
 80076b2:	4603      	mov	r3, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	461a      	mov	r2, r3
 80076b8:	4b2c      	ldr	r3, [pc, #176]	; (800776c <UART_SetConfig+0x384>)
 80076ba:	fba3 1302 	umull	r1, r3, r3, r2
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	2164      	movs	r1, #100	; 0x64
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	3332      	adds	r3, #50	; 0x32
 80076cc:	4a27      	ldr	r2, [pc, #156]	; (800776c <UART_SetConfig+0x384>)
 80076ce:	fba2 2303 	umull	r2, r3, r2, r3
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076da:	4498      	add	r8, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	461d      	mov	r5, r3
 80076e0:	f04f 0600 	mov.w	r6, #0
 80076e4:	46a9      	mov	r9, r5
 80076e6:	46b2      	mov	sl, r6
 80076e8:	eb19 0309 	adds.w	r3, r9, r9
 80076ec:	eb4a 040a 	adc.w	r4, sl, sl
 80076f0:	4699      	mov	r9, r3
 80076f2:	46a2      	mov	sl, r4
 80076f4:	eb19 0905 	adds.w	r9, r9, r5
 80076f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80076fc:	f04f 0100 	mov.w	r1, #0
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800770c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007710:	4689      	mov	r9, r1
 8007712:	4692      	mov	sl, r2
 8007714:	eb19 0005 	adds.w	r0, r9, r5
 8007718:	eb4a 0106 	adc.w	r1, sl, r6
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	461d      	mov	r5, r3
 8007722:	f04f 0600 	mov.w	r6, #0
 8007726:	196b      	adds	r3, r5, r5
 8007728:	eb46 0406 	adc.w	r4, r6, r6
 800772c:	461a      	mov	r2, r3
 800772e:	4623      	mov	r3, r4
 8007730:	f7f8 fd9e 	bl	8000270 <__aeabi_uldivmod>
 8007734:	4603      	mov	r3, r0
 8007736:	460c      	mov	r4, r1
 8007738:	461a      	mov	r2, r3
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <UART_SetConfig+0x384>)
 800773c:	fba3 1302 	umull	r1, r3, r3, r2
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	2164      	movs	r1, #100	; 0x64
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	3332      	adds	r3, #50	; 0x32
 800774e:	4a07      	ldr	r2, [pc, #28]	; (800776c <UART_SetConfig+0x384>)
 8007750:	fba2 2303 	umull	r2, r3, r2, r3
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f003 0207 	and.w	r2, r3, #7
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4442      	add	r2, r8
 8007760:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007762:	e1b2      	b.n	8007aca <UART_SetConfig+0x6e2>
 8007764:	40011000 	.word	0x40011000
 8007768:	40011400 	.word	0x40011400
 800776c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4ad7      	ldr	r2, [pc, #860]	; (8007ad4 <UART_SetConfig+0x6ec>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d005      	beq.n	8007786 <UART_SetConfig+0x39e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4ad6      	ldr	r2, [pc, #856]	; (8007ad8 <UART_SetConfig+0x6f0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	f040 80d1 	bne.w	8007928 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007786:	f7fe f84f 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 800778a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	469a      	mov	sl, r3
 8007790:	f04f 0b00 	mov.w	fp, #0
 8007794:	46d0      	mov	r8, sl
 8007796:	46d9      	mov	r9, fp
 8007798:	eb18 0308 	adds.w	r3, r8, r8
 800779c:	eb49 0409 	adc.w	r4, r9, r9
 80077a0:	4698      	mov	r8, r3
 80077a2:	46a1      	mov	r9, r4
 80077a4:	eb18 080a 	adds.w	r8, r8, sl
 80077a8:	eb49 090b 	adc.w	r9, r9, fp
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077c0:	4688      	mov	r8, r1
 80077c2:	4691      	mov	r9, r2
 80077c4:	eb1a 0508 	adds.w	r5, sl, r8
 80077c8:	eb4b 0609 	adc.w	r6, fp, r9
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4619      	mov	r1, r3
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	f04f 0400 	mov.w	r4, #0
 80077de:	0094      	lsls	r4, r2, #2
 80077e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077e4:	008b      	lsls	r3, r1, #2
 80077e6:	461a      	mov	r2, r3
 80077e8:	4623      	mov	r3, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	4631      	mov	r1, r6
 80077ee:	f7f8 fd3f 	bl	8000270 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	461a      	mov	r2, r3
 80077f8:	4bb8      	ldr	r3, [pc, #736]	; (8007adc <UART_SetConfig+0x6f4>)
 80077fa:	fba3 2302 	umull	r2, r3, r3, r2
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	469b      	mov	fp, r3
 8007808:	f04f 0c00 	mov.w	ip, #0
 800780c:	46d9      	mov	r9, fp
 800780e:	46e2      	mov	sl, ip
 8007810:	eb19 0309 	adds.w	r3, r9, r9
 8007814:	eb4a 040a 	adc.w	r4, sl, sl
 8007818:	4699      	mov	r9, r3
 800781a:	46a2      	mov	sl, r4
 800781c:	eb19 090b 	adds.w	r9, r9, fp
 8007820:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007824:	f04f 0100 	mov.w	r1, #0
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007838:	4689      	mov	r9, r1
 800783a:	4692      	mov	sl, r2
 800783c:	eb1b 0509 	adds.w	r5, fp, r9
 8007840:	eb4c 060a 	adc.w	r6, ip, sl
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4619      	mov	r1, r3
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	0094      	lsls	r4, r2, #2
 8007858:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800785c:	008b      	lsls	r3, r1, #2
 800785e:	461a      	mov	r2, r3
 8007860:	4623      	mov	r3, r4
 8007862:	4628      	mov	r0, r5
 8007864:	4631      	mov	r1, r6
 8007866:	f7f8 fd03 	bl	8000270 <__aeabi_uldivmod>
 800786a:	4603      	mov	r3, r0
 800786c:	460c      	mov	r4, r1
 800786e:	461a      	mov	r2, r3
 8007870:	4b9a      	ldr	r3, [pc, #616]	; (8007adc <UART_SetConfig+0x6f4>)
 8007872:	fba3 1302 	umull	r1, r3, r3, r2
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	2164      	movs	r1, #100	; 0x64
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	3332      	adds	r3, #50	; 0x32
 8007884:	4a95      	ldr	r2, [pc, #596]	; (8007adc <UART_SetConfig+0x6f4>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007890:	4498      	add	r8, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	469b      	mov	fp, r3
 8007896:	f04f 0c00 	mov.w	ip, #0
 800789a:	46d9      	mov	r9, fp
 800789c:	46e2      	mov	sl, ip
 800789e:	eb19 0309 	adds.w	r3, r9, r9
 80078a2:	eb4a 040a 	adc.w	r4, sl, sl
 80078a6:	4699      	mov	r9, r3
 80078a8:	46a2      	mov	sl, r4
 80078aa:	eb19 090b 	adds.w	r9, r9, fp
 80078ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078c6:	4689      	mov	r9, r1
 80078c8:	4692      	mov	sl, r2
 80078ca:	eb1b 0509 	adds.w	r5, fp, r9
 80078ce:	eb4c 060a 	adc.w	r6, ip, sl
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4619      	mov	r1, r3
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	0094      	lsls	r4, r2, #2
 80078e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078ea:	008b      	lsls	r3, r1, #2
 80078ec:	461a      	mov	r2, r3
 80078ee:	4623      	mov	r3, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	4631      	mov	r1, r6
 80078f4:	f7f8 fcbc 	bl	8000270 <__aeabi_uldivmod>
 80078f8:	4603      	mov	r3, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b77      	ldr	r3, [pc, #476]	; (8007adc <UART_SetConfig+0x6f4>)
 8007900:	fba3 1302 	umull	r1, r3, r3, r2
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	2164      	movs	r1, #100	; 0x64
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	3332      	adds	r3, #50	; 0x32
 8007912:	4a72      	ldr	r2, [pc, #456]	; (8007adc <UART_SetConfig+0x6f4>)
 8007914:	fba2 2303 	umull	r2, r3, r2, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4442      	add	r2, r8
 8007924:	609a      	str	r2, [r3, #8]
 8007926:	e0d0      	b.n	8007aca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fd ff6a 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 800792c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	469a      	mov	sl, r3
 8007932:	f04f 0b00 	mov.w	fp, #0
 8007936:	46d0      	mov	r8, sl
 8007938:	46d9      	mov	r9, fp
 800793a:	eb18 0308 	adds.w	r3, r8, r8
 800793e:	eb49 0409 	adc.w	r4, r9, r9
 8007942:	4698      	mov	r8, r3
 8007944:	46a1      	mov	r9, r4
 8007946:	eb18 080a 	adds.w	r8, r8, sl
 800794a:	eb49 090b 	adc.w	r9, r9, fp
 800794e:	f04f 0100 	mov.w	r1, #0
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800795a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800795e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007962:	4688      	mov	r8, r1
 8007964:	4691      	mov	r9, r2
 8007966:	eb1a 0508 	adds.w	r5, sl, r8
 800796a:	eb4b 0609 	adc.w	r6, fp, r9
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4619      	mov	r1, r3
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	f04f 0400 	mov.w	r4, #0
 8007980:	0094      	lsls	r4, r2, #2
 8007982:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007986:	008b      	lsls	r3, r1, #2
 8007988:	461a      	mov	r2, r3
 800798a:	4623      	mov	r3, r4
 800798c:	4628      	mov	r0, r5
 800798e:	4631      	mov	r1, r6
 8007990:	f7f8 fc6e 	bl	8000270 <__aeabi_uldivmod>
 8007994:	4603      	mov	r3, r0
 8007996:	460c      	mov	r4, r1
 8007998:	461a      	mov	r2, r3
 800799a:	4b50      	ldr	r3, [pc, #320]	; (8007adc <UART_SetConfig+0x6f4>)
 800799c:	fba3 2302 	umull	r2, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	469b      	mov	fp, r3
 80079aa:	f04f 0c00 	mov.w	ip, #0
 80079ae:	46d9      	mov	r9, fp
 80079b0:	46e2      	mov	sl, ip
 80079b2:	eb19 0309 	adds.w	r3, r9, r9
 80079b6:	eb4a 040a 	adc.w	r4, sl, sl
 80079ba:	4699      	mov	r9, r3
 80079bc:	46a2      	mov	sl, r4
 80079be:	eb19 090b 	adds.w	r9, r9, fp
 80079c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079da:	4689      	mov	r9, r1
 80079dc:	4692      	mov	sl, r2
 80079de:	eb1b 0509 	adds.w	r5, fp, r9
 80079e2:	eb4c 060a 	adc.w	r6, ip, sl
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	0094      	lsls	r4, r2, #2
 80079fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079fe:	008b      	lsls	r3, r1, #2
 8007a00:	461a      	mov	r2, r3
 8007a02:	4623      	mov	r3, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	4631      	mov	r1, r6
 8007a08:	f7f8 fc32 	bl	8000270 <__aeabi_uldivmod>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b32      	ldr	r3, [pc, #200]	; (8007adc <UART_SetConfig+0x6f4>)
 8007a14:	fba3 1302 	umull	r1, r3, r3, r2
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	2164      	movs	r1, #100	; 0x64
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	3332      	adds	r3, #50	; 0x32
 8007a26:	4a2d      	ldr	r2, [pc, #180]	; (8007adc <UART_SetConfig+0x6f4>)
 8007a28:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a32:	4498      	add	r8, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	469b      	mov	fp, r3
 8007a38:	f04f 0c00 	mov.w	ip, #0
 8007a3c:	46d9      	mov	r9, fp
 8007a3e:	46e2      	mov	sl, ip
 8007a40:	eb19 0309 	adds.w	r3, r9, r9
 8007a44:	eb4a 040a 	adc.w	r4, sl, sl
 8007a48:	4699      	mov	r9, r3
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	eb19 090b 	adds.w	r9, r9, fp
 8007a50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a54:	f04f 0100 	mov.w	r1, #0
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a68:	4689      	mov	r9, r1
 8007a6a:	4692      	mov	sl, r2
 8007a6c:	eb1b 0509 	adds.w	r5, fp, r9
 8007a70:	eb4c 060a 	adc.w	r6, ip, sl
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	0094      	lsls	r4, r2, #2
 8007a88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	4631      	mov	r1, r6
 8007a96:	f7f8 fbeb 	bl	8000270 <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <UART_SetConfig+0x6f4>)
 8007aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2164      	movs	r1, #100	; 0x64
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	3332      	adds	r3, #50	; 0x32
 8007ab4:	4a09      	ldr	r2, [pc, #36]	; (8007adc <UART_SetConfig+0x6f4>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4442      	add	r2, r8
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	e7ff      	b.n	8007aca <UART_SetConfig+0x6e2>
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	51eb851f 	.word	0x51eb851f

08007ae0 <__errno>:
 8007ae0:	4b01      	ldr	r3, [pc, #4]	; (8007ae8 <__errno+0x8>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	2000000c 	.word	0x2000000c

08007aec <__libc_init_array>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4e0d      	ldr	r6, [pc, #52]	; (8007b24 <__libc_init_array+0x38>)
 8007af0:	4c0d      	ldr	r4, [pc, #52]	; (8007b28 <__libc_init_array+0x3c>)
 8007af2:	1ba4      	subs	r4, r4, r6
 8007af4:	10a4      	asrs	r4, r4, #2
 8007af6:	2500      	movs	r5, #0
 8007af8:	42a5      	cmp	r5, r4
 8007afa:	d109      	bne.n	8007b10 <__libc_init_array+0x24>
 8007afc:	4e0b      	ldr	r6, [pc, #44]	; (8007b2c <__libc_init_array+0x40>)
 8007afe:	4c0c      	ldr	r4, [pc, #48]	; (8007b30 <__libc_init_array+0x44>)
 8007b00:	f000 ffbe 	bl	8008a80 <_init>
 8007b04:	1ba4      	subs	r4, r4, r6
 8007b06:	10a4      	asrs	r4, r4, #2
 8007b08:	2500      	movs	r5, #0
 8007b0a:	42a5      	cmp	r5, r4
 8007b0c:	d105      	bne.n	8007b1a <__libc_init_array+0x2e>
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b14:	4798      	blx	r3
 8007b16:	3501      	adds	r5, #1
 8007b18:	e7ee      	b.n	8007af8 <__libc_init_array+0xc>
 8007b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b1e:	4798      	blx	r3
 8007b20:	3501      	adds	r5, #1
 8007b22:	e7f2      	b.n	8007b0a <__libc_init_array+0x1e>
 8007b24:	08008e14 	.word	0x08008e14
 8007b28:	08008e14 	.word	0x08008e14
 8007b2c:	08008e14 	.word	0x08008e14
 8007b30:	08008e18 	.word	0x08008e18

08007b34 <memcpy>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	1e43      	subs	r3, r0, #1
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	d100      	bne.n	8007b40 <memcpy+0xc>
 8007b3e:	bd10      	pop	{r4, pc}
 8007b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b48:	e7f7      	b.n	8007b3a <memcpy+0x6>

08007b4a <memset>:
 8007b4a:	4402      	add	r2, r0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d100      	bne.n	8007b54 <memset+0xa>
 8007b52:	4770      	bx	lr
 8007b54:	f803 1b01 	strb.w	r1, [r3], #1
 8007b58:	e7f9      	b.n	8007b4e <memset+0x4>
	...

08007b5c <iprintf>:
 8007b5c:	b40f      	push	{r0, r1, r2, r3}
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <iprintf+0x2c>)
 8007b60:	b513      	push	{r0, r1, r4, lr}
 8007b62:	681c      	ldr	r4, [r3, #0]
 8007b64:	b124      	cbz	r4, 8007b70 <iprintf+0x14>
 8007b66:	69a3      	ldr	r3, [r4, #24]
 8007b68:	b913      	cbnz	r3, 8007b70 <iprintf+0x14>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fa36 	bl	8007fdc <__sinit>
 8007b70:	ab05      	add	r3, sp, #20
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	68a1      	ldr	r1, [r4, #8]
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 fbef 	bl	800835c <_vfiprintf_r>
 8007b7e:	b002      	add	sp, #8
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b84:	b004      	add	sp, #16
 8007b86:	4770      	bx	lr
 8007b88:	2000000c 	.word	0x2000000c

08007b8c <putchar>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <putchar+0x24>)
 8007b90:	681c      	ldr	r4, [r3, #0]
 8007b92:	4605      	mov	r5, r0
 8007b94:	b124      	cbz	r4, 8007ba0 <putchar+0x14>
 8007b96:	69a3      	ldr	r3, [r4, #24]
 8007b98:	b913      	cbnz	r3, 8007ba0 <putchar+0x14>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fa1e 	bl	8007fdc <__sinit>
 8007ba0:	68a2      	ldr	r2, [r4, #8]
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007baa:	f000 be75 	b.w	8008898 <_putc_r>
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c

08007bb4 <_puts_r>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	460e      	mov	r6, r1
 8007bb8:	4605      	mov	r5, r0
 8007bba:	b118      	cbz	r0, 8007bc4 <_puts_r+0x10>
 8007bbc:	6983      	ldr	r3, [r0, #24]
 8007bbe:	b90b      	cbnz	r3, 8007bc4 <_puts_r+0x10>
 8007bc0:	f000 fa0c 	bl	8007fdc <__sinit>
 8007bc4:	69ab      	ldr	r3, [r5, #24]
 8007bc6:	68ac      	ldr	r4, [r5, #8]
 8007bc8:	b913      	cbnz	r3, 8007bd0 <_puts_r+0x1c>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 fa06 	bl	8007fdc <__sinit>
 8007bd0:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <_puts_r+0xac>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d117      	bne.n	8007c06 <_puts_r+0x52>
 8007bd6:	686c      	ldr	r4, [r5, #4]
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	071b      	lsls	r3, r3, #28
 8007bdc:	d51d      	bpl.n	8007c1a <_puts_r+0x66>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	b1db      	cbz	r3, 8007c1a <_puts_r+0x66>
 8007be2:	3e01      	subs	r6, #1
 8007be4:	68a3      	ldr	r3, [r4, #8]
 8007be6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bea:	3b01      	subs	r3, #1
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	b9e9      	cbnz	r1, 8007c2c <_puts_r+0x78>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da2e      	bge.n	8007c52 <_puts_r+0x9e>
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	210a      	movs	r1, #10
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 f83f 	bl	8007c7c <__swbuf_r>
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d011      	beq.n	8007c26 <_puts_r+0x72>
 8007c02:	200a      	movs	r0, #10
 8007c04:	e011      	b.n	8007c2a <_puts_r+0x76>
 8007c06:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <_puts_r+0xb0>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	d101      	bne.n	8007c10 <_puts_r+0x5c>
 8007c0c:	68ac      	ldr	r4, [r5, #8]
 8007c0e:	e7e3      	b.n	8007bd8 <_puts_r+0x24>
 8007c10:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <_puts_r+0xb4>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	bf08      	it	eq
 8007c16:	68ec      	ldreq	r4, [r5, #12]
 8007c18:	e7de      	b.n	8007bd8 <_puts_r+0x24>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f87f 	bl	8007d20 <__swsetup_r>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0dd      	beq.n	8007be2 <_puts_r+0x2e>
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da04      	bge.n	8007c3a <_puts_r+0x86>
 8007c30:	69a2      	ldr	r2, [r4, #24]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	dc06      	bgt.n	8007c44 <_puts_r+0x90>
 8007c36:	290a      	cmp	r1, #10
 8007c38:	d004      	beq.n	8007c44 <_puts_r+0x90>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	7019      	strb	r1, [r3, #0]
 8007c42:	e7cf      	b.n	8007be4 <_puts_r+0x30>
 8007c44:	4622      	mov	r2, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f818 	bl	8007c7c <__swbuf_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d1c9      	bne.n	8007be4 <_puts_r+0x30>
 8007c50:	e7e9      	b.n	8007c26 <_puts_r+0x72>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	200a      	movs	r0, #10
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	7018      	strb	r0, [r3, #0]
 8007c5c:	e7e5      	b.n	8007c2a <_puts_r+0x76>
 8007c5e:	bf00      	nop
 8007c60:	08008d98 	.word	0x08008d98
 8007c64:	08008db8 	.word	0x08008db8
 8007c68:	08008d78 	.word	0x08008d78

08007c6c <puts>:
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <puts+0xc>)
 8007c6e:	4601      	mov	r1, r0
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	f7ff bf9f 	b.w	8007bb4 <_puts_r>
 8007c76:	bf00      	nop
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <__swbuf_r>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	460e      	mov	r6, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	4605      	mov	r5, r0
 8007c84:	b118      	cbz	r0, 8007c8e <__swbuf_r+0x12>
 8007c86:	6983      	ldr	r3, [r0, #24]
 8007c88:	b90b      	cbnz	r3, 8007c8e <__swbuf_r+0x12>
 8007c8a:	f000 f9a7 	bl	8007fdc <__sinit>
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <__swbuf_r+0x98>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	d12a      	bne.n	8007cea <__swbuf_r+0x6e>
 8007c94:	686c      	ldr	r4, [r5, #4]
 8007c96:	69a3      	ldr	r3, [r4, #24]
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	071a      	lsls	r2, r3, #28
 8007c9e:	d52e      	bpl.n	8007cfe <__swbuf_r+0x82>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	b363      	cbz	r3, 8007cfe <__swbuf_r+0x82>
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	6820      	ldr	r0, [r4, #0]
 8007ca8:	1ac0      	subs	r0, r0, r3
 8007caa:	6963      	ldr	r3, [r4, #20]
 8007cac:	b2f6      	uxtb	r6, r6
 8007cae:	4283      	cmp	r3, r0
 8007cb0:	4637      	mov	r7, r6
 8007cb2:	dc04      	bgt.n	8007cbe <__swbuf_r+0x42>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f926 	bl	8007f08 <_fflush_r>
 8007cbc:	bb28      	cbnz	r0, 8007d0a <__swbuf_r+0x8e>
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	60a3      	str	r3, [r4, #8]
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	701e      	strb	r6, [r3, #0]
 8007ccc:	6963      	ldr	r3, [r4, #20]
 8007cce:	3001      	adds	r0, #1
 8007cd0:	4283      	cmp	r3, r0
 8007cd2:	d004      	beq.n	8007cde <__swbuf_r+0x62>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	07db      	lsls	r3, r3, #31
 8007cd8:	d519      	bpl.n	8007d0e <__swbuf_r+0x92>
 8007cda:	2e0a      	cmp	r6, #10
 8007cdc:	d117      	bne.n	8007d0e <__swbuf_r+0x92>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f911 	bl	8007f08 <_fflush_r>
 8007ce6:	b190      	cbz	r0, 8007d0e <__swbuf_r+0x92>
 8007ce8:	e00f      	b.n	8007d0a <__swbuf_r+0x8e>
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <__swbuf_r+0x9c>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d101      	bne.n	8007cf4 <__swbuf_r+0x78>
 8007cf0:	68ac      	ldr	r4, [r5, #8]
 8007cf2:	e7d0      	b.n	8007c96 <__swbuf_r+0x1a>
 8007cf4:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <__swbuf_r+0xa0>)
 8007cf6:	429c      	cmp	r4, r3
 8007cf8:	bf08      	it	eq
 8007cfa:	68ec      	ldreq	r4, [r5, #12]
 8007cfc:	e7cb      	b.n	8007c96 <__swbuf_r+0x1a>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f80d 	bl	8007d20 <__swsetup_r>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0cc      	beq.n	8007ca4 <__swbuf_r+0x28>
 8007d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d0e:	4638      	mov	r0, r7
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	08008d98 	.word	0x08008d98
 8007d18:	08008db8 	.word	0x08008db8
 8007d1c:	08008d78 	.word	0x08008d78

08007d20 <__swsetup_r>:
 8007d20:	4b32      	ldr	r3, [pc, #200]	; (8007dec <__swsetup_r+0xcc>)
 8007d22:	b570      	push	{r4, r5, r6, lr}
 8007d24:	681d      	ldr	r5, [r3, #0]
 8007d26:	4606      	mov	r6, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	b125      	cbz	r5, 8007d36 <__swsetup_r+0x16>
 8007d2c:	69ab      	ldr	r3, [r5, #24]
 8007d2e:	b913      	cbnz	r3, 8007d36 <__swsetup_r+0x16>
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f953 	bl	8007fdc <__sinit>
 8007d36:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <__swsetup_r+0xd0>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d10f      	bne.n	8007d5c <__swsetup_r+0x3c>
 8007d3c:	686c      	ldr	r4, [r5, #4]
 8007d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	0715      	lsls	r5, r2, #28
 8007d46:	d42c      	bmi.n	8007da2 <__swsetup_r+0x82>
 8007d48:	06d0      	lsls	r0, r2, #27
 8007d4a:	d411      	bmi.n	8007d70 <__swsetup_r+0x50>
 8007d4c:	2209      	movs	r2, #9
 8007d4e:	6032      	str	r2, [r6, #0]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5a:	e03e      	b.n	8007dda <__swsetup_r+0xba>
 8007d5c:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <__swsetup_r+0xd4>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <__swsetup_r+0x46>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7eb      	b.n	8007d3e <__swsetup_r+0x1e>
 8007d66:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <__swsetup_r+0xd8>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7e6      	b.n	8007d3e <__swsetup_r+0x1e>
 8007d70:	0751      	lsls	r1, r2, #29
 8007d72:	d512      	bpl.n	8007d9a <__swsetup_r+0x7a>
 8007d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d76:	b141      	cbz	r1, 8007d8a <__swsetup_r+0x6a>
 8007d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <__swsetup_r+0x66>
 8007d80:	4630      	mov	r0, r6
 8007d82:	f000 fa19 	bl	80081b8 <_free_r>
 8007d86:	2300      	movs	r3, #0
 8007d88:	6363      	str	r3, [r4, #52]	; 0x34
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	2300      	movs	r3, #0
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	6923      	ldr	r3, [r4, #16]
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	b94b      	cbnz	r3, 8007dba <__swsetup_r+0x9a>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db0:	d003      	beq.n	8007dba <__swsetup_r+0x9a>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4630      	mov	r0, r6
 8007db6:	f000 f9bf 	bl	8008138 <__smakebuf_r>
 8007dba:	89a2      	ldrh	r2, [r4, #12]
 8007dbc:	f012 0301 	ands.w	r3, r2, #1
 8007dc0:	d00c      	beq.n	8007ddc <__swsetup_r+0xbc>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	6963      	ldr	r3, [r4, #20]
 8007dc8:	425b      	negs	r3, r3
 8007dca:	61a3      	str	r3, [r4, #24]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	b953      	cbnz	r3, 8007de6 <__swsetup_r+0xc6>
 8007dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007dd8:	d1ba      	bne.n	8007d50 <__swsetup_r+0x30>
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	0792      	lsls	r2, r2, #30
 8007dde:	bf58      	it	pl
 8007de0:	6963      	ldrpl	r3, [r4, #20]
 8007de2:	60a3      	str	r3, [r4, #8]
 8007de4:	e7f2      	b.n	8007dcc <__swsetup_r+0xac>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e7f7      	b.n	8007dda <__swsetup_r+0xba>
 8007dea:	bf00      	nop
 8007dec:	2000000c 	.word	0x2000000c
 8007df0:	08008d98 	.word	0x08008d98
 8007df4:	08008db8 	.word	0x08008db8
 8007df8:	08008d78 	.word	0x08008d78

08007dfc <__sflush_r>:
 8007dfc:	898a      	ldrh	r2, [r1, #12]
 8007dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e02:	4605      	mov	r5, r0
 8007e04:	0710      	lsls	r0, r2, #28
 8007e06:	460c      	mov	r4, r1
 8007e08:	d458      	bmi.n	8007ebc <__sflush_r+0xc0>
 8007e0a:	684b      	ldr	r3, [r1, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dc05      	bgt.n	8007e1c <__sflush_r+0x20>
 8007e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dc02      	bgt.n	8007e1c <__sflush_r+0x20>
 8007e16:	2000      	movs	r0, #0
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	d0f9      	beq.n	8007e16 <__sflush_r+0x1a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e28:	682f      	ldr	r7, [r5, #0]
 8007e2a:	6a21      	ldr	r1, [r4, #32]
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	d032      	beq.n	8007e96 <__sflush_r+0x9a>
 8007e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	075a      	lsls	r2, r3, #29
 8007e36:	d505      	bpl.n	8007e44 <__sflush_r+0x48>
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	1ac0      	subs	r0, r0, r3
 8007e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e3e:	b10b      	cbz	r3, 8007e44 <__sflush_r+0x48>
 8007e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e42:	1ac0      	subs	r0, r0, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	4602      	mov	r2, r0
 8007e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4a:	6a21      	ldr	r1, [r4, #32]
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b0      	blx	r6
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	d106      	bne.n	8007e64 <__sflush_r+0x68>
 8007e56:	6829      	ldr	r1, [r5, #0]
 8007e58:	291d      	cmp	r1, #29
 8007e5a:	d848      	bhi.n	8007eee <__sflush_r+0xf2>
 8007e5c:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <__sflush_r+0x108>)
 8007e5e:	40ca      	lsrs	r2, r1
 8007e60:	07d6      	lsls	r6, r2, #31
 8007e62:	d544      	bpl.n	8007eee <__sflush_r+0xf2>
 8007e64:	2200      	movs	r2, #0
 8007e66:	6062      	str	r2, [r4, #4]
 8007e68:	04d9      	lsls	r1, r3, #19
 8007e6a:	6922      	ldr	r2, [r4, #16]
 8007e6c:	6022      	str	r2, [r4, #0]
 8007e6e:	d504      	bpl.n	8007e7a <__sflush_r+0x7e>
 8007e70:	1c42      	adds	r2, r0, #1
 8007e72:	d101      	bne.n	8007e78 <__sflush_r+0x7c>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b903      	cbnz	r3, 8007e7a <__sflush_r+0x7e>
 8007e78:	6560      	str	r0, [r4, #84]	; 0x54
 8007e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e7c:	602f      	str	r7, [r5, #0]
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d0c9      	beq.n	8007e16 <__sflush_r+0x1a>
 8007e82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e86:	4299      	cmp	r1, r3
 8007e88:	d002      	beq.n	8007e90 <__sflush_r+0x94>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f994 	bl	80081b8 <_free_r>
 8007e90:	2000      	movs	r0, #0
 8007e92:	6360      	str	r0, [r4, #52]	; 0x34
 8007e94:	e7c0      	b.n	8007e18 <__sflush_r+0x1c>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b0      	blx	r6
 8007e9c:	1c41      	adds	r1, r0, #1
 8007e9e:	d1c8      	bne.n	8007e32 <__sflush_r+0x36>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0c5      	beq.n	8007e32 <__sflush_r+0x36>
 8007ea6:	2b1d      	cmp	r3, #29
 8007ea8:	d001      	beq.n	8007eae <__sflush_r+0xb2>
 8007eaa:	2b16      	cmp	r3, #22
 8007eac:	d101      	bne.n	8007eb2 <__sflush_r+0xb6>
 8007eae:	602f      	str	r7, [r5, #0]
 8007eb0:	e7b1      	b.n	8007e16 <__sflush_r+0x1a>
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	e7ad      	b.n	8007e18 <__sflush_r+0x1c>
 8007ebc:	690f      	ldr	r7, [r1, #16]
 8007ebe:	2f00      	cmp	r7, #0
 8007ec0:	d0a9      	beq.n	8007e16 <__sflush_r+0x1a>
 8007ec2:	0793      	lsls	r3, r2, #30
 8007ec4:	680e      	ldr	r6, [r1, #0]
 8007ec6:	bf08      	it	eq
 8007ec8:	694b      	ldreq	r3, [r1, #20]
 8007eca:	600f      	str	r7, [r1, #0]
 8007ecc:	bf18      	it	ne
 8007ece:	2300      	movne	r3, #0
 8007ed0:	eba6 0807 	sub.w	r8, r6, r7
 8007ed4:	608b      	str	r3, [r1, #8]
 8007ed6:	f1b8 0f00 	cmp.w	r8, #0
 8007eda:	dd9c      	ble.n	8007e16 <__sflush_r+0x1a>
 8007edc:	4643      	mov	r3, r8
 8007ede:	463a      	mov	r2, r7
 8007ee0:	6a21      	ldr	r1, [r4, #32]
 8007ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b0      	blx	r6
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dc06      	bgt.n	8007efa <__sflush_r+0xfe>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	e78e      	b.n	8007e18 <__sflush_r+0x1c>
 8007efa:	4407      	add	r7, r0
 8007efc:	eba8 0800 	sub.w	r8, r8, r0
 8007f00:	e7e9      	b.n	8007ed6 <__sflush_r+0xda>
 8007f02:	bf00      	nop
 8007f04:	20400001 	.word	0x20400001

08007f08 <_fflush_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	690b      	ldr	r3, [r1, #16]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	b1db      	cbz	r3, 8007f4a <_fflush_r+0x42>
 8007f12:	b118      	cbz	r0, 8007f1c <_fflush_r+0x14>
 8007f14:	6983      	ldr	r3, [r0, #24]
 8007f16:	b90b      	cbnz	r3, 8007f1c <_fflush_r+0x14>
 8007f18:	f000 f860 	bl	8007fdc <__sinit>
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <_fflush_r+0x48>)
 8007f1e:	429c      	cmp	r4, r3
 8007f20:	d109      	bne.n	8007f36 <_fflush_r+0x2e>
 8007f22:	686c      	ldr	r4, [r5, #4]
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	b17b      	cbz	r3, 8007f4a <_fflush_r+0x42>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f32:	f7ff bf63 	b.w	8007dfc <__sflush_r>
 8007f36:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <_fflush_r+0x4c>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d101      	bne.n	8007f40 <_fflush_r+0x38>
 8007f3c:	68ac      	ldr	r4, [r5, #8]
 8007f3e:	e7f1      	b.n	8007f24 <_fflush_r+0x1c>
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <_fflush_r+0x50>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	bf08      	it	eq
 8007f46:	68ec      	ldreq	r4, [r5, #12]
 8007f48:	e7ec      	b.n	8007f24 <_fflush_r+0x1c>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	08008d98 	.word	0x08008d98
 8007f54:	08008db8 	.word	0x08008db8
 8007f58:	08008d78 	.word	0x08008d78

08007f5c <std>:
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	e9c0 3300 	strd	r3, r3, [r0]
 8007f66:	6083      	str	r3, [r0, #8]
 8007f68:	8181      	strh	r1, [r0, #12]
 8007f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f6c:	81c2      	strh	r2, [r0, #14]
 8007f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f72:	6183      	str	r3, [r0, #24]
 8007f74:	4619      	mov	r1, r3
 8007f76:	2208      	movs	r2, #8
 8007f78:	305c      	adds	r0, #92	; 0x5c
 8007f7a:	f7ff fde6 	bl	8007b4a <memset>
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x38>)
 8007f80:	6263      	str	r3, [r4, #36]	; 0x24
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <std+0x3c>)
 8007f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <std+0x40>)
 8007f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x44>)
 8007f8c:	6224      	str	r4, [r4, #32]
 8007f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f90:	bd10      	pop	{r4, pc}
 8007f92:	bf00      	nop
 8007f94:	08008925 	.word	0x08008925
 8007f98:	08008947 	.word	0x08008947
 8007f9c:	0800897f 	.word	0x0800897f
 8007fa0:	080089a3 	.word	0x080089a3

08007fa4 <_cleanup_r>:
 8007fa4:	4901      	ldr	r1, [pc, #4]	; (8007fac <_cleanup_r+0x8>)
 8007fa6:	f000 b885 	b.w	80080b4 <_fwalk_reent>
 8007faa:	bf00      	nop
 8007fac:	08007f09 	.word	0x08007f09

08007fb0 <__sfmoreglue>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	1e4a      	subs	r2, r1, #1
 8007fb4:	2568      	movs	r5, #104	; 0x68
 8007fb6:	4355      	muls	r5, r2
 8007fb8:	460e      	mov	r6, r1
 8007fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fbe:	f000 f949 	bl	8008254 <_malloc_r>
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	b140      	cbz	r0, 8007fd8 <__sfmoreglue+0x28>
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fcc:	300c      	adds	r0, #12
 8007fce:	60a0      	str	r0, [r4, #8]
 8007fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fd4:	f7ff fdb9 	bl	8007b4a <memset>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bd70      	pop	{r4, r5, r6, pc}

08007fdc <__sinit>:
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	bb33      	cbnz	r3, 8008032 <__sinit+0x56>
 8007fe4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007fe8:	6503      	str	r3, [r0, #80]	; 0x50
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <__sinit+0x58>)
 8007fec:	4a12      	ldr	r2, [pc, #72]	; (8008038 <__sinit+0x5c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6282      	str	r2, [r0, #40]	; 0x28
 8007ff2:	4298      	cmp	r0, r3
 8007ff4:	bf04      	itt	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	6183      	streq	r3, [r0, #24]
 8007ffa:	f000 f81f 	bl	800803c <__sfp>
 8007ffe:	6060      	str	r0, [r4, #4]
 8008000:	4620      	mov	r0, r4
 8008002:	f000 f81b 	bl	800803c <__sfp>
 8008006:	60a0      	str	r0, [r4, #8]
 8008008:	4620      	mov	r0, r4
 800800a:	f000 f817 	bl	800803c <__sfp>
 800800e:	2200      	movs	r2, #0
 8008010:	60e0      	str	r0, [r4, #12]
 8008012:	2104      	movs	r1, #4
 8008014:	6860      	ldr	r0, [r4, #4]
 8008016:	f7ff ffa1 	bl	8007f5c <std>
 800801a:	2201      	movs	r2, #1
 800801c:	2109      	movs	r1, #9
 800801e:	68a0      	ldr	r0, [r4, #8]
 8008020:	f7ff ff9c 	bl	8007f5c <std>
 8008024:	2202      	movs	r2, #2
 8008026:	2112      	movs	r1, #18
 8008028:	68e0      	ldr	r0, [r4, #12]
 800802a:	f7ff ff97 	bl	8007f5c <std>
 800802e:	2301      	movs	r3, #1
 8008030:	61a3      	str	r3, [r4, #24]
 8008032:	bd10      	pop	{r4, pc}
 8008034:	08008d74 	.word	0x08008d74
 8008038:	08007fa5 	.word	0x08007fa5

0800803c <__sfp>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <__sfp+0x70>)
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	69b3      	ldr	r3, [r6, #24]
 8008044:	4607      	mov	r7, r0
 8008046:	b913      	cbnz	r3, 800804e <__sfp+0x12>
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff ffc7 	bl	8007fdc <__sinit>
 800804e:	3648      	adds	r6, #72	; 0x48
 8008050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008054:	3b01      	subs	r3, #1
 8008056:	d503      	bpl.n	8008060 <__sfp+0x24>
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	b133      	cbz	r3, 800806a <__sfp+0x2e>
 800805c:	6836      	ldr	r6, [r6, #0]
 800805e:	e7f7      	b.n	8008050 <__sfp+0x14>
 8008060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008064:	b16d      	cbz	r5, 8008082 <__sfp+0x46>
 8008066:	3468      	adds	r4, #104	; 0x68
 8008068:	e7f4      	b.n	8008054 <__sfp+0x18>
 800806a:	2104      	movs	r1, #4
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff ff9f 	bl	8007fb0 <__sfmoreglue>
 8008072:	6030      	str	r0, [r6, #0]
 8008074:	2800      	cmp	r0, #0
 8008076:	d1f1      	bne.n	800805c <__sfp+0x20>
 8008078:	230c      	movs	r3, #12
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	4604      	mov	r4, r0
 800807e:	4620      	mov	r0, r4
 8008080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <__sfp+0x74>)
 8008084:	6665      	str	r5, [r4, #100]	; 0x64
 8008086:	e9c4 5500 	strd	r5, r5, [r4]
 800808a:	60a5      	str	r5, [r4, #8]
 800808c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008090:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008094:	2208      	movs	r2, #8
 8008096:	4629      	mov	r1, r5
 8008098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800809c:	f7ff fd55 	bl	8007b4a <memset>
 80080a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080a8:	e7e9      	b.n	800807e <__sfp+0x42>
 80080aa:	bf00      	nop
 80080ac:	08008d74 	.word	0x08008d74
 80080b0:	ffff0001 	.word	0xffff0001

080080b4 <_fwalk_reent>:
 80080b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b8:	4680      	mov	r8, r0
 80080ba:	4689      	mov	r9, r1
 80080bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080c0:	2600      	movs	r6, #0
 80080c2:	b914      	cbnz	r4, 80080ca <_fwalk_reent+0x16>
 80080c4:	4630      	mov	r0, r6
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80080ce:	3f01      	subs	r7, #1
 80080d0:	d501      	bpl.n	80080d6 <_fwalk_reent+0x22>
 80080d2:	6824      	ldr	r4, [r4, #0]
 80080d4:	e7f5      	b.n	80080c2 <_fwalk_reent+0xe>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d907      	bls.n	80080ec <_fwalk_reent+0x38>
 80080dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080e0:	3301      	adds	r3, #1
 80080e2:	d003      	beq.n	80080ec <_fwalk_reent+0x38>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4640      	mov	r0, r8
 80080e8:	47c8      	blx	r9
 80080ea:	4306      	orrs	r6, r0
 80080ec:	3568      	adds	r5, #104	; 0x68
 80080ee:	e7ee      	b.n	80080ce <_fwalk_reent+0x1a>

080080f0 <__swhatbuf_r>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	460e      	mov	r6, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	2900      	cmp	r1, #0
 80080fa:	b096      	sub	sp, #88	; 0x58
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	da07      	bge.n	8008112 <__swhatbuf_r+0x22>
 8008102:	2300      	movs	r3, #0
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	89b3      	ldrh	r3, [r6, #12]
 8008108:	061a      	lsls	r2, r3, #24
 800810a:	d410      	bmi.n	800812e <__swhatbuf_r+0x3e>
 800810c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008110:	e00e      	b.n	8008130 <__swhatbuf_r+0x40>
 8008112:	466a      	mov	r2, sp
 8008114:	f000 fc6c 	bl	80089f0 <_fstat_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	dbf2      	blt.n	8008102 <__swhatbuf_r+0x12>
 800811c:	9a01      	ldr	r2, [sp, #4]
 800811e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008126:	425a      	negs	r2, r3
 8008128:	415a      	adcs	r2, r3
 800812a:	602a      	str	r2, [r5, #0]
 800812c:	e7ee      	b.n	800810c <__swhatbuf_r+0x1c>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	2000      	movs	r0, #0
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	b016      	add	sp, #88	; 0x58
 8008136:	bd70      	pop	{r4, r5, r6, pc}

08008138 <__smakebuf_r>:
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800813c:	079d      	lsls	r5, r3, #30
 800813e:	4606      	mov	r6, r0
 8008140:	460c      	mov	r4, r1
 8008142:	d507      	bpl.n	8008154 <__smakebuf_r+0x1c>
 8008144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	2301      	movs	r3, #1
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	b002      	add	sp, #8
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	ab01      	add	r3, sp, #4
 8008156:	466a      	mov	r2, sp
 8008158:	f7ff ffca 	bl	80080f0 <__swhatbuf_r>
 800815c:	9900      	ldr	r1, [sp, #0]
 800815e:	4605      	mov	r5, r0
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f877 	bl	8008254 <_malloc_r>
 8008166:	b948      	cbnz	r0, 800817c <__smakebuf_r+0x44>
 8008168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816c:	059a      	lsls	r2, r3, #22
 800816e:	d4ef      	bmi.n	8008150 <__smakebuf_r+0x18>
 8008170:	f023 0303 	bic.w	r3, r3, #3
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7e3      	b.n	8008144 <__smakebuf_r+0xc>
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <__smakebuf_r+0x7c>)
 800817e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	6163      	str	r3, [r4, #20]
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	6120      	str	r0, [r4, #16]
 8008192:	b15b      	cbz	r3, 80081ac <__smakebuf_r+0x74>
 8008194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 fc3b 	bl	8008a14 <_isatty_r>
 800819e:	b128      	cbz	r0, 80081ac <__smakebuf_r+0x74>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	431d      	orrs	r5, r3
 80081b0:	81a5      	strh	r5, [r4, #12]
 80081b2:	e7cd      	b.n	8008150 <__smakebuf_r+0x18>
 80081b4:	08007fa5 	.word	0x08007fa5

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d045      	beq.n	800824c <_free_r+0x94>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 fc44 	bl	8008a58 <__malloc_lock>
 80081d0:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <_free_r+0x98>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	4610      	mov	r0, r2
 80081d6:	b933      	cbnz	r3, 80081e6 <_free_r+0x2e>
 80081d8:	6063      	str	r3, [r4, #4]
 80081da:	6014      	str	r4, [r2, #0]
 80081dc:	4628      	mov	r0, r5
 80081de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e2:	f000 bc3a 	b.w	8008a5a <__malloc_unlock>
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	d90c      	bls.n	8008204 <_free_r+0x4c>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	1862      	adds	r2, r4, r1
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bf04      	itt	eq
 80081f2:	681a      	ldreq	r2, [r3, #0]
 80081f4:	685b      	ldreq	r3, [r3, #4]
 80081f6:	6063      	str	r3, [r4, #4]
 80081f8:	bf04      	itt	eq
 80081fa:	1852      	addeq	r2, r2, r1
 80081fc:	6022      	streq	r2, [r4, #0]
 80081fe:	6004      	str	r4, [r0, #0]
 8008200:	e7ec      	b.n	80081dc <_free_r+0x24>
 8008202:	4613      	mov	r3, r2
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	b10a      	cbz	r2, 800820c <_free_r+0x54>
 8008208:	42a2      	cmp	r2, r4
 800820a:	d9fa      	bls.n	8008202 <_free_r+0x4a>
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	1858      	adds	r0, r3, r1
 8008210:	42a0      	cmp	r0, r4
 8008212:	d10b      	bne.n	800822c <_free_r+0x74>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	4401      	add	r1, r0
 8008218:	1858      	adds	r0, r3, r1
 800821a:	4282      	cmp	r2, r0
 800821c:	6019      	str	r1, [r3, #0]
 800821e:	d1dd      	bne.n	80081dc <_free_r+0x24>
 8008220:	6810      	ldr	r0, [r2, #0]
 8008222:	6852      	ldr	r2, [r2, #4]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	4401      	add	r1, r0
 8008228:	6019      	str	r1, [r3, #0]
 800822a:	e7d7      	b.n	80081dc <_free_r+0x24>
 800822c:	d902      	bls.n	8008234 <_free_r+0x7c>
 800822e:	230c      	movs	r3, #12
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	e7d3      	b.n	80081dc <_free_r+0x24>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	1821      	adds	r1, r4, r0
 8008238:	428a      	cmp	r2, r1
 800823a:	bf04      	itt	eq
 800823c:	6811      	ldreq	r1, [r2, #0]
 800823e:	6852      	ldreq	r2, [r2, #4]
 8008240:	6062      	str	r2, [r4, #4]
 8008242:	bf04      	itt	eq
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	605c      	str	r4, [r3, #4]
 800824a:	e7c7      	b.n	80081dc <_free_r+0x24>
 800824c:	bd38      	pop	{r3, r4, r5, pc}
 800824e:	bf00      	nop
 8008250:	20000090 	.word	0x20000090

08008254 <_malloc_r>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	1ccd      	adds	r5, r1, #3
 8008258:	f025 0503 	bic.w	r5, r5, #3
 800825c:	3508      	adds	r5, #8
 800825e:	2d0c      	cmp	r5, #12
 8008260:	bf38      	it	cc
 8008262:	250c      	movcc	r5, #12
 8008264:	2d00      	cmp	r5, #0
 8008266:	4606      	mov	r6, r0
 8008268:	db01      	blt.n	800826e <_malloc_r+0x1a>
 800826a:	42a9      	cmp	r1, r5
 800826c:	d903      	bls.n	8008276 <_malloc_r+0x22>
 800826e:	230c      	movs	r3, #12
 8008270:	6033      	str	r3, [r6, #0]
 8008272:	2000      	movs	r0, #0
 8008274:	bd70      	pop	{r4, r5, r6, pc}
 8008276:	f000 fbef 	bl	8008a58 <__malloc_lock>
 800827a:	4a21      	ldr	r2, [pc, #132]	; (8008300 <_malloc_r+0xac>)
 800827c:	6814      	ldr	r4, [r2, #0]
 800827e:	4621      	mov	r1, r4
 8008280:	b991      	cbnz	r1, 80082a8 <_malloc_r+0x54>
 8008282:	4c20      	ldr	r4, [pc, #128]	; (8008304 <_malloc_r+0xb0>)
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	b91b      	cbnz	r3, 8008290 <_malloc_r+0x3c>
 8008288:	4630      	mov	r0, r6
 800828a:	f000 fb3b 	bl	8008904 <_sbrk_r>
 800828e:	6020      	str	r0, [r4, #0]
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f000 fb36 	bl	8008904 <_sbrk_r>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d124      	bne.n	80082e6 <_malloc_r+0x92>
 800829c:	230c      	movs	r3, #12
 800829e:	6033      	str	r3, [r6, #0]
 80082a0:	4630      	mov	r0, r6
 80082a2:	f000 fbda 	bl	8008a5a <__malloc_unlock>
 80082a6:	e7e4      	b.n	8008272 <_malloc_r+0x1e>
 80082a8:	680b      	ldr	r3, [r1, #0]
 80082aa:	1b5b      	subs	r3, r3, r5
 80082ac:	d418      	bmi.n	80082e0 <_malloc_r+0x8c>
 80082ae:	2b0b      	cmp	r3, #11
 80082b0:	d90f      	bls.n	80082d2 <_malloc_r+0x7e>
 80082b2:	600b      	str	r3, [r1, #0]
 80082b4:	50cd      	str	r5, [r1, r3]
 80082b6:	18cc      	adds	r4, r1, r3
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 fbce 	bl	8008a5a <__malloc_unlock>
 80082be:	f104 000b 	add.w	r0, r4, #11
 80082c2:	1d23      	adds	r3, r4, #4
 80082c4:	f020 0007 	bic.w	r0, r0, #7
 80082c8:	1ac3      	subs	r3, r0, r3
 80082ca:	d0d3      	beq.n	8008274 <_malloc_r+0x20>
 80082cc:	425a      	negs	r2, r3
 80082ce:	50e2      	str	r2, [r4, r3]
 80082d0:	e7d0      	b.n	8008274 <_malloc_r+0x20>
 80082d2:	428c      	cmp	r4, r1
 80082d4:	684b      	ldr	r3, [r1, #4]
 80082d6:	bf16      	itet	ne
 80082d8:	6063      	strne	r3, [r4, #4]
 80082da:	6013      	streq	r3, [r2, #0]
 80082dc:	460c      	movne	r4, r1
 80082de:	e7eb      	b.n	80082b8 <_malloc_r+0x64>
 80082e0:	460c      	mov	r4, r1
 80082e2:	6849      	ldr	r1, [r1, #4]
 80082e4:	e7cc      	b.n	8008280 <_malloc_r+0x2c>
 80082e6:	1cc4      	adds	r4, r0, #3
 80082e8:	f024 0403 	bic.w	r4, r4, #3
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d005      	beq.n	80082fc <_malloc_r+0xa8>
 80082f0:	1a21      	subs	r1, r4, r0
 80082f2:	4630      	mov	r0, r6
 80082f4:	f000 fb06 	bl	8008904 <_sbrk_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d0cf      	beq.n	800829c <_malloc_r+0x48>
 80082fc:	6025      	str	r5, [r4, #0]
 80082fe:	e7db      	b.n	80082b8 <_malloc_r+0x64>
 8008300:	20000090 	.word	0x20000090
 8008304:	20000094 	.word	0x20000094

08008308 <__sfputc_r>:
 8008308:	6893      	ldr	r3, [r2, #8]
 800830a:	3b01      	subs	r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	b410      	push	{r4}
 8008310:	6093      	str	r3, [r2, #8]
 8008312:	da08      	bge.n	8008326 <__sfputc_r+0x1e>
 8008314:	6994      	ldr	r4, [r2, #24]
 8008316:	42a3      	cmp	r3, r4
 8008318:	db01      	blt.n	800831e <__sfputc_r+0x16>
 800831a:	290a      	cmp	r1, #10
 800831c:	d103      	bne.n	8008326 <__sfputc_r+0x1e>
 800831e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008322:	f7ff bcab 	b.w	8007c7c <__swbuf_r>
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	1c58      	adds	r0, r3, #1
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	7019      	strb	r1, [r3, #0]
 800832e:	4608      	mov	r0, r1
 8008330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008334:	4770      	bx	lr

08008336 <__sfputs_r>:
 8008336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008338:	4606      	mov	r6, r0
 800833a:	460f      	mov	r7, r1
 800833c:	4614      	mov	r4, r2
 800833e:	18d5      	adds	r5, r2, r3
 8008340:	42ac      	cmp	r4, r5
 8008342:	d101      	bne.n	8008348 <__sfputs_r+0x12>
 8008344:	2000      	movs	r0, #0
 8008346:	e007      	b.n	8008358 <__sfputs_r+0x22>
 8008348:	463a      	mov	r2, r7
 800834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff ffda 	bl	8008308 <__sfputc_r>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d1f3      	bne.n	8008340 <__sfputs_r+0xa>
 8008358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800835c <_vfiprintf_r>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	b09d      	sub	sp, #116	; 0x74
 8008364:	4617      	mov	r7, r2
 8008366:	461d      	mov	r5, r3
 8008368:	4606      	mov	r6, r0
 800836a:	b118      	cbz	r0, 8008374 <_vfiprintf_r+0x18>
 800836c:	6983      	ldr	r3, [r0, #24]
 800836e:	b90b      	cbnz	r3, 8008374 <_vfiprintf_r+0x18>
 8008370:	f7ff fe34 	bl	8007fdc <__sinit>
 8008374:	4b7c      	ldr	r3, [pc, #496]	; (8008568 <_vfiprintf_r+0x20c>)
 8008376:	429c      	cmp	r4, r3
 8008378:	d158      	bne.n	800842c <_vfiprintf_r+0xd0>
 800837a:	6874      	ldr	r4, [r6, #4]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	0718      	lsls	r0, r3, #28
 8008380:	d55e      	bpl.n	8008440 <_vfiprintf_r+0xe4>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05b      	beq.n	8008440 <_vfiprintf_r+0xe4>
 8008388:	2300      	movs	r3, #0
 800838a:	9309      	str	r3, [sp, #36]	; 0x24
 800838c:	2320      	movs	r3, #32
 800838e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008392:	2330      	movs	r3, #48	; 0x30
 8008394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008398:	9503      	str	r5, [sp, #12]
 800839a:	f04f 0b01 	mov.w	fp, #1
 800839e:	46b8      	mov	r8, r7
 80083a0:	4645      	mov	r5, r8
 80083a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083a6:	b10b      	cbz	r3, 80083ac <_vfiprintf_r+0x50>
 80083a8:	2b25      	cmp	r3, #37	; 0x25
 80083aa:	d154      	bne.n	8008456 <_vfiprintf_r+0xfa>
 80083ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80083b0:	d00b      	beq.n	80083ca <_vfiprintf_r+0x6e>
 80083b2:	4653      	mov	r3, sl
 80083b4:	463a      	mov	r2, r7
 80083b6:	4621      	mov	r1, r4
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffbc 	bl	8008336 <__sfputs_r>
 80083be:	3001      	adds	r0, #1
 80083c0:	f000 80c2 	beq.w	8008548 <_vfiprintf_r+0x1ec>
 80083c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c6:	4453      	add	r3, sl
 80083c8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ca:	f898 3000 	ldrb.w	r3, [r8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80ba 	beq.w	8008548 <_vfiprintf_r+0x1ec>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e6:	931a      	str	r3, [sp, #104]	; 0x68
 80083e8:	46a8      	mov	r8, r5
 80083ea:	2205      	movs	r2, #5
 80083ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80083f0:	485e      	ldr	r0, [pc, #376]	; (800856c <_vfiprintf_r+0x210>)
 80083f2:	f7f7 feed 	bl	80001d0 <memchr>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	bb78      	cbnz	r0, 800845a <_vfiprintf_r+0xfe>
 80083fa:	06d9      	lsls	r1, r3, #27
 80083fc:	bf44      	itt	mi
 80083fe:	2220      	movmi	r2, #32
 8008400:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008404:	071a      	lsls	r2, r3, #28
 8008406:	bf44      	itt	mi
 8008408:	222b      	movmi	r2, #43	; 0x2b
 800840a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800840e:	782a      	ldrb	r2, [r5, #0]
 8008410:	2a2a      	cmp	r2, #42	; 0x2a
 8008412:	d02a      	beq.n	800846a <_vfiprintf_r+0x10e>
 8008414:	9a07      	ldr	r2, [sp, #28]
 8008416:	46a8      	mov	r8, r5
 8008418:	2000      	movs	r0, #0
 800841a:	250a      	movs	r5, #10
 800841c:	4641      	mov	r1, r8
 800841e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008422:	3b30      	subs	r3, #48	; 0x30
 8008424:	2b09      	cmp	r3, #9
 8008426:	d969      	bls.n	80084fc <_vfiprintf_r+0x1a0>
 8008428:	b360      	cbz	r0, 8008484 <_vfiprintf_r+0x128>
 800842a:	e024      	b.n	8008476 <_vfiprintf_r+0x11a>
 800842c:	4b50      	ldr	r3, [pc, #320]	; (8008570 <_vfiprintf_r+0x214>)
 800842e:	429c      	cmp	r4, r3
 8008430:	d101      	bne.n	8008436 <_vfiprintf_r+0xda>
 8008432:	68b4      	ldr	r4, [r6, #8]
 8008434:	e7a2      	b.n	800837c <_vfiprintf_r+0x20>
 8008436:	4b4f      	ldr	r3, [pc, #316]	; (8008574 <_vfiprintf_r+0x218>)
 8008438:	429c      	cmp	r4, r3
 800843a:	bf08      	it	eq
 800843c:	68f4      	ldreq	r4, [r6, #12]
 800843e:	e79d      	b.n	800837c <_vfiprintf_r+0x20>
 8008440:	4621      	mov	r1, r4
 8008442:	4630      	mov	r0, r6
 8008444:	f7ff fc6c 	bl	8007d20 <__swsetup_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	d09d      	beq.n	8008388 <_vfiprintf_r+0x2c>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b01d      	add	sp, #116	; 0x74
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	46a8      	mov	r8, r5
 8008458:	e7a2      	b.n	80083a0 <_vfiprintf_r+0x44>
 800845a:	4a44      	ldr	r2, [pc, #272]	; (800856c <_vfiprintf_r+0x210>)
 800845c:	1a80      	subs	r0, r0, r2
 800845e:	fa0b f000 	lsl.w	r0, fp, r0
 8008462:	4318      	orrs	r0, r3
 8008464:	9004      	str	r0, [sp, #16]
 8008466:	4645      	mov	r5, r8
 8008468:	e7be      	b.n	80083e8 <_vfiprintf_r+0x8c>
 800846a:	9a03      	ldr	r2, [sp, #12]
 800846c:	1d11      	adds	r1, r2, #4
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	9103      	str	r1, [sp, #12]
 8008472:	2a00      	cmp	r2, #0
 8008474:	db01      	blt.n	800847a <_vfiprintf_r+0x11e>
 8008476:	9207      	str	r2, [sp, #28]
 8008478:	e004      	b.n	8008484 <_vfiprintf_r+0x128>
 800847a:	4252      	negs	r2, r2
 800847c:	f043 0302 	orr.w	r3, r3, #2
 8008480:	9207      	str	r2, [sp, #28]
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	f898 3000 	ldrb.w	r3, [r8]
 8008488:	2b2e      	cmp	r3, #46	; 0x2e
 800848a:	d10e      	bne.n	80084aa <_vfiprintf_r+0x14e>
 800848c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d138      	bne.n	8008506 <_vfiprintf_r+0x1aa>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9203      	str	r2, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfb8      	it	lt
 80084a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80084a4:	f108 0802 	add.w	r8, r8, #2
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	4d33      	ldr	r5, [pc, #204]	; (8008578 <_vfiprintf_r+0x21c>)
 80084ac:	f898 1000 	ldrb.w	r1, [r8]
 80084b0:	2203      	movs	r2, #3
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7f7 fe8c 	bl	80001d0 <memchr>
 80084b8:	b140      	cbz	r0, 80084cc <_vfiprintf_r+0x170>
 80084ba:	2340      	movs	r3, #64	; 0x40
 80084bc:	1b40      	subs	r0, r0, r5
 80084be:	fa03 f000 	lsl.w	r0, r3, r0
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4303      	orrs	r3, r0
 80084c6:	f108 0801 	add.w	r8, r8, #1
 80084ca:	9304      	str	r3, [sp, #16]
 80084cc:	f898 1000 	ldrb.w	r1, [r8]
 80084d0:	482a      	ldr	r0, [pc, #168]	; (800857c <_vfiprintf_r+0x220>)
 80084d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084d6:	2206      	movs	r2, #6
 80084d8:	f108 0701 	add.w	r7, r8, #1
 80084dc:	f7f7 fe78 	bl	80001d0 <memchr>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d037      	beq.n	8008554 <_vfiprintf_r+0x1f8>
 80084e4:	4b26      	ldr	r3, [pc, #152]	; (8008580 <_vfiprintf_r+0x224>)
 80084e6:	bb1b      	cbnz	r3, 8008530 <_vfiprintf_r+0x1d4>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	3307      	adds	r3, #7
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f6:	444b      	add	r3, r9
 80084f8:	9309      	str	r3, [sp, #36]	; 0x24
 80084fa:	e750      	b.n	800839e <_vfiprintf_r+0x42>
 80084fc:	fb05 3202 	mla	r2, r5, r2, r3
 8008500:	2001      	movs	r0, #1
 8008502:	4688      	mov	r8, r1
 8008504:	e78a      	b.n	800841c <_vfiprintf_r+0xc0>
 8008506:	2300      	movs	r3, #0
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	4619      	mov	r1, r3
 8008510:	250a      	movs	r5, #10
 8008512:	4640      	mov	r0, r8
 8008514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008518:	3a30      	subs	r2, #48	; 0x30
 800851a:	2a09      	cmp	r2, #9
 800851c:	d903      	bls.n	8008526 <_vfiprintf_r+0x1ca>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0c3      	beq.n	80084aa <_vfiprintf_r+0x14e>
 8008522:	9105      	str	r1, [sp, #20]
 8008524:	e7c1      	b.n	80084aa <_vfiprintf_r+0x14e>
 8008526:	fb05 2101 	mla	r1, r5, r1, r2
 800852a:	2301      	movs	r3, #1
 800852c:	4680      	mov	r8, r0
 800852e:	e7f0      	b.n	8008512 <_vfiprintf_r+0x1b6>
 8008530:	ab03      	add	r3, sp, #12
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4622      	mov	r2, r4
 8008536:	4b13      	ldr	r3, [pc, #76]	; (8008584 <_vfiprintf_r+0x228>)
 8008538:	a904      	add	r1, sp, #16
 800853a:	4630      	mov	r0, r6
 800853c:	f3af 8000 	nop.w
 8008540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008544:	4681      	mov	r9, r0
 8008546:	d1d5      	bne.n	80084f4 <_vfiprintf_r+0x198>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	065b      	lsls	r3, r3, #25
 800854c:	f53f af7e 	bmi.w	800844c <_vfiprintf_r+0xf0>
 8008550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008552:	e77d      	b.n	8008450 <_vfiprintf_r+0xf4>
 8008554:	ab03      	add	r3, sp, #12
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4622      	mov	r2, r4
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <_vfiprintf_r+0x228>)
 800855c:	a904      	add	r1, sp, #16
 800855e:	4630      	mov	r0, r6
 8008560:	f000 f888 	bl	8008674 <_printf_i>
 8008564:	e7ec      	b.n	8008540 <_vfiprintf_r+0x1e4>
 8008566:	bf00      	nop
 8008568:	08008d98 	.word	0x08008d98
 800856c:	08008dd8 	.word	0x08008dd8
 8008570:	08008db8 	.word	0x08008db8
 8008574:	08008d78 	.word	0x08008d78
 8008578:	08008dde 	.word	0x08008dde
 800857c:	08008de2 	.word	0x08008de2
 8008580:	00000000 	.word	0x00000000
 8008584:	08008337 	.word	0x08008337

08008588 <_printf_common>:
 8008588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	4691      	mov	r9, r2
 800858e:	461f      	mov	r7, r3
 8008590:	688a      	ldr	r2, [r1, #8]
 8008592:	690b      	ldr	r3, [r1, #16]
 8008594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008598:	4293      	cmp	r3, r2
 800859a:	bfb8      	it	lt
 800859c:	4613      	movlt	r3, r2
 800859e:	f8c9 3000 	str.w	r3, [r9]
 80085a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085a6:	4606      	mov	r6, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	b112      	cbz	r2, 80085b2 <_printf_common+0x2a>
 80085ac:	3301      	adds	r3, #1
 80085ae:	f8c9 3000 	str.w	r3, [r9]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	0699      	lsls	r1, r3, #26
 80085b6:	bf42      	ittt	mi
 80085b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085bc:	3302      	addmi	r3, #2
 80085be:	f8c9 3000 	strmi.w	r3, [r9]
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	f015 0506 	ands.w	r5, r5, #6
 80085c8:	d107      	bne.n	80085da <_printf_common+0x52>
 80085ca:	f104 0a19 	add.w	sl, r4, #25
 80085ce:	68e3      	ldr	r3, [r4, #12]
 80085d0:	f8d9 2000 	ldr.w	r2, [r9]
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	42ab      	cmp	r3, r5
 80085d8:	dc28      	bgt.n	800862c <_printf_common+0xa4>
 80085da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	3300      	adds	r3, #0
 80085e2:	bf18      	it	ne
 80085e4:	2301      	movne	r3, #1
 80085e6:	0692      	lsls	r2, r2, #26
 80085e8:	d42d      	bmi.n	8008646 <_printf_common+0xbe>
 80085ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ee:	4639      	mov	r1, r7
 80085f0:	4630      	mov	r0, r6
 80085f2:	47c0      	blx	r8
 80085f4:	3001      	adds	r0, #1
 80085f6:	d020      	beq.n	800863a <_printf_common+0xb2>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	68e5      	ldr	r5, [r4, #12]
 80085fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008600:	f003 0306 	and.w	r3, r3, #6
 8008604:	2b04      	cmp	r3, #4
 8008606:	bf08      	it	eq
 8008608:	1aad      	subeq	r5, r5, r2
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	bf0c      	ite	eq
 8008610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008614:	2500      	movne	r5, #0
 8008616:	4293      	cmp	r3, r2
 8008618:	bfc4      	itt	gt
 800861a:	1a9b      	subgt	r3, r3, r2
 800861c:	18ed      	addgt	r5, r5, r3
 800861e:	f04f 0900 	mov.w	r9, #0
 8008622:	341a      	adds	r4, #26
 8008624:	454d      	cmp	r5, r9
 8008626:	d11a      	bne.n	800865e <_printf_common+0xd6>
 8008628:	2000      	movs	r0, #0
 800862a:	e008      	b.n	800863e <_printf_common+0xb6>
 800862c:	2301      	movs	r3, #1
 800862e:	4652      	mov	r2, sl
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	47c0      	blx	r8
 8008636:	3001      	adds	r0, #1
 8008638:	d103      	bne.n	8008642 <_printf_common+0xba>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008642:	3501      	adds	r5, #1
 8008644:	e7c3      	b.n	80085ce <_printf_common+0x46>
 8008646:	18e1      	adds	r1, r4, r3
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	2030      	movs	r0, #48	; 0x30
 800864c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008650:	4422      	add	r2, r4
 8008652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008656:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800865a:	3302      	adds	r3, #2
 800865c:	e7c5      	b.n	80085ea <_printf_common+0x62>
 800865e:	2301      	movs	r3, #1
 8008660:	4622      	mov	r2, r4
 8008662:	4639      	mov	r1, r7
 8008664:	4630      	mov	r0, r6
 8008666:	47c0      	blx	r8
 8008668:	3001      	adds	r0, #1
 800866a:	d0e6      	beq.n	800863a <_printf_common+0xb2>
 800866c:	f109 0901 	add.w	r9, r9, #1
 8008670:	e7d8      	b.n	8008624 <_printf_common+0x9c>
	...

08008674 <_printf_i>:
 8008674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008678:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800867c:	460c      	mov	r4, r1
 800867e:	7e09      	ldrb	r1, [r1, #24]
 8008680:	b085      	sub	sp, #20
 8008682:	296e      	cmp	r1, #110	; 0x6e
 8008684:	4617      	mov	r7, r2
 8008686:	4606      	mov	r6, r0
 8008688:	4698      	mov	r8, r3
 800868a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800868c:	f000 80b3 	beq.w	80087f6 <_printf_i+0x182>
 8008690:	d822      	bhi.n	80086d8 <_printf_i+0x64>
 8008692:	2963      	cmp	r1, #99	; 0x63
 8008694:	d036      	beq.n	8008704 <_printf_i+0x90>
 8008696:	d80a      	bhi.n	80086ae <_printf_i+0x3a>
 8008698:	2900      	cmp	r1, #0
 800869a:	f000 80b9 	beq.w	8008810 <_printf_i+0x19c>
 800869e:	2958      	cmp	r1, #88	; 0x58
 80086a0:	f000 8083 	beq.w	80087aa <_printf_i+0x136>
 80086a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086ac:	e032      	b.n	8008714 <_printf_i+0xa0>
 80086ae:	2964      	cmp	r1, #100	; 0x64
 80086b0:	d001      	beq.n	80086b6 <_printf_i+0x42>
 80086b2:	2969      	cmp	r1, #105	; 0x69
 80086b4:	d1f6      	bne.n	80086a4 <_printf_i+0x30>
 80086b6:	6820      	ldr	r0, [r4, #0]
 80086b8:	6813      	ldr	r3, [r2, #0]
 80086ba:	0605      	lsls	r5, r0, #24
 80086bc:	f103 0104 	add.w	r1, r3, #4
 80086c0:	d52a      	bpl.n	8008718 <_printf_i+0xa4>
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6011      	str	r1, [r2, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da03      	bge.n	80086d2 <_printf_i+0x5e>
 80086ca:	222d      	movs	r2, #45	; 0x2d
 80086cc:	425b      	negs	r3, r3
 80086ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086d2:	486f      	ldr	r0, [pc, #444]	; (8008890 <_printf_i+0x21c>)
 80086d4:	220a      	movs	r2, #10
 80086d6:	e039      	b.n	800874c <_printf_i+0xd8>
 80086d8:	2973      	cmp	r1, #115	; 0x73
 80086da:	f000 809d 	beq.w	8008818 <_printf_i+0x1a4>
 80086de:	d808      	bhi.n	80086f2 <_printf_i+0x7e>
 80086e0:	296f      	cmp	r1, #111	; 0x6f
 80086e2:	d020      	beq.n	8008726 <_printf_i+0xb2>
 80086e4:	2970      	cmp	r1, #112	; 0x70
 80086e6:	d1dd      	bne.n	80086a4 <_printf_i+0x30>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	f043 0320 	orr.w	r3, r3, #32
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	e003      	b.n	80086fa <_printf_i+0x86>
 80086f2:	2975      	cmp	r1, #117	; 0x75
 80086f4:	d017      	beq.n	8008726 <_printf_i+0xb2>
 80086f6:	2978      	cmp	r1, #120	; 0x78
 80086f8:	d1d4      	bne.n	80086a4 <_printf_i+0x30>
 80086fa:	2378      	movs	r3, #120	; 0x78
 80086fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008700:	4864      	ldr	r0, [pc, #400]	; (8008894 <_printf_i+0x220>)
 8008702:	e055      	b.n	80087b0 <_printf_i+0x13c>
 8008704:	6813      	ldr	r3, [r2, #0]
 8008706:	1d19      	adds	r1, r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6011      	str	r1, [r2, #0]
 800870c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008714:	2301      	movs	r3, #1
 8008716:	e08c      	b.n	8008832 <_printf_i+0x1be>
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6011      	str	r1, [r2, #0]
 800871c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008720:	bf18      	it	ne
 8008722:	b21b      	sxthne	r3, r3
 8008724:	e7cf      	b.n	80086c6 <_printf_i+0x52>
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	6825      	ldr	r5, [r4, #0]
 800872a:	1d18      	adds	r0, r3, #4
 800872c:	6010      	str	r0, [r2, #0]
 800872e:	0628      	lsls	r0, r5, #24
 8008730:	d501      	bpl.n	8008736 <_printf_i+0xc2>
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	e002      	b.n	800873c <_printf_i+0xc8>
 8008736:	0668      	lsls	r0, r5, #25
 8008738:	d5fb      	bpl.n	8008732 <_printf_i+0xbe>
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	4854      	ldr	r0, [pc, #336]	; (8008890 <_printf_i+0x21c>)
 800873e:	296f      	cmp	r1, #111	; 0x6f
 8008740:	bf14      	ite	ne
 8008742:	220a      	movne	r2, #10
 8008744:	2208      	moveq	r2, #8
 8008746:	2100      	movs	r1, #0
 8008748:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800874c:	6865      	ldr	r5, [r4, #4]
 800874e:	60a5      	str	r5, [r4, #8]
 8008750:	2d00      	cmp	r5, #0
 8008752:	f2c0 8095 	blt.w	8008880 <_printf_i+0x20c>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	f021 0104 	bic.w	r1, r1, #4
 800875c:	6021      	str	r1, [r4, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d13d      	bne.n	80087de <_printf_i+0x16a>
 8008762:	2d00      	cmp	r5, #0
 8008764:	f040 808e 	bne.w	8008884 <_printf_i+0x210>
 8008768:	4665      	mov	r5, ip
 800876a:	2a08      	cmp	r2, #8
 800876c:	d10b      	bne.n	8008786 <_printf_i+0x112>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	07db      	lsls	r3, r3, #31
 8008772:	d508      	bpl.n	8008786 <_printf_i+0x112>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	6862      	ldr	r2, [r4, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	bfde      	ittt	le
 800877c:	2330      	movle	r3, #48	; 0x30
 800877e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008782:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008786:	ebac 0305 	sub.w	r3, ip, r5
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	f8cd 8000 	str.w	r8, [sp]
 8008790:	463b      	mov	r3, r7
 8008792:	aa03      	add	r2, sp, #12
 8008794:	4621      	mov	r1, r4
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff fef6 	bl	8008588 <_printf_common>
 800879c:	3001      	adds	r0, #1
 800879e:	d14d      	bne.n	800883c <_printf_i+0x1c8>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b005      	add	sp, #20
 80087a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087aa:	4839      	ldr	r0, [pc, #228]	; (8008890 <_printf_i+0x21c>)
 80087ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087b0:	6813      	ldr	r3, [r2, #0]
 80087b2:	6821      	ldr	r1, [r4, #0]
 80087b4:	1d1d      	adds	r5, r3, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6015      	str	r5, [r2, #0]
 80087ba:	060a      	lsls	r2, r1, #24
 80087bc:	d50b      	bpl.n	80087d6 <_printf_i+0x162>
 80087be:	07ca      	lsls	r2, r1, #31
 80087c0:	bf44      	itt	mi
 80087c2:	f041 0120 	orrmi.w	r1, r1, #32
 80087c6:	6021      	strmi	r1, [r4, #0]
 80087c8:	b91b      	cbnz	r3, 80087d2 <_printf_i+0x15e>
 80087ca:	6822      	ldr	r2, [r4, #0]
 80087cc:	f022 0220 	bic.w	r2, r2, #32
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	2210      	movs	r2, #16
 80087d4:	e7b7      	b.n	8008746 <_printf_i+0xd2>
 80087d6:	064d      	lsls	r5, r1, #25
 80087d8:	bf48      	it	mi
 80087da:	b29b      	uxthmi	r3, r3
 80087dc:	e7ef      	b.n	80087be <_printf_i+0x14a>
 80087de:	4665      	mov	r5, ip
 80087e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087e4:	fb02 3311 	mls	r3, r2, r1, r3
 80087e8:	5cc3      	ldrb	r3, [r0, r3]
 80087ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087ee:	460b      	mov	r3, r1
 80087f0:	2900      	cmp	r1, #0
 80087f2:	d1f5      	bne.n	80087e0 <_printf_i+0x16c>
 80087f4:	e7b9      	b.n	800876a <_printf_i+0xf6>
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	6961      	ldr	r1, [r4, #20]
 80087fc:	1d18      	adds	r0, r3, #4
 80087fe:	6010      	str	r0, [r2, #0]
 8008800:	0628      	lsls	r0, r5, #24
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	d501      	bpl.n	800880a <_printf_i+0x196>
 8008806:	6019      	str	r1, [r3, #0]
 8008808:	e002      	b.n	8008810 <_printf_i+0x19c>
 800880a:	066a      	lsls	r2, r5, #25
 800880c:	d5fb      	bpl.n	8008806 <_printf_i+0x192>
 800880e:	8019      	strh	r1, [r3, #0]
 8008810:	2300      	movs	r3, #0
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	4665      	mov	r5, ip
 8008816:	e7b9      	b.n	800878c <_printf_i+0x118>
 8008818:	6813      	ldr	r3, [r2, #0]
 800881a:	1d19      	adds	r1, r3, #4
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	681d      	ldr	r5, [r3, #0]
 8008820:	6862      	ldr	r2, [r4, #4]
 8008822:	2100      	movs	r1, #0
 8008824:	4628      	mov	r0, r5
 8008826:	f7f7 fcd3 	bl	80001d0 <memchr>
 800882a:	b108      	cbz	r0, 8008830 <_printf_i+0x1bc>
 800882c:	1b40      	subs	r0, r0, r5
 800882e:	6060      	str	r0, [r4, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	2300      	movs	r3, #0
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e7a7      	b.n	800878c <_printf_i+0x118>
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	462a      	mov	r2, r5
 8008840:	4639      	mov	r1, r7
 8008842:	4630      	mov	r0, r6
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d0aa      	beq.n	80087a0 <_printf_i+0x12c>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	079b      	lsls	r3, r3, #30
 800884e:	d413      	bmi.n	8008878 <_printf_i+0x204>
 8008850:	68e0      	ldr	r0, [r4, #12]
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	4298      	cmp	r0, r3
 8008856:	bfb8      	it	lt
 8008858:	4618      	movlt	r0, r3
 800885a:	e7a3      	b.n	80087a4 <_printf_i+0x130>
 800885c:	2301      	movs	r3, #1
 800885e:	464a      	mov	r2, r9
 8008860:	4639      	mov	r1, r7
 8008862:	4630      	mov	r0, r6
 8008864:	47c0      	blx	r8
 8008866:	3001      	adds	r0, #1
 8008868:	d09a      	beq.n	80087a0 <_printf_i+0x12c>
 800886a:	3501      	adds	r5, #1
 800886c:	68e3      	ldr	r3, [r4, #12]
 800886e:	9a03      	ldr	r2, [sp, #12]
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	42ab      	cmp	r3, r5
 8008874:	dcf2      	bgt.n	800885c <_printf_i+0x1e8>
 8008876:	e7eb      	b.n	8008850 <_printf_i+0x1dc>
 8008878:	2500      	movs	r5, #0
 800887a:	f104 0919 	add.w	r9, r4, #25
 800887e:	e7f5      	b.n	800886c <_printf_i+0x1f8>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1ac      	bne.n	80087de <_printf_i+0x16a>
 8008884:	7803      	ldrb	r3, [r0, #0]
 8008886:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800888a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800888e:	e76c      	b.n	800876a <_printf_i+0xf6>
 8008890:	08008de9 	.word	0x08008de9
 8008894:	08008dfa 	.word	0x08008dfa

08008898 <_putc_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	460d      	mov	r5, r1
 800889c:	4614      	mov	r4, r2
 800889e:	4606      	mov	r6, r0
 80088a0:	b118      	cbz	r0, 80088aa <_putc_r+0x12>
 80088a2:	6983      	ldr	r3, [r0, #24]
 80088a4:	b90b      	cbnz	r3, 80088aa <_putc_r+0x12>
 80088a6:	f7ff fb99 	bl	8007fdc <__sinit>
 80088aa:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <_putc_r+0x60>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d112      	bne.n	80088d6 <_putc_r+0x3e>
 80088b0:	6874      	ldr	r4, [r6, #4]
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	60a3      	str	r3, [r4, #8]
 80088ba:	da16      	bge.n	80088ea <_putc_r+0x52>
 80088bc:	69a2      	ldr	r2, [r4, #24]
 80088be:	4293      	cmp	r3, r2
 80088c0:	db02      	blt.n	80088c8 <_putc_r+0x30>
 80088c2:	b2eb      	uxtb	r3, r5
 80088c4:	2b0a      	cmp	r3, #10
 80088c6:	d110      	bne.n	80088ea <_putc_r+0x52>
 80088c8:	4622      	mov	r2, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	4630      	mov	r0, r6
 80088ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088d2:	f7ff b9d3 	b.w	8007c7c <__swbuf_r>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <_putc_r+0x64>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	d101      	bne.n	80088e0 <_putc_r+0x48>
 80088dc:	68b4      	ldr	r4, [r6, #8]
 80088de:	e7e8      	b.n	80088b2 <_putc_r+0x1a>
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <_putc_r+0x68>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	bf08      	it	eq
 80088e6:	68f4      	ldreq	r4, [r6, #12]
 80088e8:	e7e3      	b.n	80088b2 <_putc_r+0x1a>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	6022      	str	r2, [r4, #0]
 80088f0:	701d      	strb	r5, [r3, #0]
 80088f2:	b2e8      	uxtb	r0, r5
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	bf00      	nop
 80088f8:	08008d98 	.word	0x08008d98
 80088fc:	08008db8 	.word	0x08008db8
 8008900:	08008d78 	.word	0x08008d78

08008904 <_sbrk_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4c06      	ldr	r4, [pc, #24]	; (8008920 <_sbrk_r+0x1c>)
 8008908:	2300      	movs	r3, #0
 800890a:	4605      	mov	r5, r0
 800890c:	4608      	mov	r0, r1
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	f7fa fb36 	bl	8002f80 <_sbrk>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_sbrk_r+0x1a>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	b103      	cbz	r3, 800891e <_sbrk_r+0x1a>
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20000b70 	.word	0x20000b70

08008924 <__sread>:
 8008924:	b510      	push	{r4, lr}
 8008926:	460c      	mov	r4, r1
 8008928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892c:	f000 f896 	bl	8008a5c <_read_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	bfab      	itete	ge
 8008934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008936:	89a3      	ldrhlt	r3, [r4, #12]
 8008938:	181b      	addge	r3, r3, r0
 800893a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800893e:	bfac      	ite	ge
 8008940:	6563      	strge	r3, [r4, #84]	; 0x54
 8008942:	81a3      	strhlt	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__swrite>:
 8008946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	461f      	mov	r7, r3
 800894c:	898b      	ldrh	r3, [r1, #12]
 800894e:	05db      	lsls	r3, r3, #23
 8008950:	4605      	mov	r5, r0
 8008952:	460c      	mov	r4, r1
 8008954:	4616      	mov	r6, r2
 8008956:	d505      	bpl.n	8008964 <__swrite+0x1e>
 8008958:	2302      	movs	r3, #2
 800895a:	2200      	movs	r2, #0
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	f000 f868 	bl	8008a34 <_lseek_r>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	4632      	mov	r2, r6
 8008972:	463b      	mov	r3, r7
 8008974:	4628      	mov	r0, r5
 8008976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	f000 b817 	b.w	80089ac <_write_r>

0800897e <__sseek>:
 800897e:	b510      	push	{r4, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008986:	f000 f855 	bl	8008a34 <_lseek_r>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	bf15      	itete	ne
 8008990:	6560      	strne	r0, [r4, #84]	; 0x54
 8008992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800899a:	81a3      	strheq	r3, [r4, #12]
 800899c:	bf18      	it	ne
 800899e:	81a3      	strhne	r3, [r4, #12]
 80089a0:	bd10      	pop	{r4, pc}

080089a2 <__sclose>:
 80089a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a6:	f000 b813 	b.w	80089d0 <_close_r>
	...

080089ac <_write_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4c07      	ldr	r4, [pc, #28]	; (80089cc <_write_r+0x20>)
 80089b0:	4605      	mov	r5, r0
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7fa fa8f 	bl	8002ede <_write>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_write_r+0x1e>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_write_r+0x1e>
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000b70 	.word	0x20000b70

080089d0 <_close_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4c06      	ldr	r4, [pc, #24]	; (80089ec <_close_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4605      	mov	r5, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	f7fa fa9b 	bl	8002f16 <_close>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_close_r+0x1a>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_close_r+0x1a>
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000b70 	.word	0x20000b70

080089f0 <_fstat_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4c07      	ldr	r4, [pc, #28]	; (8008a10 <_fstat_r+0x20>)
 80089f4:	2300      	movs	r3, #0
 80089f6:	4605      	mov	r5, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	f7fa fa96 	bl	8002f2e <_fstat>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d102      	bne.n	8008a0c <_fstat_r+0x1c>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	b103      	cbz	r3, 8008a0c <_fstat_r+0x1c>
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000b70 	.word	0x20000b70

08008a14 <_isatty_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4c06      	ldr	r4, [pc, #24]	; (8008a30 <_isatty_r+0x1c>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	f7fa fa95 	bl	8002f4e <_isatty>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_isatty_r+0x1a>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_isatty_r+0x1a>
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20000b70 	.word	0x20000b70

08008a34 <_lseek_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4c07      	ldr	r4, [pc, #28]	; (8008a54 <_lseek_r+0x20>)
 8008a38:	4605      	mov	r5, r0
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f7fa fa8e 	bl	8002f64 <_lseek>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_lseek_r+0x1e>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_lseek_r+0x1e>
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20000b70 	.word	0x20000b70

08008a58 <__malloc_lock>:
 8008a58:	4770      	bx	lr

08008a5a <__malloc_unlock>:
 8008a5a:	4770      	bx	lr

08008a5c <_read_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4c07      	ldr	r4, [pc, #28]	; (8008a7c <_read_r+0x20>)
 8008a60:	4605      	mov	r5, r0
 8008a62:	4608      	mov	r0, r1
 8008a64:	4611      	mov	r1, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f7fa fa1a 	bl	8002ea4 <_read>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_read_r+0x1e>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_read_r+0x1e>
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	20000b70 	.word	0x20000b70

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
