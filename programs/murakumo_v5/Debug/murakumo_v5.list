
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800cda8  0800cda8  0001cda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3fc  0800d3fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d404  0800d404  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d404  0800d404  0001d404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001e0  0800d5ec  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800d5ec  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8e9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad3  00000000  00000000  0004eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  000535d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  00054ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e61  00000000  00000000  000561a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7c0  00000000  00000000  0007c001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb311  00000000  00000000  000997c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a4  00000000  00000000  00164b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd8c 	.word	0x0800cd8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cd8c 	.word	0x0800cd8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f004 faaa 	bl	8005560 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f005 f8cf 	bl	80061b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f005 f9fc 	bl	8006420 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f004 fa96 	bl	8005560 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000368 	.word	0x20000368

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f004 fa79 	bl	8005560 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f005 f89e 	bl	80061b8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f005 f898 	bl	80061b8 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f004 fa66 	bl	8005560 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000368 	.word	0x20000368
 80010a4:	00000000 	.word	0x00000000

080010a8 <imu_init>:

uint8_t imu_init(uint8_t* wai)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <imu_init+0xe0>)
 80010b8:	f004 fa52 	bl	8005560 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <imu_init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <imu_init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <imu_init+0xe4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <imu_init+0xe8>)
 80010d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001180 <imu_init+0xd8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <imu_init+0xec>)
 80010e0:	4a2a      	ldr	r2, [pc, #168]	; (800118c <imu_init+0xe4>)
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	6019      	str	r1, [r3, #0]
 80010e6:	8892      	ldrh	r2, [r2, #4]
 80010e8:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <imu_init+0xec>)
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <imu_init+0xe4>)
 80010ee:	3306      	adds	r3, #6
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	6019      	str	r1, [r3, #0]
 80010f4:	8892      	ldrh	r2, [r2, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <imu_init+0xf0>)
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <imu_init+0xe4>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	6019      	str	r1, [r3, #0]
 8001100:	8892      	ldrh	r2, [r2, #4]
 8001102:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <imu_init+0xf0>)
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <imu_init+0xe4>)
 8001108:	3306      	adds	r3, #6
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	8892      	ldrh	r2, [r2, #4]
 8001110:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff6a 	bl	8000fec <imu_read_byte>
 8001118:	4603      	mov	r3, r0
 800111a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7bba      	ldrb	r2, [r7, #14]
 8001120:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2be0      	cmp	r3, #224	; 0xe0
 8001126:	d11e      	bne.n	8001166 <imu_init+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800112c:	2101      	movs	r1, #1
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff ff8a 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f002 ff15 	bl	8003f64 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800113a:	2110      	movs	r1, #16
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff83 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001142:	2120      	movs	r1, #32
 8001144:	207f      	movs	r0, #127	; 0x7f
 8001146:	f7ff ff7f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800114a:	2107      	movs	r1, #7
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff7b 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 8001152:	2100      	movs	r1, #0
 8001154:	2014      	movs	r0, #20
 8001156:	f7ff ff77 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 800115a:	2100      	movs	r1, #0
 800115c:	207f      	movs	r0, #127	; 0x7f
 800115e:	f7ff ff73 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 8001162:	f000 f81b 	bl	800119c <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <imu_init+0xe0>)
 800116e:	f004 f9f7 	bl	8005560 <HAL_GPIO_WritePin>
#endif
	return ret;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	a2529d39 	.word	0xa2529d39
 8001184:	3f91df46 	.word	0x3f91df46
 8001188:	40020400 	.word	0x40020400
 800118c:	20000210 	.word	0x20000210
 8001190:	20000208 	.word	0x20000208
 8001194:	20000230 	.word	0x20000230
 8001198:	20000224 	.word	0x20000224

0800119c <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	imu_read();
 80011a0:	f000 f80e 	bl	80011c0 <imu_read>
	inertial_offset = inertial;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <imu_set_offset+0x1c>)
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <imu_set_offset+0x20>)
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	6851      	ldr	r1, [r2, #4]
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	6059      	str	r1, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000218 	.word	0x20000218
 80011bc:	20000230 	.word	0x20000230

080011c0 <imu_read>:

void imu_read()
{
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 80011c4:	202d      	movs	r0, #45	; 0x2d
 80011c6:	f7ff ff11 	bl	8000fec <imu_read_byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21c      	sxth	r4, r3
 80011d0:	202e      	movs	r0, #46	; 0x2e
 80011d2:	f7ff ff0b 	bl	8000fec <imu_read_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <imu_read+0xbc>)
 80011e0:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 80011e2:	202f      	movs	r0, #47	; 0x2f
 80011e4:	f7ff ff02 	bl	8000fec <imu_read_byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21c      	sxth	r4, r3
 80011ee:	2030      	movs	r0, #48	; 0x30
 80011f0:	f7ff fefc 	bl	8000fec <imu_read_byte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4323      	orrs	r3, r4
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <imu_read+0xbc>)
 80011fe:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f7ff fef3 	bl	8000fec <imu_read_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21c      	sxth	r4, r3
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f7ff feed 	bl	8000fec <imu_read_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	4323      	orrs	r3, r4
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <imu_read+0xbc>)
 800121c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f7ff fee4 	bl	8000fec <imu_read_byte>
 8001224:	4603      	mov	r3, r0
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21c      	sxth	r4, r3
 800122a:	2034      	movs	r0, #52	; 0x34
 800122c:	f7ff fede 	bl	8000fec <imu_read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	b21b      	sxth	r3, r3
 8001234:	4323      	orrs	r3, r4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <imu_read+0xbc>)
 800123a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800123c:	2035      	movs	r0, #53	; 0x35
 800123e:	f7ff fed5 	bl	8000fec <imu_read_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21c      	sxth	r4, r3
 8001248:	2036      	movs	r0, #54	; 0x36
 800124a:	f7ff fecf 	bl	8000fec <imu_read_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	b21b      	sxth	r3, r3
 8001252:	4323      	orrs	r3, r4
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <imu_read+0xbc>)
 8001258:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 800125a:	2037      	movs	r0, #55	; 0x37
 800125c:	f7ff fec6 	bl	8000fec <imu_read_byte>
 8001260:	4603      	mov	r3, r0
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21c      	sxth	r4, r3
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f7ff fec0 	bl	8000fec <imu_read_byte>
 800126c:	4603      	mov	r3, r0
 800126e:	b21b      	sxth	r3, r3
 8001270:	4323      	orrs	r3, r4
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <imu_read+0xbc>)
 8001276:	815a      	strh	r2, [r3, #10]
}
 8001278:	bf00      	nop
 800127a:	bd98      	pop	{r3, r4, r7, pc}
 800127c:	20000230 	.word	0x20000230

08001280 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001284:	f000 f804 	bl	8001290 <rotary_set_playmode>
    rotary_set_value();
 8001288:	f000 f81a 	bl	80012c0 <rotary_set_value>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001294:	f000 f82c 	bl	80012f0 <rotary_read>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <rotary_set_playmode+0x14>)
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000023c 	.word	0x2000023c

080012a8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    return playmode;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <rotary_read_playmode+0x14>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <rotary_set_value>:

void rotary_set_value()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80012c4:	f000 f814 	bl	80012f0 <rotary_read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <rotary_set_value+0x14>)
 80012ce:	701a      	strb	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000023d 	.word	0x2000023d

080012d8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
    return value;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <rotary_read_value+0x14>)
 80012de:	781b      	ldrb	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2000023d 	.word	0x2000023d

080012f0 <rotary_read>:

uint8_t rotary_read()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <rotary_read+0x8c>)
 8001300:	f004 f916 	bl	8005530 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4413      	add	r3, r2
 8001316:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <rotary_read+0x8c>)
 800131e:	f004 f907 	bl	8005530 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <rotary_read+0x3c>
 8001328:	2302      	movs	r3, #2
 800132a:	e000      	b.n	800132e <rotary_read+0x3e>
 800132c:	2300      	movs	r3, #0
 800132e:	b2da      	uxtb	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4413      	add	r3, r2
 8001334:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <rotary_read+0x90>)
 800133c:	f004 f8f8 	bl	8005530 <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <rotary_read+0x5a>
 8001346:	2304      	movs	r3, #4
 8001348:	e000      	b.n	800134c <rotary_read+0x5c>
 800134a:	2300      	movs	r3, #0
 800134c:	b2da      	uxtb	r2, r3
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4413      	add	r3, r2
 8001352:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <rotary_read+0x8c>)
 800135a:	f004 f8e9 	bl	8005530 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <rotary_read+0x78>
 8001364:	2308      	movs	r3, #8
 8001366:	e000      	b.n	800136a <rotary_read+0x7a>
 8001368:	2300      	movs	r3, #0
 800136a:	b2da      	uxtb	r2, r3
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4413      	add	r3, r2
 8001370:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020800 	.word	0x40020800
 8001380:	40020000 	.word	0x40020000

08001384 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
    enter = 1;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <switch_set_enter+0x14>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	2000023e 	.word	0x2000023e

0800139c <switch_reset_enter>:

void switch_reset_enter()
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
    enter = 0;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <switch_reset_enter+0x14>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	2000023e 	.word	0x2000023e

080013b4 <switch_init>:

void switch_init()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80013b8:	f7ff fff0 	bl	800139c <switch_reset_enter>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
    return enter;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <switch_read_enter+0x14>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000023e 	.word	0x2000023e

080013d8 <switch1_read>:

uint8_t switch1_read()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) ? 0 : 1;
 80013dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <switch1_read+0x20>)
 80013e2:	f004 f8a5 	bl	8005530 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020800 	.word	0x40020800

080013fc <switch2_read>:

uint8_t switch2_read()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) ? 0 : 1;
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <switch2_read+0x20>)
 8001406:	f004 f893 	bl	8005530 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020800 	.word	0x40020800

08001420 <switch_read>:

uint8_t switch_read()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800142a:	f7ff ffd5 	bl	80013d8 <switch1_read>
 800142e:	4603      	mov	r3, r0
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4413      	add	r3, r2
 8001438:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 800143a:	f7ff ffdf 	bl	80013fc <switch2_read>
 800143e:	4603      	mov	r3, r0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4413      	add	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <switch_enter>:

void switch_enter()
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 8001456:	f7ff ffe3 	bl	8001420 <switch_read>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <switch_enter+0x14>
    {
        switch_reset_enter();
 8001460:	f7ff ff9c 	bl	800139c <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 8001464:	e006      	b.n	8001474 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 8001466:	f7ff ffdb 	bl	8001420 <switch_read>
 800146a:	4603      	mov	r3, r0
 800146c:	2b02      	cmp	r3, #2
 800146e:	d101      	bne.n	8001474 <switch_enter+0x22>
        switch_set_enter();
 8001470:	f7ff ff88 	bl	8001384 <switch_set_enter>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <analog_set_on_flash>:
uint16_t analograte[CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	printf("analog_set_on_flash()\r\n");
 8001482:	4819      	ldr	r0, [pc, #100]	; (80014e8 <analog_set_on_flash+0x70>)
 8001484:	f007 fede 	bl	8009244 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e024      	b.n	80014d8 <analog_set_on_flash+0x60>
	{
		printf("analogmin[%2d] = %5d, analogmax[%2d] = %5d\r\n", i, analogmin[i], i, analogmax[i]);
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <analog_set_on_flash+0x74>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001496:	4619      	mov	r1, r3
 8001498:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <analog_set_on_flash+0x78>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	460a      	mov	r2, r1
 80014a6:	68f9      	ldr	r1, [r7, #12]
 80014a8:	4812      	ldr	r0, [pc, #72]	; (80014f4 <analog_set_on_flash+0x7c>)
 80014aa:	f007 fe45 	bl	8009138 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <analog_set_on_flash+0x74>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80014be:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4909      	ldr	r1, [pc, #36]	; (80014f0 <analog_set_on_flash+0x78>)
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80014d0:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d9d7      	bls.n	800148e <analog_set_on_flash+0x16>
	}
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800cda8 	.word	0x0800cda8
 80014ec:	20000284 	.word	0x20000284
 80014f0:	200002c8 	.word	0x200002c8
 80014f4:	0800cdc0 	.word	0x0800cdc0

080014f8 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <analog_set_from_flash+0x50>)
 8001504:	f007 fe9e 	bl	8009244 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e014      	b.n	8001538 <analog_set_from_flash+0x40>
	{
		analogmin[i] = *(analogmin_ + i);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	8819      	ldrh	r1, [r3, #0]
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <analog_set_from_flash+0x54>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	8819      	ldrh	r1, [r3, #0]
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <analog_set_from_flash+0x58>)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	d9e7      	bls.n	800150e <analog_set_from_flash+0x16>
	}
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	0800cdf0 	.word	0x0800cdf0
 800154c:	20000284 	.word	0x20000284
 8001550:	200002c8 	.word	0x200002c8

08001554 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <analog_set_calibrationsize+0x1c>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	7013      	strb	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	200002a5 	.word	0x200002a5

08001574 <analog_read_calibrationsize>:

uint8_t analog_read_calibrationsize()
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	return calibrationsize;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <analog_read_calibrationsize+0x14>)
 800157a:	781b      	ldrb	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200002a5 	.word	0x200002a5

0800158c <analog_calibration_start>:

void analog_calibration_start()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	analogmode = calibrating;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <analog_calibration_start+0x40>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	e00d      	b.n	80015ba <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <analog_calibration_start+0x44>)
 80015a2:	2100      	movs	r1, #0
 80015a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <analog_calibration_start+0x48>)
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3301      	adds	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d9ee      	bls.n	800159e <analog_calibration_start+0x12>
    }
	analog_sensor_start();
 80015c0:	f000 f828 	bl	8001614 <analog_sensor_start>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	200002c8 	.word	0x200002c8
 80015d4:	20000284 	.word	0x20000284

080015d8 <analog_init>:
	/* analog_calibration_stop */
	analogmode = all;
}

void analog_init()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 80015dc:	2010      	movs	r0, #16
 80015de:	f7ff ffb9 	bl	8001554 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <analog_init+0x20>)
 80015e4:	f002 fce2 	bl	8003fac <HAL_ADC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <analog_init+0x1a>
    {
        Error_Handler();
 80015ee:	f001 f8cf 	bl	8002790 <Error_Handler>
    }
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200004d4 	.word	0x200004d4

080015fc <analog_start>:

void analog_start()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	analog_sensor_start();
 8001600:	f000 f808 	bl	8001614 <analog_sensor_start>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <analog_stop>:

void analog_stop()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 800160c:	f000 f81e 	bl	800164c <analog_sensor_stop>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <analog_sensor_start>:

void analog_sensor_start()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    sensgettime = 0;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <analog_sensor_start+0x2c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE_MAX) != HAL_OK)
 800161e:	2210      	movs	r2, #16
 8001620:	4908      	ldr	r1, [pc, #32]	; (8001644 <analog_sensor_start+0x30>)
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <analog_sensor_start+0x34>)
 8001624:	f002 fd06 	bl	8004034 <HAL_ADC_Start_DMA>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <analog_sensor_start+0x1e>
    {
        Error_Handler();
 800162e:	f001 f8af 	bl	8002790 <Error_Handler>
    }
    HAL_Delay(1000);
 8001632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001636:	f002 fc95 	bl	8003f64 <HAL_Delay>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000260 	.word	0x20000260
 8001644:	20000264 	.word	0x20000264
 8001648:	200004d4 	.word	0x200004d4

0800164c <analog_sensor_stop>:

void analog_sensor_stop()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <analog_sensor_stop+0x10>)
 8001652:	f002 fde1 	bl	8004218 <HAL_ADC_Stop_DMA>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200004d4 	.word	0x200004d4

08001660 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4a13      	ldr	r2, [pc, #76]	; (80016bc <analog_sensor_get+0x5c>)
 800166e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001672:	4619      	mov	r1, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <analog_sensor_get+0x60>)
 8001678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <analog_sensor_get+0x64>)
 800168a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800168e:	4618      	mov	r0, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	490b      	ldr	r1, [pc, #44]	; (80016c0 <analog_sensor_get+0x60>)
 8001694:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001698:	1ac3      	subs	r3, r0, r3
 800169a:	fb92 f2f3 	sdiv	r2, r2, r3
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	b291      	uxth	r1, r2
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <analog_sensor_get+0x68>)
 80016a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <analog_sensor_get+0x68>)
 80016ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20000240 	.word	0x20000240
 80016c0:	20000284 	.word	0x20000284
 80016c4:	200002c8 	.word	0x200002c8
 80016c8:	200002a8 	.word	0x200002a8

080016cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80016cc:	b490      	push	{r4, r7}
 80016ce:	b0cc      	sub	sp, #304	; 0x130
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	6018      	str	r0, [r3, #0]
	uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_ADC_ConvCpltCallback+0x18c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	f240 8093 	bls.w	8001806 <HAL_ADC_ConvCpltCallback+0x13a>
    {
		sensgettime = 0;
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_ADC_ConvCpltCallback+0x18c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80016ec:	e086      	b.n	80017fc <HAL_ADC_ConvCpltCallback+0x130>
        {
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80016f4:	e042      	b.n	800177c <HAL_ADC_ConvCpltCallback+0xb0>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80016fc:	e033      	b.n	8001766 <HAL_ADC_ConvCpltCallback+0x9a>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 80016fe:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001702:	1e59      	subs	r1, r3, #1
 8001704:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	0109      	lsls	r1, r1, #4
 800170e:	440a      	add	r2, r1
 8001710:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001714:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001718:	f897 412d 	ldrb.w	r4, [r7, #301]	; 0x12d
 800171c:	f897 012f 	ldrb.w	r0, [r7, #303]	; 0x12f
 8001720:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001724:	1e59      	subs	r1, r3, #1
 8001726:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	0124      	lsls	r4, r4, #4
 8001730:	4420      	add	r0, r4
 8001732:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	0109      	lsls	r1, r1, #4
 800173c:	440a      	add	r2, r1
 800173e:	4601      	mov	r1, r0
 8001740:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001744:	f897 112d 	ldrb.w	r1, [r7, #301]	; 0x12d
 8001748:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	0109      	lsls	r1, r1, #4
 8001752:	440a      	add	r2, r1
 8001754:	f8b7 1128 	ldrh.w	r1, [r7, #296]	; 0x128
 8001758:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 800175c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8001766:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 800176a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800176e:	429a      	cmp	r2, r3
 8001770:	d8c5      	bhi.n	80016fe <HAL_ADC_ConvCpltCallback+0x32>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001772:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001776:	3301      	adds	r3, #1
 8001778:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800177c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001780:	2b08      	cmp	r3, #8
 8001782:	d9b8      	bls.n	80016f6 <HAL_ADC_ConvCpltCallback+0x2a>
				}
			}

			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001784:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 8001788:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	3140      	adds	r1, #64	; 0x40
 8001792:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_ADC_ConvCpltCallback+0x190>)
 8001798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// get maxvalue and minimumvalue
			uint16_t analogbuf;
			analogbuf = analog[index];
 800179c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017a0:	4a2e      	ldr	r2, [pc, #184]	; (800185c <HAL_ADC_ConvCpltCallback+0x190>)
 80017a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a6:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			if(analogmode == calibrating)
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_ADC_ConvCpltCallback+0x194>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11f      	bne.n	80017f2 <HAL_ADC_ConvCpltCallback+0x126>
			{
				analogmax[index] = (analogmax[index] < analogbuf) ? analogbuf : analogmax[index];
 80017b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_ADC_ConvCpltCallback+0x198>)
 80017b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017c0:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80017c4:	428a      	cmp	r2, r1
 80017c6:	bf38      	it	cc
 80017c8:	460a      	movcc	r2, r1
 80017ca:	b291      	uxth	r1, r2
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_ADC_ConvCpltCallback+0x198>)
 80017ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				analogmin[index] = (analogmin[index] > analogbuf) ? analogbuf : analogmin[index];
 80017d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_ADC_ConvCpltCallback+0x19c>)
 80017d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017e0:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80017e4:	428a      	cmp	r2, r1
 80017e6:	bf28      	it	cs
 80017e8:	460a      	movcs	r2, r1
 80017ea:	b291      	uxth	r1, r2
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_ADC_ConvCpltCallback+0x19c>)
 80017ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 80017f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80017f6:	3301      	adds	r3, #1
 80017f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80017fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001800:	2b0f      	cmp	r3, #15
 8001802:	f67f af74 	bls.w	80016ee <HAL_ADC_ConvCpltCallback+0x22>
			}
		}
	}

    /* sensorget */
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 8001806:	2300      	movs	r3, #0
 8001808:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 800180c:	e014      	b.n	8001838 <HAL_ADC_ConvCpltCallback+0x16c>
    {
		analogbuffers[sensgettime][index] = analograw[index];
 800180e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001812:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <HAL_ADC_ConvCpltCallback+0x1a0>)
 800181c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	0109      	lsls	r1, r1, #4
 8001826:	440a      	add	r2, r1
 8001828:	4601      	mov	r1, r0
 800182a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 800182e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001832:	3301      	adds	r3, #1
 8001834:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 8001838:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d9e6      	bls.n	800180e <HAL_ADC_ConvCpltCallback+0x142>
	}
	sensgettime++;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001850:	46bd      	mov	sp, r7
 8001852:	bc90      	pop	{r4, r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000260 	.word	0x20000260
 800185c:	20000240 	.word	0x20000240
 8001860:	200002a4 	.word	0x200002a4
 8001864:	200002c8 	.word	0x200002c8
 8001868:	20000284 	.word	0x20000284
 800186c:	20000264 	.word	0x20000264

08001870 <encoder_init>:
/* encoders are updated only in encoder file. */
double encoder_left, encoder_right, encoder;

/* private */
void encoder_init()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    LENGTHPERPULSE = M_PI * TIREDIAMETER * PINION / (double) PULSEPERROTATE / (double) SUPER;
 8001874:	4908      	ldr	r1, [pc, #32]	; (8001898 <encoder_init+0x28>)
 8001876:	a306      	add	r3, pc, #24	; (adr r3, 8001890 <encoder_init+0x20>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	24a478cb 	.word	0x24a478cb
 8001894:	40192ab8 	.word	0x40192ab8
 8001898:	20000300 	.word	0x20000300

0800189c <encoder_set_middle>:
    encoder_stop();
}

/* private */
void encoder_set_middle()
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <encoder_set_middle+0x20>)
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2 -> CNT = ENCODER_MIDDLE;
 80018a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40010000 	.word	0x40010000

080018c0 <encoder_start>:

void encoder_start()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    encoder_set_middle();
 80018c4:	f7ff ffea 	bl	800189c <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80018c8:	213c      	movs	r1, #60	; 0x3c
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <encoder_start+0x24>)
 80018cc:	f005 fb32 	bl	8006f34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018d0:	213c      	movs	r1, #60	; 0x3c
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <encoder_start+0x28>)
 80018d4:	f005 fb2e 	bl	8006f34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <encoder_start+0x2c>)
 80018da:	f005 f988 	bl	8006bee <HAL_TIM_Base_Start_IT>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200005fc 	.word	0x200005fc
 80018e8:	20000494 	.word	0x20000494
 80018ec:	20000454 	.word	0x20000454

080018f0 <encoder_stop>:

void encoder_stop()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80018f4:	213c      	movs	r1, #60	; 0x3c
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <encoder_stop+0x18>)
 80018f8:	f005 fb54 	bl	8006fa4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80018fc:	213c      	movs	r1, #60	; 0x3c
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <encoder_stop+0x1c>)
 8001900:	f005 fb50 	bl	8006fa4 <HAL_TIM_Encoder_Stop>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200005fc 	.word	0x200005fc
 800190c:	20000494 	.word	0x20000494

08001910 <encoder_read>:

double encoder_read()
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
    return encoder;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <encoder_read+0x20>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	ec43 2b17 	vmov	d7, r2, r3
}
 800191e:	eeb0 0a47 	vmov.f32	s0, s14
 8001922:	eef0 0a67 	vmov.f32	s1, s15
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200002f0 	.word	0x200002f0

08001934 <encoder_read_left>:

double encoder_read_left()
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
    return encoder_left;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <encoder_read_left+0x20>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001942:	eeb0 0a47 	vmov.f32	s0, s14
 8001946:	eef0 0a67 	vmov.f32	s1, s15
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200002e8 	.word	0x200002e8

08001958 <encoder_read_right>:

double encoder_read_right()
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    return encoder_right;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <encoder_read_right+0x20>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	ec43 2b17 	vmov	d7, r2, r3
}
 8001966:	eeb0 0a47 	vmov.f32	s0, s14
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200002f8 	.word	0x200002f8

0800197c <encoder_set>:

/* only read tim10_main */
void encoder_set()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <encoder_set+0x6c>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdbb 	bl	8000504 <__aeabi_ui2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4916      	ldr	r1, [pc, #88]	; (80019ec <encoder_set+0x70>)
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <encoder_set+0x74>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdaf 	bl	8000504 <__aeabi_ui2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4912      	ldr	r1, [pc, #72]	; (80019f4 <encoder_set+0x78>)
 80019ac:	e9c1 2300 	strd	r2, r3, [r1]
    encoder = (encoder_left + encoder_right) / 2;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <encoder_set+0x70>)
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <encoder_set+0x78>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fc66 	bl	800028c <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <encoder_set+0x7c>)
 80019da:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 80019de:	f7ff ff5d 	bl	800189c <encoder_set_middle>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	200002e8 	.word	0x200002e8
 80019f0:	40000400 	.word	0x40000400
 80019f4:	200002f8 	.word	0x200002f8
 80019f8:	200002f0 	.word	0x200002f0

080019fc <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    tim6_main();
 8001a0e:	f001 feeb 	bl	80037e8 <tim6_main>
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
    tim10_main();
 8001a1c:	f001 fde8 	bl	80035f0 <tim10_main>
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    tim11_main();
 8001a2a:	f001 fe95 	bl	8003758 <tim11_main>
	}
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40001000 	.word	0x40001000
 8001a3c:	40014400 	.word	0x40014400
 8001a40:	40014800 	.word	0x40014800

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f002 fa1a 	bl	8003e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f984 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f000 fd70 	bl	8002534 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a54:	f000 fd4e 	bl	80024f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a58:	f000 f9e8 	bl	8001e2c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001a5c:	f000 fd20 	bl	80024a0 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001a60:	f000 fc7c 	bl	800235c <MX_TIM6_Init>
  MX_TIM4_Init();
 8001a64:	f000 fc16 	bl	8002294 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001a68:	f000 fb68 	bl	800213c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a6c:	f000 fbbe 	bl	80021ec <MX_TIM3_Init>
  MX_TIM10_Init();
 8001a70:	f000 fcaa 	bl	80023c8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a74:	f000 fccc 	bl	8002410 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001a78:	f000 fb2a 	bl	80020d0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001a7c:	f000 fafa 	bl	8002074 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001a80:	f000 fcea 	bl	8002458 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8001a84:	48b0      	ldr	r0, [pc, #704]	; (8001d48 <main+0x304>)
 8001a86:	f007 fb57 	bl	8009138 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001a8a:	48b0      	ldr	r0, [pc, #704]	; (8001d4c <main+0x308>)
 8001a8c:	f007 fbda 	bl	8009244 <puts>

  main_init();
 8001a90:	f000 fe3a 	bl	8002708 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    print_while();
 8001a94:	f000 ff7a 	bl	800298c <print_while>

		if(switch_read_enter())
 8001a98:	f7ff fc92 	bl	80013c0 <switch_read_enter>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8147 	beq.w	8001d32 <main+0x2ee>
		{
			switch(rotary_read())
 8001aa4:	f7ff fc24 	bl	80012f0 <rotary_read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f200 8143 	bhi.w	8001d36 <main+0x2f2>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <main+0x74>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001af9 	.word	0x08001af9
 8001abc:	08001b47 	.word	0x08001b47
 8001ac0:	08001b69 	.word	0x08001b69
 8001ac4:	08001b89 	.word	0x08001b89
 8001ac8:	08001ba9 	.word	0x08001ba9
 8001acc:	08001bc9 	.word	0x08001bc9
 8001ad0:	08001be9 	.word	0x08001be9
 8001ad4:	08001c09 	.word	0x08001c09
 8001ad8:	08001c29 	.word	0x08001c29
 8001adc:	08001c49 	.word	0x08001c49
 8001ae0:	08001c69 	.word	0x08001c69
 8001ae4:	08001c89 	.word	0x08001c89
 8001ae8:	08001ca9 	.word	0x08001ca9
 8001aec:	08001cc9 	.word	0x08001cc9
 8001af0:	08001ce9 	.word	0x08001ce9
 8001af4:	08001d09 	.word	0x08001d09
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8001af8:	f7ff fbd6 	bl	80012a8 <rotary_read_playmode>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d111      	bne.n	8001b26 <main+0xe2>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8001b02:	f7ff fd43 	bl	800158c <analog_calibration_start>

            while(switch_read_enter())
 8001b06:	e002      	b.n	8001b0e <main+0xca>
            {
              HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f002 fa2b 	bl	8003f64 <HAL_Delay>
            while(switch_read_enter())
 8001b0e:	f7ff fc57 	bl	80013c0 <switch_read_enter>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f7      	bne.n	8001b08 <main+0xc4>
            }

            /* HAL_ADC_Stop_DMA */
            analog_stop();
 8001b18:	f7ff fd76 	bl	8001608 <analog_stop>
            /* flashbuffer.analogmin/max = analogmin/max */
            analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b1c:	498c      	ldr	r1, [pc, #560]	; (8001d50 <main+0x30c>)
 8001b1e:	488d      	ldr	r0, [pc, #564]	; (8001d54 <main+0x310>)
 8001b20:	f7ff fcaa 	bl	8001478 <analog_set_on_flash>
              HAL_Delay(250);
            }

            running_stop();
          }
          break;	// case 0x00:
 8001b24:	e10a      	b.n	8001d3c <main+0x2f8>
            running_start();
 8001b26:	f000 fdfb 	bl	8002720 <running_start>
            while(switch_read_enter())
 8001b2a:	e004      	b.n	8001b36 <main+0xf2>
              d_print();
 8001b2c:	f000 ff28 	bl	8002980 <d_print>
              HAL_Delay(250);
 8001b30:	20fa      	movs	r0, #250	; 0xfa
 8001b32:	f002 fa17 	bl	8003f64 <HAL_Delay>
            while(switch_read_enter())
 8001b36:	f7ff fc43 	bl	80013c0 <switch_read_enter>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f5      	bne.n	8001b2c <main+0xe8>
            running_stop();
 8001b40:	f000 fdf6 	bl	8002730 <running_stop>
          break;	// case 0x00:
 8001b44:	e0fa      	b.n	8001d3c <main+0x2f8>
        case 0x01:	// 1
          running_start();
 8001b46:	f000 fdeb 	bl	8002720 <running_start>

          while (switch_read_enter())
 8001b4a:	e005      	b.n	8001b58 <main+0x114>
          {
            d_print();
 8001b4c:	f000 ff18 	bl	8002980 <d_print>
            HAL_Delay(500);
 8001b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b54:	f002 fa06 	bl	8003f64 <HAL_Delay>
          while (switch_read_enter())
 8001b58:	f7ff fc32 	bl	80013c0 <switch_read_enter>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f4      	bne.n	8001b4c <main+0x108>
          }

          running_stop();
 8001b62:	f000 fde5 	bl	8002730 <running_stop>
          break;
 8001b66:	e0e9      	b.n	8001d3c <main+0x2f8>
        case 0x02:	// 2
          running_start();
 8001b68:	f000 fdda 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001b6c:	e004      	b.n	8001b78 <main+0x134>
          {
            d_print();
 8001b6e:	f000 ff07 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001b72:	20fa      	movs	r0, #250	; 0xfa
 8001b74:	f002 f9f6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001b78:	f7ff fc22 	bl	80013c0 <switch_read_enter>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f5      	bne.n	8001b6e <main+0x12a>
          }

          running_stop();
 8001b82:	f000 fdd5 	bl	8002730 <running_stop>
          break;
 8001b86:	e0d9      	b.n	8001d3c <main+0x2f8>
        case 0x03:	// 3
          running_start();
 8001b88:	f000 fdca 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001b8c:	e004      	b.n	8001b98 <main+0x154>
          {
            d_print();
 8001b8e:	f000 fef7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001b92:	20fa      	movs	r0, #250	; 0xfa
 8001b94:	f002 f9e6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001b98:	f7ff fc12 	bl	80013c0 <switch_read_enter>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f5      	bne.n	8001b8e <main+0x14a>
          }

          running_stop();
 8001ba2:	f000 fdc5 	bl	8002730 <running_stop>
          break;
 8001ba6:	e0c9      	b.n	8001d3c <main+0x2f8>
        case 0x04:	// 4
          running_start();
 8001ba8:	f000 fdba 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001bac:	e004      	b.n	8001bb8 <main+0x174>
          {
            d_print();
 8001bae:	f000 fee7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001bb2:	20fa      	movs	r0, #250	; 0xfa
 8001bb4:	f002 f9d6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001bb8:	f7ff fc02 	bl	80013c0 <switch_read_enter>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f5      	bne.n	8001bae <main+0x16a>
          }

          running_stop();
 8001bc2:	f000 fdb5 	bl	8002730 <running_stop>
          break;
 8001bc6:	e0b9      	b.n	8001d3c <main+0x2f8>
        case 0x05:	// 5
          running_start();
 8001bc8:	f000 fdaa 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001bcc:	e004      	b.n	8001bd8 <main+0x194>
          {
            d_print();
 8001bce:	f000 fed7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001bd2:	20fa      	movs	r0, #250	; 0xfa
 8001bd4:	f002 f9c6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001bd8:	f7ff fbf2 	bl	80013c0 <switch_read_enter>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f5      	bne.n	8001bce <main+0x18a>
          }

          running_stop();
 8001be2:	f000 fda5 	bl	8002730 <running_stop>
          break;
 8001be6:	e0a9      	b.n	8001d3c <main+0x2f8>
        case 0x06:	// 6
          running_start();
 8001be8:	f000 fd9a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001bec:	e004      	b.n	8001bf8 <main+0x1b4>
          {
            d_print();
 8001bee:	f000 fec7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001bf2:	20fa      	movs	r0, #250	; 0xfa
 8001bf4:	f002 f9b6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001bf8:	f7ff fbe2 	bl	80013c0 <switch_read_enter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f5      	bne.n	8001bee <main+0x1aa>
          }

          running_stop();
 8001c02:	f000 fd95 	bl	8002730 <running_stop>
          break;
 8001c06:	e099      	b.n	8001d3c <main+0x2f8>
        case 0x07:	// 7
          running_start();
 8001c08:	f000 fd8a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001c0c:	e004      	b.n	8001c18 <main+0x1d4>
          {
            d_print();
 8001c0e:	f000 feb7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001c12:	20fa      	movs	r0, #250	; 0xfa
 8001c14:	f002 f9a6 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001c18:	f7ff fbd2 	bl	80013c0 <switch_read_enter>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f5      	bne.n	8001c0e <main+0x1ca>
          }

          running_stop();
 8001c22:	f000 fd85 	bl	8002730 <running_stop>
          break;
 8001c26:	e089      	b.n	8001d3c <main+0x2f8>
        case 0x08:	// 8
          running_start();
 8001c28:	f000 fd7a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001c2c:	e004      	b.n	8001c38 <main+0x1f4>
          {
            d_print();
 8001c2e:	f000 fea7 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001c32:	20fa      	movs	r0, #250	; 0xfa
 8001c34:	f002 f996 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001c38:	f7ff fbc2 	bl	80013c0 <switch_read_enter>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f5      	bne.n	8001c2e <main+0x1ea>
          }

          running_stop();
 8001c42:	f000 fd75 	bl	8002730 <running_stop>
          break;
 8001c46:	e079      	b.n	8001d3c <main+0x2f8>
        case 0x09:	// 9
          running_start();
 8001c48:	f000 fd6a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001c4c:	e004      	b.n	8001c58 <main+0x214>
          {
            d_print();
 8001c4e:	f000 fe97 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001c52:	20fa      	movs	r0, #250	; 0xfa
 8001c54:	f002 f986 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001c58:	f7ff fbb2 	bl	80013c0 <switch_read_enter>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f5      	bne.n	8001c4e <main+0x20a>
          }

          running_stop();
 8001c62:	f000 fd65 	bl	8002730 <running_stop>
          break;
 8001c66:	e069      	b.n	8001d3c <main+0x2f8>
        case 0x0A:	// A
          running_start();
 8001c68:	f000 fd5a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001c6c:	e004      	b.n	8001c78 <main+0x234>
          {
            d_print();
 8001c6e:	f000 fe87 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001c72:	20fa      	movs	r0, #250	; 0xfa
 8001c74:	f002 f976 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001c78:	f7ff fba2 	bl	80013c0 <switch_read_enter>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f5      	bne.n	8001c6e <main+0x22a>
          }

          running_stop();
 8001c82:	f000 fd55 	bl	8002730 <running_stop>
          break;
 8001c86:	e059      	b.n	8001d3c <main+0x2f8>
        case 0x0B:	// B
          running_start();
 8001c88:	f000 fd4a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001c8c:	e004      	b.n	8001c98 <main+0x254>
          {
            d_print();
 8001c8e:	f000 fe77 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001c92:	20fa      	movs	r0, #250	; 0xfa
 8001c94:	f002 f966 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001c98:	f7ff fb92 	bl	80013c0 <switch_read_enter>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f5      	bne.n	8001c8e <main+0x24a>
          }

          running_stop();
 8001ca2:	f000 fd45 	bl	8002730 <running_stop>
          break;
 8001ca6:	e049      	b.n	8001d3c <main+0x2f8>
        case 0x0C:	// C
          running_start();
 8001ca8:	f000 fd3a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001cac:	e004      	b.n	8001cb8 <main+0x274>
          {
            d_print();
 8001cae:	f000 fe67 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001cb2:	20fa      	movs	r0, #250	; 0xfa
 8001cb4:	f002 f956 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001cb8:	f7ff fb82 	bl	80013c0 <switch_read_enter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f5      	bne.n	8001cae <main+0x26a>
          }

          running_stop();
 8001cc2:	f000 fd35 	bl	8002730 <running_stop>
          break;
 8001cc6:	e039      	b.n	8001d3c <main+0x2f8>
        case 0x0D:	// D
          running_start();
 8001cc8:	f000 fd2a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001ccc:	e004      	b.n	8001cd8 <main+0x294>
          {
            d_print();
 8001cce:	f000 fe57 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001cd2:	20fa      	movs	r0, #250	; 0xfa
 8001cd4:	f002 f946 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001cd8:	f7ff fb72 	bl	80013c0 <switch_read_enter>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f5      	bne.n	8001cce <main+0x28a>
          }

          running_stop();
 8001ce2:	f000 fd25 	bl	8002730 <running_stop>
          break;
 8001ce6:	e029      	b.n	8001d3c <main+0x2f8>
        case 0x0E:	// E
          running_start();
 8001ce8:	f000 fd1a 	bl	8002720 <running_start>

          while(switch_read_enter())
 8001cec:	e004      	b.n	8001cf8 <main+0x2b4>
          {
            d_print();
 8001cee:	f000 fe47 	bl	8002980 <d_print>
            HAL_Delay(250);
 8001cf2:	20fa      	movs	r0, #250	; 0xfa
 8001cf4:	f002 f936 	bl	8003f64 <HAL_Delay>
          while(switch_read_enter())
 8001cf8:	f7ff fb62 	bl	80013c0 <switch_read_enter>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f5      	bne.n	8001cee <main+0x2aa>
          }

          running_stop();
 8001d02:	f000 fd15 	bl	8002730 <running_stop>
          break;
 8001d06:	e019      	b.n	8001d3c <main+0x2f8>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8001d08:	f7ff face 	bl	80012a8 <rotary_read_playmode>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	d013      	beq.n	8001d3a <main+0x2f6>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 8001d12:	f000 fd05 	bl	8002720 <running_start>

            while(switch_read_enter())
 8001d16:	e004      	b.n	8001d22 <main+0x2de>
            {
              d_print();
 8001d18:	f000 fe32 	bl	8002980 <d_print>
              HAL_Delay(250);
 8001d1c:	20fa      	movs	r0, #250	; 0xfa
 8001d1e:	f002 f921 	bl	8003f64 <HAL_Delay>
            while(switch_read_enter())
 8001d22:	f7ff fb4d 	bl	80013c0 <switch_read_enter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f5      	bne.n	8001d18 <main+0x2d4>
            }

            running_stop();
 8001d2c:	f000 fd00 	bl	8002730 <running_stop>
          }
          break;
 8001d30:	e003      	b.n	8001d3a <main+0x2f6>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8001d32:	bf00      	nop
 8001d34:	e002      	b.n	8001d3c <main+0x2f8>
          break;
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <main+0x2f8>
          break;
 8001d3a:	bf00      	nop
    HAL_Delay(500);
 8001d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d40:	f002 f910 	bl	8003f64 <HAL_Delay>
    print_while();
 8001d44:	e6a6      	b.n	8001a94 <main+0x50>
 8001d46:	bf00      	nop
 8001d48:	0800ce0c 	.word	0x0800ce0c
 8001d4c:	0800ce14 	.word	0x0800ce14
 8001d50:	2000032a 	.word	0x2000032a
 8001d54:	2000030a 	.word	0x2000030a

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	; 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2230      	movs	r2, #48	; 0x30
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f006 fb64 	bl	8008434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <SystemClock_Config+0xd0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <SystemClock_Config+0xd0>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <SystemClock_Config+0xd0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db4:	2301      	movs	r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001db8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dcc:	23a8      	movs	r3, #168	; 0xa8
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fd1d 	bl	800581c <HAL_RCC_OscConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de8:	f000 fcd2 	bl	8002790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dec:	230f      	movs	r3, #15
 8001dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df0:	2302      	movs	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2105      	movs	r1, #5
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 ff76 	bl	8005cfc <HAL_RCC_ClockConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e16:	f000 fcbb 	bl	8002790 <Error_Handler>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3750      	adds	r7, #80	; 0x50
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000

08001e2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e3e:	4b8a      	ldr	r3, [pc, #552]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e40:	4a8a      	ldr	r2, [pc, #552]	; (800206c <MX_ADC1_Init+0x240>)
 8001e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e44:	4b88      	ldr	r3, [pc, #544]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e52:	4b85      	ldr	r3, [pc, #532]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e58:	4b83      	ldr	r3, [pc, #524]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e66:	4b80      	ldr	r3, [pc, #512]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e6e:	4a80      	ldr	r2, [pc, #512]	; (8002070 <MX_ADC1_Init+0x244>)
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e72:	4b7d      	ldr	r3, [pc, #500]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e8c:	4876      	ldr	r0, [pc, #472]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001e8e:	f002 f88d 	bl	8003fac <HAL_ADC_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e98:	f000 fc7a 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e9c:	2309      	movs	r3, #9
 8001e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4619      	mov	r1, r3
 8001eac:	486e      	ldr	r0, [pc, #440]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001eae:	f002 fa11 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001eb8:	f000 fc6a 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4867      	ldr	r0, [pc, #412]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001eca:	f002 fa03 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ed4:	f000 fc5c 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001edc:	2303      	movs	r3, #3
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4860      	ldr	r0, [pc, #384]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001ee6:	f002 f9f5 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ef0:	f000 fc4e 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ef4:	230b      	movs	r3, #11
 8001ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	4619      	mov	r1, r3
 8001f00:	4859      	ldr	r0, [pc, #356]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f02:	f002 f9e7 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f0c:	f000 fc40 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f10:	230f      	movs	r3, #15
 8001f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f14:	2305      	movs	r3, #5
 8001f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4852      	ldr	r0, [pc, #328]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f1e:	f002 f9d9 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f28:	f000 fc32 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f30:	2306      	movs	r3, #6
 8001f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	4619      	mov	r1, r3
 8001f38:	484b      	ldr	r0, [pc, #300]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f3a:	f002 f9cb 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001f44:	f000 fc24 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001f48:	230e      	movs	r3, #14
 8001f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	4619      	mov	r1, r3
 8001f54:	4844      	ldr	r0, [pc, #272]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f56:	f002 f9bd 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001f60:	f000 fc16 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f64:	230d      	movs	r3, #13
 8001f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	483d      	ldr	r0, [pc, #244]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f72:	f002 f9af 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001f7c:	f000 fc08 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f80:	2307      	movs	r3, #7
 8001f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001f84:	2309      	movs	r3, #9
 8001f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4836      	ldr	r0, [pc, #216]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001f8e:	f002 f9a1 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001f98:	f000 fbfa 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482f      	ldr	r0, [pc, #188]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001faa:	f002 f993 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001fb4:	f000 fbec 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001fb8:	2306      	movs	r3, #6
 8001fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001fbc:	230b      	movs	r3, #11
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4828      	ldr	r0, [pc, #160]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001fc6:	f002 f985 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001fd0:	f000 fbde 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001fd8:	230c      	movs	r3, #12
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4821      	ldr	r0, [pc, #132]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001fe2:	f002 f977 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001fec:	f000 fbd0 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001ff4:	230d      	movs	r3, #13
 8001ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481a      	ldr	r0, [pc, #104]	; (8002068 <MX_ADC1_Init+0x23c>)
 8001ffe:	f002 f969 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002008:	f000 fbc2 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800200c:	2302      	movs	r3, #2
 800200e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002010:	230e      	movs	r3, #14
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4813      	ldr	r0, [pc, #76]	; (8002068 <MX_ADC1_Init+0x23c>)
 800201a:	f002 f95b 	bl	80042d4 <HAL_ADC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002024:	f000 fbb4 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002028:	2304      	movs	r3, #4
 800202a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800202c:	230f      	movs	r3, #15
 800202e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <MX_ADC1_Init+0x23c>)
 8002036:	f002 f94d 	bl	80042d4 <HAL_ADC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002040:	f000 fba6 	bl	8002790 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002044:	2303      	movs	r3, #3
 8002046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8002048:	2310      	movs	r3, #16
 800204a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_ADC1_Init+0x23c>)
 8002052:	f002 f93f 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 800205c:	f000 fb98 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200004d4 	.word	0x200004d4
 800206c:	40012000 	.word	0x40012000
 8002070:	0f000001 	.word	0x0f000001

08002074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_I2C1_Init+0x50>)
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <MX_I2C1_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_I2C1_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020b2:	f003 fa6f 	bl	8005594 <HAL_I2C_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020bc:	f000 fb68 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000400 	.word	0x20000400
 80020c8:	40005400 	.word	0x40005400
 80020cc:	000186a0 	.word	0x000186a0

080020d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI2_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <MX_SPI2_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI2_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI2_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI2_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f0:	2202      	movs	r2, #2
 80020f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI2_Init+0x64>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI2_Init+0x64>)
 8002104:	2228      	movs	r2, #40	; 0x28
 8002106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI2_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI2_Init+0x64>)
 8002122:	f003 ffe5 	bl	80060f0 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800212c:	f000 fb30 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000368 	.word	0x20000368
 8002138:	40003800 	.word	0x40003800

0800213c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f006 f972 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <MX_TIM1_Init+0xa8>)
 800215a:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <MX_TIM1_Init+0xac>)
 800215c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <MX_TIM1_Init+0xa8>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <MX_TIM1_Init+0xa8>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <MX_TIM1_Init+0xa8>)
 800216c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_TIM1_Init+0xa8>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_TIM1_Init+0xa8>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <MX_TIM1_Init+0xa8>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002184:	2303      	movs	r3, #3
 8002186:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <MX_TIM1_Init+0xa8>)
 80021b0:	f004 fe2e 	bl	8006e10 <HAL_TIM_Encoder_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80021ba:	f000 fae9 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <MX_TIM1_Init+0xa8>)
 80021cc:	f005 fb9e 	bl	800790c <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80021d6:	f000 fadb 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3730      	adds	r7, #48	; 0x30
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200005fc 	.word	0x200005fc
 80021e8:	40010000 	.word	0x40010000

080021ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 f91a 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <MX_TIM3_Init+0xa0>)
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <MX_TIM3_Init+0xa4>)
 800220c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_TIM3_Init+0xa0>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_TIM3_Init+0xa0>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_TIM3_Init+0xa0>)
 800221c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002220:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_TIM3_Init+0xa0>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_TIM3_Init+0xa0>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800222e:	2303      	movs	r3, #3
 8002230:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002246:	2301      	movs	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4619      	mov	r1, r3
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <MX_TIM3_Init+0xa0>)
 800225a:	f004 fdd9 	bl	8006e10 <HAL_TIM_Encoder_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002264:	f000 fa94 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_TIM3_Init+0xa0>)
 8002276:	f005 fb49 	bl	800790c <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002280:	f000 fa86 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000494 	.word	0x20000494
 8002290:	40000400 	.word	0x40000400

08002294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <MX_TIM4_Init+0xc4>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022be:	2202      	movs	r2, #2
 80022c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022dc:	481d      	ldr	r0, [pc, #116]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022de:	f004 fcd5 	bl	8006c8c <HAL_TIM_PWM_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80022e8:	f000 fa52 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4619      	mov	r1, r3
 80022fa:	4816      	ldr	r0, [pc, #88]	; (8002354 <MX_TIM4_Init+0xc0>)
 80022fc:	f005 fb06 	bl	800790c <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002306:	f000 fa43 	bl	8002790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	2360      	movs	r3, #96	; 0x60
 800230c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_TIM4_Init+0xc0>)
 8002322:	f004 ff8f 	bl	8007244 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800232c:	f000 fa30 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2204      	movs	r2, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <MX_TIM4_Init+0xc0>)
 8002338:	f004 ff84 	bl	8007244 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002342:	f000 fa25 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <MX_TIM4_Init+0xc0>)
 8002348:	f000 ff3a 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200003c0 	.word	0x200003c0
 8002358:	40000800 	.word	0x40000800

0800235c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MX_TIM6_Init+0x64>)
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <MX_TIM6_Init+0x68>)
 800236e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <MX_TIM6_Init+0x64>)
 8002372:	2204      	movs	r2, #4
 8002374:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_TIM6_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_TIM6_Init+0x64>)
 800237e:	f244 129f 	movw	r2, #16799	; 0x419f
 8002382:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_TIM6_Init+0x64>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_TIM6_Init+0x64>)
 800238c:	f004 fc04 	bl	8006b98 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002396:	f000 f9fb 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <MX_TIM6_Init+0x64>)
 80023a8:	f005 fab0 	bl	800790c <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80023b2:	f000 f9ed 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200005bc 	.word	0x200005bc
 80023c4:	40001000 	.word	0x40001000

080023c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_TIM10_Init+0x40>)
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <MX_TIM10_Init+0x44>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <MX_TIM10_Init+0x40>)
 80023d4:	2204      	movs	r2, #4
 80023d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_TIM10_Init+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <MX_TIM10_Init+0x40>)
 80023e0:	f248 323f 	movw	r2, #33599	; 0x833f
 80023e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_TIM10_Init+0x40>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_TIM10_Init+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_TIM10_Init+0x40>)
 80023f4:	f004 fbd0 	bl	8006b98 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023fe:	f000 f9c7 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000454 	.word	0x20000454
 800240c:	40014400 	.word	0x40014400

08002410 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_TIM11_Init+0x40>)
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <MX_TIM11_Init+0x44>)
 8002418:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <MX_TIM11_Init+0x40>)
 800241c:	2204      	movs	r2, #4
 800241e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_TIM11_Init+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MX_TIM11_Init+0x40>)
 8002428:	f248 323f 	movw	r2, #33599	; 0x833f
 800242c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_TIM11_Init+0x40>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_TIM11_Init+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_TIM11_Init+0x40>)
 800243c:	f004 fbac 	bl	8006b98 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002446:	f000 f9a3 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000051c 	.word	0x2000051c
 8002454:	40014800 	.word	0x40014800

08002458 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_TIM14_Init+0x40>)
 800245e:	4a0f      	ldr	r2, [pc, #60]	; (800249c <MX_TIM14_Init+0x44>)
 8002460:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <MX_TIM14_Init+0x40>)
 8002464:	2204      	movs	r2, #4
 8002466:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <MX_TIM14_Init+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <MX_TIM14_Init+0x40>)
 8002470:	f248 323f 	movw	r2, #33599	; 0x833f
 8002474:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <MX_TIM14_Init+0x40>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MX_TIM14_Init+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_TIM14_Init+0x40>)
 8002484:	f004 fb88 	bl	8006b98 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800248e:	f000 f97f 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000067c 	.word	0x2000067c
 800249c:	40002000 	.word	0x40002000

080024a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <MX_USART6_UART_Init+0x50>)
 80024a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_USART6_UART_Init+0x4c>)
 80024d8:	f005 faa8 	bl	8007a2c <HAL_UART_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024e2:	f000 f955 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000063c 	.word	0x2000063c
 80024f0:	40011400 	.word	0x40011400

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_DMA_Init+0x3c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <MX_DMA_Init+0x3c>)
 8002504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_DMA_Init+0x3c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2038      	movs	r0, #56	; 0x38
 800251c:	f002 fa55 	bl	80049ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002520:	2038      	movs	r0, #56	; 0x38
 8002522:	f002 fa6e 	bl	8004a02 <HAL_NVIC_EnableIRQ>

}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a61      	ldr	r2, [pc, #388]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <MX_GPIO_Init+0x1c0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80025dc:	4846      	ldr	r0, [pc, #280]	; (80026f8 <MX_GPIO_Init+0x1c4>)
 80025de:	f002 ffbf 	bl	8005560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80025e8:	4844      	ldr	r0, [pc, #272]	; (80026fc <MX_GPIO_Init+0x1c8>)
 80025ea:	f002 ffb9 	bl	8005560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80025f4:	4842      	ldr	r0, [pc, #264]	; (8002700 <MX_GPIO_Init+0x1cc>)
 80025f6:	f002 ffb3 	bl	8005560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2104      	movs	r1, #4
 80025fe:	4841      	ldr	r0, [pc, #260]	; (8002704 <MX_GPIO_Init+0x1d0>)
 8002600:	f002 ffae 	bl	8005560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002604:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4836      	ldr	r0, [pc, #216]	; (80026f8 <MX_GPIO_Init+0x1c4>)
 800261e:	f002 fdeb 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002622:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002626:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4830      	ldr	r0, [pc, #192]	; (80026f8 <MX_GPIO_Init+0x1c4>)
 8002638:	f002 fdde 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 800263c:	f640 0304 	movw	r3, #2052	; 0x804
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	482a      	ldr	r0, [pc, #168]	; (80026fc <MX_GPIO_Init+0x1c8>)
 8002652:	f002 fdd1 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8002656:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800265a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4823      	ldr	r0, [pc, #140]	; (80026fc <MX_GPIO_Init+0x1c8>)
 8002670:	f002 fdc2 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002674:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	481c      	ldr	r0, [pc, #112]	; (8002700 <MX_GPIO_Init+0x1cc>)
 800268e:	f002 fdb3 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	4619      	mov	r1, r3
 80026a6:	4816      	ldr	r0, [pc, #88]	; (8002700 <MX_GPIO_Init+0x1cc>)
 80026a8:	f002 fda6 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026be:	2301      	movs	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <MX_GPIO_Init+0x1cc>)
 80026ca:	f002 fd95 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 80026ce:	2304      	movs	r3, #4
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <MX_GPIO_Init+0x1d0>)
 80026e6:	f002 fd87 	bl	80051f8 <HAL_GPIO_Init>

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020000 	.word	0x40020000
 8002704:	40020c00 	.word	0x40020c00

08002708 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
	tim11_init();
 800270c:	f001 f816 	bl	800373c <tim11_init>
  /* encoder_init */
  tim10_init();
 8002710:	f000 ff30 	bl	8003574 <tim10_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8002714:	f001 f828 	bl	8003768 <tim6_init>
  /* print who am i */
  imu_initialize();
 8002718:	f000 f812 	bl	8002740 <imu_initialize>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <running_start>:

void running_start()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  tim10_start();
 8002724:	f000 ff34 	bl	8003590 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  tim6_start();
 8002728:	f001 f832 	bl	8003790 <tim6_start>
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <running_stop>:

void running_stop()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8002734:	f001 f84a 	bl	80037cc <tim6_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8002738:	f000 ff38 	bl	80035ac <tim10_stop>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <imu_initialize>:

void imu_initialize()
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <imu_initialize+0x40>)
 8002748:	f006 fd7c 	bl	8009244 <puts>
	uint8_t wai, ret;
	ret = imu_init(&wai);
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fcaa 	bl	80010a8 <imu_init>
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	4619      	mov	r1, r3
 800275c:	4809      	ldr	r0, [pc, #36]	; (8002784 <imu_initialize+0x44>)
 800275e:	f006 fceb 	bl	8009138 <iprintf>
	if (ret == 1) {
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d103      	bne.n	8002770 <imu_initialize+0x30>
		printf("SPI INIT COLLECT!\r\n");
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <imu_initialize+0x48>)
 800276a:	f006 fd6b 	bl	8009244 <puts>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
	}
#endif

}
 800276e:	e002      	b.n	8002776 <imu_initialize+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 8002770:	4806      	ldr	r0, [pc, #24]	; (800278c <imu_initialize+0x4c>)
 8002772:	f006 fd67 	bl	8009244 <puts>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	0800ce34 	.word	0x0800ce34
 8002784:	0800ce4c 	.word	0x0800ce4c
 8002788:	0800ce5c 	.word	0x0800ce5c
 800278c:	0800ce70 	.word	0x0800ce70

08002790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002798:	e7fe      	b.n	8002798 <Error_Handler+0x8>

0800279a <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
    motor_enable(0);
 800279e:	2000      	movs	r0, #0
 80027a0:	f000 f826 	bl	80027f0 <motor_enable>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <motor_start>:

void motor_start()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4806      	ldr	r0, [pc, #24]	; (80027c8 <motor_start+0x20>)
 80027b0:	f004 fa98 	bl	8006ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80027b4:	2104      	movs	r1, #4
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <motor_start+0x20>)
 80027b8:	f004 fa94 	bl	8006ce4 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 80027bc:	2001      	movs	r0, #1
 80027be:	f000 f817 	bl	80027f0 <motor_enable>
#endif
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200003c0 	.word	0x200003c0

080027cc <motor_stop>:

void motor_stop()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
    motor_enable(0);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f000 f80d 	bl	80027f0 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80027d6:	2104      	movs	r1, #4
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <motor_stop+0x20>)
 80027da:	f004 fac1 	bl	8006d60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80027de:	2100      	movs	r1, #0
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <motor_stop+0x20>)
 80027e2:	f004 fabd 	bl	8006d60 <HAL_TIM_PWM_Stop>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200003c0 	.word	0x200003c0

080027f0 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <motor_enable+0x28>)
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	200006bc 	.word	0x200006bc

0800281c <motor_read_enable>:

char motor_read_enable()
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
    return enable;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <motor_read_enable+0x14>)
 8002822:	781b      	ldrb	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200006bc 	.word	0x200006bc

08002834 <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	ed87 0b02 	vstr	d0, [r7, #8]
 800283e:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800284e:	f7fe f945 	bl	8000adc <__aeabi_dcmplt>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2104      	movs	r1, #4
 800285c:	483a      	ldr	r0, [pc, #232]	; (8002948 <motor_set+0x114>)
 800285e:	f002 fe7f 	bl	8005560 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e004      	b.n	800287a <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	2104      	movs	r1, #4
 8002874:	4834      	ldr	r0, [pc, #208]	; (8002948 <motor_set+0x114>)
 8002876:	f002 fe73 	bl	8005560 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002886:	f7fe f929 	bl	8000adc <__aeabi_dcmplt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <motor_set+0x76>
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002896:	482d      	ldr	r0, [pc, #180]	; (800294c <motor_set+0x118>)
 8002898:	f002 fe62 	bl	8005560 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e005      	b.n	80028b6 <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b0:	4826      	ldr	r0, [pc, #152]	; (800294c <motor_set+0x118>)
 80028b2:	f002 fe55 	bl	8005560 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <motor_set+0x11c>)
 80028bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c0:	f7fe f92a 	bl	8000b18 <__aeabi_dcmpgt>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <motor_set+0x9e>
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <motor_set+0x11c>)
 80028d0:	e001      	b.n	80028d6 <motor_set+0xa2>
 80028d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <motor_set+0x11c>)
 80028e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028e4:	f7fe f918 	bl	8000b18 <__aeabi_dcmpgt>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <motor_set+0xc2>
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <motor_set+0x11c>)
 80028f4:	e001      	b.n	80028fa <motor_set+0xc6>
 80028f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028fa:	e9c7 2300 	strd	r2, r3, [r7]

    if(enable)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <motor_set+0x120>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <motor_set+0xea>
    {
        motor_left_ = 0;
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <motor_set+0x124>)
 8002920:	681c      	ldr	r4, [r3, #0]
 8002922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002926:	f7fe f93f 	bl	8000ba8 <__aeabi_d2uiz>
 800292a:	4603      	mov	r3, r0
 800292c:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <motor_set+0x124>)
 8002930:	681c      	ldr	r4, [r3, #0]
 8002932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002936:	f7fe f937 	bl	8000ba8 <__aeabi_d2uiz>
 800293a:	4603      	mov	r3, r0
 800293c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40020800 	.word	0x40020800
 8002950:	408f4000 	.word	0x408f4000
 8002954:	200006bc 	.word	0x200006bc
 8002958:	200003c0 	.word	0x200003c0

0800295c <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002964:	1d39      	adds	r1, r7, #4
 8002966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296a:	2201      	movs	r2, #1
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <__io_putchar+0x20>)
 800296e:	f005 f8aa 	bl	8007ac6 <HAL_UART_Transmit>
	return ch;
 8002972:	687b      	ldr	r3, [r7, #4]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000063c 	.word	0x2000063c

08002980 <d_print>:

void d_print()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	// debug print
	print_analog_rate();
 8002984:	f000 f82c 	bl	80029e0 <print_analog_rate>
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <print_while>:

void print_while()
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <print_while+0x18>)
 8002992:	f006 fbd1 	bl	8009138 <iprintf>
    print_playmode();
 8002996:	f000 f807 	bl	80029a8 <print_playmode>
	print_rotary_value();
 800299a:	f000 f813 	bl	80029c4 <print_rotary_value>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	0800ce88 	.word	0x0800ce88

080029a8 <print_playmode>:

void print_playmode()
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	printf("playmode = %2d\r\n", rotary_read_playmode());
 80029ac:	f7fe fc7c 	bl	80012a8 <rotary_read_playmode>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <print_playmode+0x18>)
 80029b6:	f006 fbbf 	bl	8009138 <iprintf>
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	0800ce9c 	.word	0x0800ce9c

080029c4 <print_rotary_value>:

void print_rotary_value()
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 80029c8:	f7fe fc86 	bl	80012d8 <rotary_read_value>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <print_rotary_value+0x18>)
 80029d2:	f006 fbb1 	bl	8009138 <iprintf>
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800ceb0 	.word	0x0800ceb0

080029e0 <print_analog_rate>:

void print_analog_rate()
{
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	b090      	sub	sp, #64	; 0x40
 80029e6:	af0a      	add	r7, sp, #40	; 0x28
	printf("\x1b[24C");	// Cursor move right *24
 80029e8:	4838      	ldr	r0, [pc, #224]	; (8002acc <print_analog_rate+0xec>)
 80029ea:	f006 fba5 	bl	8009138 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15),
 80029ee:	200c      	movs	r0, #12
 80029f0:	f7fe fe36 	bl	8001660 <analog_sensor_get>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461c      	mov	r4, r3
 80029f8:	200e      	movs	r0, #14
 80029fa:	f7fe fe31 	bl	8001660 <analog_sensor_get>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461d      	mov	r5, r3
 8002a02:	200f      	movs	r0, #15
 8002a04:	f7fe fe2c 	bl	8001660 <analog_sensor_get>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461e      	mov	r6, r3
			analog_sensor_get(13));
 8002a0c:	200d      	movs	r0, #13
 8002a0e:	f7fe fe27 	bl	8001660 <analog_sensor_get>
 8002a12:	4603      	mov	r3, r0
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15),
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4633      	mov	r3, r6
 8002a18:	462a      	mov	r2, r5
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	482c      	ldr	r0, [pc, #176]	; (8002ad0 <print_analog_rate+0xf0>)
 8002a1e:	f006 fb8b 	bl	8009138 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe fe1c 	bl	8001660 <analog_sensor_get>
 8002a28:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a2a:	4698      	mov	r8, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f7fe fe17 	bl	8001660 <analog_sensor_get>
 8002a32:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a34:	4699      	mov	r9, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a36:	2004      	movs	r0, #4
 8002a38:	f7fe fe12 	bl	8001660 <analog_sensor_get>
 8002a3c:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a3e:	469a      	mov	sl, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a40:	2006      	movs	r0, #6
 8002a42:	f7fe fe0d 	bl	8001660 <analog_sensor_get>
 8002a46:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a48:	461c      	mov	r4, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a4a:	2008      	movs	r0, #8
 8002a4c:	f7fe fe08 	bl	8001660 <analog_sensor_get>
 8002a50:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a52:	461d      	mov	r5, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002a54:	200a      	movs	r0, #10
 8002a56:	f7fe fe03 	bl	8001660 <analog_sensor_get>
 8002a5a:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a5c:	461e      	mov	r6, r3
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002a5e:	200b      	movs	r0, #11
 8002a60:	f7fe fdfe 	bl	8001660 <analog_sensor_get>
 8002a64:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a66:	617b      	str	r3, [r7, #20]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002a68:	2009      	movs	r0, #9
 8002a6a:	f7fe fdf9 	bl	8001660 <analog_sensor_get>
 8002a6e:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a70:	613b      	str	r3, [r7, #16]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002a72:	2007      	movs	r0, #7
 8002a74:	f7fe fdf4 	bl	8001660 <analog_sensor_get>
 8002a78:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a7a:	60fb      	str	r3, [r7, #12]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002a7c:	2005      	movs	r0, #5
 8002a7e:	f7fe fdef 	bl	8001660 <analog_sensor_get>
 8002a82:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a84:	60bb      	str	r3, [r7, #8]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002a86:	2003      	movs	r0, #3
 8002a88:	f7fe fdea 	bl	8001660 <analog_sensor_get>
 8002a8c:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a8e:	607b      	str	r3, [r7, #4]
			analog_sensor_get(1));
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe fde5 	bl	8001660 <analog_sensor_get>
 8002a96:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002a98:	9308      	str	r3, [sp, #32]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	9207      	str	r2, [sp, #28]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	9206      	str	r2, [sp, #24]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	9205      	str	r2, [sp, #20]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	9204      	str	r2, [sp, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	9602      	str	r6, [sp, #8]
 8002ab0:	9501      	str	r5, [sp, #4]
 8002ab2:	9400      	str	r4, [sp, #0]
 8002ab4:	4653      	mov	r3, sl
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	4641      	mov	r1, r8
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <print_analog_rate+0xf4>)
 8002abc:	f006 fb3c 	bl	8009138 <iprintf>
}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aca:	bf00      	nop
 8002acc:	0800cec8 	.word	0x0800cec8
 8002ad0:	0800ced0 	.word	0x0800ced0
 8002ad4:	0800cee8 	.word	0x0800cee8

08002ad8 <sidesensor_read>:
#include "sidesensor.h"

unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;

uint8_t sidesensor_read()
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens1_GPIO_Port, SubSens1_Pin) ? 1 : 0;
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4810      	ldr	r0, [pc, #64]	; (8002b28 <sidesensor_read+0x50>)
 8002ae6:	f002 fd23 	bl	8005530 <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4413      	add	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens2_GPIO_Port, SubSens2_Pin) ? 2 : 0;
 8002afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <sidesensor_read+0x50>)
 8002b04:	f002 fd14 	bl	8005530 <HAL_GPIO_ReadPin>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <sidesensor_read+0x3a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e000      	b.n	8002b14 <sidesensor_read+0x3c>
 8002b12:	2300      	movs	r3, #0
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4413      	add	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40020400 	.word	0x40020400

08002b2c <sidesensor_start>:

void sidesensor_start()
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
    marker = 0;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <sidesensor_start+0x2c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <sidesensor_start+0x30>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <sidesensor_start+0x34>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
    markerstate = 0;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <sidesensor_start+0x38>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <sidesensor_start+0x3c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	200006c0 	.word	0x200006c0
 8002b5c:	200006bd 	.word	0x200006bd
 8002b60:	200006be 	.word	0x200006be
 8002b64:	200006bf 	.word	0x200006bf
 8002b68:	200006c1 	.word	0x200006c1

08002b6c <sidesensor_stop>:

void sidesensor_stop()
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <sidesensor_right>:

void sidesensor_right()
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
    markerstate = 0b01;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <sidesensor_right+0x28>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    if(rightmarkercount == 1 - 1)
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <sidesensor_right+0x2c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
    }
    else if(rightmarkercount == 2 - 1)
    {
        // stop
    }
    rightmarkercount++;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <sidesensor_right+0x2c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <sidesensor_right+0x2c>)
 8002b96:	701a      	strb	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200006bf 	.word	0x200006bf
 8002ba8:	200006c1 	.word	0x200006c1

08002bac <sidesensor_left>:

void sidesensor_left()
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
    // curve
    markerstate = 0b10;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <sidesensor_left+0x14>)
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	200006bf 	.word	0x200006bf

08002bc4 <sidesensor_cross>:

void sidesensor_cross()
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
    // cross
    markerstate = 0b11;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <sidesensor_cross+0x14>)
 8002bca:	2203      	movs	r2, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	200006bf 	.word	0x200006bf

08002bdc <sidesensor_function>:

void sidesensor_function()
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8002be2:	f7ff ff79 	bl	8002ad8 <sidesensor_read>
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <sidesensor_function+0xac>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d044      	beq.n	8002c7e <sidesensor_function+0xa2>
	{
		subsensbuf = subsens;
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <sidesensor_function+0xac>)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <sidesensor_function+0xb0>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <sidesensor_function+0xb4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <sidesensor_function+0xb4>)
 8002c12:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d12b      	bne.n	8002c72 <sidesensor_function+0x96>
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <sidesensor_function+0xb0>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d027      	beq.n	8002c72 <sidesensor_function+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <sidesensor_function+0xb4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <sidesensor_function+0xb4>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	109b      	asrs	r3, r3, #2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8002c3a:	797b      	ldrb	r3, [r7, #5]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10e      	bne.n	8002c5e <sidesensor_function+0x82>
			{
				if (first == 0b01)
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <sidesensor_function+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 8002c46:	f7ff ff99 	bl	8002b7c <sidesensor_right>
 8002c4a:	e00a      	b.n	8002c62 <sidesensor_function+0x86>
				}
				else if (first == 0b10)
 8002c4c:	79bb      	ldrb	r3, [r7, #6]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d102      	bne.n	8002c58 <sidesensor_function+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 8002c52:	f7ff ffab 	bl	8002bac <sidesensor_left>
 8002c56:	e004      	b.n	8002c62 <sidesensor_function+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8002c58:	f7ff ffb4 	bl	8002bc4 <sidesensor_cross>
 8002c5c:	e001      	b.n	8002c62 <sidesensor_function+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8002c5e:	f7ff ffb1 	bl	8002bc4 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <sidesensor_function+0xb0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <sidesensor_function+0xb4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
		{
 8002c6e:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8002c70:	e005      	b.n	8002c7e <sidesensor_function+0xa2>
			sidedeltacount++;
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <sidesensor_function+0xb0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <sidesensor_function+0xb0>)
 8002c7c:	701a      	strb	r2, [r3, #0]
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200006bd 	.word	0x200006bd
 8002c8c:	200006be 	.word	0x200006be
 8002c90:	200006c0 	.word	0x200006c0

08002c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_MspInit+0x54>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_MspInit+0x54>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_MspInit+0x54>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_MspInit+0x54>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_MspInit+0x54>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_MspInit+0x54>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	f06f 0003 	mvn.w	r0, #3
 8002cda:	f001 fe76 	bl	80049ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a49      	ldr	r2, [pc, #292]	; (8002e30 <HAL_ADC_MspInit+0x144>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f040 808c 	bne.w	8002e28 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6313      	str	r3, [r2, #48]	; 0x30
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <HAL_ADC_MspInit+0x148>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d80:	233f      	movs	r3, #63	; 0x3f
 8002d82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4829      	ldr	r0, [pc, #164]	; (8002e38 <HAL_ADC_MspInit+0x14c>)
 8002d94:	f002 fa30 	bl	80051f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d98:	23ff      	movs	r3, #255	; 0xff
 8002d9a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4824      	ldr	r0, [pc, #144]	; (8002e3c <HAL_ADC_MspInit+0x150>)
 8002dac:	f002 fa24 	bl	80051f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002db0:	2303      	movs	r3, #3
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db4:	2303      	movs	r3, #3
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	481f      	ldr	r0, [pc, #124]	; (8002e40 <HAL_ADC_MspInit+0x154>)
 8002dc4:	f002 fa18 	bl	80051f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_ADC_MspInit+0x15c>)
 8002dcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e0c:	480d      	ldr	r0, [pc, #52]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002e0e:	f001 fe13 	bl	8004a38 <HAL_DMA_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002e18:	f7ff fcba 	bl	8002790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_ADC_MspInit+0x158>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e28:	bf00      	nop
 8002e2a:	3730      	adds	r7, #48	; 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012000 	.word	0x40012000
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020000 	.word	0x40020000
 8002e40:	40020400 	.word	0x40020400
 8002e44:	2000055c 	.word	0x2000055c
 8002e48:	40026410 	.word	0x40026410

08002e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_I2C_MspInit+0x84>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d12c      	bne.n	8002ec8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e90:	2312      	movs	r3, #18
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e94:	2301      	movs	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <HAL_I2C_MspInit+0x8c>)
 8002ea8:	f002 f9a6 	bl	80051f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eba:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_I2C_MspInit+0x88>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ec8:	bf00      	nop
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40005400 	.word	0x40005400
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020400 	.word	0x40020400

08002edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_SPI_MspInit+0x84>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12c      	bne.n	8002f58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002f36:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f48:	2305      	movs	r3, #5
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4619      	mov	r1, r3
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_SPI_MspInit+0x8c>)
 8002f54:	f002 f950 	bl	80051f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40003800 	.word	0x40003800
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020400 	.word	0x40020400

08002f6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <HAL_TIM_Encoder_MspInit+0x108>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d13d      	bne.n	800300a <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a38      	ldr	r2, [pc, #224]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8002fc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4826      	ldr	r0, [pc, #152]	; (800307c <HAL_TIM_Encoder_MspInit+0x110>)
 8002fe4:	f002 f908 	bl	80051f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2100      	movs	r1, #0
 8002fec:	2019      	movs	r0, #25
 8002fee:	f001 fcec 	bl	80049ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ff2:	2019      	movs	r0, #25
 8002ff4:	f001 fd05 	bl	8004a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	201a      	movs	r0, #26
 8002ffe:	f001 fce4 	bl	80049ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003002:	201a      	movs	r0, #26
 8003004:	f001 fcfd 	bl	8004a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003008:	e030      	b.n	800306c <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_TIM_Encoder_MspInit+0x114>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d12b      	bne.n	800306c <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 800304c:	2330      	movs	r3, #48	; 0x30
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800305c:	2302      	movs	r3, #2
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <HAL_TIM_Encoder_MspInit+0x118>)
 8003068:	f002 f8c6 	bl	80051f8 <HAL_GPIO_Init>
}
 800306c:	bf00      	nop
 800306e:	3730      	adds	r7, #48	; 0x30
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010000 	.word	0x40010000
 8003078:	40023800 	.word	0x40023800
 800307c:	40020000 	.word	0x40020000
 8003080:	40000400 	.word	0x40000400
 8003084:	40020400 	.word	0x40020400

08003088 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10d      	bne.n	80030b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_TIM_PWM_MspInit+0x40>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_TIM_PWM_MspInit+0x40>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_TIM_PWM_MspInit+0x40>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_TIM_Base_MspInit+0xe0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d116      	bne.n	800310c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2036      	movs	r0, #54	; 0x36
 8003100:	f001 fc63 	bl	80049ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003104:	2036      	movs	r0, #54	; 0x36
 8003106:	f001 fc7c 	bl	8004a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800310a:	e04a      	b.n	80031a2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_TIM_Base_MspInit+0xe8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d116      	bne.n	8003144 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	2019      	movs	r0, #25
 8003138:	f001 fc47 	bl	80049ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800313c:	2019      	movs	r0, #25
 800313e:	f001 fc60 	bl	8004a02 <HAL_NVIC_EnableIRQ>
}
 8003142:	e02e      	b.n	80031a2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_TIM_Base_MspInit+0xec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d116      	bne.n	800317c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201a      	movs	r0, #26
 8003170:	f001 fc2b 	bl	80049ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003174:	201a      	movs	r0, #26
 8003176:	f001 fc44 	bl	8004a02 <HAL_NVIC_EnableIRQ>
}
 800317a:	e012      	b.n	80031a2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_TIM_Base_MspInit+0xf0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10d      	bne.n	80031a2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_TIM_Base_MspInit+0xe4>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40001000 	.word	0x40001000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	40002000 	.word	0x40002000

080031c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_TIM_MspPostInit+0x68>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d11d      	bne.n	800321e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_TIM_MspPostInit+0x6c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_TIM_MspPostInit+0x6c>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_TIM_MspPostInit+0x6c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 80031fe:	23c0      	movs	r3, #192	; 0xc0
 8003200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800320e:	2302      	movs	r3, #2
 8003210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	; (8003230 <HAL_TIM_MspPostInit+0x70>)
 800321a:	f001 ffed 	bl	80051f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40000800 	.word	0x40000800
 800322c:	40023800 	.word	0x40023800
 8003230:	40020400 	.word	0x40020400

08003234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_UART_MspInit+0x84>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12b      	bne.n	80032ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_UART_MspInit+0x88>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_UART_MspInit+0x88>)
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_UART_MspInit+0x88>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_UART_MspInit+0x88>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_UART_MspInit+0x88>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_UART_MspInit+0x88>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800329e:	2308      	movs	r3, #8
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_UART_MspInit+0x8c>)
 80032aa:	f001 ffa5 	bl	80051f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40011400 	.word	0x40011400
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020800 	.word	0x40020800

080032c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <NMI_Handler+0x4>

080032ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler+0x4>

080032d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <MemManage_Handler+0x4>

080032d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <BusFault_Handler+0x4>

080032dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <UsageFault_Handler+0x4>

080032e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003310:	f000 fe08 	bl	8003f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800331e:	f003 fe89 	bl	8007034 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003322:	4803      	ldr	r0, [pc, #12]	; (8003330 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003324:	f003 fe86 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200005fc 	.word	0x200005fc
 8003330:	20000454 	.word	0x20000454

08003334 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003338:	4803      	ldr	r0, [pc, #12]	; (8003348 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800333a:	f003 fe7b 	bl	8007034 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003340:	f003 fe78 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200005fc 	.word	0x200005fc
 800334c:	2000051c 	.word	0x2000051c

08003350 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <TIM6_DAC_IRQHandler+0x10>)
 8003356:	f003 fe6d 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200005bc 	.word	0x200005bc

08003364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <DMA2_Stream0_IRQHandler+0x10>)
 800336a:	f001 fcdb 	bl	8004d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000055c 	.word	0x2000055c

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003392:	f005 f817 	bl	80083c4 <__errno>
 8003396:	4603      	mov	r3, r0
 8003398:	2216      	movs	r2, #22
 800339a:	601a      	str	r2, [r3, #0]
	return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_exit>:

void _exit (int status)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffe7 	bl	8003388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033ba:	e7fe      	b.n	80033ba <_exit+0x12>

080033bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ce:	f3af 8000 	nop.w
 80033d2:	4601      	mov	r1, r0
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	60ba      	str	r2, [r7, #8]
 80033da:	b2ca      	uxtb	r2, r1
 80033dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbf0      	blt.n	80033ce <_read+0x12>
	}

return len;
 80033ec:	687b      	ldr	r3, [r7, #4]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e009      	b.n	800341c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff faa3 	bl	800295c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	dbf1      	blt.n	8003408 <_write+0x12>
	}
	return len;
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_close>:

int _close(int file)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	return -1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003456:	605a      	str	r2, [r3, #4]
	return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_isatty>:

int _isatty(int file)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	return 1;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <_sbrk+0x5c>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_sbrk+0x60>)
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <_sbrk+0x64>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <_sbrk+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c8:	f004 ff7c 	bl	80083c4 <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20020000 	.word	0x20020000
 80034f8:	00000400 	.word	0x00000400
 80034fc:	200001fc 	.word	0x200001fc
 8003500:	20000748 	.word	0x20000748

08003504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <SystemInit+0x28>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <SystemInit+0x28>)
 8003510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <SystemInit+0x28>)
 800351a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800351e:	609a      	str	r2, [r3, #8]
#endif
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <tim10_length_init>:
/* lengths is updated only in tim10 file. */
double length, length_left, length_right;
double velocity_left, velocity_right, velocity;

void tim10_length_init()
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  length_left = 0;
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <tim10_length_init+0x38>)
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 8003542:	490a      	ldr	r1, [pc, #40]	; (800356c <tim10_length_init+0x3c>)
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <tim10_length_init+0x40>)
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800355e:	bf00      	nop
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	200006c8 	.word	0x200006c8
 800356c:	200006f0 	.word	0x200006f0
 8003570:	200006d0 	.word	0x200006d0

08003574 <tim10_init>:

void tim10_init()
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  tim10_length_init();
 8003578:	f7ff ffda 	bl	8003530 <tim10_length_init>
	encoder_init();
 800357c:	f7fe f978 	bl	8001870 <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <tim10_init+0x18>)
 8003582:	f003 fb58 	bl	8006c36 <HAL_TIM_Base_Stop_IT>
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000454 	.word	0x20000454

08003590 <tim10_start>:

void tim10_start()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 8003594:	f7fe f994 	bl	80018c0 <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  sidesensor_start();
 8003598:	f7ff fac8 	bl	8002b2c <sidesensor_start>
  HAL_TIM_Base_Start_IT(&htim10);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <tim10_start+0x18>)
 800359e:	f003 fb26 	bl	8006bee <HAL_TIM_Base_Start_IT>
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000454 	.word	0x20000454

080035ac <tim10_stop>:

void tim10_stop()
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <tim10_stop+0x18>)
 80035b2:	f003 fb40 	bl	8006c36 <HAL_TIM_Base_Stop_IT>
  sidesensor_stop();
 80035b6:	f7ff fad9 	bl	8002b6c <sidesensor_stop>
  encoder_stop();
 80035ba:	f7fe f999 	bl	80018f0 <encoder_stop>
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000454 	.word	0x20000454

080035c8 <tim10_read_velocity>:
{
  return velocity_right;
}

double tim10_read_velocity()
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return velocity;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <tim10_read_velocity+0x20>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80035d6:	eeb0 0a47 	vmov.f32	s0, s14
 80035da:	eef0 0a67 	vmov.f32	s1, s15
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	200006d8 	.word	0x200006d8
 80035ec:	00000000 	.word	0x00000000

080035f0 <tim10_main>:

void tim10_main()
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* set encoder middle and update velocities */
  encoder_set();
 80035f4:	f7fe f9c2 	bl	800197c <encoder_set>

  /* update velocity */
  velocity_left = encoder_read_left() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 80035f8:	f7fe f99c 	bl	8001934 <encoder_read_left>
 80035fc:	ec51 0b10 	vmov	r0, r1, d0
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <tim10_main+0x130>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fff7 	bl	80005f8 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	a341      	add	r3, pc, #260	; (adr r3, 8003718 <tim10_main+0x128>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc ffee 	bl	80005f8 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4940      	ldr	r1, [pc, #256]	; (8003724 <tim10_main+0x134>)
 8003622:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = encoder_read_right() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 8003626:	f7fe f997 	bl	8001958 <encoder_read_right>
 800362a:	ec51 0b10 	vmov	r0, r1, d0
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <tim10_main+0x130>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fc ffe0 	bl	80005f8 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	a335      	add	r3, pc, #212	; (adr r3, 8003718 <tim10_main+0x128>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc ffd7 	bl	80005f8 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4936      	ldr	r1, [pc, #216]	; (8003728 <tim10_main+0x138>)
 8003650:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = encoder_read() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 8003654:	f7fe f95c 	bl	8001910 <encoder_read>
 8003658:	ec51 0b10 	vmov	r0, r1, d0
 800365c:	4b30      	ldr	r3, [pc, #192]	; (8003720 <tim10_main+0x130>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc ffc9 	bl	80005f8 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	a32a      	add	r3, pc, #168	; (adr r3, 8003718 <tim10_main+0x128>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fc ffc0 	bl	80005f8 <__aeabi_dmul>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	492b      	ldr	r1, [pc, #172]	; (800372c <tim10_main+0x13c>)
 800367e:	e9c1 2300 	strd	r2, r3, [r1]

  /* update lengths */
  length_left += (double) encoder_read_left() * (double) LENGTHPERPULSE;
 8003682:	f7fe f957 	bl	8001934 <encoder_read_left>
 8003686:	ec51 0b10 	vmov	r0, r1, d0
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <tim10_main+0x130>)
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f7fc ffb2 	bl	80005f8 <__aeabi_dmul>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <tim10_main+0x140>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f7fc fdf3 	bl	800028c <__adddf3>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4921      	ldr	r1, [pc, #132]	; (8003730 <tim10_main+0x140>)
 80036ac:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += (double) encoder_read_right() * (double) LENGTHPERPULSE;
 80036b0:	f7fe f952 	bl	8001958 <encoder_read_right>
 80036b4:	ec51 0b10 	vmov	r0, r1, d0
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <tim10_main+0x130>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc ff9b 	bl	80005f8 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <tim10_main+0x144>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc fddc 	bl	800028c <__adddf3>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <tim10_main+0x144>)
 80036da:	e9c1 2300 	strd	r2, r3, [r1]
  length += (double) encoder_read() * (double) LENGTHPERPULSE;
 80036de:	f7fe f917 	bl	8001910 <encoder_read>
 80036e2:	ec51 0b10 	vmov	r0, r1, d0
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <tim10_main+0x130>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff84 	bl	80005f8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <tim10_main+0x148>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc fdc5 	bl	800028c <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	490c      	ldr	r1, [pc, #48]	; (8003738 <tim10_main+0x148>)
 8003708:	e9c1 2300 	strd	r2, r3, [r1]
  {
    course_state_function();
  }
  */

  sidesensor_function();
 800370c:	f7ff fa66 	bl	8002bdc <sidesensor_function>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	f3af 8000 	nop.w
 8003718:	d2f1a9fc 	.word	0xd2f1a9fc
 800371c:	3f50624d 	.word	0x3f50624d
 8003720:	20000300 	.word	0x20000300
 8003724:	200006e8 	.word	0x200006e8
 8003728:	200006e0 	.word	0x200006e0
 800372c:	200006d8 	.word	0x200006d8
 8003730:	200006c8 	.word	0x200006c8
 8003734:	200006f0 	.word	0x200006f0
 8003738:	200006d0 	.word	0x200006d0

0800373c <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
    switch_init();
 8003740:	f7fd fe38 	bl	80013b4 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003744:	4803      	ldr	r0, [pc, #12]	; (8003754 <tim11_init+0x18>)
 8003746:	f003 fa52 	bl	8006bee <HAL_TIM_Base_Start_IT>
    rotary_init();
 800374a:	f7fd fd99 	bl	8001280 <rotary_init>
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000051c 	.word	0x2000051c

08003758 <tim11_main>:

void tim11_main()
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
    switch_enter();
 800375c:	f7fd fe79 	bl	8001452 <switch_enter>
    rotary_set_value();
 8003760:	f7fd fdae 	bl	80012c0 <rotary_set_value>
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <tim6_init>:
#include "tim6.h"

void tim6_init()
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
    motor_init();
 800376c:	f7ff f815 	bl	800279a <motor_init>
    analog_init();
 8003770:	f7fd ff32 	bl	80015d8 <analog_init>
    velotrace_init(1);
 8003774:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003788 <tim6_init+0x20>
 8003778:	f000 fa32 	bl	8003be0 <velotrace_init>
    tracer_init(1);
 800377c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8003788 <tim6_init+0x20>
 8003780:	f000 f902 	bl	8003988 <tracer_init>
}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}
 8003788:	00000000 	.word	0x00000000
 800378c:	3ff00000 	.word	0x3ff00000

08003790 <tim6_start>:

void tim6_start()
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
    /* analogmin/max = FlashBuffer.analogmin/max */
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003794:	490a      	ldr	r1, [pc, #40]	; (80037c0 <tim6_start+0x30>)
 8003796:	480b      	ldr	r0, [pc, #44]	; (80037c4 <tim6_start+0x34>)
 8003798:	f7fd feae 	bl	80014f8 <analog_set_from_flash>
    HAL_Delay(3000);
 800379c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037a0:	f000 fbe0 	bl	8003f64 <HAL_Delay>
    /* sensgettime = 0, HAL_ADC_Start_DMA() */
    analog_start();
 80037a4:	f7fd ff2a 	bl	80015fc <analog_start>
    /* samplingtime = 0, s_error = 0, before_error = 0, if search ( p/i/d = [0], target = [0] ) */
    velotrace_start();
 80037a8:	f000 fa02 	bl	8003bb0 <velotrace_start>
    /* samplingtime = 0, s_error = 0, before_error = 0 */
    tracer_start();
 80037ac:	f000 f8d0 	bl	8003950 <tracer_start>

    motor_start();
 80037b0:	f7fe fffa 	bl	80027a8 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 80037b4:	4804      	ldr	r0, [pc, #16]	; (80037c8 <tim6_start+0x38>)
 80037b6:	f003 fa1a 	bl	8006bee <HAL_TIM_Base_Start_IT>
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000032a 	.word	0x2000032a
 80037c4:	2000030a 	.word	0x2000030a
 80037c8:	200005bc 	.word	0x200005bc

080037cc <tim6_stop>:

void tim6_stop()
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <tim6_stop+0x18>)
 80037d2:	f003 fa30 	bl	8006c36 <HAL_TIM_Base_Stop_IT>
    analog_stop();
 80037d6:	f7fd ff17 	bl	8001608 <analog_stop>
    motor_stop();
 80037da:	f7fe fff7 	bl	80027cc <motor_stop>
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200005bc 	.word	0x200005bc

080037e8 <tim6_main>:

void tim6_main()
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
    int direction;
    double leftmotor, rightmotor;
    analogl = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	83fb      	strh	r3, [r7, #30]
    analogr = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	83bb      	strh	r3, [r7, #28]

    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	71fb      	strb	r3, [r7, #7]
 80037fa:	e01b      	b.n	8003834 <tim6_main+0x4c>
    {
        if(i % 2 == 0)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <tim6_main+0x34>
        {
            analogl += analog_sensor_get(i);
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd ff28 	bl	8001660 <analog_sensor_get>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	4413      	add	r3, r2
 8003818:	83fb      	strh	r3, [r7, #30]
 800381a:	e008      	b.n	800382e <tim6_main+0x46>
        }
        else
        {
            analogr += analog_sensor_get(i);
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd ff1e 	bl	8001660 <analog_sensor_get>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	8bbb      	ldrh	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	83bb      	strh	r3, [r7, #28]
    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	3301      	adds	r3, #1
 8003832:	71fb      	strb	r3, [r7, #7]
 8003834:	f7fd fe9e 	bl	8001574 <analog_read_calibrationsize>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4293      	cmp	r3, r2
 8003840:	d3dc      	bcc.n	80037fc <tim6_main+0x14>
        }
    }

    if(analogl + analogr >= 980 * analog_read_calibrationsize())
 8003842:	8bfa      	ldrh	r2, [r7, #30]
 8003844:	8bbb      	ldrh	r3, [r7, #28]
 8003846:	18d4      	adds	r4, r2, r3
 8003848:	f7fd fe94 	bl	8001574 <analog_read_calibrationsize>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8003854:	fb03 f302 	mul.w	r3, r3, r2
 8003858:	429c      	cmp	r4, r3
 800385a:	db05      	blt.n	8003868 <tim6_main+0x80>
    {
        velotrace_set_target(0);
 800385c:	2000      	movs	r0, #0
 800385e:	f000 fa3f 	bl	8003ce0 <velotrace_set_target>
        motor_enable(0);
 8003862:	2000      	movs	r0, #0
 8003864:	f7fe ffc4 	bl	80027f0 <motor_enable>
    }

    // ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
    // When ( direction > 0 ) , must turn right.
    direction = (analogl - analogr);	// difference
 8003868:	8bfa      	ldrh	r2, [r7, #30]
 800386a:	8bbb      	ldrh	r3, [r7, #28]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	61bb      	str	r3, [r7, #24]

    if(analogl + analogr <= 700 * analog_read_calibrationsize())
 8003870:	8bfa      	ldrh	r2, [r7, #30]
 8003872:	8bbb      	ldrh	r3, [r7, #28]
 8003874:	18d4      	adds	r4, r2, r3
 8003876:	f7fd fe7d 	bl	8001574 <analog_read_calibrationsize>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003882:	fb03 f302 	mul.w	r3, r3, r2
 8003886:	429c      	cmp	r4, r3
 8003888:	dc01      	bgt.n	800388e <tim6_main+0xa6>
    {
        direction = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
    }

    if(motor_read_enable())
 800388e:	f7fe ffc5 	bl	800281c <motor_read_enable>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d042      	beq.n	800391e <tim6_main+0x136>
    {
        leftmotor   = velotrace_solve(tim10_read_velocity()) + tracer_solve(direction);
 8003898:	f7ff fe96 	bl	80035c8 <tim10_read_velocity>
 800389c:	eeb0 7a40 	vmov.f32	s14, s0
 80038a0:	eef0 7a60 	vmov.f32	s15, s1
 80038a4:	eeb0 0a47 	vmov.f32	s0, s14
 80038a8:	eef0 0a67 	vmov.f32	s1, s15
 80038ac:	f000 fa3e 	bl	8003d2c <velotrace_solve>
 80038b0:	ec55 4b10 	vmov	r4, r5, d0
 80038b4:	69b8      	ldr	r0, [r7, #24]
 80038b6:	f7fc fe35 	bl	8000524 <__aeabi_i2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	ec43 2b10 	vmov	d0, r2, r3
 80038c2:	f000 f8f3 	bl	8003aac <tracer_solve>
 80038c6:	ec53 2b10 	vmov	r2, r3, d0
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7fc fcdd 	bl	800028c <__adddf3>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor  = velotrace_solve(tim10_read_velocity()) - tracer_solve(direction);
 80038da:	f7ff fe75 	bl	80035c8 <tim10_read_velocity>
 80038de:	eeb0 7a40 	vmov.f32	s14, s0
 80038e2:	eef0 7a60 	vmov.f32	s15, s1
 80038e6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ea:	eef0 0a67 	vmov.f32	s1, s15
 80038ee:	f000 fa1d 	bl	8003d2c <velotrace_solve>
 80038f2:	ec55 4b10 	vmov	r4, r5, d0
 80038f6:	69b8      	ldr	r0, [r7, #24]
 80038f8:	f7fc fe14 	bl	8000524 <__aeabi_i2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	ec43 2b10 	vmov	d0, r2, r3
 8003904:	f000 f8d2 	bl	8003aac <tracer_solve>
 8003908:	ec53 2b10 	vmov	r2, r3, d0
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fcba 	bl	8000288 <__aeabi_dsub>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800391c:	e00b      	b.n	8003936 <tim6_main+0x14e>
    }
    else
    {
        leftmotor = 0;
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor = 0;
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    motor_set(leftmotor, rightmotor);
 8003936:	ed97 1b02 	vldr	d1, [r7, #8]
 800393a:	ed97 0b04 	vldr	d0, [r7, #16]
 800393e:	f7fe ff79 	bl	8002834 <motor_set>
}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bdb0      	pop	{r4, r5, r7, pc}
 800394a:	0000      	movs	r0, r0
 800394c:	0000      	movs	r0, r0
	...

08003950 <tracer_start>:
double samplingtime;

PID pid;

void tracer_start()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
    tracer_init(1);
 8003954:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8003978 <tracer_start+0x28>
 8003958:	f000 f816 	bl	8003988 <tracer_init>
    if(rotary_read_playmode() == search)
 800395c:	f7fd fca4 	bl	80012a8 <rotary_read_playmode>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d106      	bne.n	8003974 <tracer_start+0x24>
    {
        tracer_set_gain(0);
 8003966:	2000      	movs	r0, #0
 8003968:	f000 f832 	bl	80039d0 <tracer_set_gain>
        tracer_set_target(0);
 800396c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003980 <tracer_start+0x30>
 8003970:	f000 f88a 	bl	8003a88 <tracer_set_target>
    }
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00000000 	.word	0x00000000
 800397c:	3ff00000 	.word	0x3ff00000
	...

08003988 <tracer_init>:

void tracer_init(double samplingtime_)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 8003992:	490c      	ldr	r1, [pc, #48]	; (80039c4 <tracer_init+0x3c>)
 8003994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003998:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 800399c:	490a      	ldr	r1, [pc, #40]	; (80039c8 <tracer_init+0x40>)
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <tracer_init+0x44>)
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000720 	.word	0x20000720
 80039c8:	20000718 	.word	0x20000718
 80039cc:	20000728 	.word	0x20000728

080039d0 <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	80fb      	strh	r3, [r7, #6]
    pid.kp = TRACER_KP_MAX - (TRACE_STEP_SIZE - i + 1) * (double) TRACER_KP_TOLERANCE;
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	f1c3 0311 	rsb	r3, r3, #17
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fd9f 	bl	8000524 <__aeabi_i2d>
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f7fc fe03 	bl	80005f8 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	f04f 0000 	mov.w	r0, #0
 80039fa:	4921      	ldr	r1, [pc, #132]	; (8003a80 <tracer_set_gain+0xb0>)
 80039fc:	f7fc fc44 	bl	8000288 <__aeabi_dsub>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <tracer_set_gain+0xb4>)
 8003a06:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid.ki = TRACER_KI_MAX - (TRACE_STEP_SIZE - i + 1) * (double) TRACER_KI_TOLERANCE;
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	f1c3 0311 	rsb	r3, r3, #17
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fd87 	bl	8000524 <__aeabi_i2d>
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	f7fc fdeb 	bl	80005f8 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	a114      	add	r1, pc, #80	; (adr r1, 8003a78 <tracer_set_gain+0xa8>)
 8003a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a2c:	f7fc fc2c 	bl	8000288 <__aeabi_dsub>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4913      	ldr	r1, [pc, #76]	; (8003a84 <tracer_set_gain+0xb4>)
 8003a36:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid.kd = TRACER_KD_MAX - (TRACE_STEP_SIZE - i + 1) * (double) TRACER_KD_TOLERANCE;
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	f1c3 0311 	rsb	r3, r3, #17
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd6f 	bl	8000524 <__aeabi_i2d>
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f7fc fdd3 	bl	80005f8 <__aeabi_dmul>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	f04f 0000 	mov.w	r0, #0
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	f7fc fc13 	bl	8000288 <__aeabi_dsub>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4907      	ldr	r1, [pc, #28]	; (8003a84 <tracer_set_gain+0xb4>)
 8003a68:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	f3af 8000 	nop.w
 8003a78:	e0000000 	.word	0xe0000000
 8003a7c:	3faeb851 	.word	0x3faeb851
 8003a80:	40180000 	.word	0x40180000
 8003a84:	200006f8 	.word	0x200006f8

08003a88 <tracer_set_target>:

void tracer_set_target(double target_)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	ed87 0b00 	vstr	d0, [r7]
    pid.target = target_;
 8003a92:	4905      	ldr	r1, [pc, #20]	; (8003aa8 <tracer_set_target+0x20>)
 8003a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a98:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	200006f8 	.word	0x200006f8

08003aac <tracer_solve>:

double tracer_solve(double reference_)
{
 8003aac:	b5b0      	push	{r4, r5, r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <tracer_solve+0xf0>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ac0:	f7fc fbe2 	bl	8000288 <__aeabi_dsub>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <tracer_solve+0xf4>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ad6:	f7fc fbd7 	bl	8000288 <__aeabi_dsub>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 8003ae2:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <tracer_solve+0xf8>)
 8003ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aec:	f7fc fbce 	bl	800028c <__adddf3>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	492b      	ldr	r1, [pc, #172]	; (8003ba4 <tracer_solve+0xf8>)
 8003af6:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid.ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 8003afa:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <tracer_solve+0xf0>)
 8003afc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b04:	f7fc fd78 	bl	80005f8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4614      	mov	r4, r2
 8003b0e:	461d      	mov	r5, r3
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <tracer_solve+0xf0>)
 8003b12:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <tracer_solve+0xf8>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fd6c 	bl	80005f8 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <tracer_solve+0xfc>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fd63 	bl	80005f8 <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc fba7 	bl	800028c <__adddf3>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	461d      	mov	r5, r3
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <tracer_solve+0xf0>)
 8003b48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b50:	f7fc fd52 	bl	80005f8 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <tracer_solve+0xfc>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fe73 	bl	800084c <__aeabi_ddiv>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7fc fb8d 	bl	800028c <__adddf3>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <tracer_solve+0xf4>)
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 8003b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b88:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8003b90:	eef0 0a67 	vmov.f32	s1, s15
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200006f8 	.word	0x200006f8
 8003ba0:	20000728 	.word	0x20000728
 8003ba4:	20000718 	.word	0x20000718
 8003ba8:	20000720 	.word	0x20000720
 8003bac:	00000000 	.word	0x00000000

08003bb0 <velotrace_start>:
double samplingtime;

PID pid;

void velotrace_start()
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
    velotrace_init(1);
 8003bb4:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8003bd8 <velotrace_start+0x28>
 8003bb8:	f000 f812 	bl	8003be0 <velotrace_init>
    if(rotary_read_playmode() == search)
 8003bbc:	f7fd fb74 	bl	80012a8 <rotary_read_playmode>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <velotrace_start+0x22>
    {
        velotrace_set_gain(0);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f000 f82e 	bl	8003c28 <velotrace_set_gain>
        velotrace_set_target(0);
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f000 f887 	bl	8003ce0 <velotrace_set_target>
    }
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	3ff00000 	.word	0x3ff00000

08003be0 <velotrace_init>:

void velotrace_init(double samplingtime_)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 8003bea:	490c      	ldr	r1, [pc, #48]	; (8003c1c <velotrace_init+0x3c>)
 8003bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf0:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8003bf4:	490a      	ldr	r1, [pc, #40]	; (8003c20 <velotrace_init+0x40>)
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <velotrace_init+0x44>)
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000720 	.word	0x20000720
 8003c20:	20000718 	.word	0x20000718
 8003c24:	20000728 	.word	0x20000728

08003c28 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
    pid.kp = VELOCITY_KP_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KP_TOLERANCE;
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f1c3 0311 	rsb	r3, r3, #17
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc73 	bl	8000524 <__aeabi_i2d>
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	f7fc fcd7 	bl	80005f8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <velotrace_set_gain+0xb0>)
 8003c54:	f7fc fb18 	bl	8000288 <__aeabi_dsub>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	491f      	ldr	r1, [pc, #124]	; (8003cdc <velotrace_set_gain+0xb4>)
 8003c5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid.ki = VELOCITY_KI_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KI_TOLERANCE;
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	f1c3 0311 	rsb	r3, r3, #17
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc5b 	bl	8000524 <__aeabi_i2d>
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	f7fc fcbf 	bl	80005f8 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	a114      	add	r1, pc, #80	; (adr r1, 8003cd0 <velotrace_set_gain+0xa8>)
 8003c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c84:	f7fc fb00 	bl	8000288 <__aeabi_dsub>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4913      	ldr	r1, [pc, #76]	; (8003cdc <velotrace_set_gain+0xb4>)
 8003c8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid.kd = VELOCITY_KD_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KD_TOLERANCE;
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f1c3 0311 	rsb	r3, r3, #17
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc43 	bl	8000524 <__aeabi_i2d>
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	f7fc fca7 	bl	80005f8 <__aeabi_dmul>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f7fc fae7 	bl	8000288 <__aeabi_dsub>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4907      	ldr	r1, [pc, #28]	; (8003cdc <velotrace_set_gain+0xb4>)
 8003cc0:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	e0000000 	.word	0xe0000000
 8003cd4:	3faeb851 	.word	0x3faeb851
 8003cd8:	40180000 	.word	0x40180000
 8003cdc:	200006f8 	.word	0x200006f8

08003ce0 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
    pid.target = VELOCITY_TARGET_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_TARGET_TOLERANCE;
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	f1c3 0311 	rsb	r3, r3, #17
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fc17 	bl	8000524 <__aeabi_i2d>
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <velotrace_set_target+0x40>)
 8003cfc:	f7fc fc7c 	bl	80005f8 <__aeabi_dmul>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	4906      	ldr	r1, [pc, #24]	; (8003d24 <velotrace_set_target+0x44>)
 8003d0a:	f7fc fabd 	bl	8000288 <__aeabi_dsub>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4905      	ldr	r1, [pc, #20]	; (8003d28 <velotrace_set_target+0x48>)
 8003d14:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	404f0000 	.word	0x404f0000
 8003d24:	409f4000 	.word	0x409f4000
 8003d28:	200006f8 	.word	0x200006f8

08003d2c <velotrace_solve>:

double velotrace_solve(double reference_)
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <velotrace_solve+0xf0>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d40:	f7fc faa2 	bl	8000288 <__aeabi_dsub>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <velotrace_solve+0xf4>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d56:	f7fc fa97 	bl	8000288 <__aeabi_dsub>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <velotrace_solve+0xf8>)
 8003d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc fa8e 	bl	800028c <__adddf3>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	492b      	ldr	r1, [pc, #172]	; (8003e24 <velotrace_solve+0xf8>)
 8003d76:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid. ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <velotrace_solve+0xf0>)
 8003d7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	f7fc fc38 	bl	80005f8 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <velotrace_solve+0xf0>)
 8003d92:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <velotrace_solve+0xf8>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <velotrace_solve+0xfc>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fc23 	bl	80005f8 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4620      	mov	r0, r4
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7fc fa67 	bl	800028c <__adddf3>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <velotrace_solve+0xf0>)
 8003dc8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dd0:	f7fc fc12 	bl	80005f8 <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <velotrace_solve+0xfc>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f7fc fd33 	bl	800084c <__aeabi_ddiv>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc fa4d 	bl	800028c <__adddf3>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <velotrace_solve+0xf4>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 8003e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e08:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e10:	eef0 0a67 	vmov.f32	s1, s15
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200006f8 	.word	0x200006f8
 8003e20:	20000728 	.word	0x20000728
 8003e24:	20000718 	.word	0x20000718
 8003e28:	20000720 	.word	0x20000720

08003e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e32:	e003      	b.n	8003e3c <LoopCopyDataInit>

08003e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e3a:	3104      	adds	r1, #4

08003e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e3c:	480b      	ldr	r0, [pc, #44]	; (8003e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e44:	d3f6      	bcc.n	8003e34 <CopyDataInit>
  ldr  r2, =_sbss
 8003e46:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e48:	e002      	b.n	8003e50 <LoopFillZerobss>

08003e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e4c:	f842 3b04 	str.w	r3, [r2], #4

08003e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e54:	d3f9      	bcc.n	8003e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e56:	f7ff fb55 	bl	8003504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f004 fab9 	bl	80083d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e5e:	f7fd fdf1 	bl	8001a44 <main>
  bx  lr    
 8003e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e68:	0800d40c 	.word	0x0800d40c
  ldr  r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e70:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003e74:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003e78:	20000744 	.word	0x20000744

08003e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e7c:	e7fe      	b.n	8003e7c <ADC_IRQHandler>
	...

08003e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_Init+0x40>)
 8003e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_Init+0x40>)
 8003e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_Init+0x40>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f000 fd83 	bl	80049b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f000 f808 	bl	8003ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb4:	f7fe feee 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_InitTick+0x54>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_InitTick+0x58>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd9b 	bl	8004a1e <HAL_SYSTICK_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00e      	b.n	8003f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d80a      	bhi.n	8003f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f000 fd63 	bl	80049ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f04:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <HAL_InitTick+0x5c>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000008 	.word	0x20000008
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_IncTick+0x20>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_IncTick+0x24>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_IncTick+0x24>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000008 	.word	0x20000008
 8003f48:	20000730 	.word	0x20000730

08003f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_GetTick+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000730 	.word	0x20000730

08003f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f6c:	f7ff ffee 	bl	8003f4c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d005      	beq.n	8003f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_Delay+0x44>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8a:	bf00      	nop
 8003f8c:	f7ff ffde 	bl	8003f4c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8f7      	bhi.n	8003f8c <HAL_Delay+0x28>
  {
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008

08003fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e033      	b.n	800402a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fe8e 	bl	8002cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ff2:	f023 0302 	bic.w	r3, r3, #2
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa8a 	bl	8004518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
 800401a:	e001      	b.n	8004020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Start_DMA+0x1e>
 800404e:	2302      	movs	r3, #2
 8004050:	e0cc      	b.n	80041ec <HAL_ADC_Start_DMA+0x1b8>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d018      	beq.n	800409a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_ADC_Start_DMA+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5e      	ldr	r2, [pc, #376]	; (80041f8 <HAL_ADC_Start_DMA+0x1c4>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9a      	lsrs	r2, r3, #18
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800408c:	e002      	b.n	8004094 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3b01      	subs	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f9      	bne.n	800408e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	f040 80a0 	bne.w	80041ea <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d106      	bne.n	80040f8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f023 0206 	bic.w	r2, r3, #6
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
 80040f6:	e002      	b.n	80040fe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_ADC_Start_DMA+0x1c8>)
 8004108:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <HAL_ADC_Start_DMA+0x1cc>)
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <HAL_ADC_Start_DMA+0x1d0>)
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <HAL_ADC_Start_DMA+0x1d4>)
 8004120:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800412a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800413a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	334c      	adds	r3, #76	; 0x4c
 8004156:	4619      	mov	r1, r3
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f000 fd1a 	bl	8004b94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12a      	bne.n	80041c2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <HAL_ADC_Start_DMA+0x1d8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d015      	beq.n	80041a2 <HAL_ADC_Start_DMA+0x16e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <HAL_ADC_Start_DMA+0x1dc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d105      	bne.n	800418c <HAL_ADC_Start_DMA+0x158>
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_ADC_Start_DMA+0x1c8>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_ADC_Start_DMA+0x1e0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d129      	bne.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_ADC_Start_DMA+0x1c8>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d123      	bne.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11c      	bne.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	e013      	b.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a11      	ldr	r2, [pc, #68]	; (800420c <HAL_ADC_Start_DMA+0x1d8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10e      	bne.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000000 	.word	0x20000000
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	40012300 	.word	0x40012300
 8004200:	08004711 	.word	0x08004711
 8004204:	080047cb 	.word	0x080047cb
 8004208:	080047e7 	.word	0x080047e7
 800420c:	40012000 	.word	0x40012000
 8004210:	40012100 	.word	0x40012100
 8004214:	40012200 	.word	0x40012200

08004218 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADC_Stop_DMA+0x1a>
 800422e:	2302      	movs	r3, #2
 8004230:	e038      	b.n	80042a4 <HAL_ADC_Stop_DMA+0x8c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d120      	bne.n	800429a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004266:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fce9 	bl	8004c44 <HAL_DMA_Abort>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004284:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x1c>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e105      	b.n	80044fc <HAL_ADC_ConfigChannel+0x228>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	d925      	bls.n	800434c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68d9      	ldr	r1, [r3, #12]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	3b1e      	subs	r3, #30
 8004316:	2207      	movs	r2, #7
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43da      	mvns	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	400a      	ands	r2, r1
 8004324:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68d9      	ldr	r1, [r3, #12]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	4618      	mov	r0, r3
 8004338:	4603      	mov	r3, r0
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4403      	add	r3, r0
 800433e:	3b1e      	subs	r3, #30
 8004340:	409a      	lsls	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	e022      	b.n	8004392 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	2207      	movs	r2, #7
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	400a      	ands	r2, r1
 800436e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	4618      	mov	r0, r3
 8004382:	4603      	mov	r3, r0
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4403      	add	r3, r0
 8004388:	409a      	lsls	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d824      	bhi.n	80043e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	3b05      	subs	r3, #5
 80043ac:	221f      	movs	r2, #31
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43da      	mvns	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	400a      	ands	r2, r1
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4618      	mov	r0, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	3b05      	subs	r3, #5
 80043d6:	fa00 f203 	lsl.w	r2, r0, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34
 80043e2:	e04c      	b.n	800447e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d824      	bhi.n	8004436 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	3b23      	subs	r3, #35	; 0x23
 80043fe:	221f      	movs	r2, #31
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43da      	mvns	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	400a      	ands	r2, r1
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	4618      	mov	r0, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	3b23      	subs	r3, #35	; 0x23
 8004428:	fa00 f203 	lsl.w	r2, r0, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
 8004434:	e023      	b.n	800447e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	3b41      	subs	r3, #65	; 0x41
 8004448:	221f      	movs	r2, #31
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	400a      	ands	r2, r1
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4618      	mov	r0, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	3b41      	subs	r3, #65	; 0x41
 8004472:	fa00 f203 	lsl.w	r2, r0, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_ADC_ConfigChannel+0x234>)
 8004480:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <HAL_ADC_ConfigChannel+0x238>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d109      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1cc>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b12      	cmp	r3, #18
 8004492:	d105      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_ADC_ConfigChannel+0x238>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d123      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x21e>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d003      	beq.n	80044ba <HAL_ADC_ConfigChannel+0x1e6>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b11      	cmp	r3, #17
 80044b8:	d11b      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d111      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_ADC_ConfigChannel+0x23c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_ADC_ConfigChannel+0x240>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	0c9a      	lsrs	r2, r3, #18
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044e4:	e002      	b.n	80044ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f9      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40012300 	.word	0x40012300
 800450c:	40012000 	.word	0x40012000
 8004510:	20000000 	.word	0x20000000
 8004514:	431bde83 	.word	0x431bde83

08004518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004520:	4b79      	ldr	r3, [pc, #484]	; (8004708 <ADC_Init+0x1f0>)
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6899      	ldr	r1, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	4a58      	ldr	r2, [pc, #352]	; (800470c <ADC_Init+0x1f4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d022      	beq.n	80045f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	e00f      	b.n	8004616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004614:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0202 	bic.w	r2, r2, #2
 8004624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	7e1b      	ldrb	r3, [r3, #24]
 8004630:	005a      	lsls	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004652:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	3b01      	subs	r3, #1
 8004670:	035a      	lsls	r2, r3, #13
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	e007      	b.n	800468c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	051a      	lsls	r2, r3, #20
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ce:	025a      	lsls	r2, r3, #9
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	029a      	lsls	r2, r3, #10
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012300 	.word	0x40012300
 800470c:	0f000001 	.word	0x0f000001

08004710 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004726:	2b00      	cmp	r3, #0
 8004728:	d13c      	bne.n	80047a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d12b      	bne.n	800479c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004748:	2b00      	cmp	r3, #0
 800474a:	d127      	bne.n	800479c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004764:	2b00      	cmp	r3, #0
 8004766:	d119      	bne.n	800479c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fc ff95 	bl	80016cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047a2:	e00e      	b.n	80047c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fd85 	bl	80042c0 <HAL_ADC_ErrorCallback>
}
 80047b6:	e004      	b.n	80047c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fd67 	bl	80042ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fd5a 	bl	80042c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <__NVIC_SetPriorityGrouping+0x44>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004830:	4013      	ands	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800483c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004846:	4a04      	ldr	r2, [pc, #16]	; (8004858 <__NVIC_SetPriorityGrouping+0x44>)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	60d3      	str	r3, [r2, #12]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <__NVIC_GetPriorityGrouping+0x18>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 0307 	and.w	r3, r3, #7
}
 800486a:	4618      	mov	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	2b00      	cmp	r3, #0
 8004888:	db0b      	blt.n	80048a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	f003 021f 	and.w	r2, r3, #31
 8004890:	4907      	ldr	r1, [pc, #28]	; (80048b0 <__NVIC_EnableIRQ+0x38>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2001      	movs	r0, #1
 800489a:	fa00 f202 	lsl.w	r2, r0, r2
 800489e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e100 	.word	0xe000e100

080048b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	db0a      	blt.n	80048de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	490c      	ldr	r1, [pc, #48]	; (8004900 <__NVIC_SetPriority+0x4c>)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	0112      	lsls	r2, r2, #4
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	440b      	add	r3, r1
 80048d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048dc:	e00a      	b.n	80048f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4908      	ldr	r1, [pc, #32]	; (8004904 <__NVIC_SetPriority+0x50>)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3b04      	subs	r3, #4
 80048ec:	0112      	lsls	r2, r2, #4
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	440b      	add	r3, r1
 80048f2:	761a      	strb	r2, [r3, #24]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000e100 	.word	0xe000e100
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f1c3 0307 	rsb	r3, r3, #7
 8004922:	2b04      	cmp	r3, #4
 8004924:	bf28      	it	cs
 8004926:	2304      	movcs	r3, #4
 8004928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3304      	adds	r3, #4
 800492e:	2b06      	cmp	r3, #6
 8004930:	d902      	bls.n	8004938 <NVIC_EncodePriority+0x30>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3b03      	subs	r3, #3
 8004936:	e000      	b.n	800493a <NVIC_EncodePriority+0x32>
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43da      	mvns	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	401a      	ands	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004950:	f04f 31ff 	mov.w	r1, #4294967295
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	43d9      	mvns	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004960:	4313      	orrs	r3, r2
         );
}
 8004962:	4618      	mov	r0, r3
 8004964:	3724      	adds	r7, #36	; 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3b01      	subs	r3, #1
 800497c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004980:	d301      	bcc.n	8004986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004982:	2301      	movs	r3, #1
 8004984:	e00f      	b.n	80049a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <SysTick_Config+0x40>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3b01      	subs	r3, #1
 800498c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800498e:	210f      	movs	r1, #15
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	f7ff ff8e 	bl	80048b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <SysTick_Config+0x40>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <SysTick_Config+0x40>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010

080049b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff29 	bl	8004814 <__NVIC_SetPriorityGrouping>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	4603      	mov	r3, r0
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049dc:	f7ff ff3e 	bl	800485c <__NVIC_GetPriorityGrouping>
 80049e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7ff ff8e 	bl	8004908 <NVIC_EncodePriority>
 80049ec:	4602      	mov	r2, r0
 80049ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff5d 	bl	80048b4 <__NVIC_SetPriority>
}
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff31 	bl	8004878 <__NVIC_EnableIRQ>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ffa2 	bl	8004970 <SysTick_Config>
 8004a2c:	4603      	mov	r3, r0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7ff fa82 	bl	8003f4c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e099      	b.n	8004b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a74:	e00f      	b.n	8004a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a76:	f7ff fa69 	bl	8003f4c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b05      	cmp	r3, #5
 8004a82:	d908      	bls.n	8004a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e078      	b.n	8004b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e8      	bne.n	8004a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <HAL_DMA_Init+0x158>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d107      	bne.n	8004b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	4313      	orrs	r3, r2
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d117      	bne.n	8004b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fadf 	bl	8005100 <DMA_CheckFifoParam>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b56:	2301      	movs	r3, #1
 8004b58:	e016      	b.n	8004b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa96 	bl	8005094 <DMA_CalcBaseAndBitshift>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	223f      	movs	r2, #63	; 0x3f
 8004b72:	409a      	lsls	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	f010803f 	.word	0xf010803f

08004b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_DMA_Start_IT+0x26>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e040      	b.n	8004c3c <HAL_DMA_Start_IT+0xa8>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d12f      	bne.n	8004c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa28 	bl	8005038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	223f      	movs	r2, #63	; 0x3f
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0216 	orr.w	r2, r2, #22
 8004c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e005      	b.n	8004c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c52:	f7ff f97b 	bl	8003f4c <HAL_GetTick>
 8004c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d008      	beq.n	8004c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e052      	b.n	8004d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0216 	bic.w	r2, r2, #22
 8004c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_DMA_Abort+0x62>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0208 	bic.w	r2, r2, #8
 8004cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cc6:	e013      	b.n	8004cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cc8:	f7ff f940 	bl	8003f4c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d90c      	bls.n	8004cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e015      	b.n	8004d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e4      	bne.n	8004cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	223f      	movs	r2, #63	; 0x3f
 8004d04:	409a      	lsls	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d30:	4b92      	ldr	r3, [pc, #584]	; (8004f7c <HAL_DMA_IRQHandler+0x258>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a92      	ldr	r2, [pc, #584]	; (8004f80 <HAL_DMA_IRQHandler+0x25c>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	0a9b      	lsrs	r3, r3, #10
 8004d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	2208      	movs	r2, #8
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01a      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f043 0201 	orr.w	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db2:	2201      	movs	r2, #1
 8004db4:	409a      	lsls	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f043 0202 	orr.w	r2, r3, #2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dca:	2204      	movs	r2, #4
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de8:	2204      	movs	r2, #4
 8004dea:	409a      	lsls	r2, r3
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	2210      	movs	r2, #16
 8004e02:	409a      	lsls	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d043      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d03c      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1e:	2210      	movs	r2, #16
 8004e20:	409a      	lsls	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d018      	beq.n	8004e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d024      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	e01f      	b.n	8004e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 8004e64:	e016      	b.n	8004e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0208 	bic.w	r2, r2, #8
 8004e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e98:	2220      	movs	r2, #32
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 808e 	beq.w	8004fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8086 	beq.w	8004fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	2220      	movs	r2, #32
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d136      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0216 	bic.w	r2, r2, #22
 8004edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_DMA_IRQHandler+0x1da>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0208 	bic.w	r2, r2, #8
 8004f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	223f      	movs	r2, #63	; 0x3f
 8004f14:	409a      	lsls	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d07d      	beq.n	800502e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
        }
        return;
 8004f3a:	e078      	b.n	800502e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01c      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d030      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	e02b      	b.n	8004fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d027      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_DMA_IRQHandler+0x29e>
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0210 	bic.w	r2, r2, #16
 8004fa0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d032      	beq.n	8005030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2205      	movs	r2, #5
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d307      	bcc.n	800500a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f2      	bne.n	8004fee <HAL_DMA_IRQHandler+0x2ca>
 8005008:	e000      	b.n	800500c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800500a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
 800502c:	e000      	b.n	8005030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800502e:	bf00      	nop
    }
  }
}
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop

08005038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d108      	bne.n	8005078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005076:	e007      	b.n	8005088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	3b10      	subs	r3, #16
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <DMA_CalcBaseAndBitshift+0x64>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <DMA_CalcBaseAndBitshift+0x68>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d909      	bls.n	80050d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	1d1a      	adds	r2, r3, #4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58
 80050d4:	e007      	b.n	80050e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	aaaaaaab 	.word	0xaaaaaaab
 80050fc:	0800cf40 	.word	0x0800cf40

08005100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11f      	bne.n	800515a <DMA_CheckFifoParam+0x5a>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d856      	bhi.n	80051ce <DMA_CheckFifoParam+0xce>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <DMA_CheckFifoParam+0x28>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005139 	.word	0x08005139
 800512c:	0800514b 	.word	0x0800514b
 8005130:	08005139 	.word	0x08005139
 8005134:	080051cf 	.word	0x080051cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d046      	beq.n	80051d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e043      	b.n	80051d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005152:	d140      	bne.n	80051d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005158:	e03d      	b.n	80051d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d121      	bne.n	80051a8 <DMA_CheckFifoParam+0xa8>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d837      	bhi.n	80051da <DMA_CheckFifoParam+0xda>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <DMA_CheckFifoParam+0x70>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	08005187 	.word	0x08005187
 8005178:	08005181 	.word	0x08005181
 800517c:	08005199 	.word	0x08005199
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e030      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d025      	beq.n	80051de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005196:	e022      	b.n	80051de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051a0:	d11f      	bne.n	80051e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051a6:	e01c      	b.n	80051e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d903      	bls.n	80051b6 <DMA_CheckFifoParam+0xb6>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d003      	beq.n	80051bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051b4:	e018      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
      break;
 80051ba:	e015      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      break;
 80051cc:	e00b      	b.n	80051e6 <DMA_CheckFifoParam+0xe6>
      break;
 80051ce:	bf00      	nop
 80051d0:	e00a      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;
 80051d2:	bf00      	nop
 80051d4:	e008      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;
 80051d6:	bf00      	nop
 80051d8:	e006      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;
 80051da:	bf00      	nop
 80051dc:	e004      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
      break;
 80051e6:	bf00      	nop
    }
  } 
  
  return status; 
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e16b      	b.n	80054ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005214:	2201      	movs	r2, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	429a      	cmp	r2, r3
 800522e:	f040 815a 	bne.w	80054e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d00b      	beq.n	8005252 <HAL_GPIO_Init+0x5a>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d007      	beq.n	8005252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005246:	2b11      	cmp	r3, #17
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b12      	cmp	r3, #18
 8005250:	d130      	bne.n	80052b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 0201 	and.w	r2, r3, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	2203      	movs	r2, #3
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4313      	orrs	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d003      	beq.n	80052f4 <HAL_GPIO_Init+0xfc>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b12      	cmp	r3, #18
 80052f2:	d123      	bne.n	800533c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	220f      	movs	r2, #15
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	08da      	lsrs	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3208      	adds	r2, #8
 8005336:	69b9      	ldr	r1, [r7, #24]
 8005338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	2203      	movs	r2, #3
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0203 	and.w	r2, r3, #3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80b4 	beq.w	80054e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	4b60      	ldr	r3, [pc, #384]	; (8005504 <HAL_GPIO_Init+0x30c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	4a5f      	ldr	r2, [pc, #380]	; (8005504 <HAL_GPIO_Init+0x30c>)
 8005388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800538c:	6453      	str	r3, [r2, #68]	; 0x44
 800538e:	4b5d      	ldr	r3, [pc, #372]	; (8005504 <HAL_GPIO_Init+0x30c>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800539a:	4a5b      	ldr	r2, [pc, #364]	; (8005508 <HAL_GPIO_Init+0x310>)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	3302      	adds	r3, #2
 80053a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	220f      	movs	r2, #15
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a52      	ldr	r2, [pc, #328]	; (800550c <HAL_GPIO_Init+0x314>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <HAL_GPIO_Init+0x226>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a51      	ldr	r2, [pc, #324]	; (8005510 <HAL_GPIO_Init+0x318>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d025      	beq.n	800541a <HAL_GPIO_Init+0x222>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a50      	ldr	r2, [pc, #320]	; (8005514 <HAL_GPIO_Init+0x31c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <HAL_GPIO_Init+0x21e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a4f      	ldr	r2, [pc, #316]	; (8005518 <HAL_GPIO_Init+0x320>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d019      	beq.n	8005412 <HAL_GPIO_Init+0x21a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a4e      	ldr	r2, [pc, #312]	; (800551c <HAL_GPIO_Init+0x324>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_GPIO_Init+0x216>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a4d      	ldr	r2, [pc, #308]	; (8005520 <HAL_GPIO_Init+0x328>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00d      	beq.n	800540a <HAL_GPIO_Init+0x212>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a4c      	ldr	r2, [pc, #304]	; (8005524 <HAL_GPIO_Init+0x32c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <HAL_GPIO_Init+0x20e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4b      	ldr	r2, [pc, #300]	; (8005528 <HAL_GPIO_Init+0x330>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_GPIO_Init+0x20a>
 80053fe:	2307      	movs	r3, #7
 8005400:	e00e      	b.n	8005420 <HAL_GPIO_Init+0x228>
 8005402:	2308      	movs	r3, #8
 8005404:	e00c      	b.n	8005420 <HAL_GPIO_Init+0x228>
 8005406:	2306      	movs	r3, #6
 8005408:	e00a      	b.n	8005420 <HAL_GPIO_Init+0x228>
 800540a:	2305      	movs	r3, #5
 800540c:	e008      	b.n	8005420 <HAL_GPIO_Init+0x228>
 800540e:	2304      	movs	r3, #4
 8005410:	e006      	b.n	8005420 <HAL_GPIO_Init+0x228>
 8005412:	2303      	movs	r3, #3
 8005414:	e004      	b.n	8005420 <HAL_GPIO_Init+0x228>
 8005416:	2302      	movs	r3, #2
 8005418:	e002      	b.n	8005420 <HAL_GPIO_Init+0x228>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_GPIO_Init+0x228>
 800541e:	2300      	movs	r3, #0
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	f002 0203 	and.w	r2, r2, #3
 8005426:	0092      	lsls	r2, r2, #2
 8005428:	4093      	lsls	r3, r2
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005430:	4935      	ldr	r1, [pc, #212]	; (8005508 <HAL_GPIO_Init+0x310>)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	089b      	lsrs	r3, r3, #2
 8005436:	3302      	adds	r3, #2
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800543e:	4b3b      	ldr	r3, [pc, #236]	; (800552c <HAL_GPIO_Init+0x334>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	43db      	mvns	r3, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005462:	4a32      	ldr	r2, [pc, #200]	; (800552c <HAL_GPIO_Init+0x334>)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_GPIO_Init+0x334>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <HAL_GPIO_Init+0x334>)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <HAL_GPIO_Init+0x334>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054b6:	4a1d      	ldr	r2, [pc, #116]	; (800552c <HAL_GPIO_Init+0x334>)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_GPIO_Init+0x334>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054e0:	4a12      	ldr	r2, [pc, #72]	; (800552c <HAL_GPIO_Init+0x334>)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b0f      	cmp	r3, #15
 80054f0:	f67f ae90 	bls.w	8005214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	40013800 	.word	0x40013800
 800550c:	40020000 	.word	0x40020000
 8005510:	40020400 	.word	0x40020400
 8005514:	40020800 	.word	0x40020800
 8005518:	40020c00 	.word	0x40020c00
 800551c:	40021000 	.word	0x40021000
 8005520:	40021400 	.word	0x40021400
 8005524:	40021800 	.word	0x40021800
 8005528:	40021c00 	.word	0x40021c00
 800552c:	40013c00 	.word	0x40013c00

08005530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	e001      	b.n	8005552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	807b      	strh	r3, [r7, #2]
 800556c:	4613      	mov	r3, r2
 800556e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005570:	787b      	ldrb	r3, [r7, #1]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800557c:	e003      	b.n	8005586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800557e:	887b      	ldrh	r3, [r7, #2]
 8005580:	041a      	lsls	r2, r3, #16
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	619a      	str	r2, [r3, #24]
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e12b      	b.n	80057fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fd fc46 	bl	8002e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055f8:	f000 fd52 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 80055fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a81      	ldr	r2, [pc, #516]	; (8005808 <HAL_I2C_Init+0x274>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d807      	bhi.n	8005618 <HAL_I2C_Init+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a80      	ldr	r2, [pc, #512]	; (800580c <HAL_I2C_Init+0x278>)
 800560c:	4293      	cmp	r3, r2
 800560e:	bf94      	ite	ls
 8005610:	2301      	movls	r3, #1
 8005612:	2300      	movhi	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e006      	b.n	8005626 <HAL_I2C_Init+0x92>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a7d      	ldr	r2, [pc, #500]	; (8005810 <HAL_I2C_Init+0x27c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	bf94      	ite	ls
 8005620:	2301      	movls	r3, #1
 8005622:	2300      	movhi	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e0e7      	b.n	80057fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a78      	ldr	r2, [pc, #480]	; (8005814 <HAL_I2C_Init+0x280>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	0c9b      	lsrs	r3, r3, #18
 8005638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a6a      	ldr	r2, [pc, #424]	; (8005808 <HAL_I2C_Init+0x274>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d802      	bhi.n	8005668 <HAL_I2C_Init+0xd4>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3301      	adds	r3, #1
 8005666:	e009      	b.n	800567c <HAL_I2C_Init+0xe8>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	4a69      	ldr	r2, [pc, #420]	; (8005818 <HAL_I2C_Init+0x284>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	099b      	lsrs	r3, r3, #6
 800567a:	3301      	adds	r3, #1
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	430b      	orrs	r3, r1
 8005682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800568e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	495c      	ldr	r1, [pc, #368]	; (8005808 <HAL_I2C_Init+0x274>)
 8005698:	428b      	cmp	r3, r1
 800569a:	d819      	bhi.n	80056d0 <HAL_I2C_Init+0x13c>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1e59      	subs	r1, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056b0:	400b      	ands	r3, r1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_I2C_Init+0x138>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1e59      	subs	r1, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056c4:	3301      	adds	r3, #1
 80056c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ca:	e051      	b.n	8005770 <HAL_I2C_Init+0x1dc>
 80056cc:	2304      	movs	r3, #4
 80056ce:	e04f      	b.n	8005770 <HAL_I2C_Init+0x1dc>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d111      	bne.n	80056fc <HAL_I2C_Init+0x168>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1e58      	subs	r0, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	440b      	add	r3, r1
 80056e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e012      	b.n	8005722 <HAL_I2C_Init+0x18e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	0099      	lsls	r1, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005712:	3301      	adds	r3, #1
 8005714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005718:	2b00      	cmp	r3, #0
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Init+0x196>
 8005726:	2301      	movs	r3, #1
 8005728:	e022      	b.n	8005770 <HAL_I2C_Init+0x1dc>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10e      	bne.n	8005750 <HAL_I2C_Init+0x1bc>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1e58      	subs	r0, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	440b      	add	r3, r1
 8005740:	fbb0 f3f3 	udiv	r3, r0, r3
 8005744:	3301      	adds	r3, #1
 8005746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574e:	e00f      	b.n	8005770 <HAL_I2C_Init+0x1dc>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1e58      	subs	r0, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	0099      	lsls	r1, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	fbb0 f3f3 	udiv	r3, r0, r3
 8005766:	3301      	adds	r3, #1
 8005768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	6809      	ldr	r1, [r1, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800579e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6911      	ldr	r1, [r2, #16]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	4311      	orrs	r1, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	000186a0 	.word	0x000186a0
 800580c:	001e847f 	.word	0x001e847f
 8005810:	003d08ff 	.word	0x003d08ff
 8005814:	431bde83 	.word	0x431bde83
 8005818:	10624dd3 	.word	0x10624dd3

0800581c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e25b      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d075      	beq.n	8005926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800583a:	4ba3      	ldr	r3, [pc, #652]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00c      	beq.n	8005860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005846:	4ba0      	ldr	r3, [pc, #640]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800584e:	2b08      	cmp	r3, #8
 8005850:	d112      	bne.n	8005878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005852:	4b9d      	ldr	r3, [pc, #628]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800585e:	d10b      	bne.n	8005878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	4b99      	ldr	r3, [pc, #612]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05b      	beq.n	8005924 <HAL_RCC_OscConfig+0x108>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d157      	bne.n	8005924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e236      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d106      	bne.n	8005890 <HAL_RCC_OscConfig+0x74>
 8005882:	4b91      	ldr	r3, [pc, #580]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a90      	ldr	r2, [pc, #576]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e01d      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x98>
 800589a:	4b8b      	ldr	r3, [pc, #556]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a8a      	ldr	r2, [pc, #552]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b88      	ldr	r3, [pc, #544]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a87      	ldr	r2, [pc, #540]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0xb0>
 80058b4:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a80      	ldr	r2, [pc, #512]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fe fb3a 	bl	8003f4c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058dc:	f7fe fb36 	bl	8003f4c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	; 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e1fb      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ee:	4b76      	ldr	r3, [pc, #472]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0xc0>
 80058fa:	e014      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fe fb26 	bl	8003f4c <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005904:	f7fe fb22 	bl	8003f4c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e1e7      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005916:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0xe8>
 8005922:	e000      	b.n	8005926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d063      	beq.n	80059fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593e:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005946:	2b08      	cmp	r3, #8
 8005948:	d11c      	bne.n	8005984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594a:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x152>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d001      	beq.n	800596e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e1bb      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b56      	ldr	r3, [pc, #344]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4952      	ldr	r1, [pc, #328]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	e03a      	b.n	80059fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800598c:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fe fadb 	bl	8003f4c <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599a:	f7fe fad7 	bl	8003f4c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e19c      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b8:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4940      	ldr	r1, [pc, #256]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
 80059cc:	e015      	b.n	80059fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ce:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe faba 	bl	8003f4c <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fe fab6 	bl	8003f4c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e17b      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d030      	beq.n	8005a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0e:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fe fa9a 	bl	8003f4c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1c:	f7fe fa96 	bl	8003f4c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e15b      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x200>
 8005a3a:	e015      	b.n	8005a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3c:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a42:	f7fe fa83 	bl	8003f4c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a4a:	f7fe fa7f 	bl	8003f4c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e144      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a0 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10f      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d121      	bne.n	8005af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005abe:	f7fe fa45 	bl	8003f4c <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac4:	e011      	b.n	8005aea <HAL_RCC_OscConfig+0x2ce>
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470000 	.word	0x42470000
 8005ad0:	42470e80 	.word	0x42470e80
 8005ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7fe fa38 	bl	8003f4c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0fd      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aea:	4b81      	ldr	r3, [pc, #516]	; (8005cf0 <HAL_RCC_OscConfig+0x4d4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d106      	bne.n	8005b0c <HAL_RCC_OscConfig+0x2f0>
 8005afe:	4b7d      	ldr	r3, [pc, #500]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a7c      	ldr	r2, [pc, #496]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	e01c      	b.n	8005b46 <HAL_RCC_OscConfig+0x32a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCC_OscConfig+0x312>
 8005b14:	4b77      	ldr	r3, [pc, #476]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4a76      	ldr	r2, [pc, #472]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b20:	4b74      	ldr	r3, [pc, #464]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a73      	ldr	r2, [pc, #460]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2c:	e00b      	b.n	8005b46 <HAL_RCC_OscConfig+0x32a>
 8005b2e:	4b71      	ldr	r3, [pc, #452]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a70      	ldr	r2, [pc, #448]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b6e      	ldr	r3, [pc, #440]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a6d      	ldr	r2, [pc, #436]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d015      	beq.n	8005b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fe f9fd 	bl	8003f4c <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fe f9f9 	bl	8003f4c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0bc      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b61      	ldr	r3, [pc, #388]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCC_OscConfig+0x33a>
 8005b78:	e014      	b.n	8005ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7a:	f7fe f9e7 	bl	8003f4c <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fe f9e3 	bl	8003f4c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0a6      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b52      	ldr	r3, [pc, #328]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a51      	ldr	r2, [pc, #324]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8092 	beq.w	8005ce4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bc0:	4b4c      	ldr	r3, [pc, #304]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d05c      	beq.n	8005c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d141      	bne.n	8005c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b48      	ldr	r3, [pc, #288]	; (8005cf8 <HAL_RCC_OscConfig+0x4dc>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7fe f9b7 	bl	8003f4c <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fe f9b3 	bl	8003f4c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e078      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	019b      	lsls	r3, r3, #6
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	061b      	lsls	r3, r3, #24
 8005c24:	4933      	ldr	r1, [pc, #204]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2a:	4b33      	ldr	r3, [pc, #204]	; (8005cf8 <HAL_RCC_OscConfig+0x4dc>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fe f98c 	bl	8003f4c <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fe f988 	bl	8003f4c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e04d      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x41c>
 8005c56:	e045      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <HAL_RCC_OscConfig+0x4dc>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5e:	f7fe f975 	bl	8003f4c <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c66:	f7fe f971 	bl	8003f4c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e036      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c78:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCC_OscConfig+0x44a>
 8005c84:	e02e      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e029      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_RCC_OscConfig+0x4d8>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d11c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d115      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cba:	4013      	ands	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	42470060 	.word	0x42470060

08005cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0cc      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d10:	4b68      	ldr	r3, [pc, #416]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d90c      	bls.n	8005d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1e:	4b65      	ldr	r3, [pc, #404]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b63      	ldr	r3, [pc, #396]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0b8      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d020      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d50:	4b59      	ldr	r3, [pc, #356]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a58      	ldr	r2, [pc, #352]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d68:	4b53      	ldr	r3, [pc, #332]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a52      	ldr	r2, [pc, #328]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d74:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	494d      	ldr	r1, [pc, #308]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d044      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d119      	bne.n	8005dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e07f      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d003      	beq.n	8005dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d107      	bne.n	8005dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dba:	4b3f      	ldr	r3, [pc, #252]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e06f      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e067      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dda:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f023 0203 	bic.w	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4934      	ldr	r1, [pc, #208]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dec:	f7fe f8ae 	bl	8003f4c <HAL_GetTick>
 8005df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	e00a      	b.n	8005e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df4:	f7fe f8aa 	bl	8003f4c <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e04f      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0a:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 020c 	and.w	r2, r3, #12
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d1eb      	bne.n	8005df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d20c      	bcs.n	8005e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e032      	b.n	8005eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e50:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4916      	ldr	r1, [pc, #88]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	490e      	ldr	r1, [pc, #56]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e82:	f000 f821 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8005e86:	4602      	mov	r2, r0
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	490a      	ldr	r1, [pc, #40]	; (8005ebc <HAL_RCC_ClockConfig+0x1c0>)
 8005e94:	5ccb      	ldrb	r3, [r1, r3]
 8005e96:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9a:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e9e:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe f80e 	bl	8003ec4 <HAL_InitTick>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40023c00 	.word	0x40023c00
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	0800cf28 	.word	0x0800cf28
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	20000004 	.word	0x20000004

08005ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	607b      	str	r3, [r7, #4]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee0:	4b67      	ldr	r3, [pc, #412]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 030c 	and.w	r3, r3, #12
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d00d      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x40>
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	f200 80bd 	bhi.w	800606c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x34>
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8005efa:	e0b7      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005efc:	4b61      	ldr	r3, [pc, #388]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005efe:	60bb      	str	r3, [r7, #8]
       break;
 8005f00:	e0b7      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f02:	4b60      	ldr	r3, [pc, #384]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f04:	60bb      	str	r3, [r7, #8]
      break;
 8005f06:	e0b4      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f08:	4b5d      	ldr	r3, [pc, #372]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f12:	4b5b      	ldr	r3, [pc, #364]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d04d      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1e:	4b58      	ldr	r3, [pc, #352]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	461a      	mov	r2, r3
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f2e:	f04f 0100 	mov.w	r1, #0
 8005f32:	ea02 0800 	and.w	r8, r2, r0
 8005f36:	ea03 0901 	and.w	r9, r3, r1
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	014b      	lsls	r3, r1, #5
 8005f48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f4c:	0142      	lsls	r2, r0, #5
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	ebb0 0008 	subs.w	r0, r0, r8
 8005f56:	eb61 0109 	sbc.w	r1, r1, r9
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	018b      	lsls	r3, r1, #6
 8005f64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f68:	0182      	lsls	r2, r0, #6
 8005f6a:	1a12      	subs	r2, r2, r0
 8005f6c:	eb63 0301 	sbc.w	r3, r3, r1
 8005f70:	f04f 0000 	mov.w	r0, #0
 8005f74:	f04f 0100 	mov.w	r1, #0
 8005f78:	00d9      	lsls	r1, r3, #3
 8005f7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f7e:	00d0      	lsls	r0, r2, #3
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	eb12 0208 	adds.w	r2, r2, r8
 8005f88:	eb43 0309 	adc.w	r3, r3, r9
 8005f8c:	f04f 0000 	mov.w	r0, #0
 8005f90:	f04f 0100 	mov.w	r1, #0
 8005f94:	0299      	lsls	r1, r3, #10
 8005f96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f9a:	0290      	lsls	r0, r2, #10
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	f7fa fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e04a      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	ea02 0400 	and.w	r4, r2, r0
 8005fd2:	ea03 0501 	and.w	r5, r3, r1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	014b      	lsls	r3, r1, #5
 8005fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fe8:	0142      	lsls	r2, r0, #5
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	1b00      	subs	r0, r0, r4
 8005ff0:	eb61 0105 	sbc.w	r1, r1, r5
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	018b      	lsls	r3, r1, #6
 8005ffe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006002:	0182      	lsls	r2, r0, #6
 8006004:	1a12      	subs	r2, r2, r0
 8006006:	eb63 0301 	sbc.w	r3, r3, r1
 800600a:	f04f 0000 	mov.w	r0, #0
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	00d9      	lsls	r1, r3, #3
 8006014:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006018:	00d0      	lsls	r0, r2, #3
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	1912      	adds	r2, r2, r4
 8006020:	eb45 0303 	adc.w	r3, r5, r3
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	0299      	lsls	r1, r3, #10
 800602e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006032:	0290      	lsls	r0, r2, #10
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	f7fa fe20 	bl	8000c88 <__aeabi_uldivmod>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4613      	mov	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	3301      	adds	r3, #1
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	60bb      	str	r3, [r7, #8]
      break;
 800606a:	e002      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800606e:	60bb      	str	r3, [r7, #8]
      break;
 8006070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006072:	68bb      	ldr	r3, [r7, #8]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800
 8006084:	00f42400 	.word	0x00f42400

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCC_GetHCLKFreq+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000000 	.word	0x20000000

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff0 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	0800cf38 	.word	0x0800cf38

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffdc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	0800cf38 	.word	0x0800cf38

080060f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e056      	b.n	80061b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fc fedd 	bl	8002edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006138:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	ea42 0103 	orr.w	r1, r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	f003 0104 	and.w	r1, r3, #4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800619e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_SPI_Transmit+0x22>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e11e      	b.n	8006418 <HAL_SPI_Transmit+0x260>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e2:	f7fd feb3 	bl	8003f4c <HAL_GetTick>
 80061e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d002      	beq.n	80061fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061fc:	e103      	b.n	8006406 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_SPI_Transmit+0x52>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800620e:	e0fa      	b.n	8006406 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2203      	movs	r2, #3
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006256:	d107      	bne.n	8006268 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006266:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d007      	beq.n	8006286 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628e:	d14b      	bne.n	8006328 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_SPI_Transmit+0xe6>
 8006298:	8afb      	ldrh	r3, [r7, #22]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d13e      	bne.n	800631c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062c2:	e02b      	b.n	800631c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d112      	bne.n	80062f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	881a      	ldrh	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80062f6:	e011      	b.n	800631c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062f8:	f7fd fe28 	bl	8003f4c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d803      	bhi.n	8006310 <HAL_SPI_Transmit+0x158>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d102      	bne.n	8006316 <HAL_SPI_Transmit+0x15e>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	77fb      	strb	r3, [r7, #31]
          goto error;
 800631a:	e074      	b.n	8006406 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ce      	bne.n	80062c4 <HAL_SPI_Transmit+0x10c>
 8006326:	e04c      	b.n	80063c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Transmit+0x17e>
 8006330:	8afb      	ldrh	r3, [r7, #22]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d140      	bne.n	80063b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800635c:	e02c      	b.n	80063b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d113      	bne.n	8006394 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	86da      	strh	r2, [r3, #54]	; 0x36
 8006392:	e011      	b.n	80063b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006394:	f7fd fdda 	bl	8003f4c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d803      	bhi.n	80063ac <HAL_SPI_Transmit+0x1f4>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x1fa>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063b6:	e026      	b.n	8006406 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1cd      	bne.n	800635e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fba4 	bl	8006b14 <SPI_EndRxTxTransaction>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e000      	b.n	8006406 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006404:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006416:	7ffb      	ldrb	r3, [r7, #31]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643c:	d112      	bne.n	8006464 <HAL_SPI_Receive+0x44>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10e      	bne.n	8006464 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2204      	movs	r2, #4
 800644a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800644e:	88fa      	ldrh	r2, [r7, #6]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f8e9 	bl	8006632 <HAL_SPI_TransmitReceive>
 8006460:	4603      	mov	r3, r0
 8006462:	e0e2      	b.n	800662a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_SPI_Receive+0x52>
 800646e:	2302      	movs	r3, #2
 8006470:	e0db      	b.n	800662a <HAL_SPI_Receive+0x20a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800647a:	f7fd fd67 	bl	8003f4c <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d002      	beq.n	8006492 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800648c:	2302      	movs	r3, #2
 800648e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006490:	e0c2      	b.n	8006618 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_SPI_Receive+0x7e>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064a2:	e0b9      	b.n	8006618 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ea:	d107      	bne.n	80064fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d007      	beq.n	800651a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006518:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d162      	bne.n	80065e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006522:	e02e      	b.n	8006582 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b01      	cmp	r3, #1
 8006530:	d115      	bne.n	800655e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f103 020c 	add.w	r2, r3, #12
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800655c:	e011      	b.n	8006582 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655e:	f7fd fcf5 	bl	8003f4c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d803      	bhi.n	8006576 <HAL_SPI_Receive+0x156>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d102      	bne.n	800657c <HAL_SPI_Receive+0x15c>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006580:	e04a      	b.n	8006618 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1cb      	bne.n	8006524 <HAL_SPI_Receive+0x104>
 800658c:	e031      	b.n	80065f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d113      	bne.n	80065c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	b292      	uxth	r2, r2
 80065a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	1c9a      	adds	r2, r3, #2
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065c2:	e011      	b.n	80065e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c4:	f7fd fcc2 	bl	8003f4c <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d803      	bhi.n	80065dc <HAL_SPI_Receive+0x1bc>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d102      	bne.n	80065e2 <HAL_SPI_Receive+0x1c2>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065e6:	e017      	b.n	8006618 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1cd      	bne.n	800658e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fa27 	bl	8006a4a <SPI_EndRxTransaction>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
 8006614:	e000      	b.n	8006618 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006628:	7dfb      	ldrb	r3, [r7, #23]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b08c      	sub	sp, #48	; 0x30
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
 800663e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006640:	2301      	movs	r3, #1
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x26>
 8006654:	2302      	movs	r3, #2
 8006656:	e18a      	b.n	800696e <HAL_SPI_TransmitReceive+0x33c>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006660:	f7fd fc74 	bl	8003f4c <HAL_GetTick>
 8006664:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800666c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006676:	887b      	ldrh	r3, [r7, #2]
 8006678:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800667a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800667e:	2b01      	cmp	r3, #1
 8006680:	d00f      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x70>
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006688:	d107      	bne.n	800669a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <HAL_SPI_TransmitReceive+0x68>
 8006692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800669a:	2302      	movs	r3, #2
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066a0:	e15b      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x82>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x82>
 80066ae:	887b      	ldrh	r3, [r7, #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066ba:	e14e      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d003      	beq.n	80066d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2205      	movs	r2, #5
 80066cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	887a      	ldrh	r2, [r7, #2]
 80066e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d007      	beq.n	8006724 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672c:	d178      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_SPI_TransmitReceive+0x10a>
 8006736:	8b7b      	ldrh	r3, [r7, #26]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d166      	bne.n	800680a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	1c9a      	adds	r2, r3, #2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006760:	e053      	b.n	800680a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d11b      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x176>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d016      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x176>
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d113      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d119      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1b8>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d014      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	b292      	uxth	r2, r2
 80067cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e6:	2301      	movs	r3, #1
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ea:	f7fd fbaf 	bl	8003f4c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d807      	bhi.n	800680a <HAL_SPI_TransmitReceive+0x1d8>
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d003      	beq.n	800680a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006808:	e0a7      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1a6      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x130>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1a1      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x130>
 800681e:	e07c      	b.n	800691a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_SPI_TransmitReceive+0x1fc>
 8006828:	8b7b      	ldrh	r3, [r7, #26]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d16b      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	7812      	ldrb	r2, [r2, #0]
 800683a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006854:	e057      	b.n	8006906 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d11c      	bne.n	800689e <HAL_SPI_TransmitReceive+0x26c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d017      	beq.n	800689e <HAL_SPI_TransmitReceive+0x26c>
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d114      	bne.n	800689e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	7812      	ldrb	r2, [r2, #0]
 8006880:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d119      	bne.n	80068e0 <HAL_SPI_TransmitReceive+0x2ae>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d014      	beq.n	80068e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068dc:	2301      	movs	r3, #1
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068e0:	f7fd fb34 	bl	8003f4c <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d803      	bhi.n	80068f8 <HAL_SPI_TransmitReceive+0x2c6>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_TransmitReceive+0x2cc>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006904:	e029      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1a2      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x224>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d19d      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f8f8 	bl	8006b14 <SPI_EndRxTxTransaction>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d006      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006936:	e010      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e000      	b.n	800695a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006958:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800696a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800696e:	4618      	mov	r0, r3
 8006970:	3730      	adds	r7, #48	; 0x30
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006986:	e04c      	b.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d048      	beq.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006990:	f7fd fadc 	bl	8003f4c <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d902      	bls.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d13d      	bne.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069be:	d111      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c8:	d004      	beq.n	80069d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d2:	d107      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ec:	d10f      	bne.n	8006a0e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e00f      	b.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d1a3      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af02      	add	r7, sp, #8
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5e:	d111      	bne.n	8006a84 <SPI_EndRxTransaction+0x3a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d004      	beq.n	8006a74 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d107      	bne.n	8006a84 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8c:	d12a      	bne.n	8006ae4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a96:	d012      	beq.n	8006abe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2180      	movs	r1, #128	; 0x80
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff ff67 	bl	8006976 <SPI_WaitFlagStateUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d02d      	beq.n	8006b0a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	f043 0220 	orr.w	r2, r3, #32
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e026      	b.n	8006b0c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ff54 	bl	8006976 <SPI_WaitFlagStateUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01a      	beq.n	8006b0a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e013      	b.n	8006b0c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2101      	movs	r1, #1
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff41 	bl	8006976 <SPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e000      	b.n	8006b0c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <SPI_EndRxTxTransaction+0x7c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <SPI_EndRxTxTransaction+0x80>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	0d5b      	lsrs	r3, r3, #21
 8006b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3e:	d112      	bne.n	8006b66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff ff13 	bl	8006976 <SPI_WaitFlagStateUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00f      	b.n	8006b86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d0f2      	beq.n	8006b66 <SPI_EndRxTxTransaction+0x52>
 8006b80:	e000      	b.n	8006b84 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b82:	bf00      	nop
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000000 	.word	0x20000000
 8006b94:	165e9f81 	.word	0x165e9f81

08006b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e01d      	b.n	8006be6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fc fa84 	bl	80030cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fc22 	bl	8007420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	d007      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10f      	bne.n	8006c7e <HAL_TIM_Base_Stop_IT+0x48>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a1a      	ldr	r2, [r3, #32]
 8006c64:	f240 4344 	movw	r3, #1092	; 0x444
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <HAL_TIM_Base_Stop_IT+0x48>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e01d      	b.n	8006cda <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fc f9e8 	bl	8003088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 fba8 	bl	8007420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fde2 	bl	80078c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_TIM_PWM_Start+0x74>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_PWM_Start+0x2c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a14      	ldr	r2, [pc, #80]	; (8006d5c <HAL_TIM_PWM_Start+0x78>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIM_PWM_Start+0x30>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_TIM_PWM_Start+0x32>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b06      	cmp	r3, #6
 8006d3a:	d007      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400

08006d60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fda4 	bl	80078c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a22      	ldr	r2, [pc, #136]	; (8006e08 <HAL_TIM_PWM_Stop+0xa8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_TIM_PWM_Stop+0x2c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <HAL_TIM_PWM_Stop+0xac>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_PWM_Stop+0x30>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_TIM_PWM_Stop+0x32>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <HAL_TIM_PWM_Stop+0x66>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	f240 4344 	movw	r3, #1092	; 0x444
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d107      	bne.n	8006dc6 <HAL_TIM_PWM_Stop+0x66>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6a1a      	ldr	r2, [r3, #32]
 8006dcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <HAL_TIM_PWM_Stop+0x96>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a1a      	ldr	r2, [r3, #32]
 8006ddc:	f240 4344 	movw	r3, #1092	; 0x444
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d107      	bne.n	8006df6 <HAL_TIM_PWM_Stop+0x96>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40010400 	.word	0x40010400

08006e10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e083      	b.n	8006f2c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fc f897 	bl	8002f6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e54:	f023 0307 	bic.w	r3, r3, #7
 8006e58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 fadb 	bl	8007420 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006eb0:	f023 030c 	bic.w	r3, r3, #12
 8006eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	011a      	lsls	r2, r3, #4
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	031b      	lsls	r3, r3, #12
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	4313      	orrs	r3, r2
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_TIM_Encoder_Start+0x18>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d008      	beq.n	8006f5c <HAL_TIM_Encoder_Start+0x28>
 8006f4a:	e00f      	b.n	8006f6c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fcb3 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006f5a:	e016      	b.n	8006f8a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2201      	movs	r2, #1
 8006f62:	2104      	movs	r1, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fcab 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006f6a:	e00e      	b.n	8006f8a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2201      	movs	r2, #1
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fca3 	bl	80078c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	2104      	movs	r1, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fc9c 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006f88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_TIM_Encoder_Stop+0x18>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d008      	beq.n	8006fcc <HAL_TIM_Encoder_Stop+0x28>
 8006fba:	e00f      	b.n	8006fdc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fc7b 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006fca:	e016      	b.n	8006ffa <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fc73 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006fda:	e00e      	b.n	8006ffa <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fc6b 	bl	80078c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fc64 	bl	80078c0 <TIM_CCxChannelCmd>
      break;
 8006ff8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	f241 1311 	movw	r3, #4369	; 0x1111
 8007004:	4013      	ands	r3, r2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <HAL_TIM_Encoder_Stop+0x86>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	f240 4344 	movw	r3, #1092	; 0x444
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d107      	bne.n	800702a <HAL_TIM_Encoder_Stop+0x86>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b02      	cmp	r3, #2
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0202 	mvn.w	r2, #2
 8007060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9b4 	bl	80073e4 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9a6 	bl	80073d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9b7 	bl	80073f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b04      	cmp	r3, #4
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0204 	mvn.w	r2, #4
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f98a 	bl	80073e4 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f97c 	bl	80073d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f98d 	bl	80073f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0208 	mvn.w	r2, #8
 8007108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2204      	movs	r2, #4
 800710e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f960 	bl	80073e4 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f952 	bl	80073d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f963 	bl	80073f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b10      	cmp	r3, #16
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b10      	cmp	r3, #16
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0210 	mvn.w	r2, #16
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f936 	bl	80073e4 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f928 	bl	80073d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f939 	bl	80073f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d10e      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0201 	mvn.w	r2, #1
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fa fc22 	bl	80019fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d0:	2b80      	cmp	r3, #128	; 0x80
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc1a 	bl	8007a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8fe 	bl	800740c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b20      	cmp	r3, #32
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b20      	cmp	r3, #32
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0220 	mvn.w	r2, #32
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fbe4 	bl	8007a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800725a:	2302      	movs	r3, #2
 800725c:	e0b4      	b.n	80073c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2202      	movs	r2, #2
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	f200 809f 	bhi.w	80073b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080073b5 	.word	0x080073b5
 8007284:	080073b5 	.word	0x080073b5
 8007288:	080073b5 	.word	0x080073b5
 800728c:	080072f1 	.word	0x080072f1
 8007290:	080073b5 	.word	0x080073b5
 8007294:	080073b5 	.word	0x080073b5
 8007298:	080073b5 	.word	0x080073b5
 800729c:	08007333 	.word	0x08007333
 80072a0:	080073b5 	.word	0x080073b5
 80072a4:	080073b5 	.word	0x080073b5
 80072a8:	080073b5 	.word	0x080073b5
 80072ac:	08007373 	.word	0x08007373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f952 	bl	8007560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	619a      	str	r2, [r3, #24]
      break;
 80072ee:	e062      	b.n	80073b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f9a2 	bl	8007640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6999      	ldr	r1, [r3, #24]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	619a      	str	r2, [r3, #24]
      break;
 8007330:	e041      	b.n	80073b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f9f7 	bl	800772c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0208 	orr.w	r2, r2, #8
 800734c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0204 	bic.w	r2, r2, #4
 800735c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69d9      	ldr	r1, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	61da      	str	r2, [r3, #28]
      break;
 8007370:	e021      	b.n	80073b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fa4b 	bl	8007814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69d9      	ldr	r1, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	021a      	lsls	r2, r3, #8
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	61da      	str	r2, [r3, #28]
      break;
 80073b2:	e000      	b.n	80073b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80073b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a40      	ldr	r2, [pc, #256]	; (8007534 <TIM_Base_SetConfig+0x114>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d013      	beq.n	8007460 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743e:	d00f      	beq.n	8007460 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a3d      	ldr	r2, [pc, #244]	; (8007538 <TIM_Base_SetConfig+0x118>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00b      	beq.n	8007460 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3c      	ldr	r2, [pc, #240]	; (800753c <TIM_Base_SetConfig+0x11c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3b      	ldr	r2, [pc, #236]	; (8007540 <TIM_Base_SetConfig+0x120>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a3a      	ldr	r2, [pc, #232]	; (8007544 <TIM_Base_SetConfig+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a2f      	ldr	r2, [pc, #188]	; (8007534 <TIM_Base_SetConfig+0x114>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d02b      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d027      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2c      	ldr	r2, [pc, #176]	; (8007538 <TIM_Base_SetConfig+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d023      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2b      	ldr	r2, [pc, #172]	; (800753c <TIM_Base_SetConfig+0x11c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01f      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <TIM_Base_SetConfig+0x120>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01b      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a29      	ldr	r2, [pc, #164]	; (8007544 <TIM_Base_SetConfig+0x124>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d017      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a28      	ldr	r2, [pc, #160]	; (8007548 <TIM_Base_SetConfig+0x128>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a27      	ldr	r2, [pc, #156]	; (800754c <TIM_Base_SetConfig+0x12c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00f      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a26      	ldr	r2, [pc, #152]	; (8007550 <TIM_Base_SetConfig+0x130>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a25      	ldr	r2, [pc, #148]	; (8007554 <TIM_Base_SetConfig+0x134>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a24      	ldr	r2, [pc, #144]	; (8007558 <TIM_Base_SetConfig+0x138>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a23      	ldr	r2, [pc, #140]	; (800755c <TIM_Base_SetConfig+0x13c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a0a      	ldr	r2, [pc, #40]	; (8007534 <TIM_Base_SetConfig+0x114>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_Base_SetConfig+0xf8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a0c      	ldr	r2, [pc, #48]	; (8007544 <TIM_Base_SetConfig+0x124>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d103      	bne.n	8007520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	615a      	str	r2, [r3, #20]
}
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40010000 	.word	0x40010000
 8007538:	40000400 	.word	0x40000400
 800753c:	40000800 	.word	0x40000800
 8007540:	40000c00 	.word	0x40000c00
 8007544:	40010400 	.word	0x40010400
 8007548:	40014000 	.word	0x40014000
 800754c:	40014400 	.word	0x40014400
 8007550:	40014800 	.word	0x40014800
 8007554:	40001800 	.word	0x40001800
 8007558:	40001c00 	.word	0x40001c00
 800755c:	40002000 	.word	0x40002000

08007560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f023 0302 	bic.w	r3, r3, #2
 80075a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a20      	ldr	r2, [pc, #128]	; (8007638 <TIM_OC1_SetConfig+0xd8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d003      	beq.n	80075c4 <TIM_OC1_SetConfig+0x64>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1f      	ldr	r2, [pc, #124]	; (800763c <TIM_OC1_SetConfig+0xdc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10c      	bne.n	80075de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0308 	bic.w	r3, r3, #8
 80075ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f023 0304 	bic.w	r3, r3, #4
 80075dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <TIM_OC1_SetConfig+0xd8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_OC1_SetConfig+0x8e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a14      	ldr	r2, [pc, #80]	; (800763c <TIM_OC1_SetConfig+0xdc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d111      	bne.n	8007612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	621a      	str	r2, [r3, #32]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	40010000 	.word	0x40010000
 800763c:	40010400 	.word	0x40010400

08007640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0210 	bic.w	r2, r3, #16
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0320 	bic.w	r3, r3, #32
 800768a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a22      	ldr	r2, [pc, #136]	; (8007724 <TIM_OC2_SetConfig+0xe4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_OC2_SetConfig+0x68>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a21      	ldr	r2, [pc, #132]	; (8007728 <TIM_OC2_SetConfig+0xe8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10d      	bne.n	80076c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a17      	ldr	r2, [pc, #92]	; (8007724 <TIM_OC2_SetConfig+0xe4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC2_SetConfig+0x94>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a16      	ldr	r2, [pc, #88]	; (8007728 <TIM_OC2_SetConfig+0xe8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d113      	bne.n	80076fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40010000 	.word	0x40010000
 8007728:	40010400 	.word	0x40010400

0800772c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <TIM_OC3_SetConfig+0xe0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_OC3_SetConfig+0x66>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <TIM_OC3_SetConfig+0xe4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d10d      	bne.n	80077ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a16      	ldr	r2, [pc, #88]	; (800780c <TIM_OC3_SetConfig+0xe0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC3_SetConfig+0x92>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a15      	ldr	r2, [pc, #84]	; (8007810 <TIM_OC3_SetConfig+0xe4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d113      	bne.n	80077e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40010000 	.word	0x40010000
 8007810:	40010400 	.word	0x40010400

08007814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800785e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	031b      	lsls	r3, r3, #12
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <TIM_OC4_SetConfig+0xa4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_OC4_SetConfig+0x68>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a11      	ldr	r2, [pc, #68]	; (80078bc <TIM_OC4_SetConfig+0xa8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d109      	bne.n	8007890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	019b      	lsls	r3, r3, #6
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40010400 	.word	0x40010400

080078c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2201      	movs	r2, #1
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a1a      	ldr	r2, [r3, #32]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	fa01 f303 	lsl.w	r3, r1, r3
 80078f8:	431a      	orrs	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	621a      	str	r2, [r3, #32]
}
 80078fe:	bf00      	nop
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007920:	2302      	movs	r3, #2
 8007922:	e05a      	b.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a21      	ldr	r2, [pc, #132]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d022      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d01d      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a17      	ldr	r2, [pc, #92]	; (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10c      	bne.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800
 80079f4:	40000c00 	.word	0x40000c00
 80079f8:	40010400 	.word	0x40010400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40001800 	.word	0x40001800

08007a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e03f      	b.n	8007abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fb fbee 	bl	8003234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2224      	movs	r2, #36	; 0x24
 8007a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f90b 	bl	8007c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b088      	sub	sp, #32
 8007aca:	af02      	add	r7, sp, #8
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	f040 8083 	bne.w	8007bee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_UART_Transmit+0x2e>
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e07b      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Transmit+0x40>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e074      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2221      	movs	r2, #33	; 0x21
 8007b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007b1c:	f7fc fa16 	bl	8003f4c <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007b36:	e042      	b.n	8007bbe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4e:	d122      	bne.n	8007b96 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2200      	movs	r2, #0
 8007b58:	2180      	movs	r1, #128	; 0x80
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f84c 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e042      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3302      	adds	r3, #2
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	e017      	b.n	8007bbe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	e013      	b.n	8007bbe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2180      	movs	r1, #128	; 0x80
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f829 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e01f      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	60ba      	str	r2, [r7, #8]
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1b7      	bne.n	8007b38 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f810 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e006      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	e02c      	b.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d028      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c18:	f7fc f998 	bl	8003f4c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d21d      	bcs.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e00f      	b.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d0c3      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	b0bd      	sub	sp, #244	; 0xf4
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca8:	68d9      	ldr	r1, [r3, #12]
 8007caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	ea40 0301 	orr.w	r3, r0, r1
 8007cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ce4:	f021 010c 	bic.w	r1, r1, #12
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	6999      	ldr	r1, [r3, #24]
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	ea40 0301 	orr.w	r3, r0, r1
 8007d12:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1e:	f040 81a5 	bne.w	800806c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4bcd      	ldr	r3, [pc, #820]	; (8008060 <UART_SetConfig+0x3d4>)
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d006      	beq.n	8007d3c <UART_SetConfig+0xb0>
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4bcb      	ldr	r3, [pc, #812]	; (8008064 <UART_SetConfig+0x3d8>)
 8007d36:	429a      	cmp	r2, r3
 8007d38:	f040 80cb 	bne.w	8007ed2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d3c:	f7fe f9c4 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8007d40:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d48:	461c      	mov	r4, r3
 8007d4a:	f04f 0500 	mov.w	r5, #0
 8007d4e:	4622      	mov	r2, r4
 8007d50:	462b      	mov	r3, r5
 8007d52:	1891      	adds	r1, r2, r2
 8007d54:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007d58:	415b      	adcs	r3, r3
 8007d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007d62:	1912      	adds	r2, r2, r4
 8007d64:	eb45 0303 	adc.w	r3, r5, r3
 8007d68:	f04f 0000 	mov.w	r0, #0
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	00d9      	lsls	r1, r3, #3
 8007d72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d76:	00d0      	lsls	r0, r2, #3
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	1911      	adds	r1, r2, r4
 8007d7e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007d82:	416b      	adcs	r3, r5
 8007d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007d9a:	415b      	adcs	r3, r3
 8007d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007da0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007da4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007da8:	f7f8 ff6e 	bl	8000c88 <__aeabi_uldivmod>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4bad      	ldr	r3, [pc, #692]	; (8008068 <UART_SetConfig+0x3dc>)
 8007db2:	fba3 2302 	umull	r2, r3, r3, r2
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	011e      	lsls	r6, r3, #4
 8007dba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dbe:	461c      	mov	r4, r3
 8007dc0:	f04f 0500 	mov.w	r5, #0
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	1891      	adds	r1, r2, r2
 8007dca:	67b9      	str	r1, [r7, #120]	; 0x78
 8007dcc:	415b      	adcs	r3, r3
 8007dce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007dd4:	1912      	adds	r2, r2, r4
 8007dd6:	eb45 0303 	adc.w	r3, r5, r3
 8007dda:	f04f 0000 	mov.w	r0, #0
 8007dde:	f04f 0100 	mov.w	r1, #0
 8007de2:	00d9      	lsls	r1, r3, #3
 8007de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007de8:	00d0      	lsls	r0, r2, #3
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	1911      	adds	r1, r2, r4
 8007df0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007df4:	416b      	adcs	r3, r5
 8007df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	1891      	adds	r1, r2, r2
 8007e08:	6739      	str	r1, [r7, #112]	; 0x70
 8007e0a:	415b      	adcs	r3, r3
 8007e0c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007e12:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007e16:	f7f8 ff37 	bl	8000c88 <__aeabi_uldivmod>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4b92      	ldr	r3, [pc, #584]	; (8008068 <UART_SetConfig+0x3dc>)
 8007e20:	fba3 1302 	umull	r1, r3, r3, r2
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	2164      	movs	r1, #100	; 0x64
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	3332      	adds	r3, #50	; 0x32
 8007e32:	4a8d      	ldr	r2, [pc, #564]	; (8008068 <UART_SetConfig+0x3dc>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e40:	441e      	add	r6, r3
 8007e42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e46:	4618      	mov	r0, r3
 8007e48:	f04f 0100 	mov.w	r1, #0
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	1894      	adds	r4, r2, r2
 8007e52:	66bc      	str	r4, [r7, #104]	; 0x68
 8007e54:	415b      	adcs	r3, r3
 8007e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007e5c:	1812      	adds	r2, r2, r0
 8007e5e:	eb41 0303 	adc.w	r3, r1, r3
 8007e62:	f04f 0400 	mov.w	r4, #0
 8007e66:	f04f 0500 	mov.w	r5, #0
 8007e6a:	00dd      	lsls	r5, r3, #3
 8007e6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e70:	00d4      	lsls	r4, r2, #3
 8007e72:	4622      	mov	r2, r4
 8007e74:	462b      	mov	r3, r5
 8007e76:	1814      	adds	r4, r2, r0
 8007e78:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007e7c:	414b      	adcs	r3, r1
 8007e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	1891      	adds	r1, r2, r2
 8007e90:	6639      	str	r1, [r7, #96]	; 0x60
 8007e92:	415b      	adcs	r3, r3
 8007e94:	667b      	str	r3, [r7, #100]	; 0x64
 8007e96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e9e:	f7f8 fef3 	bl	8000c88 <__aeabi_uldivmod>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4b70      	ldr	r3, [pc, #448]	; (8008068 <UART_SetConfig+0x3dc>)
 8007ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8007eac:	095b      	lsrs	r3, r3, #5
 8007eae:	2164      	movs	r1, #100	; 0x64
 8007eb0:	fb01 f303 	mul.w	r3, r1, r3
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	3332      	adds	r3, #50	; 0x32
 8007eba:	4a6b      	ldr	r2, [pc, #428]	; (8008068 <UART_SetConfig+0x3dc>)
 8007ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	f003 0207 	and.w	r2, r3, #7
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4432      	add	r2, r6
 8007ece:	609a      	str	r2, [r3, #8]
 8007ed0:	e26d      	b.n	80083ae <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ed2:	f7fe f8e5 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8007ed6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ede:	461c      	mov	r4, r3
 8007ee0:	f04f 0500 	mov.w	r5, #0
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	462b      	mov	r3, r5
 8007ee8:	1891      	adds	r1, r2, r2
 8007eea:	65b9      	str	r1, [r7, #88]	; 0x58
 8007eec:	415b      	adcs	r3, r3
 8007eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ef4:	1912      	adds	r2, r2, r4
 8007ef6:	eb45 0303 	adc.w	r3, r5, r3
 8007efa:	f04f 0000 	mov.w	r0, #0
 8007efe:	f04f 0100 	mov.w	r1, #0
 8007f02:	00d9      	lsls	r1, r3, #3
 8007f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f08:	00d0      	lsls	r0, r2, #3
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	1911      	adds	r1, r2, r4
 8007f10:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007f14:	416b      	adcs	r3, r5
 8007f16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	461a      	mov	r2, r3
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	1891      	adds	r1, r2, r2
 8007f28:	6539      	str	r1, [r7, #80]	; 0x50
 8007f2a:	415b      	adcs	r3, r3
 8007f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f36:	f7f8 fea7 	bl	8000c88 <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4b4a      	ldr	r3, [pc, #296]	; (8008068 <UART_SetConfig+0x3dc>)
 8007f40:	fba3 2302 	umull	r2, r3, r3, r2
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	011e      	lsls	r6, r3, #4
 8007f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f4c:	461c      	mov	r4, r3
 8007f4e:	f04f 0500 	mov.w	r5, #0
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	1891      	adds	r1, r2, r2
 8007f58:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f5a:	415b      	adcs	r3, r3
 8007f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f62:	1912      	adds	r2, r2, r4
 8007f64:	eb45 0303 	adc.w	r3, r5, r3
 8007f68:	f04f 0000 	mov.w	r0, #0
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	00d9      	lsls	r1, r3, #3
 8007f72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f76:	00d0      	lsls	r0, r2, #3
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	1911      	adds	r1, r2, r4
 8007f7e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007f82:	416b      	adcs	r3, r5
 8007f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	1891      	adds	r1, r2, r2
 8007f96:	6439      	str	r1, [r7, #64]	; 0x40
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fa0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007fa4:	f7f8 fe70 	bl	8000c88 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b2e      	ldr	r3, [pc, #184]	; (8008068 <UART_SetConfig+0x3dc>)
 8007fae:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	2164      	movs	r1, #100	; 0x64
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	3332      	adds	r3, #50	; 0x32
 8007fc0:	4a29      	ldr	r2, [pc, #164]	; (8008068 <UART_SetConfig+0x3dc>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	095b      	lsrs	r3, r3, #5
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fce:	441e      	add	r6, r3
 8007fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f04f 0100 	mov.w	r1, #0
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	1894      	adds	r4, r2, r2
 8007fe0:	63bc      	str	r4, [r7, #56]	; 0x38
 8007fe2:	415b      	adcs	r3, r3
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fea:	1812      	adds	r2, r2, r0
 8007fec:	eb41 0303 	adc.w	r3, r1, r3
 8007ff0:	f04f 0400 	mov.w	r4, #0
 8007ff4:	f04f 0500 	mov.w	r5, #0
 8007ff8:	00dd      	lsls	r5, r3, #3
 8007ffa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ffe:	00d4      	lsls	r4, r2, #3
 8008000:	4622      	mov	r2, r4
 8008002:	462b      	mov	r3, r5
 8008004:	1814      	adds	r4, r2, r0
 8008006:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800800a:	414b      	adcs	r3, r1
 800800c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	461a      	mov	r2, r3
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	1891      	adds	r1, r2, r2
 800801e:	6339      	str	r1, [r7, #48]	; 0x30
 8008020:	415b      	adcs	r3, r3
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
 8008024:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008028:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800802c:	f7f8 fe2c 	bl	8000c88 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <UART_SetConfig+0x3dc>)
 8008036:	fba3 1302 	umull	r1, r3, r3, r2
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	2164      	movs	r1, #100	; 0x64
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	3332      	adds	r3, #50	; 0x32
 8008048:	4a07      	ldr	r2, [pc, #28]	; (8008068 <UART_SetConfig+0x3dc>)
 800804a:	fba2 2303 	umull	r2, r3, r2, r3
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	f003 0207 	and.w	r2, r3, #7
 8008054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4432      	add	r2, r6
 800805c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800805e:	e1a6      	b.n	80083ae <UART_SetConfig+0x722>
 8008060:	40011000 	.word	0x40011000
 8008064:	40011400 	.word	0x40011400
 8008068:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4bd1      	ldr	r3, [pc, #836]	; (80083b8 <UART_SetConfig+0x72c>)
 8008074:	429a      	cmp	r2, r3
 8008076:	d006      	beq.n	8008086 <UART_SetConfig+0x3fa>
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4bcf      	ldr	r3, [pc, #828]	; (80083bc <UART_SetConfig+0x730>)
 8008080:	429a      	cmp	r2, r3
 8008082:	f040 80ca 	bne.w	800821a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008086:	f7fe f81f 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 800808a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800808e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008092:	461c      	mov	r4, r3
 8008094:	f04f 0500 	mov.w	r5, #0
 8008098:	4622      	mov	r2, r4
 800809a:	462b      	mov	r3, r5
 800809c:	1891      	adds	r1, r2, r2
 800809e:	62b9      	str	r1, [r7, #40]	; 0x28
 80080a0:	415b      	adcs	r3, r3
 80080a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080a8:	1912      	adds	r2, r2, r4
 80080aa:	eb45 0303 	adc.w	r3, r5, r3
 80080ae:	f04f 0000 	mov.w	r0, #0
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	00d9      	lsls	r1, r3, #3
 80080b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080bc:	00d0      	lsls	r0, r2, #3
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	eb12 0a04 	adds.w	sl, r2, r4
 80080c6:	eb43 0b05 	adc.w	fp, r3, r5
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	008b      	lsls	r3, r1, #2
 80080e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080e4:	0082      	lsls	r2, r0, #2
 80080e6:	4650      	mov	r0, sl
 80080e8:	4659      	mov	r1, fp
 80080ea:	f7f8 fdcd 	bl	8000c88 <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4bb3      	ldr	r3, [pc, #716]	; (80083c0 <UART_SetConfig+0x734>)
 80080f4:	fba3 2302 	umull	r2, r3, r3, r2
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	011e      	lsls	r6, r3, #4
 80080fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008100:	4618      	mov	r0, r3
 8008102:	f04f 0100 	mov.w	r1, #0
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	1894      	adds	r4, r2, r2
 800810c:	623c      	str	r4, [r7, #32]
 800810e:	415b      	adcs	r3, r3
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008116:	1812      	adds	r2, r2, r0
 8008118:	eb41 0303 	adc.w	r3, r1, r3
 800811c:	f04f 0400 	mov.w	r4, #0
 8008120:	f04f 0500 	mov.w	r5, #0
 8008124:	00dd      	lsls	r5, r3, #3
 8008126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800812a:	00d4      	lsls	r4, r2, #3
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	1814      	adds	r4, r2, r0
 8008132:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008136:	414b      	adcs	r3, r1
 8008138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4618      	mov	r0, r3
 8008144:	f04f 0100 	mov.w	r1, #0
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	008b      	lsls	r3, r1, #2
 8008152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008156:	0082      	lsls	r2, r0, #2
 8008158:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800815c:	f7f8 fd94 	bl	8000c88 <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4b96      	ldr	r3, [pc, #600]	; (80083c0 <UART_SetConfig+0x734>)
 8008166:	fba3 1302 	umull	r1, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	2164      	movs	r1, #100	; 0x64
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	3332      	adds	r3, #50	; 0x32
 8008178:	4a91      	ldr	r2, [pc, #580]	; (80083c0 <UART_SetConfig+0x734>)
 800817a:	fba2 2303 	umull	r2, r3, r2, r3
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008184:	441e      	add	r6, r3
 8008186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800818a:	4618      	mov	r0, r3
 800818c:	f04f 0100 	mov.w	r1, #0
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	1894      	adds	r4, r2, r2
 8008196:	61bc      	str	r4, [r7, #24]
 8008198:	415b      	adcs	r3, r3
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081a0:	1812      	adds	r2, r2, r0
 80081a2:	eb41 0303 	adc.w	r3, r1, r3
 80081a6:	f04f 0400 	mov.w	r4, #0
 80081aa:	f04f 0500 	mov.w	r5, #0
 80081ae:	00dd      	lsls	r5, r3, #3
 80081b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081b4:	00d4      	lsls	r4, r2, #3
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	1814      	adds	r4, r2, r0
 80081bc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80081c0:	414b      	adcs	r3, r1
 80081c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80081c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f04f 0100 	mov.w	r1, #0
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	008b      	lsls	r3, r1, #2
 80081dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081e0:	0082      	lsls	r2, r0, #2
 80081e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80081e6:	f7f8 fd4f 	bl	8000c88 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4b74      	ldr	r3, [pc, #464]	; (80083c0 <UART_SetConfig+0x734>)
 80081f0:	fba3 1302 	umull	r1, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	2164      	movs	r1, #100	; 0x64
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	3332      	adds	r3, #50	; 0x32
 8008202:	4a6f      	ldr	r2, [pc, #444]	; (80083c0 <UART_SetConfig+0x734>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4432      	add	r2, r6
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	e0c9      	b.n	80083ae <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800821a:	f7fd ff41 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 800821e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008226:	461c      	mov	r4, r3
 8008228:	f04f 0500 	mov.w	r5, #0
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	1891      	adds	r1, r2, r2
 8008232:	6139      	str	r1, [r7, #16]
 8008234:	415b      	adcs	r3, r3
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800823c:	1912      	adds	r2, r2, r4
 800823e:	eb45 0303 	adc.w	r3, r5, r3
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f04f 0100 	mov.w	r1, #0
 800824a:	00d9      	lsls	r1, r3, #3
 800824c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008250:	00d0      	lsls	r0, r2, #3
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	eb12 0804 	adds.w	r8, r2, r4
 800825a:	eb43 0905 	adc.w	r9, r3, r5
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	f04f 0100 	mov.w	r1, #0
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	008b      	lsls	r3, r1, #2
 8008274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008278:	0082      	lsls	r2, r0, #2
 800827a:	4640      	mov	r0, r8
 800827c:	4649      	mov	r1, r9
 800827e:	f7f8 fd03 	bl	8000c88 <__aeabi_uldivmod>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4b4e      	ldr	r3, [pc, #312]	; (80083c0 <UART_SetConfig+0x734>)
 8008288:	fba3 2302 	umull	r2, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	011e      	lsls	r6, r3, #4
 8008290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008294:	4618      	mov	r0, r3
 8008296:	f04f 0100 	mov.w	r1, #0
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	1894      	adds	r4, r2, r2
 80082a0:	60bc      	str	r4, [r7, #8]
 80082a2:	415b      	adcs	r3, r3
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082aa:	1812      	adds	r2, r2, r0
 80082ac:	eb41 0303 	adc.w	r3, r1, r3
 80082b0:	f04f 0400 	mov.w	r4, #0
 80082b4:	f04f 0500 	mov.w	r5, #0
 80082b8:	00dd      	lsls	r5, r3, #3
 80082ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082be:	00d4      	lsls	r4, r2, #3
 80082c0:	4622      	mov	r2, r4
 80082c2:	462b      	mov	r3, r5
 80082c4:	1814      	adds	r4, r2, r0
 80082c6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80082ca:	414b      	adcs	r3, r1
 80082cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	008b      	lsls	r3, r1, #2
 80082e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082ea:	0082      	lsls	r2, r0, #2
 80082ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082f0:	f7f8 fcca 	bl	8000c88 <__aeabi_uldivmod>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4b31      	ldr	r3, [pc, #196]	; (80083c0 <UART_SetConfig+0x734>)
 80082fa:	fba3 1302 	umull	r1, r3, r3, r2
 80082fe:	095b      	lsrs	r3, r3, #5
 8008300:	2164      	movs	r1, #100	; 0x64
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	3332      	adds	r3, #50	; 0x32
 800830c:	4a2c      	ldr	r2, [pc, #176]	; (80083c0 <UART_SetConfig+0x734>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008318:	441e      	add	r6, r3
 800831a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800831e:	4618      	mov	r0, r3
 8008320:	f04f 0100 	mov.w	r1, #0
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	1894      	adds	r4, r2, r2
 800832a:	603c      	str	r4, [r7, #0]
 800832c:	415b      	adcs	r3, r3
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008334:	1812      	adds	r2, r2, r0
 8008336:	eb41 0303 	adc.w	r3, r1, r3
 800833a:	f04f 0400 	mov.w	r4, #0
 800833e:	f04f 0500 	mov.w	r5, #0
 8008342:	00dd      	lsls	r5, r3, #3
 8008344:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008348:	00d4      	lsls	r4, r2, #3
 800834a:	4622      	mov	r2, r4
 800834c:	462b      	mov	r3, r5
 800834e:	1814      	adds	r4, r2, r0
 8008350:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008354:	414b      	adcs	r3, r1
 8008356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f04f 0100 	mov.w	r1, #0
 8008366:	f04f 0200 	mov.w	r2, #0
 800836a:	f04f 0300 	mov.w	r3, #0
 800836e:	008b      	lsls	r3, r1, #2
 8008370:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008374:	0082      	lsls	r2, r0, #2
 8008376:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800837a:	f7f8 fc85 	bl	8000c88 <__aeabi_uldivmod>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <UART_SetConfig+0x734>)
 8008384:	fba3 1302 	umull	r1, r3, r3, r2
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	2164      	movs	r1, #100	; 0x64
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	3332      	adds	r3, #50	; 0x32
 8008396:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <UART_SetConfig+0x734>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	f003 020f 	and.w	r2, r3, #15
 80083a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4432      	add	r2, r6
 80083aa:	609a      	str	r2, [r3, #8]
}
 80083ac:	e7ff      	b.n	80083ae <UART_SetConfig+0x722>
 80083ae:	bf00      	nop
 80083b0:	37f4      	adds	r7, #244	; 0xf4
 80083b2:	46bd      	mov	sp, r7
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40011400 	.word	0x40011400
 80083c0:	51eb851f 	.word	0x51eb851f

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	; (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	2000000c 	.word	0x2000000c

080083d0 <__libc_init_array>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4d0d      	ldr	r5, [pc, #52]	; (8008408 <__libc_init_array+0x38>)
 80083d4:	4c0d      	ldr	r4, [pc, #52]	; (800840c <__libc_init_array+0x3c>)
 80083d6:	1b64      	subs	r4, r4, r5
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	2600      	movs	r6, #0
 80083dc:	42a6      	cmp	r6, r4
 80083de:	d109      	bne.n	80083f4 <__libc_init_array+0x24>
 80083e0:	4d0b      	ldr	r5, [pc, #44]	; (8008410 <__libc_init_array+0x40>)
 80083e2:	4c0c      	ldr	r4, [pc, #48]	; (8008414 <__libc_init_array+0x44>)
 80083e4:	f004 fcd2 	bl	800cd8c <_init>
 80083e8:	1b64      	subs	r4, r4, r5
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	2600      	movs	r6, #0
 80083ee:	42a6      	cmp	r6, r4
 80083f0:	d105      	bne.n	80083fe <__libc_init_array+0x2e>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f8:	4798      	blx	r3
 80083fa:	3601      	adds	r6, #1
 80083fc:	e7ee      	b.n	80083dc <__libc_init_array+0xc>
 80083fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008402:	4798      	blx	r3
 8008404:	3601      	adds	r6, #1
 8008406:	e7f2      	b.n	80083ee <__libc_init_array+0x1e>
 8008408:	0800d404 	.word	0x0800d404
 800840c:	0800d404 	.word	0x0800d404
 8008410:	0800d404 	.word	0x0800d404
 8008414:	0800d408 	.word	0x0800d408

08008418 <memcpy>:
 8008418:	440a      	add	r2, r1
 800841a:	4291      	cmp	r1, r2
 800841c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008420:	d100      	bne.n	8008424 <memcpy+0xc>
 8008422:	4770      	bx	lr
 8008424:	b510      	push	{r4, lr}
 8008426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842e:	4291      	cmp	r1, r2
 8008430:	d1f9      	bne.n	8008426 <memcpy+0xe>
 8008432:	bd10      	pop	{r4, pc}

08008434 <memset>:
 8008434:	4402      	add	r2, r0
 8008436:	4603      	mov	r3, r0
 8008438:	4293      	cmp	r3, r2
 800843a:	d100      	bne.n	800843e <memset+0xa>
 800843c:	4770      	bx	lr
 800843e:	f803 1b01 	strb.w	r1, [r3], #1
 8008442:	e7f9      	b.n	8008438 <memset+0x4>

08008444 <__cvt>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	ec55 4b10 	vmov	r4, r5, d0
 800844c:	2d00      	cmp	r5, #0
 800844e:	460e      	mov	r6, r1
 8008450:	4619      	mov	r1, r3
 8008452:	462b      	mov	r3, r5
 8008454:	bfbb      	ittet	lt
 8008456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800845a:	461d      	movlt	r5, r3
 800845c:	2300      	movge	r3, #0
 800845e:	232d      	movlt	r3, #45	; 0x2d
 8008460:	700b      	strb	r3, [r1, #0]
 8008462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008464:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008468:	4691      	mov	r9, r2
 800846a:	f023 0820 	bic.w	r8, r3, #32
 800846e:	bfbc      	itt	lt
 8008470:	4622      	movlt	r2, r4
 8008472:	4614      	movlt	r4, r2
 8008474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008478:	d005      	beq.n	8008486 <__cvt+0x42>
 800847a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800847e:	d100      	bne.n	8008482 <__cvt+0x3e>
 8008480:	3601      	adds	r6, #1
 8008482:	2102      	movs	r1, #2
 8008484:	e000      	b.n	8008488 <__cvt+0x44>
 8008486:	2103      	movs	r1, #3
 8008488:	ab03      	add	r3, sp, #12
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	ab02      	add	r3, sp, #8
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	ec45 4b10 	vmov	d0, r4, r5
 8008494:	4653      	mov	r3, sl
 8008496:	4632      	mov	r2, r6
 8008498:	f001 ff02 	bl	800a2a0 <_dtoa_r>
 800849c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084a0:	4607      	mov	r7, r0
 80084a2:	d102      	bne.n	80084aa <__cvt+0x66>
 80084a4:	f019 0f01 	tst.w	r9, #1
 80084a8:	d022      	beq.n	80084f0 <__cvt+0xac>
 80084aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ae:	eb07 0906 	add.w	r9, r7, r6
 80084b2:	d110      	bne.n	80084d6 <__cvt+0x92>
 80084b4:	783b      	ldrb	r3, [r7, #0]
 80084b6:	2b30      	cmp	r3, #48	; 0x30
 80084b8:	d10a      	bne.n	80084d0 <__cvt+0x8c>
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f8 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c6:	b918      	cbnz	r0, 80084d0 <__cvt+0x8c>
 80084c8:	f1c6 0601 	rsb	r6, r6, #1
 80084cc:	f8ca 6000 	str.w	r6, [sl]
 80084d0:	f8da 3000 	ldr.w	r3, [sl]
 80084d4:	4499      	add	r9, r3
 80084d6:	2200      	movs	r2, #0
 80084d8:	2300      	movs	r3, #0
 80084da:	4620      	mov	r0, r4
 80084dc:	4629      	mov	r1, r5
 80084de:	f7f8 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e2:	b108      	cbz	r0, 80084e8 <__cvt+0xa4>
 80084e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80084e8:	2230      	movs	r2, #48	; 0x30
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	454b      	cmp	r3, r9
 80084ee:	d307      	bcc.n	8008500 <__cvt+0xbc>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f4:	1bdb      	subs	r3, r3, r7
 80084f6:	4638      	mov	r0, r7
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	b004      	add	sp, #16
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	1c59      	adds	r1, r3, #1
 8008502:	9103      	str	r1, [sp, #12]
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e7f0      	b.n	80084ea <__cvt+0xa6>

08008508 <__exponent>:
 8008508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800850a:	4603      	mov	r3, r0
 800850c:	2900      	cmp	r1, #0
 800850e:	bfb8      	it	lt
 8008510:	4249      	neglt	r1, r1
 8008512:	f803 2b02 	strb.w	r2, [r3], #2
 8008516:	bfb4      	ite	lt
 8008518:	222d      	movlt	r2, #45	; 0x2d
 800851a:	222b      	movge	r2, #43	; 0x2b
 800851c:	2909      	cmp	r1, #9
 800851e:	7042      	strb	r2, [r0, #1]
 8008520:	dd2a      	ble.n	8008578 <__exponent+0x70>
 8008522:	f10d 0407 	add.w	r4, sp, #7
 8008526:	46a4      	mov	ip, r4
 8008528:	270a      	movs	r7, #10
 800852a:	46a6      	mov	lr, r4
 800852c:	460a      	mov	r2, r1
 800852e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008532:	fb07 1516 	mls	r5, r7, r6, r1
 8008536:	3530      	adds	r5, #48	; 0x30
 8008538:	2a63      	cmp	r2, #99	; 0x63
 800853a:	f104 34ff 	add.w	r4, r4, #4294967295
 800853e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008542:	4631      	mov	r1, r6
 8008544:	dcf1      	bgt.n	800852a <__exponent+0x22>
 8008546:	3130      	adds	r1, #48	; 0x30
 8008548:	f1ae 0502 	sub.w	r5, lr, #2
 800854c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008550:	1c44      	adds	r4, r0, #1
 8008552:	4629      	mov	r1, r5
 8008554:	4561      	cmp	r1, ip
 8008556:	d30a      	bcc.n	800856e <__exponent+0x66>
 8008558:	f10d 0209 	add.w	r2, sp, #9
 800855c:	eba2 020e 	sub.w	r2, r2, lr
 8008560:	4565      	cmp	r5, ip
 8008562:	bf88      	it	hi
 8008564:	2200      	movhi	r2, #0
 8008566:	4413      	add	r3, r2
 8008568:	1a18      	subs	r0, r3, r0
 800856a:	b003      	add	sp, #12
 800856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800856e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008572:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008576:	e7ed      	b.n	8008554 <__exponent+0x4c>
 8008578:	2330      	movs	r3, #48	; 0x30
 800857a:	3130      	adds	r1, #48	; 0x30
 800857c:	7083      	strb	r3, [r0, #2]
 800857e:	70c1      	strb	r1, [r0, #3]
 8008580:	1d03      	adds	r3, r0, #4
 8008582:	e7f1      	b.n	8008568 <__exponent+0x60>

08008584 <_printf_float>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	ed2d 8b02 	vpush	{d8}
 800858c:	b08d      	sub	sp, #52	; 0x34
 800858e:	460c      	mov	r4, r1
 8008590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008594:	4616      	mov	r6, r2
 8008596:	461f      	mov	r7, r3
 8008598:	4605      	mov	r5, r0
 800859a:	f003 f993 	bl	800b8c4 <_localeconv_r>
 800859e:	f8d0 a000 	ldr.w	sl, [r0]
 80085a2:	4650      	mov	r0, sl
 80085a4:	f7f7 fe14 	bl	80001d0 <strlen>
 80085a8:	2300      	movs	r3, #0
 80085aa:	930a      	str	r3, [sp, #40]	; 0x28
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	9305      	str	r3, [sp, #20]
 80085b0:	f8d8 3000 	ldr.w	r3, [r8]
 80085b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085b8:	3307      	adds	r3, #7
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	f103 0208 	add.w	r2, r3, #8
 80085c2:	f8c8 2000 	str.w	r2, [r8]
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80085dc:	ee08 0a10 	vmov	s16, r0
 80085e0:	4b9f      	ldr	r3, [pc, #636]	; (8008860 <_printf_float+0x2dc>)
 80085e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ea:	f7f8 fa9f 	bl	8000b2c <__aeabi_dcmpun>
 80085ee:	bb88      	cbnz	r0, 8008654 <_printf_float+0xd0>
 80085f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <_printf_float+0x2dc>)
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295
 80085fa:	f7f8 fa79 	bl	8000af0 <__aeabi_dcmple>
 80085fe:	bb48      	cbnz	r0, 8008654 <_printf_float+0xd0>
 8008600:	2200      	movs	r2, #0
 8008602:	2300      	movs	r3, #0
 8008604:	4640      	mov	r0, r8
 8008606:	4649      	mov	r1, r9
 8008608:	f7f8 fa68 	bl	8000adc <__aeabi_dcmplt>
 800860c:	b110      	cbz	r0, 8008614 <_printf_float+0x90>
 800860e:	232d      	movs	r3, #45	; 0x2d
 8008610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008614:	4b93      	ldr	r3, [pc, #588]	; (8008864 <_printf_float+0x2e0>)
 8008616:	4894      	ldr	r0, [pc, #592]	; (8008868 <_printf_float+0x2e4>)
 8008618:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800861c:	bf94      	ite	ls
 800861e:	4698      	movls	r8, r3
 8008620:	4680      	movhi	r8, r0
 8008622:	2303      	movs	r3, #3
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	9b05      	ldr	r3, [sp, #20]
 8008628:	f023 0204 	bic.w	r2, r3, #4
 800862c:	6022      	str	r2, [r4, #0]
 800862e:	f04f 0900 	mov.w	r9, #0
 8008632:	9700      	str	r7, [sp, #0]
 8008634:	4633      	mov	r3, r6
 8008636:	aa0b      	add	r2, sp, #44	; 0x2c
 8008638:	4621      	mov	r1, r4
 800863a:	4628      	mov	r0, r5
 800863c:	f000 f9d8 	bl	80089f0 <_printf_common>
 8008640:	3001      	adds	r0, #1
 8008642:	f040 8090 	bne.w	8008766 <_printf_float+0x1e2>
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	b00d      	add	sp, #52	; 0x34
 800864c:	ecbd 8b02 	vpop	{d8}
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f8 fa66 	bl	8000b2c <__aeabi_dcmpun>
 8008660:	b140      	cbz	r0, 8008674 <_printf_float+0xf0>
 8008662:	464b      	mov	r3, r9
 8008664:	2b00      	cmp	r3, #0
 8008666:	bfbc      	itt	lt
 8008668:	232d      	movlt	r3, #45	; 0x2d
 800866a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800866e:	487f      	ldr	r0, [pc, #508]	; (800886c <_printf_float+0x2e8>)
 8008670:	4b7f      	ldr	r3, [pc, #508]	; (8008870 <_printf_float+0x2ec>)
 8008672:	e7d1      	b.n	8008618 <_printf_float+0x94>
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800867a:	9206      	str	r2, [sp, #24]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	d13f      	bne.n	8008700 <_printf_float+0x17c>
 8008680:	2306      	movs	r3, #6
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	6861      	ldr	r1, [r4, #4]
 8008688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800868c:	2300      	movs	r3, #0
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	ab0a      	add	r3, sp, #40	; 0x28
 8008692:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008696:	ab09      	add	r3, sp, #36	; 0x24
 8008698:	ec49 8b10 	vmov	d0, r8, r9
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086a4:	4628      	mov	r0, r5
 80086a6:	f7ff fecd 	bl	8008444 <__cvt>
 80086aa:	9b06      	ldr	r3, [sp, #24]
 80086ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ae:	2b47      	cmp	r3, #71	; 0x47
 80086b0:	4680      	mov	r8, r0
 80086b2:	d108      	bne.n	80086c6 <_printf_float+0x142>
 80086b4:	1cc8      	adds	r0, r1, #3
 80086b6:	db02      	blt.n	80086be <_printf_float+0x13a>
 80086b8:	6863      	ldr	r3, [r4, #4]
 80086ba:	4299      	cmp	r1, r3
 80086bc:	dd41      	ble.n	8008742 <_printf_float+0x1be>
 80086be:	f1ab 0b02 	sub.w	fp, fp, #2
 80086c2:	fa5f fb8b 	uxtb.w	fp, fp
 80086c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086ca:	d820      	bhi.n	800870e <_printf_float+0x18a>
 80086cc:	3901      	subs	r1, #1
 80086ce:	465a      	mov	r2, fp
 80086d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086d4:	9109      	str	r1, [sp, #36]	; 0x24
 80086d6:	f7ff ff17 	bl	8008508 <__exponent>
 80086da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086dc:	1813      	adds	r3, r2, r0
 80086de:	2a01      	cmp	r2, #1
 80086e0:	4681      	mov	r9, r0
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	dc02      	bgt.n	80086ec <_printf_float+0x168>
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	07d2      	lsls	r2, r2, #31
 80086ea:	d501      	bpl.n	80086f0 <_printf_float+0x16c>
 80086ec:	3301      	adds	r3, #1
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d09c      	beq.n	8008632 <_printf_float+0xae>
 80086f8:	232d      	movs	r3, #45	; 0x2d
 80086fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086fe:	e798      	b.n	8008632 <_printf_float+0xae>
 8008700:	9a06      	ldr	r2, [sp, #24]
 8008702:	2a47      	cmp	r2, #71	; 0x47
 8008704:	d1be      	bne.n	8008684 <_printf_float+0x100>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1bc      	bne.n	8008684 <_printf_float+0x100>
 800870a:	2301      	movs	r3, #1
 800870c:	e7b9      	b.n	8008682 <_printf_float+0xfe>
 800870e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008712:	d118      	bne.n	8008746 <_printf_float+0x1c2>
 8008714:	2900      	cmp	r1, #0
 8008716:	6863      	ldr	r3, [r4, #4]
 8008718:	dd0b      	ble.n	8008732 <_printf_float+0x1ae>
 800871a:	6121      	str	r1, [r4, #16]
 800871c:	b913      	cbnz	r3, 8008724 <_printf_float+0x1a0>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	07d0      	lsls	r0, r2, #31
 8008722:	d502      	bpl.n	800872a <_printf_float+0x1a6>
 8008724:	3301      	adds	r3, #1
 8008726:	440b      	add	r3, r1
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	65a1      	str	r1, [r4, #88]	; 0x58
 800872c:	f04f 0900 	mov.w	r9, #0
 8008730:	e7de      	b.n	80086f0 <_printf_float+0x16c>
 8008732:	b913      	cbnz	r3, 800873a <_printf_float+0x1b6>
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	07d2      	lsls	r2, r2, #31
 8008738:	d501      	bpl.n	800873e <_printf_float+0x1ba>
 800873a:	3302      	adds	r3, #2
 800873c:	e7f4      	b.n	8008728 <_printf_float+0x1a4>
 800873e:	2301      	movs	r3, #1
 8008740:	e7f2      	b.n	8008728 <_printf_float+0x1a4>
 8008742:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008748:	4299      	cmp	r1, r3
 800874a:	db05      	blt.n	8008758 <_printf_float+0x1d4>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	6121      	str	r1, [r4, #16]
 8008750:	07d8      	lsls	r0, r3, #31
 8008752:	d5ea      	bpl.n	800872a <_printf_float+0x1a6>
 8008754:	1c4b      	adds	r3, r1, #1
 8008756:	e7e7      	b.n	8008728 <_printf_float+0x1a4>
 8008758:	2900      	cmp	r1, #0
 800875a:	bfd4      	ite	le
 800875c:	f1c1 0202 	rsble	r2, r1, #2
 8008760:	2201      	movgt	r2, #1
 8008762:	4413      	add	r3, r2
 8008764:	e7e0      	b.n	8008728 <_printf_float+0x1a4>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	055a      	lsls	r2, r3, #21
 800876a:	d407      	bmi.n	800877c <_printf_float+0x1f8>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	4642      	mov	r2, r8
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	d12c      	bne.n	80087d4 <_printf_float+0x250>
 800877a:	e764      	b.n	8008646 <_printf_float+0xc2>
 800877c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008780:	f240 80e0 	bls.w	8008944 <_printf_float+0x3c0>
 8008784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008788:	2200      	movs	r2, #0
 800878a:	2300      	movs	r3, #0
 800878c:	f7f8 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008790:	2800      	cmp	r0, #0
 8008792:	d034      	beq.n	80087fe <_printf_float+0x27a>
 8008794:	4a37      	ldr	r2, [pc, #220]	; (8008874 <_printf_float+0x2f0>)
 8008796:	2301      	movs	r3, #1
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f af51 	beq.w	8008646 <_printf_float+0xc2>
 80087a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087a8:	429a      	cmp	r2, r3
 80087aa:	db02      	blt.n	80087b2 <_printf_float+0x22e>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	07d8      	lsls	r0, r3, #31
 80087b0:	d510      	bpl.n	80087d4 <_printf_float+0x250>
 80087b2:	ee18 3a10 	vmov	r3, s16
 80087b6:	4652      	mov	r2, sl
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af41 	beq.w	8008646 <_printf_float+0xc2>
 80087c4:	f04f 0800 	mov.w	r8, #0
 80087c8:	f104 091a 	add.w	r9, r4, #26
 80087cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ce:	3b01      	subs	r3, #1
 80087d0:	4543      	cmp	r3, r8
 80087d2:	dc09      	bgt.n	80087e8 <_printf_float+0x264>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	079b      	lsls	r3, r3, #30
 80087d8:	f100 8105 	bmi.w	80089e6 <_printf_float+0x462>
 80087dc:	68e0      	ldr	r0, [r4, #12]
 80087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e0:	4298      	cmp	r0, r3
 80087e2:	bfb8      	it	lt
 80087e4:	4618      	movlt	r0, r3
 80087e6:	e730      	b.n	800864a <_printf_float+0xc6>
 80087e8:	2301      	movs	r3, #1
 80087ea:	464a      	mov	r2, r9
 80087ec:	4631      	mov	r1, r6
 80087ee:	4628      	mov	r0, r5
 80087f0:	47b8      	blx	r7
 80087f2:	3001      	adds	r0, #1
 80087f4:	f43f af27 	beq.w	8008646 <_printf_float+0xc2>
 80087f8:	f108 0801 	add.w	r8, r8, #1
 80087fc:	e7e6      	b.n	80087cc <_printf_float+0x248>
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	dc39      	bgt.n	8008878 <_printf_float+0x2f4>
 8008804:	4a1b      	ldr	r2, [pc, #108]	; (8008874 <_printf_float+0x2f0>)
 8008806:	2301      	movs	r3, #1
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f af19 	beq.w	8008646 <_printf_float+0xc2>
 8008814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008818:	4313      	orrs	r3, r2
 800881a:	d102      	bne.n	8008822 <_printf_float+0x29e>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	07d9      	lsls	r1, r3, #31
 8008820:	d5d8      	bpl.n	80087d4 <_printf_float+0x250>
 8008822:	ee18 3a10 	vmov	r3, s16
 8008826:	4652      	mov	r2, sl
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f af09 	beq.w	8008646 <_printf_float+0xc2>
 8008834:	f04f 0900 	mov.w	r9, #0
 8008838:	f104 0a1a 	add.w	sl, r4, #26
 800883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883e:	425b      	negs	r3, r3
 8008840:	454b      	cmp	r3, r9
 8008842:	dc01      	bgt.n	8008848 <_printf_float+0x2c4>
 8008844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008846:	e792      	b.n	800876e <_printf_float+0x1ea>
 8008848:	2301      	movs	r3, #1
 800884a:	4652      	mov	r2, sl
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	f43f aef7 	beq.w	8008646 <_printf_float+0xc2>
 8008858:	f109 0901 	add.w	r9, r9, #1
 800885c:	e7ee      	b.n	800883c <_printf_float+0x2b8>
 800885e:	bf00      	nop
 8008860:	7fefffff 	.word	0x7fefffff
 8008864:	0800cf4c 	.word	0x0800cf4c
 8008868:	0800cf50 	.word	0x0800cf50
 800886c:	0800cf58 	.word	0x0800cf58
 8008870:	0800cf54 	.word	0x0800cf54
 8008874:	0800cf5c 	.word	0x0800cf5c
 8008878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800887a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800887c:	429a      	cmp	r2, r3
 800887e:	bfa8      	it	ge
 8008880:	461a      	movge	r2, r3
 8008882:	2a00      	cmp	r2, #0
 8008884:	4691      	mov	r9, r2
 8008886:	dc37      	bgt.n	80088f8 <_printf_float+0x374>
 8008888:	f04f 0b00 	mov.w	fp, #0
 800888c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008890:	f104 021a 	add.w	r2, r4, #26
 8008894:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008896:	9305      	str	r3, [sp, #20]
 8008898:	eba3 0309 	sub.w	r3, r3, r9
 800889c:	455b      	cmp	r3, fp
 800889e:	dc33      	bgt.n	8008908 <_printf_float+0x384>
 80088a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088a4:	429a      	cmp	r2, r3
 80088a6:	db3b      	blt.n	8008920 <_printf_float+0x39c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07da      	lsls	r2, r3, #31
 80088ac:	d438      	bmi.n	8008920 <_printf_float+0x39c>
 80088ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b0:	9b05      	ldr	r3, [sp, #20]
 80088b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	eba2 0901 	sub.w	r9, r2, r1
 80088ba:	4599      	cmp	r9, r3
 80088bc:	bfa8      	it	ge
 80088be:	4699      	movge	r9, r3
 80088c0:	f1b9 0f00 	cmp.w	r9, #0
 80088c4:	dc35      	bgt.n	8008932 <_printf_float+0x3ae>
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ce:	f104 0a1a 	add.w	sl, r4, #26
 80088d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	eba3 0309 	sub.w	r3, r3, r9
 80088dc:	4543      	cmp	r3, r8
 80088de:	f77f af79 	ble.w	80087d4 <_printf_float+0x250>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4652      	mov	r2, sl
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f aeaa 	beq.w	8008646 <_printf_float+0xc2>
 80088f2:	f108 0801 	add.w	r8, r8, #1
 80088f6:	e7ec      	b.n	80088d2 <_printf_float+0x34e>
 80088f8:	4613      	mov	r3, r2
 80088fa:	4631      	mov	r1, r6
 80088fc:	4642      	mov	r2, r8
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	d1c0      	bne.n	8008888 <_printf_float+0x304>
 8008906:	e69e      	b.n	8008646 <_printf_float+0xc2>
 8008908:	2301      	movs	r3, #1
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	9205      	str	r2, [sp, #20]
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae97 	beq.w	8008646 <_printf_float+0xc2>
 8008918:	9a05      	ldr	r2, [sp, #20]
 800891a:	f10b 0b01 	add.w	fp, fp, #1
 800891e:	e7b9      	b.n	8008894 <_printf_float+0x310>
 8008920:	ee18 3a10 	vmov	r3, s16
 8008924:	4652      	mov	r2, sl
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	d1be      	bne.n	80088ae <_printf_float+0x32a>
 8008930:	e689      	b.n	8008646 <_printf_float+0xc2>
 8008932:	9a05      	ldr	r2, [sp, #20]
 8008934:	464b      	mov	r3, r9
 8008936:	4442      	add	r2, r8
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	d1c1      	bne.n	80088c6 <_printf_float+0x342>
 8008942:	e680      	b.n	8008646 <_printf_float+0xc2>
 8008944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008946:	2a01      	cmp	r2, #1
 8008948:	dc01      	bgt.n	800894e <_printf_float+0x3ca>
 800894a:	07db      	lsls	r3, r3, #31
 800894c:	d538      	bpl.n	80089c0 <_printf_float+0x43c>
 800894e:	2301      	movs	r3, #1
 8008950:	4642      	mov	r2, r8
 8008952:	4631      	mov	r1, r6
 8008954:	4628      	mov	r0, r5
 8008956:	47b8      	blx	r7
 8008958:	3001      	adds	r0, #1
 800895a:	f43f ae74 	beq.w	8008646 <_printf_float+0xc2>
 800895e:	ee18 3a10 	vmov	r3, s16
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f ae6b 	beq.w	8008646 <_printf_float+0xc2>
 8008970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	f7f8 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800897c:	b9d8      	cbnz	r0, 80089b6 <_printf_float+0x432>
 800897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008980:	f108 0201 	add.w	r2, r8, #1
 8008984:	3b01      	subs	r3, #1
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	d10e      	bne.n	80089ae <_printf_float+0x42a>
 8008990:	e659      	b.n	8008646 <_printf_float+0xc2>
 8008992:	2301      	movs	r3, #1
 8008994:	4652      	mov	r2, sl
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	f43f ae52 	beq.w	8008646 <_printf_float+0xc2>
 80089a2:	f108 0801 	add.w	r8, r8, #1
 80089a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a8:	3b01      	subs	r3, #1
 80089aa:	4543      	cmp	r3, r8
 80089ac:	dcf1      	bgt.n	8008992 <_printf_float+0x40e>
 80089ae:	464b      	mov	r3, r9
 80089b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089b4:	e6dc      	b.n	8008770 <_printf_float+0x1ec>
 80089b6:	f04f 0800 	mov.w	r8, #0
 80089ba:	f104 0a1a 	add.w	sl, r4, #26
 80089be:	e7f2      	b.n	80089a6 <_printf_float+0x422>
 80089c0:	2301      	movs	r3, #1
 80089c2:	4642      	mov	r2, r8
 80089c4:	e7df      	b.n	8008986 <_printf_float+0x402>
 80089c6:	2301      	movs	r3, #1
 80089c8:	464a      	mov	r2, r9
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	f43f ae38 	beq.w	8008646 <_printf_float+0xc2>
 80089d6:	f108 0801 	add.w	r8, r8, #1
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089de:	1a5b      	subs	r3, r3, r1
 80089e0:	4543      	cmp	r3, r8
 80089e2:	dcf0      	bgt.n	80089c6 <_printf_float+0x442>
 80089e4:	e6fa      	b.n	80087dc <_printf_float+0x258>
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	f104 0919 	add.w	r9, r4, #25
 80089ee:	e7f4      	b.n	80089da <_printf_float+0x456>

080089f0 <_printf_common>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	4616      	mov	r6, r2
 80089f6:	4699      	mov	r9, r3
 80089f8:	688a      	ldr	r2, [r1, #8]
 80089fa:	690b      	ldr	r3, [r1, #16]
 80089fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	bfb8      	it	lt
 8008a04:	4613      	movlt	r3, r2
 8008a06:	6033      	str	r3, [r6, #0]
 8008a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	b10a      	cbz	r2, 8008a16 <_printf_common+0x26>
 8008a12:	3301      	adds	r3, #1
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	0699      	lsls	r1, r3, #26
 8008a1a:	bf42      	ittt	mi
 8008a1c:	6833      	ldrmi	r3, [r6, #0]
 8008a1e:	3302      	addmi	r3, #2
 8008a20:	6033      	strmi	r3, [r6, #0]
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	f015 0506 	ands.w	r5, r5, #6
 8008a28:	d106      	bne.n	8008a38 <_printf_common+0x48>
 8008a2a:	f104 0a19 	add.w	sl, r4, #25
 8008a2e:	68e3      	ldr	r3, [r4, #12]
 8008a30:	6832      	ldr	r2, [r6, #0]
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dc26      	bgt.n	8008a86 <_printf_common+0x96>
 8008a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a3c:	1e13      	subs	r3, r2, #0
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	bf18      	it	ne
 8008a42:	2301      	movne	r3, #1
 8008a44:	0692      	lsls	r2, r2, #26
 8008a46:	d42b      	bmi.n	8008aa0 <_printf_common+0xb0>
 8008a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4638      	mov	r0, r7
 8008a50:	47c0      	blx	r8
 8008a52:	3001      	adds	r0, #1
 8008a54:	d01e      	beq.n	8008a94 <_printf_common+0xa4>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	68e5      	ldr	r5, [r4, #12]
 8008a5a:	6832      	ldr	r2, [r6, #0]
 8008a5c:	f003 0306 	and.w	r3, r3, #6
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	bf08      	it	eq
 8008a64:	1aad      	subeq	r5, r5, r2
 8008a66:	68a3      	ldr	r3, [r4, #8]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	bf0c      	ite	eq
 8008a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a70:	2500      	movne	r5, #0
 8008a72:	4293      	cmp	r3, r2
 8008a74:	bfc4      	itt	gt
 8008a76:	1a9b      	subgt	r3, r3, r2
 8008a78:	18ed      	addgt	r5, r5, r3
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	341a      	adds	r4, #26
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	d11a      	bne.n	8008ab8 <_printf_common+0xc8>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e008      	b.n	8008a98 <_printf_common+0xa8>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4652      	mov	r2, sl
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	47c0      	blx	r8
 8008a90:	3001      	adds	r0, #1
 8008a92:	d103      	bne.n	8008a9c <_printf_common+0xac>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	e7c6      	b.n	8008a2e <_printf_common+0x3e>
 8008aa0:	18e1      	adds	r1, r4, r3
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	2030      	movs	r0, #48	; 0x30
 8008aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aaa:	4422      	add	r2, r4
 8008aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	e7c7      	b.n	8008a48 <_printf_common+0x58>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4622      	mov	r2, r4
 8008abc:	4649      	mov	r1, r9
 8008abe:	4638      	mov	r0, r7
 8008ac0:	47c0      	blx	r8
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d0e6      	beq.n	8008a94 <_printf_common+0xa4>
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7d9      	b.n	8008a7e <_printf_common+0x8e>
	...

08008acc <_printf_i>:
 8008acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4691      	mov	r9, r2
 8008ad4:	7e27      	ldrb	r7, [r4, #24]
 8008ad6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ad8:	2f78      	cmp	r7, #120	; 0x78
 8008ada:	4680      	mov	r8, r0
 8008adc:	469a      	mov	sl, r3
 8008ade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae2:	d807      	bhi.n	8008af4 <_printf_i+0x28>
 8008ae4:	2f62      	cmp	r7, #98	; 0x62
 8008ae6:	d80a      	bhi.n	8008afe <_printf_i+0x32>
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	f000 80d8 	beq.w	8008c9e <_printf_i+0x1d2>
 8008aee:	2f58      	cmp	r7, #88	; 0x58
 8008af0:	f000 80a3 	beq.w	8008c3a <_printf_i+0x16e>
 8008af4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008afc:	e03a      	b.n	8008b74 <_printf_i+0xa8>
 8008afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b02:	2b15      	cmp	r3, #21
 8008b04:	d8f6      	bhi.n	8008af4 <_printf_i+0x28>
 8008b06:	a001      	add	r0, pc, #4	; (adr r0, 8008b0c <_printf_i+0x40>)
 8008b08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b0c:	08008b65 	.word	0x08008b65
 8008b10:	08008b79 	.word	0x08008b79
 8008b14:	08008af5 	.word	0x08008af5
 8008b18:	08008af5 	.word	0x08008af5
 8008b1c:	08008af5 	.word	0x08008af5
 8008b20:	08008af5 	.word	0x08008af5
 8008b24:	08008b79 	.word	0x08008b79
 8008b28:	08008af5 	.word	0x08008af5
 8008b2c:	08008af5 	.word	0x08008af5
 8008b30:	08008af5 	.word	0x08008af5
 8008b34:	08008af5 	.word	0x08008af5
 8008b38:	08008c85 	.word	0x08008c85
 8008b3c:	08008ba9 	.word	0x08008ba9
 8008b40:	08008c67 	.word	0x08008c67
 8008b44:	08008af5 	.word	0x08008af5
 8008b48:	08008af5 	.word	0x08008af5
 8008b4c:	08008ca7 	.word	0x08008ca7
 8008b50:	08008af5 	.word	0x08008af5
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008af5 	.word	0x08008af5
 8008b5c:	08008af5 	.word	0x08008af5
 8008b60:	08008c6f 	.word	0x08008c6f
 8008b64:	680b      	ldr	r3, [r1, #0]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	600a      	str	r2, [r1, #0]
 8008b6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b74:	2301      	movs	r3, #1
 8008b76:	e0a3      	b.n	8008cc0 <_printf_i+0x1f4>
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	6808      	ldr	r0, [r1, #0]
 8008b7c:	062e      	lsls	r6, r5, #24
 8008b7e:	f100 0304 	add.w	r3, r0, #4
 8008b82:	d50a      	bpl.n	8008b9a <_printf_i+0xce>
 8008b84:	6805      	ldr	r5, [r0, #0]
 8008b86:	600b      	str	r3, [r1, #0]
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	da03      	bge.n	8008b94 <_printf_i+0xc8>
 8008b8c:	232d      	movs	r3, #45	; 0x2d
 8008b8e:	426d      	negs	r5, r5
 8008b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b94:	485e      	ldr	r0, [pc, #376]	; (8008d10 <_printf_i+0x244>)
 8008b96:	230a      	movs	r3, #10
 8008b98:	e019      	b.n	8008bce <_printf_i+0x102>
 8008b9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b9e:	6805      	ldr	r5, [r0, #0]
 8008ba0:	600b      	str	r3, [r1, #0]
 8008ba2:	bf18      	it	ne
 8008ba4:	b22d      	sxthne	r5, r5
 8008ba6:	e7ef      	b.n	8008b88 <_printf_i+0xbc>
 8008ba8:	680b      	ldr	r3, [r1, #0]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	1d18      	adds	r0, r3, #4
 8008bae:	6008      	str	r0, [r1, #0]
 8008bb0:	0628      	lsls	r0, r5, #24
 8008bb2:	d501      	bpl.n	8008bb8 <_printf_i+0xec>
 8008bb4:	681d      	ldr	r5, [r3, #0]
 8008bb6:	e002      	b.n	8008bbe <_printf_i+0xf2>
 8008bb8:	0669      	lsls	r1, r5, #25
 8008bba:	d5fb      	bpl.n	8008bb4 <_printf_i+0xe8>
 8008bbc:	881d      	ldrh	r5, [r3, #0]
 8008bbe:	4854      	ldr	r0, [pc, #336]	; (8008d10 <_printf_i+0x244>)
 8008bc0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2308      	moveq	r3, #8
 8008bc6:	230a      	movne	r3, #10
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bce:	6866      	ldr	r6, [r4, #4]
 8008bd0:	60a6      	str	r6, [r4, #8]
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	bfa2      	ittt	ge
 8008bd6:	6821      	ldrge	r1, [r4, #0]
 8008bd8:	f021 0104 	bicge.w	r1, r1, #4
 8008bdc:	6021      	strge	r1, [r4, #0]
 8008bde:	b90d      	cbnz	r5, 8008be4 <_printf_i+0x118>
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	d04d      	beq.n	8008c80 <_printf_i+0x1b4>
 8008be4:	4616      	mov	r6, r2
 8008be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bea:	fb03 5711 	mls	r7, r3, r1, r5
 8008bee:	5dc7      	ldrb	r7, [r0, r7]
 8008bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bf4:	462f      	mov	r7, r5
 8008bf6:	42bb      	cmp	r3, r7
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	d9f4      	bls.n	8008be6 <_printf_i+0x11a>
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d10b      	bne.n	8008c18 <_printf_i+0x14c>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07df      	lsls	r7, r3, #31
 8008c04:	d508      	bpl.n	8008c18 <_printf_i+0x14c>
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	bfde      	ittt	le
 8008c0e:	2330      	movle	r3, #48	; 0x30
 8008c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c18:	1b92      	subs	r2, r2, r6
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	f8cd a000 	str.w	sl, [sp]
 8008c20:	464b      	mov	r3, r9
 8008c22:	aa03      	add	r2, sp, #12
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff fee2 	bl	80089f0 <_printf_common>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d14c      	bne.n	8008cca <_printf_i+0x1fe>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	b004      	add	sp, #16
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	4835      	ldr	r0, [pc, #212]	; (8008d10 <_printf_i+0x244>)
 8008c3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	680e      	ldr	r6, [r1, #0]
 8008c44:	061f      	lsls	r7, r3, #24
 8008c46:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c4a:	600e      	str	r6, [r1, #0]
 8008c4c:	d514      	bpl.n	8008c78 <_printf_i+0x1ac>
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	bf44      	itt	mi
 8008c52:	f043 0320 	orrmi.w	r3, r3, #32
 8008c56:	6023      	strmi	r3, [r4, #0]
 8008c58:	b91d      	cbnz	r5, 8008c62 <_printf_i+0x196>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f023 0320 	bic.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2310      	movs	r3, #16
 8008c64:	e7b0      	b.n	8008bc8 <_printf_i+0xfc>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	f043 0320 	orr.w	r3, r3, #32
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	2378      	movs	r3, #120	; 0x78
 8008c70:	4828      	ldr	r0, [pc, #160]	; (8008d14 <_printf_i+0x248>)
 8008c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c76:	e7e3      	b.n	8008c40 <_printf_i+0x174>
 8008c78:	065e      	lsls	r6, r3, #25
 8008c7a:	bf48      	it	mi
 8008c7c:	b2ad      	uxthmi	r5, r5
 8008c7e:	e7e6      	b.n	8008c4e <_printf_i+0x182>
 8008c80:	4616      	mov	r6, r2
 8008c82:	e7bb      	b.n	8008bfc <_printf_i+0x130>
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	6826      	ldr	r6, [r4, #0]
 8008c88:	6960      	ldr	r0, [r4, #20]
 8008c8a:	1d1d      	adds	r5, r3, #4
 8008c8c:	600d      	str	r5, [r1, #0]
 8008c8e:	0635      	lsls	r5, r6, #24
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	d501      	bpl.n	8008c98 <_printf_i+0x1cc>
 8008c94:	6018      	str	r0, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <_printf_i+0x1d2>
 8008c98:	0671      	lsls	r1, r6, #25
 8008c9a:	d5fb      	bpl.n	8008c94 <_printf_i+0x1c8>
 8008c9c:	8018      	strh	r0, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	e7ba      	b.n	8008c1c <_printf_i+0x150>
 8008ca6:	680b      	ldr	r3, [r1, #0]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	600a      	str	r2, [r1, #0]
 8008cac:	681e      	ldr	r6, [r3, #0]
 8008cae:	6862      	ldr	r2, [r4, #4]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 fa94 	bl	80001e0 <memchr>
 8008cb8:	b108      	cbz	r0, 8008cbe <_printf_i+0x1f2>
 8008cba:	1b80      	subs	r0, r0, r6
 8008cbc:	6060      	str	r0, [r4, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc8:	e7a8      	b.n	8008c1c <_printf_i+0x150>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	47d0      	blx	sl
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d0ab      	beq.n	8008c30 <_printf_i+0x164>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	079b      	lsls	r3, r3, #30
 8008cdc:	d413      	bmi.n	8008d06 <_printf_i+0x23a>
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	bfb8      	it	lt
 8008ce6:	4618      	movlt	r0, r3
 8008ce8:	e7a4      	b.n	8008c34 <_printf_i+0x168>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4632      	mov	r2, r6
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d09b      	beq.n	8008c30 <_printf_i+0x164>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	9903      	ldr	r1, [sp, #12]
 8008cfe:	1a5b      	subs	r3, r3, r1
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dcf2      	bgt.n	8008cea <_printf_i+0x21e>
 8008d04:	e7eb      	b.n	8008cde <_printf_i+0x212>
 8008d06:	2500      	movs	r5, #0
 8008d08:	f104 0619 	add.w	r6, r4, #25
 8008d0c:	e7f5      	b.n	8008cfa <_printf_i+0x22e>
 8008d0e:	bf00      	nop
 8008d10:	0800cf5e 	.word	0x0800cf5e
 8008d14:	0800cf6f 	.word	0x0800cf6f

08008d18 <_scanf_float>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	b087      	sub	sp, #28
 8008d1e:	4617      	mov	r7, r2
 8008d20:	9303      	str	r3, [sp, #12]
 8008d22:	688b      	ldr	r3, [r1, #8]
 8008d24:	1e5a      	subs	r2, r3, #1
 8008d26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d2a:	bf83      	ittte	hi
 8008d2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d30:	195b      	addhi	r3, r3, r5
 8008d32:	9302      	strhi	r3, [sp, #8]
 8008d34:	2300      	movls	r3, #0
 8008d36:	bf86      	itte	hi
 8008d38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d3c:	608b      	strhi	r3, [r1, #8]
 8008d3e:	9302      	strls	r3, [sp, #8]
 8008d40:	680b      	ldr	r3, [r1, #0]
 8008d42:	468b      	mov	fp, r1
 8008d44:	2500      	movs	r5, #0
 8008d46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d4a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d52:	4680      	mov	r8, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	465e      	mov	r6, fp
 8008d58:	46aa      	mov	sl, r5
 8008d5a:	46a9      	mov	r9, r5
 8008d5c:	9501      	str	r5, [sp, #4]
 8008d5e:	68a2      	ldr	r2, [r4, #8]
 8008d60:	b152      	cbz	r2, 8008d78 <_scanf_float+0x60>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b4e      	cmp	r3, #78	; 0x4e
 8008d68:	d864      	bhi.n	8008e34 <_scanf_float+0x11c>
 8008d6a:	2b40      	cmp	r3, #64	; 0x40
 8008d6c:	d83c      	bhi.n	8008de8 <_scanf_float+0xd0>
 8008d6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d72:	b2c8      	uxtb	r0, r1
 8008d74:	280e      	cmp	r0, #14
 8008d76:	d93a      	bls.n	8008dee <_scanf_float+0xd6>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	d003      	beq.n	8008d86 <_scanf_float+0x6e>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d8a:	f1ba 0f01 	cmp.w	sl, #1
 8008d8e:	f200 8113 	bhi.w	8008fb8 <_scanf_float+0x2a0>
 8008d92:	455e      	cmp	r6, fp
 8008d94:	f200 8105 	bhi.w	8008fa2 <_scanf_float+0x28a>
 8008d98:	2501      	movs	r5, #1
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	b007      	add	sp, #28
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008da6:	2a0d      	cmp	r2, #13
 8008da8:	d8e6      	bhi.n	8008d78 <_scanf_float+0x60>
 8008daa:	a101      	add	r1, pc, #4	; (adr r1, 8008db0 <_scanf_float+0x98>)
 8008dac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008db0:	08008eef 	.word	0x08008eef
 8008db4:	08008d79 	.word	0x08008d79
 8008db8:	08008d79 	.word	0x08008d79
 8008dbc:	08008d79 	.word	0x08008d79
 8008dc0:	08008f4f 	.word	0x08008f4f
 8008dc4:	08008f27 	.word	0x08008f27
 8008dc8:	08008d79 	.word	0x08008d79
 8008dcc:	08008d79 	.word	0x08008d79
 8008dd0:	08008efd 	.word	0x08008efd
 8008dd4:	08008d79 	.word	0x08008d79
 8008dd8:	08008d79 	.word	0x08008d79
 8008ddc:	08008d79 	.word	0x08008d79
 8008de0:	08008d79 	.word	0x08008d79
 8008de4:	08008eb5 	.word	0x08008eb5
 8008de8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008dec:	e7db      	b.n	8008da6 <_scanf_float+0x8e>
 8008dee:	290e      	cmp	r1, #14
 8008df0:	d8c2      	bhi.n	8008d78 <_scanf_float+0x60>
 8008df2:	a001      	add	r0, pc, #4	; (adr r0, 8008df8 <_scanf_float+0xe0>)
 8008df4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008df8:	08008ea7 	.word	0x08008ea7
 8008dfc:	08008d79 	.word	0x08008d79
 8008e00:	08008ea7 	.word	0x08008ea7
 8008e04:	08008f3b 	.word	0x08008f3b
 8008e08:	08008d79 	.word	0x08008d79
 8008e0c:	08008e55 	.word	0x08008e55
 8008e10:	08008e91 	.word	0x08008e91
 8008e14:	08008e91 	.word	0x08008e91
 8008e18:	08008e91 	.word	0x08008e91
 8008e1c:	08008e91 	.word	0x08008e91
 8008e20:	08008e91 	.word	0x08008e91
 8008e24:	08008e91 	.word	0x08008e91
 8008e28:	08008e91 	.word	0x08008e91
 8008e2c:	08008e91 	.word	0x08008e91
 8008e30:	08008e91 	.word	0x08008e91
 8008e34:	2b6e      	cmp	r3, #110	; 0x6e
 8008e36:	d809      	bhi.n	8008e4c <_scanf_float+0x134>
 8008e38:	2b60      	cmp	r3, #96	; 0x60
 8008e3a:	d8b2      	bhi.n	8008da2 <_scanf_float+0x8a>
 8008e3c:	2b54      	cmp	r3, #84	; 0x54
 8008e3e:	d077      	beq.n	8008f30 <_scanf_float+0x218>
 8008e40:	2b59      	cmp	r3, #89	; 0x59
 8008e42:	d199      	bne.n	8008d78 <_scanf_float+0x60>
 8008e44:	2d07      	cmp	r5, #7
 8008e46:	d197      	bne.n	8008d78 <_scanf_float+0x60>
 8008e48:	2508      	movs	r5, #8
 8008e4a:	e029      	b.n	8008ea0 <_scanf_float+0x188>
 8008e4c:	2b74      	cmp	r3, #116	; 0x74
 8008e4e:	d06f      	beq.n	8008f30 <_scanf_float+0x218>
 8008e50:	2b79      	cmp	r3, #121	; 0x79
 8008e52:	e7f6      	b.n	8008e42 <_scanf_float+0x12a>
 8008e54:	6821      	ldr	r1, [r4, #0]
 8008e56:	05c8      	lsls	r0, r1, #23
 8008e58:	d51a      	bpl.n	8008e90 <_scanf_float+0x178>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e60:	6021      	str	r1, [r4, #0]
 8008e62:	f109 0901 	add.w	r9, r9, #1
 8008e66:	b11b      	cbz	r3, 8008e70 <_scanf_float+0x158>
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	9302      	str	r3, [sp, #8]
 8008e6e:	60a2      	str	r2, [r4, #8]
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	f340 8084 	ble.w	8008f90 <_scanf_float+0x278>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	e766      	b.n	8008d5e <_scanf_float+0x46>
 8008e90:	eb1a 0f05 	cmn.w	sl, r5
 8008e94:	f47f af70 	bne.w	8008d78 <_scanf_float+0x60>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	f806 3b01 	strb.w	r3, [r6], #1
 8008ea4:	e7e4      	b.n	8008e70 <_scanf_float+0x158>
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	0610      	lsls	r0, r2, #24
 8008eaa:	f57f af65 	bpl.w	8008d78 <_scanf_float+0x60>
 8008eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eb2:	e7f4      	b.n	8008e9e <_scanf_float+0x186>
 8008eb4:	f1ba 0f00 	cmp.w	sl, #0
 8008eb8:	d10e      	bne.n	8008ed8 <_scanf_float+0x1c0>
 8008eba:	f1b9 0f00 	cmp.w	r9, #0
 8008ebe:	d10e      	bne.n	8008ede <_scanf_float+0x1c6>
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ec6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eca:	d108      	bne.n	8008ede <_scanf_float+0x1c6>
 8008ecc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ed0:	6022      	str	r2, [r4, #0]
 8008ed2:	f04f 0a01 	mov.w	sl, #1
 8008ed6:	e7e3      	b.n	8008ea0 <_scanf_float+0x188>
 8008ed8:	f1ba 0f02 	cmp.w	sl, #2
 8008edc:	d055      	beq.n	8008f8a <_scanf_float+0x272>
 8008ede:	2d01      	cmp	r5, #1
 8008ee0:	d002      	beq.n	8008ee8 <_scanf_float+0x1d0>
 8008ee2:	2d04      	cmp	r5, #4
 8008ee4:	f47f af48 	bne.w	8008d78 <_scanf_float+0x60>
 8008ee8:	3501      	adds	r5, #1
 8008eea:	b2ed      	uxtb	r5, r5
 8008eec:	e7d8      	b.n	8008ea0 <_scanf_float+0x188>
 8008eee:	f1ba 0f01 	cmp.w	sl, #1
 8008ef2:	f47f af41 	bne.w	8008d78 <_scanf_float+0x60>
 8008ef6:	f04f 0a02 	mov.w	sl, #2
 8008efa:	e7d1      	b.n	8008ea0 <_scanf_float+0x188>
 8008efc:	b97d      	cbnz	r5, 8008f1e <_scanf_float+0x206>
 8008efe:	f1b9 0f00 	cmp.w	r9, #0
 8008f02:	f47f af3c 	bne.w	8008d7e <_scanf_float+0x66>
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f10:	f47f af39 	bne.w	8008d86 <_scanf_float+0x6e>
 8008f14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	2501      	movs	r5, #1
 8008f1c:	e7c0      	b.n	8008ea0 <_scanf_float+0x188>
 8008f1e:	2d03      	cmp	r5, #3
 8008f20:	d0e2      	beq.n	8008ee8 <_scanf_float+0x1d0>
 8008f22:	2d05      	cmp	r5, #5
 8008f24:	e7de      	b.n	8008ee4 <_scanf_float+0x1cc>
 8008f26:	2d02      	cmp	r5, #2
 8008f28:	f47f af26 	bne.w	8008d78 <_scanf_float+0x60>
 8008f2c:	2503      	movs	r5, #3
 8008f2e:	e7b7      	b.n	8008ea0 <_scanf_float+0x188>
 8008f30:	2d06      	cmp	r5, #6
 8008f32:	f47f af21 	bne.w	8008d78 <_scanf_float+0x60>
 8008f36:	2507      	movs	r5, #7
 8008f38:	e7b2      	b.n	8008ea0 <_scanf_float+0x188>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	0591      	lsls	r1, r2, #22
 8008f3e:	f57f af1b 	bpl.w	8008d78 <_scanf_float+0x60>
 8008f42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f46:	6022      	str	r2, [r4, #0]
 8008f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f4c:	e7a8      	b.n	8008ea0 <_scanf_float+0x188>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f58:	d006      	beq.n	8008f68 <_scanf_float+0x250>
 8008f5a:	0550      	lsls	r0, r2, #21
 8008f5c:	f57f af0c 	bpl.w	8008d78 <_scanf_float+0x60>
 8008f60:	f1b9 0f00 	cmp.w	r9, #0
 8008f64:	f43f af0f 	beq.w	8008d86 <_scanf_float+0x6e>
 8008f68:	0591      	lsls	r1, r2, #22
 8008f6a:	bf58      	it	pl
 8008f6c:	9901      	ldrpl	r1, [sp, #4]
 8008f6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f72:	bf58      	it	pl
 8008f74:	eba9 0101 	subpl.w	r1, r9, r1
 8008f78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f7c:	bf58      	it	pl
 8008f7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f82:	6022      	str	r2, [r4, #0]
 8008f84:	f04f 0900 	mov.w	r9, #0
 8008f88:	e78a      	b.n	8008ea0 <_scanf_float+0x188>
 8008f8a:	f04f 0a03 	mov.w	sl, #3
 8008f8e:	e787      	b.n	8008ea0 <_scanf_float+0x188>
 8008f90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f94:	4639      	mov	r1, r7
 8008f96:	4640      	mov	r0, r8
 8008f98:	4798      	blx	r3
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f43f aedf 	beq.w	8008d5e <_scanf_float+0x46>
 8008fa0:	e6ea      	b.n	8008d78 <_scanf_float+0x60>
 8008fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008faa:	463a      	mov	r2, r7
 8008fac:	4640      	mov	r0, r8
 8008fae:	4798      	blx	r3
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	6123      	str	r3, [r4, #16]
 8008fb6:	e6ec      	b.n	8008d92 <_scanf_float+0x7a>
 8008fb8:	1e6b      	subs	r3, r5, #1
 8008fba:	2b06      	cmp	r3, #6
 8008fbc:	d825      	bhi.n	800900a <_scanf_float+0x2f2>
 8008fbe:	2d02      	cmp	r5, #2
 8008fc0:	d836      	bhi.n	8009030 <_scanf_float+0x318>
 8008fc2:	455e      	cmp	r6, fp
 8008fc4:	f67f aee8 	bls.w	8008d98 <_scanf_float+0x80>
 8008fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fd0:	463a      	mov	r2, r7
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4798      	blx	r3
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	e7f1      	b.n	8008fc2 <_scanf_float+0x2aa>
 8008fde:	9802      	ldr	r0, [sp, #8]
 8008fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fe4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008fe8:	9002      	str	r0, [sp, #8]
 8008fea:	463a      	mov	r2, r7
 8008fec:	4640      	mov	r0, r8
 8008fee:	4798      	blx	r3
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	6123      	str	r3, [r4, #16]
 8008ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ffa:	fa5f fa8a 	uxtb.w	sl, sl
 8008ffe:	f1ba 0f02 	cmp.w	sl, #2
 8009002:	d1ec      	bne.n	8008fde <_scanf_float+0x2c6>
 8009004:	3d03      	subs	r5, #3
 8009006:	b2ed      	uxtb	r5, r5
 8009008:	1b76      	subs	r6, r6, r5
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	05da      	lsls	r2, r3, #23
 800900e:	d52f      	bpl.n	8009070 <_scanf_float+0x358>
 8009010:	055b      	lsls	r3, r3, #21
 8009012:	d510      	bpl.n	8009036 <_scanf_float+0x31e>
 8009014:	455e      	cmp	r6, fp
 8009016:	f67f aebf 	bls.w	8008d98 <_scanf_float+0x80>
 800901a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800901e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009022:	463a      	mov	r2, r7
 8009024:	4640      	mov	r0, r8
 8009026:	4798      	blx	r3
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	3b01      	subs	r3, #1
 800902c:	6123      	str	r3, [r4, #16]
 800902e:	e7f1      	b.n	8009014 <_scanf_float+0x2fc>
 8009030:	46aa      	mov	sl, r5
 8009032:	9602      	str	r6, [sp, #8]
 8009034:	e7df      	b.n	8008ff6 <_scanf_float+0x2de>
 8009036:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	2965      	cmp	r1, #101	; 0x65
 800903e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009042:	f106 35ff 	add.w	r5, r6, #4294967295
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	d00c      	beq.n	8009064 <_scanf_float+0x34c>
 800904a:	2945      	cmp	r1, #69	; 0x45
 800904c:	d00a      	beq.n	8009064 <_scanf_float+0x34c>
 800904e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009052:	463a      	mov	r2, r7
 8009054:	4640      	mov	r0, r8
 8009056:	4798      	blx	r3
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800905e:	3b01      	subs	r3, #1
 8009060:	1eb5      	subs	r5, r6, #2
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009068:	463a      	mov	r2, r7
 800906a:	4640      	mov	r0, r8
 800906c:	4798      	blx	r3
 800906e:	462e      	mov	r6, r5
 8009070:	6825      	ldr	r5, [r4, #0]
 8009072:	f015 0510 	ands.w	r5, r5, #16
 8009076:	d158      	bne.n	800912a <_scanf_float+0x412>
 8009078:	7035      	strb	r5, [r6, #0]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009084:	d11c      	bne.n	80090c0 <_scanf_float+0x3a8>
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	454b      	cmp	r3, r9
 800908a:	eba3 0209 	sub.w	r2, r3, r9
 800908e:	d124      	bne.n	80090da <_scanf_float+0x3c2>
 8009090:	2200      	movs	r2, #0
 8009092:	4659      	mov	r1, fp
 8009094:	4640      	mov	r0, r8
 8009096:	f000 ff29 	bl	8009eec <_strtod_r>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	6821      	ldr	r1, [r4, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f011 0f02 	tst.w	r1, #2
 80090a4:	ec57 6b10 	vmov	r6, r7, d0
 80090a8:	f103 0204 	add.w	r2, r3, #4
 80090ac:	d020      	beq.n	80090f0 <_scanf_float+0x3d8>
 80090ae:	9903      	ldr	r1, [sp, #12]
 80090b0:	600a      	str	r2, [r1, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	e9c3 6700 	strd	r6, r7, [r3]
 80090b8:	68e3      	ldr	r3, [r4, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60e3      	str	r3, [r4, #12]
 80090be:	e66c      	b.n	8008d9a <_scanf_float+0x82>
 80090c0:	9b04      	ldr	r3, [sp, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0e4      	beq.n	8009090 <_scanf_float+0x378>
 80090c6:	9905      	ldr	r1, [sp, #20]
 80090c8:	230a      	movs	r3, #10
 80090ca:	462a      	mov	r2, r5
 80090cc:	3101      	adds	r1, #1
 80090ce:	4640      	mov	r0, r8
 80090d0:	f000 ff96 	bl	800a000 <_strtol_r>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	9e05      	ldr	r6, [sp, #20]
 80090d8:	1ac2      	subs	r2, r0, r3
 80090da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090de:	429e      	cmp	r6, r3
 80090e0:	bf28      	it	cs
 80090e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80090e6:	4912      	ldr	r1, [pc, #72]	; (8009130 <_scanf_float+0x418>)
 80090e8:	4630      	mov	r0, r6
 80090ea:	f000 f8b9 	bl	8009260 <siprintf>
 80090ee:	e7cf      	b.n	8009090 <_scanf_float+0x378>
 80090f0:	f011 0f04 	tst.w	r1, #4
 80090f4:	9903      	ldr	r1, [sp, #12]
 80090f6:	600a      	str	r2, [r1, #0]
 80090f8:	d1db      	bne.n	80090b2 <_scanf_float+0x39a>
 80090fa:	f8d3 8000 	ldr.w	r8, [r3]
 80090fe:	ee10 2a10 	vmov	r2, s0
 8009102:	ee10 0a10 	vmov	r0, s0
 8009106:	463b      	mov	r3, r7
 8009108:	4639      	mov	r1, r7
 800910a:	f7f7 fd0f 	bl	8000b2c <__aeabi_dcmpun>
 800910e:	b128      	cbz	r0, 800911c <_scanf_float+0x404>
 8009110:	4808      	ldr	r0, [pc, #32]	; (8009134 <_scanf_float+0x41c>)
 8009112:	f000 f89f 	bl	8009254 <nanf>
 8009116:	ed88 0a00 	vstr	s0, [r8]
 800911a:	e7cd      	b.n	80090b8 <_scanf_float+0x3a0>
 800911c:	4630      	mov	r0, r6
 800911e:	4639      	mov	r1, r7
 8009120:	f7f7 fd62 	bl	8000be8 <__aeabi_d2f>
 8009124:	f8c8 0000 	str.w	r0, [r8]
 8009128:	e7c6      	b.n	80090b8 <_scanf_float+0x3a0>
 800912a:	2500      	movs	r5, #0
 800912c:	e635      	b.n	8008d9a <_scanf_float+0x82>
 800912e:	bf00      	nop
 8009130:	0800cf80 	.word	0x0800cf80
 8009134:	0800d3f8 	.word	0x0800d3f8

08009138 <iprintf>:
 8009138:	b40f      	push	{r0, r1, r2, r3}
 800913a:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <iprintf+0x2c>)
 800913c:	b513      	push	{r0, r1, r4, lr}
 800913e:	681c      	ldr	r4, [r3, #0]
 8009140:	b124      	cbz	r4, 800914c <iprintf+0x14>
 8009142:	69a3      	ldr	r3, [r4, #24]
 8009144:	b913      	cbnz	r3, 800914c <iprintf+0x14>
 8009146:	4620      	mov	r0, r4
 8009148:	f001 ffb0 	bl	800b0ac <__sinit>
 800914c:	ab05      	add	r3, sp, #20
 800914e:	9a04      	ldr	r2, [sp, #16]
 8009150:	68a1      	ldr	r1, [r4, #8]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	4620      	mov	r0, r4
 8009156:	f003 fb35 	bl	800c7c4 <_vfiprintf_r>
 800915a:	b002      	add	sp, #8
 800915c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009160:	b004      	add	sp, #16
 8009162:	4770      	bx	lr
 8009164:	2000000c 	.word	0x2000000c

08009168 <_puts_r>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	460e      	mov	r6, r1
 800916c:	4605      	mov	r5, r0
 800916e:	b118      	cbz	r0, 8009178 <_puts_r+0x10>
 8009170:	6983      	ldr	r3, [r0, #24]
 8009172:	b90b      	cbnz	r3, 8009178 <_puts_r+0x10>
 8009174:	f001 ff9a 	bl	800b0ac <__sinit>
 8009178:	69ab      	ldr	r3, [r5, #24]
 800917a:	68ac      	ldr	r4, [r5, #8]
 800917c:	b913      	cbnz	r3, 8009184 <_puts_r+0x1c>
 800917e:	4628      	mov	r0, r5
 8009180:	f001 ff94 	bl	800b0ac <__sinit>
 8009184:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <_puts_r+0xd0>)
 8009186:	429c      	cmp	r4, r3
 8009188:	d120      	bne.n	80091cc <_puts_r+0x64>
 800918a:	686c      	ldr	r4, [r5, #4]
 800918c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800918e:	07db      	lsls	r3, r3, #31
 8009190:	d405      	bmi.n	800919e <_puts_r+0x36>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	0598      	lsls	r0, r3, #22
 8009196:	d402      	bmi.n	800919e <_puts_r+0x36>
 8009198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800919a:	f002 fb98 	bl	800b8ce <__retarget_lock_acquire_recursive>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	0719      	lsls	r1, r3, #28
 80091a2:	d51d      	bpl.n	80091e0 <_puts_r+0x78>
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	b1db      	cbz	r3, 80091e0 <_puts_r+0x78>
 80091a8:	3e01      	subs	r6, #1
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091b0:	3b01      	subs	r3, #1
 80091b2:	60a3      	str	r3, [r4, #8]
 80091b4:	bb39      	cbnz	r1, 8009206 <_puts_r+0x9e>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da38      	bge.n	800922c <_puts_r+0xc4>
 80091ba:	4622      	mov	r2, r4
 80091bc:	210a      	movs	r1, #10
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 ff20 	bl	800a004 <__swbuf_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d011      	beq.n	80091ec <_puts_r+0x84>
 80091c8:	250a      	movs	r5, #10
 80091ca:	e011      	b.n	80091f0 <_puts_r+0x88>
 80091cc:	4b1b      	ldr	r3, [pc, #108]	; (800923c <_puts_r+0xd4>)
 80091ce:	429c      	cmp	r4, r3
 80091d0:	d101      	bne.n	80091d6 <_puts_r+0x6e>
 80091d2:	68ac      	ldr	r4, [r5, #8]
 80091d4:	e7da      	b.n	800918c <_puts_r+0x24>
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <_puts_r+0xd8>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	bf08      	it	eq
 80091dc:	68ec      	ldreq	r4, [r5, #12]
 80091de:	e7d5      	b.n	800918c <_puts_r+0x24>
 80091e0:	4621      	mov	r1, r4
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 ff60 	bl	800a0a8 <__swsetup_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0dd      	beq.n	80091a8 <_puts_r+0x40>
 80091ec:	f04f 35ff 	mov.w	r5, #4294967295
 80091f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091f2:	07da      	lsls	r2, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_puts_r+0x9a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	059b      	lsls	r3, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_puts_r+0x9a>
 80091fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fe:	f002 fb67 	bl	800b8d0 <__retarget_lock_release_recursive>
 8009202:	4628      	mov	r0, r5
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	2b00      	cmp	r3, #0
 8009208:	da04      	bge.n	8009214 <_puts_r+0xac>
 800920a:	69a2      	ldr	r2, [r4, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	dc06      	bgt.n	800921e <_puts_r+0xb6>
 8009210:	290a      	cmp	r1, #10
 8009212:	d004      	beq.n	800921e <_puts_r+0xb6>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	6022      	str	r2, [r4, #0]
 800921a:	7019      	strb	r1, [r3, #0]
 800921c:	e7c5      	b.n	80091aa <_puts_r+0x42>
 800921e:	4622      	mov	r2, r4
 8009220:	4628      	mov	r0, r5
 8009222:	f000 feef 	bl	800a004 <__swbuf_r>
 8009226:	3001      	adds	r0, #1
 8009228:	d1bf      	bne.n	80091aa <_puts_r+0x42>
 800922a:	e7df      	b.n	80091ec <_puts_r+0x84>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	250a      	movs	r5, #10
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	701d      	strb	r5, [r3, #0]
 8009236:	e7db      	b.n	80091f0 <_puts_r+0x88>
 8009238:	0800d190 	.word	0x0800d190
 800923c:	0800d1b0 	.word	0x0800d1b0
 8009240:	0800d170 	.word	0x0800d170

08009244 <puts>:
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <puts+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f7ff bf8d 	b.w	8009168 <_puts_r>
 800924e:	bf00      	nop
 8009250:	2000000c 	.word	0x2000000c

08009254 <nanf>:
 8009254:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800925c <nanf+0x8>
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	7fc00000 	.word	0x7fc00000

08009260 <siprintf>:
 8009260:	b40e      	push	{r1, r2, r3}
 8009262:	b500      	push	{lr}
 8009264:	b09c      	sub	sp, #112	; 0x70
 8009266:	ab1d      	add	r3, sp, #116	; 0x74
 8009268:	9002      	str	r0, [sp, #8]
 800926a:	9006      	str	r0, [sp, #24]
 800926c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009270:	4809      	ldr	r0, [pc, #36]	; (8009298 <siprintf+0x38>)
 8009272:	9107      	str	r1, [sp, #28]
 8009274:	9104      	str	r1, [sp, #16]
 8009276:	4909      	ldr	r1, [pc, #36]	; (800929c <siprintf+0x3c>)
 8009278:	f853 2b04 	ldr.w	r2, [r3], #4
 800927c:	9105      	str	r1, [sp, #20]
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	a902      	add	r1, sp, #8
 8009284:	f003 f974 	bl	800c570 <_svfiprintf_r>
 8009288:	9b02      	ldr	r3, [sp, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	b01c      	add	sp, #112	; 0x70
 8009290:	f85d eb04 	ldr.w	lr, [sp], #4
 8009294:	b003      	add	sp, #12
 8009296:	4770      	bx	lr
 8009298:	2000000c 	.word	0x2000000c
 800929c:	ffff0208 	.word	0xffff0208

080092a0 <sulp>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4604      	mov	r4, r0
 80092a4:	460d      	mov	r5, r1
 80092a6:	ec45 4b10 	vmov	d0, r4, r5
 80092aa:	4616      	mov	r6, r2
 80092ac:	f002 fefc 	bl	800c0a8 <__ulp>
 80092b0:	ec51 0b10 	vmov	r0, r1, d0
 80092b4:	b17e      	cbz	r6, 80092d6 <sulp+0x36>
 80092b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dd09      	ble.n	80092d6 <sulp+0x36>
 80092c2:	051b      	lsls	r3, r3, #20
 80092c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092c8:	2400      	movs	r4, #0
 80092ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80092ce:	4622      	mov	r2, r4
 80092d0:	462b      	mov	r3, r5
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <_strtod_l>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	b0a3      	sub	sp, #140	; 0x8c
 80092de:	461f      	mov	r7, r3
 80092e0:	2300      	movs	r3, #0
 80092e2:	931e      	str	r3, [sp, #120]	; 0x78
 80092e4:	4ba4      	ldr	r3, [pc, #656]	; (8009578 <_strtod_l+0x2a0>)
 80092e6:	9219      	str	r2, [sp, #100]	; 0x64
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	4604      	mov	r4, r0
 80092ee:	4618      	mov	r0, r3
 80092f0:	4688      	mov	r8, r1
 80092f2:	f7f6 ff6d 	bl	80001d0 <strlen>
 80092f6:	f04f 0a00 	mov.w	sl, #0
 80092fa:	4605      	mov	r5, r0
 80092fc:	f04f 0b00 	mov.w	fp, #0
 8009300:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	2a2b      	cmp	r2, #43	; 0x2b
 800930a:	d04c      	beq.n	80093a6 <_strtod_l+0xce>
 800930c:	d839      	bhi.n	8009382 <_strtod_l+0xaa>
 800930e:	2a0d      	cmp	r2, #13
 8009310:	d832      	bhi.n	8009378 <_strtod_l+0xa0>
 8009312:	2a08      	cmp	r2, #8
 8009314:	d832      	bhi.n	800937c <_strtod_l+0xa4>
 8009316:	2a00      	cmp	r2, #0
 8009318:	d03c      	beq.n	8009394 <_strtod_l+0xbc>
 800931a:	2300      	movs	r3, #0
 800931c:	930e      	str	r3, [sp, #56]	; 0x38
 800931e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009320:	7833      	ldrb	r3, [r6, #0]
 8009322:	2b30      	cmp	r3, #48	; 0x30
 8009324:	f040 80b4 	bne.w	8009490 <_strtod_l+0x1b8>
 8009328:	7873      	ldrb	r3, [r6, #1]
 800932a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800932e:	2b58      	cmp	r3, #88	; 0x58
 8009330:	d16c      	bne.n	800940c <_strtod_l+0x134>
 8009332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	ab1e      	add	r3, sp, #120	; 0x78
 8009338:	9702      	str	r7, [sp, #8]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	4a8f      	ldr	r2, [pc, #572]	; (800957c <_strtod_l+0x2a4>)
 800933e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009340:	a91d      	add	r1, sp, #116	; 0x74
 8009342:	4620      	mov	r0, r4
 8009344:	f001 ffb6 	bl	800b2b4 <__gethex>
 8009348:	f010 0707 	ands.w	r7, r0, #7
 800934c:	4605      	mov	r5, r0
 800934e:	d005      	beq.n	800935c <_strtod_l+0x84>
 8009350:	2f06      	cmp	r7, #6
 8009352:	d12a      	bne.n	80093aa <_strtod_l+0xd2>
 8009354:	3601      	adds	r6, #1
 8009356:	2300      	movs	r3, #0
 8009358:	961d      	str	r6, [sp, #116]	; 0x74
 800935a:	930e      	str	r3, [sp, #56]	; 0x38
 800935c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 8596 	bne.w	8009e90 <_strtod_l+0xbb8>
 8009364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009366:	b1db      	cbz	r3, 80093a0 <_strtod_l+0xc8>
 8009368:	4652      	mov	r2, sl
 800936a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800936e:	ec43 2b10 	vmov	d0, r2, r3
 8009372:	b023      	add	sp, #140	; 0x8c
 8009374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009378:	2a20      	cmp	r2, #32
 800937a:	d1ce      	bne.n	800931a <_strtod_l+0x42>
 800937c:	3301      	adds	r3, #1
 800937e:	931d      	str	r3, [sp, #116]	; 0x74
 8009380:	e7c0      	b.n	8009304 <_strtod_l+0x2c>
 8009382:	2a2d      	cmp	r2, #45	; 0x2d
 8009384:	d1c9      	bne.n	800931a <_strtod_l+0x42>
 8009386:	2201      	movs	r2, #1
 8009388:	920e      	str	r2, [sp, #56]	; 0x38
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	921d      	str	r2, [sp, #116]	; 0x74
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1c4      	bne.n	800931e <_strtod_l+0x46>
 8009394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009396:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 8576 	bne.w	8009e8c <_strtod_l+0xbb4>
 80093a0:	4652      	mov	r2, sl
 80093a2:	465b      	mov	r3, fp
 80093a4:	e7e3      	b.n	800936e <_strtod_l+0x96>
 80093a6:	2200      	movs	r2, #0
 80093a8:	e7ee      	b.n	8009388 <_strtod_l+0xb0>
 80093aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80093ac:	b13a      	cbz	r2, 80093be <_strtod_l+0xe6>
 80093ae:	2135      	movs	r1, #53	; 0x35
 80093b0:	a820      	add	r0, sp, #128	; 0x80
 80093b2:	f002 ff84 	bl	800c2be <__copybits>
 80093b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093b8:	4620      	mov	r0, r4
 80093ba:	f002 fb49 	bl	800ba50 <_Bfree>
 80093be:	3f01      	subs	r7, #1
 80093c0:	2f05      	cmp	r7, #5
 80093c2:	d807      	bhi.n	80093d4 <_strtod_l+0xfc>
 80093c4:	e8df f007 	tbb	[pc, r7]
 80093c8:	1d180b0e 	.word	0x1d180b0e
 80093cc:	030e      	.short	0x030e
 80093ce:	f04f 0b00 	mov.w	fp, #0
 80093d2:	46da      	mov	sl, fp
 80093d4:	0728      	lsls	r0, r5, #28
 80093d6:	d5c1      	bpl.n	800935c <_strtod_l+0x84>
 80093d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093dc:	e7be      	b.n	800935c <_strtod_l+0x84>
 80093de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80093e2:	e7f7      	b.n	80093d4 <_strtod_l+0xfc>
 80093e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80093e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093f6:	e7ed      	b.n	80093d4 <_strtod_l+0xfc>
 80093f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009580 <_strtod_l+0x2a8>
 80093fc:	f04f 0a00 	mov.w	sl, #0
 8009400:	e7e8      	b.n	80093d4 <_strtod_l+0xfc>
 8009402:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009406:	f04f 3aff 	mov.w	sl, #4294967295
 800940a:	e7e3      	b.n	80093d4 <_strtod_l+0xfc>
 800940c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	921d      	str	r2, [sp, #116]	; 0x74
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b30      	cmp	r3, #48	; 0x30
 8009416:	d0f9      	beq.n	800940c <_strtod_l+0x134>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d09f      	beq.n	800935c <_strtod_l+0x84>
 800941c:	2301      	movs	r3, #1
 800941e:	f04f 0900 	mov.w	r9, #0
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009426:	930a      	str	r3, [sp, #40]	; 0x28
 8009428:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800942c:	464f      	mov	r7, r9
 800942e:	220a      	movs	r2, #10
 8009430:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009432:	7806      	ldrb	r6, [r0, #0]
 8009434:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009438:	b2d9      	uxtb	r1, r3
 800943a:	2909      	cmp	r1, #9
 800943c:	d92a      	bls.n	8009494 <_strtod_l+0x1bc>
 800943e:	9907      	ldr	r1, [sp, #28]
 8009440:	462a      	mov	r2, r5
 8009442:	f003 fb4c 	bl	800cade <strncmp>
 8009446:	b398      	cbz	r0, 80094b0 <_strtod_l+0x1d8>
 8009448:	2000      	movs	r0, #0
 800944a:	4633      	mov	r3, r6
 800944c:	463d      	mov	r5, r7
 800944e:	9007      	str	r0, [sp, #28]
 8009450:	4602      	mov	r2, r0
 8009452:	2b65      	cmp	r3, #101	; 0x65
 8009454:	d001      	beq.n	800945a <_strtod_l+0x182>
 8009456:	2b45      	cmp	r3, #69	; 0x45
 8009458:	d118      	bne.n	800948c <_strtod_l+0x1b4>
 800945a:	b91d      	cbnz	r5, 8009464 <_strtod_l+0x18c>
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	4303      	orrs	r3, r0
 8009460:	d098      	beq.n	8009394 <_strtod_l+0xbc>
 8009462:	2500      	movs	r5, #0
 8009464:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009468:	f108 0301 	add.w	r3, r8, #1
 800946c:	931d      	str	r3, [sp, #116]	; 0x74
 800946e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009472:	2b2b      	cmp	r3, #43	; 0x2b
 8009474:	d075      	beq.n	8009562 <_strtod_l+0x28a>
 8009476:	2b2d      	cmp	r3, #45	; 0x2d
 8009478:	d07b      	beq.n	8009572 <_strtod_l+0x29a>
 800947a:	f04f 0c00 	mov.w	ip, #0
 800947e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009482:	2909      	cmp	r1, #9
 8009484:	f240 8082 	bls.w	800958c <_strtod_l+0x2b4>
 8009488:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800948c:	2600      	movs	r6, #0
 800948e:	e09d      	b.n	80095cc <_strtod_l+0x2f4>
 8009490:	2300      	movs	r3, #0
 8009492:	e7c4      	b.n	800941e <_strtod_l+0x146>
 8009494:	2f08      	cmp	r7, #8
 8009496:	bfd8      	it	le
 8009498:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800949a:	f100 0001 	add.w	r0, r0, #1
 800949e:	bfda      	itte	le
 80094a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80094a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80094a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80094aa:	3701      	adds	r7, #1
 80094ac:	901d      	str	r0, [sp, #116]	; 0x74
 80094ae:	e7bf      	b.n	8009430 <_strtod_l+0x158>
 80094b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094b2:	195a      	adds	r2, r3, r5
 80094b4:	921d      	str	r2, [sp, #116]	; 0x74
 80094b6:	5d5b      	ldrb	r3, [r3, r5]
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	d037      	beq.n	800952c <_strtod_l+0x254>
 80094bc:	9007      	str	r0, [sp, #28]
 80094be:	463d      	mov	r5, r7
 80094c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80094c4:	2a09      	cmp	r2, #9
 80094c6:	d912      	bls.n	80094ee <_strtod_l+0x216>
 80094c8:	2201      	movs	r2, #1
 80094ca:	e7c2      	b.n	8009452 <_strtod_l+0x17a>
 80094cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	921d      	str	r2, [sp, #116]	; 0x74
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	3001      	adds	r0, #1
 80094d6:	2b30      	cmp	r3, #48	; 0x30
 80094d8:	d0f8      	beq.n	80094cc <_strtod_l+0x1f4>
 80094da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80094de:	2a08      	cmp	r2, #8
 80094e0:	f200 84db 	bhi.w	8009e9a <_strtod_l+0xbc2>
 80094e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094e6:	9007      	str	r0, [sp, #28]
 80094e8:	2000      	movs	r0, #0
 80094ea:	920a      	str	r2, [sp, #40]	; 0x28
 80094ec:	4605      	mov	r5, r0
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	f100 0201 	add.w	r2, r0, #1
 80094f4:	d014      	beq.n	8009520 <_strtod_l+0x248>
 80094f6:	9907      	ldr	r1, [sp, #28]
 80094f8:	4411      	add	r1, r2
 80094fa:	9107      	str	r1, [sp, #28]
 80094fc:	462a      	mov	r2, r5
 80094fe:	eb00 0e05 	add.w	lr, r0, r5
 8009502:	210a      	movs	r1, #10
 8009504:	4572      	cmp	r2, lr
 8009506:	d113      	bne.n	8009530 <_strtod_l+0x258>
 8009508:	182a      	adds	r2, r5, r0
 800950a:	2a08      	cmp	r2, #8
 800950c:	f105 0501 	add.w	r5, r5, #1
 8009510:	4405      	add	r5, r0
 8009512:	dc1c      	bgt.n	800954e <_strtod_l+0x276>
 8009514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009516:	220a      	movs	r2, #10
 8009518:	fb02 3301 	mla	r3, r2, r1, r3
 800951c:	9309      	str	r3, [sp, #36]	; 0x24
 800951e:	2200      	movs	r2, #0
 8009520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	911d      	str	r1, [sp, #116]	; 0x74
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	4610      	mov	r0, r2
 800952a:	e7c9      	b.n	80094c0 <_strtod_l+0x1e8>
 800952c:	4638      	mov	r0, r7
 800952e:	e7d2      	b.n	80094d6 <_strtod_l+0x1fe>
 8009530:	2a08      	cmp	r2, #8
 8009532:	dc04      	bgt.n	800953e <_strtod_l+0x266>
 8009534:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009536:	434e      	muls	r6, r1
 8009538:	9609      	str	r6, [sp, #36]	; 0x24
 800953a:	3201      	adds	r2, #1
 800953c:	e7e2      	b.n	8009504 <_strtod_l+0x22c>
 800953e:	f102 0c01 	add.w	ip, r2, #1
 8009542:	f1bc 0f10 	cmp.w	ip, #16
 8009546:	bfd8      	it	le
 8009548:	fb01 f909 	mulle.w	r9, r1, r9
 800954c:	e7f5      	b.n	800953a <_strtod_l+0x262>
 800954e:	2d10      	cmp	r5, #16
 8009550:	bfdc      	itt	le
 8009552:	220a      	movle	r2, #10
 8009554:	fb02 3909 	mlale	r9, r2, r9, r3
 8009558:	e7e1      	b.n	800951e <_strtod_l+0x246>
 800955a:	2300      	movs	r3, #0
 800955c:	9307      	str	r3, [sp, #28]
 800955e:	2201      	movs	r2, #1
 8009560:	e77c      	b.n	800945c <_strtod_l+0x184>
 8009562:	f04f 0c00 	mov.w	ip, #0
 8009566:	f108 0302 	add.w	r3, r8, #2
 800956a:	931d      	str	r3, [sp, #116]	; 0x74
 800956c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009570:	e785      	b.n	800947e <_strtod_l+0x1a6>
 8009572:	f04f 0c01 	mov.w	ip, #1
 8009576:	e7f6      	b.n	8009566 <_strtod_l+0x28e>
 8009578:	0800d23c 	.word	0x0800d23c
 800957c:	0800cf88 	.word	0x0800cf88
 8009580:	7ff00000 	.word	0x7ff00000
 8009584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009586:	1c59      	adds	r1, r3, #1
 8009588:	911d      	str	r1, [sp, #116]	; 0x74
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	2b30      	cmp	r3, #48	; 0x30
 800958e:	d0f9      	beq.n	8009584 <_strtod_l+0x2ac>
 8009590:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009594:	2908      	cmp	r1, #8
 8009596:	f63f af79 	bhi.w	800948c <_strtod_l+0x1b4>
 800959a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800959e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a4:	1c59      	adds	r1, r3, #1
 80095a6:	911d      	str	r1, [sp, #116]	; 0x74
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80095ae:	2e09      	cmp	r6, #9
 80095b0:	d937      	bls.n	8009622 <_strtod_l+0x34a>
 80095b2:	9e08      	ldr	r6, [sp, #32]
 80095b4:	1b89      	subs	r1, r1, r6
 80095b6:	2908      	cmp	r1, #8
 80095b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80095bc:	dc02      	bgt.n	80095c4 <_strtod_l+0x2ec>
 80095be:	4576      	cmp	r6, lr
 80095c0:	bfa8      	it	ge
 80095c2:	4676      	movge	r6, lr
 80095c4:	f1bc 0f00 	cmp.w	ip, #0
 80095c8:	d000      	beq.n	80095cc <_strtod_l+0x2f4>
 80095ca:	4276      	negs	r6, r6
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	d14f      	bne.n	8009670 <_strtod_l+0x398>
 80095d0:	9904      	ldr	r1, [sp, #16]
 80095d2:	4301      	orrs	r1, r0
 80095d4:	f47f aec2 	bne.w	800935c <_strtod_l+0x84>
 80095d8:	2a00      	cmp	r2, #0
 80095da:	f47f aedb 	bne.w	8009394 <_strtod_l+0xbc>
 80095de:	2b69      	cmp	r3, #105	; 0x69
 80095e0:	d027      	beq.n	8009632 <_strtod_l+0x35a>
 80095e2:	dc24      	bgt.n	800962e <_strtod_l+0x356>
 80095e4:	2b49      	cmp	r3, #73	; 0x49
 80095e6:	d024      	beq.n	8009632 <_strtod_l+0x35a>
 80095e8:	2b4e      	cmp	r3, #78	; 0x4e
 80095ea:	f47f aed3 	bne.w	8009394 <_strtod_l+0xbc>
 80095ee:	499e      	ldr	r1, [pc, #632]	; (8009868 <_strtod_l+0x590>)
 80095f0:	a81d      	add	r0, sp, #116	; 0x74
 80095f2:	f002 f8b7 	bl	800b764 <__match>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f aecc 	beq.w	8009394 <_strtod_l+0xbc>
 80095fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b28      	cmp	r3, #40	; 0x28
 8009602:	d12d      	bne.n	8009660 <_strtod_l+0x388>
 8009604:	4999      	ldr	r1, [pc, #612]	; (800986c <_strtod_l+0x594>)
 8009606:	aa20      	add	r2, sp, #128	; 0x80
 8009608:	a81d      	add	r0, sp, #116	; 0x74
 800960a:	f002 f8bf 	bl	800b78c <__hexnan>
 800960e:	2805      	cmp	r0, #5
 8009610:	d126      	bne.n	8009660 <_strtod_l+0x388>
 8009612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009614:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009618:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800961c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009620:	e69c      	b.n	800935c <_strtod_l+0x84>
 8009622:	210a      	movs	r1, #10
 8009624:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009628:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800962c:	e7b9      	b.n	80095a2 <_strtod_l+0x2ca>
 800962e:	2b6e      	cmp	r3, #110	; 0x6e
 8009630:	e7db      	b.n	80095ea <_strtod_l+0x312>
 8009632:	498f      	ldr	r1, [pc, #572]	; (8009870 <_strtod_l+0x598>)
 8009634:	a81d      	add	r0, sp, #116	; 0x74
 8009636:	f002 f895 	bl	800b764 <__match>
 800963a:	2800      	cmp	r0, #0
 800963c:	f43f aeaa 	beq.w	8009394 <_strtod_l+0xbc>
 8009640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009642:	498c      	ldr	r1, [pc, #560]	; (8009874 <_strtod_l+0x59c>)
 8009644:	3b01      	subs	r3, #1
 8009646:	a81d      	add	r0, sp, #116	; 0x74
 8009648:	931d      	str	r3, [sp, #116]	; 0x74
 800964a:	f002 f88b 	bl	800b764 <__match>
 800964e:	b910      	cbnz	r0, 8009656 <_strtod_l+0x37e>
 8009650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009652:	3301      	adds	r3, #1
 8009654:	931d      	str	r3, [sp, #116]	; 0x74
 8009656:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009884 <_strtod_l+0x5ac>
 800965a:	f04f 0a00 	mov.w	sl, #0
 800965e:	e67d      	b.n	800935c <_strtod_l+0x84>
 8009660:	4885      	ldr	r0, [pc, #532]	; (8009878 <_strtod_l+0x5a0>)
 8009662:	f003 f9e1 	bl	800ca28 <nan>
 8009666:	ed8d 0b04 	vstr	d0, [sp, #16]
 800966a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800966e:	e675      	b.n	800935c <_strtod_l+0x84>
 8009670:	9b07      	ldr	r3, [sp, #28]
 8009672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009674:	1af3      	subs	r3, r6, r3
 8009676:	2f00      	cmp	r7, #0
 8009678:	bf08      	it	eq
 800967a:	462f      	moveq	r7, r5
 800967c:	2d10      	cmp	r5, #16
 800967e:	9308      	str	r3, [sp, #32]
 8009680:	46a8      	mov	r8, r5
 8009682:	bfa8      	it	ge
 8009684:	f04f 0810 	movge.w	r8, #16
 8009688:	f7f6 ff3c 	bl	8000504 <__aeabi_ui2d>
 800968c:	2d09      	cmp	r5, #9
 800968e:	4682      	mov	sl, r0
 8009690:	468b      	mov	fp, r1
 8009692:	dd13      	ble.n	80096bc <_strtod_l+0x3e4>
 8009694:	4b79      	ldr	r3, [pc, #484]	; (800987c <_strtod_l+0x5a4>)
 8009696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800969a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	4682      	mov	sl, r0
 80096a4:	4648      	mov	r0, r9
 80096a6:	468b      	mov	fp, r1
 80096a8:	f7f6 ff2c 	bl	8000504 <__aeabi_ui2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4650      	mov	r0, sl
 80096b2:	4659      	mov	r1, fp
 80096b4:	f7f6 fdea 	bl	800028c <__adddf3>
 80096b8:	4682      	mov	sl, r0
 80096ba:	468b      	mov	fp, r1
 80096bc:	2d0f      	cmp	r5, #15
 80096be:	dc38      	bgt.n	8009732 <_strtod_l+0x45a>
 80096c0:	9b08      	ldr	r3, [sp, #32]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f43f ae4a 	beq.w	800935c <_strtod_l+0x84>
 80096c8:	dd24      	ble.n	8009714 <_strtod_l+0x43c>
 80096ca:	2b16      	cmp	r3, #22
 80096cc:	dc0b      	bgt.n	80096e6 <_strtod_l+0x40e>
 80096ce:	4d6b      	ldr	r5, [pc, #428]	; (800987c <_strtod_l+0x5a4>)
 80096d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80096d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80096d8:	4652      	mov	r2, sl
 80096da:	465b      	mov	r3, fp
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	4682      	mov	sl, r0
 80096e2:	468b      	mov	fp, r1
 80096e4:	e63a      	b.n	800935c <_strtod_l+0x84>
 80096e6:	9a08      	ldr	r2, [sp, #32]
 80096e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80096ec:	4293      	cmp	r3, r2
 80096ee:	db20      	blt.n	8009732 <_strtod_l+0x45a>
 80096f0:	4c62      	ldr	r4, [pc, #392]	; (800987c <_strtod_l+0x5a4>)
 80096f2:	f1c5 050f 	rsb	r5, r5, #15
 80096f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096fa:	4652      	mov	r2, sl
 80096fc:	465b      	mov	r3, fp
 80096fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009702:	f7f6 ff79 	bl	80005f8 <__aeabi_dmul>
 8009706:	9b08      	ldr	r3, [sp, #32]
 8009708:	1b5d      	subs	r5, r3, r5
 800970a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800970e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009712:	e7e3      	b.n	80096dc <_strtod_l+0x404>
 8009714:	9b08      	ldr	r3, [sp, #32]
 8009716:	3316      	adds	r3, #22
 8009718:	db0b      	blt.n	8009732 <_strtod_l+0x45a>
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	4a57      	ldr	r2, [pc, #348]	; (800987c <_strtod_l+0x5a4>)
 800971e:	1b9e      	subs	r6, r3, r6
 8009720:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	f7f7 f88e 	bl	800084c <__aeabi_ddiv>
 8009730:	e7d6      	b.n	80096e0 <_strtod_l+0x408>
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	eba5 0808 	sub.w	r8, r5, r8
 8009738:	4498      	add	r8, r3
 800973a:	f1b8 0f00 	cmp.w	r8, #0
 800973e:	dd71      	ble.n	8009824 <_strtod_l+0x54c>
 8009740:	f018 030f 	ands.w	r3, r8, #15
 8009744:	d00a      	beq.n	800975c <_strtod_l+0x484>
 8009746:	494d      	ldr	r1, [pc, #308]	; (800987c <_strtod_l+0x5a4>)
 8009748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800974c:	4652      	mov	r2, sl
 800974e:	465b      	mov	r3, fp
 8009750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009754:	f7f6 ff50 	bl	80005f8 <__aeabi_dmul>
 8009758:	4682      	mov	sl, r0
 800975a:	468b      	mov	fp, r1
 800975c:	f038 080f 	bics.w	r8, r8, #15
 8009760:	d04d      	beq.n	80097fe <_strtod_l+0x526>
 8009762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009766:	dd22      	ble.n	80097ae <_strtod_l+0x4d6>
 8009768:	2500      	movs	r5, #0
 800976a:	462e      	mov	r6, r5
 800976c:	9509      	str	r5, [sp, #36]	; 0x24
 800976e:	9507      	str	r5, [sp, #28]
 8009770:	2322      	movs	r3, #34	; 0x22
 8009772:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009884 <_strtod_l+0x5ac>
 8009776:	6023      	str	r3, [r4, #0]
 8009778:	f04f 0a00 	mov.w	sl, #0
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	f43f adec 	beq.w	800935c <_strtod_l+0x84>
 8009784:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009786:	4620      	mov	r0, r4
 8009788:	f002 f962 	bl	800ba50 <_Bfree>
 800978c:	9907      	ldr	r1, [sp, #28]
 800978e:	4620      	mov	r0, r4
 8009790:	f002 f95e 	bl	800ba50 <_Bfree>
 8009794:	4631      	mov	r1, r6
 8009796:	4620      	mov	r0, r4
 8009798:	f002 f95a 	bl	800ba50 <_Bfree>
 800979c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800979e:	4620      	mov	r0, r4
 80097a0:	f002 f956 	bl	800ba50 <_Bfree>
 80097a4:	4629      	mov	r1, r5
 80097a6:	4620      	mov	r0, r4
 80097a8:	f002 f952 	bl	800ba50 <_Bfree>
 80097ac:	e5d6      	b.n	800935c <_strtod_l+0x84>
 80097ae:	2300      	movs	r3, #0
 80097b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80097b4:	4650      	mov	r0, sl
 80097b6:	4659      	mov	r1, fp
 80097b8:	4699      	mov	r9, r3
 80097ba:	f1b8 0f01 	cmp.w	r8, #1
 80097be:	dc21      	bgt.n	8009804 <_strtod_l+0x52c>
 80097c0:	b10b      	cbz	r3, 80097c6 <_strtod_l+0x4ee>
 80097c2:	4682      	mov	sl, r0
 80097c4:	468b      	mov	fp, r1
 80097c6:	4b2e      	ldr	r3, [pc, #184]	; (8009880 <_strtod_l+0x5a8>)
 80097c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80097d0:	4652      	mov	r2, sl
 80097d2:	465b      	mov	r3, fp
 80097d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	4b29      	ldr	r3, [pc, #164]	; (8009884 <_strtod_l+0x5ac>)
 80097de:	460a      	mov	r2, r1
 80097e0:	400b      	ands	r3, r1
 80097e2:	4929      	ldr	r1, [pc, #164]	; (8009888 <_strtod_l+0x5b0>)
 80097e4:	428b      	cmp	r3, r1
 80097e6:	4682      	mov	sl, r0
 80097e8:	d8be      	bhi.n	8009768 <_strtod_l+0x490>
 80097ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097ee:	428b      	cmp	r3, r1
 80097f0:	bf86      	itte	hi
 80097f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800988c <_strtod_l+0x5b4>
 80097f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80097fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097fe:	2300      	movs	r3, #0
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	e081      	b.n	8009908 <_strtod_l+0x630>
 8009804:	f018 0f01 	tst.w	r8, #1
 8009808:	d007      	beq.n	800981a <_strtod_l+0x542>
 800980a:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <_strtod_l+0x5a8>)
 800980c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fef0 	bl	80005f8 <__aeabi_dmul>
 8009818:	2301      	movs	r3, #1
 800981a:	f109 0901 	add.w	r9, r9, #1
 800981e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009822:	e7ca      	b.n	80097ba <_strtod_l+0x4e2>
 8009824:	d0eb      	beq.n	80097fe <_strtod_l+0x526>
 8009826:	f1c8 0800 	rsb	r8, r8, #0
 800982a:	f018 020f 	ands.w	r2, r8, #15
 800982e:	d00a      	beq.n	8009846 <_strtod_l+0x56e>
 8009830:	4b12      	ldr	r3, [pc, #72]	; (800987c <_strtod_l+0x5a4>)
 8009832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009836:	4650      	mov	r0, sl
 8009838:	4659      	mov	r1, fp
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f7 f805 	bl	800084c <__aeabi_ddiv>
 8009842:	4682      	mov	sl, r0
 8009844:	468b      	mov	fp, r1
 8009846:	ea5f 1828 	movs.w	r8, r8, asr #4
 800984a:	d0d8      	beq.n	80097fe <_strtod_l+0x526>
 800984c:	f1b8 0f1f 	cmp.w	r8, #31
 8009850:	dd1e      	ble.n	8009890 <_strtod_l+0x5b8>
 8009852:	2500      	movs	r5, #0
 8009854:	462e      	mov	r6, r5
 8009856:	9509      	str	r5, [sp, #36]	; 0x24
 8009858:	9507      	str	r5, [sp, #28]
 800985a:	2322      	movs	r3, #34	; 0x22
 800985c:	f04f 0a00 	mov.w	sl, #0
 8009860:	f04f 0b00 	mov.w	fp, #0
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	e789      	b.n	800977c <_strtod_l+0x4a4>
 8009868:	0800cf59 	.word	0x0800cf59
 800986c:	0800cf9c 	.word	0x0800cf9c
 8009870:	0800cf51 	.word	0x0800cf51
 8009874:	0800d0dc 	.word	0x0800d0dc
 8009878:	0800d3f8 	.word	0x0800d3f8
 800987c:	0800d2d8 	.word	0x0800d2d8
 8009880:	0800d2b0 	.word	0x0800d2b0
 8009884:	7ff00000 	.word	0x7ff00000
 8009888:	7ca00000 	.word	0x7ca00000
 800988c:	7fefffff 	.word	0x7fefffff
 8009890:	f018 0310 	ands.w	r3, r8, #16
 8009894:	bf18      	it	ne
 8009896:	236a      	movne	r3, #106	; 0x6a
 8009898:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009c50 <_strtod_l+0x978>
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	4650      	mov	r0, sl
 80098a0:	4659      	mov	r1, fp
 80098a2:	2300      	movs	r3, #0
 80098a4:	f018 0f01 	tst.w	r8, #1
 80098a8:	d004      	beq.n	80098b4 <_strtod_l+0x5dc>
 80098aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098ae:	f7f6 fea3 	bl	80005f8 <__aeabi_dmul>
 80098b2:	2301      	movs	r3, #1
 80098b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80098b8:	f109 0908 	add.w	r9, r9, #8
 80098bc:	d1f2      	bne.n	80098a4 <_strtod_l+0x5cc>
 80098be:	b10b      	cbz	r3, 80098c4 <_strtod_l+0x5ec>
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	b1bb      	cbz	r3, 80098f8 <_strtod_l+0x620>
 80098c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	4659      	mov	r1, fp
 80098d4:	dd10      	ble.n	80098f8 <_strtod_l+0x620>
 80098d6:	2b1f      	cmp	r3, #31
 80098d8:	f340 8128 	ble.w	8009b2c <_strtod_l+0x854>
 80098dc:	2b34      	cmp	r3, #52	; 0x34
 80098de:	bfde      	ittt	le
 80098e0:	3b20      	suble	r3, #32
 80098e2:	f04f 32ff 	movle.w	r2, #4294967295
 80098e6:	fa02 f303 	lslle.w	r3, r2, r3
 80098ea:	f04f 0a00 	mov.w	sl, #0
 80098ee:	bfcc      	ite	gt
 80098f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098f4:	ea03 0b01 	andle.w	fp, r3, r1
 80098f8:	2200      	movs	r2, #0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4650      	mov	r0, sl
 80098fe:	4659      	mov	r1, fp
 8009900:	f7f7 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009904:	2800      	cmp	r0, #0
 8009906:	d1a4      	bne.n	8009852 <_strtod_l+0x57a>
 8009908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800990e:	462b      	mov	r3, r5
 8009910:	463a      	mov	r2, r7
 8009912:	4620      	mov	r0, r4
 8009914:	f002 f908 	bl	800bb28 <__s2b>
 8009918:	9009      	str	r0, [sp, #36]	; 0x24
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f af24 	beq.w	8009768 <_strtod_l+0x490>
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	1b9e      	subs	r6, r3, r6
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfb4      	ite	lt
 800992a:	4633      	movlt	r3, r6
 800992c:	2300      	movge	r3, #0
 800992e:	9310      	str	r3, [sp, #64]	; 0x40
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	2500      	movs	r5, #0
 8009934:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009938:	9318      	str	r3, [sp, #96]	; 0x60
 800993a:	462e      	mov	r6, r5
 800993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993e:	4620      	mov	r0, r4
 8009940:	6859      	ldr	r1, [r3, #4]
 8009942:	f002 f845 	bl	800b9d0 <_Balloc>
 8009946:	9007      	str	r0, [sp, #28]
 8009948:	2800      	cmp	r0, #0
 800994a:	f43f af11 	beq.w	8009770 <_strtod_l+0x498>
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	691a      	ldr	r2, [r3, #16]
 8009952:	3202      	adds	r2, #2
 8009954:	f103 010c 	add.w	r1, r3, #12
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	300c      	adds	r0, #12
 800995c:	f7fe fd5c 	bl	8008418 <memcpy>
 8009960:	ec4b ab10 	vmov	d0, sl, fp
 8009964:	aa20      	add	r2, sp, #128	; 0x80
 8009966:	a91f      	add	r1, sp, #124	; 0x7c
 8009968:	4620      	mov	r0, r4
 800996a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800996e:	f002 fc17 	bl	800c1a0 <__d2b>
 8009972:	901e      	str	r0, [sp, #120]	; 0x78
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f aefb 	beq.w	8009770 <_strtod_l+0x498>
 800997a:	2101      	movs	r1, #1
 800997c:	4620      	mov	r0, r4
 800997e:	f002 f96d 	bl	800bc5c <__i2b>
 8009982:	4606      	mov	r6, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f aef3 	beq.w	8009770 <_strtod_l+0x498>
 800998a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800998c:	9904      	ldr	r1, [sp, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfab      	itete	ge
 8009992:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009994:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009996:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009998:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800999c:	bfac      	ite	ge
 800999e:	eb03 0902 	addge.w	r9, r3, r2
 80099a2:	1ad7      	sublt	r7, r2, r3
 80099a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80099a6:	eba3 0801 	sub.w	r8, r3, r1
 80099aa:	4490      	add	r8, r2
 80099ac:	4ba3      	ldr	r3, [pc, #652]	; (8009c3c <_strtod_l+0x964>)
 80099ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80099b2:	4598      	cmp	r8, r3
 80099b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099b8:	f280 80cc 	bge.w	8009b54 <_strtod_l+0x87c>
 80099bc:	eba3 0308 	sub.w	r3, r3, r8
 80099c0:	2b1f      	cmp	r3, #31
 80099c2:	eba2 0203 	sub.w	r2, r2, r3
 80099c6:	f04f 0101 	mov.w	r1, #1
 80099ca:	f300 80b6 	bgt.w	8009b3a <_strtod_l+0x862>
 80099ce:	fa01 f303 	lsl.w	r3, r1, r3
 80099d2:	9311      	str	r3, [sp, #68]	; 0x44
 80099d4:	2300      	movs	r3, #0
 80099d6:	930c      	str	r3, [sp, #48]	; 0x30
 80099d8:	eb09 0802 	add.w	r8, r9, r2
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	45c1      	cmp	r9, r8
 80099e0:	4417      	add	r7, r2
 80099e2:	441f      	add	r7, r3
 80099e4:	464b      	mov	r3, r9
 80099e6:	bfa8      	it	ge
 80099e8:	4643      	movge	r3, r8
 80099ea:	42bb      	cmp	r3, r7
 80099ec:	bfa8      	it	ge
 80099ee:	463b      	movge	r3, r7
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfc2      	ittt	gt
 80099f4:	eba8 0803 	subgt.w	r8, r8, r3
 80099f8:	1aff      	subgt	r7, r7, r3
 80099fa:	eba9 0903 	subgt.w	r9, r9, r3
 80099fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dd17      	ble.n	8009a34 <_strtod_l+0x75c>
 8009a04:	4631      	mov	r1, r6
 8009a06:	461a      	mov	r2, r3
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f002 f9e3 	bl	800bdd4 <__pow5mult>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f43f aead 	beq.w	8009770 <_strtod_l+0x498>
 8009a16:	4601      	mov	r1, r0
 8009a18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f002 f934 	bl	800bc88 <__multiply>
 8009a20:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a22:	2800      	cmp	r0, #0
 8009a24:	f43f aea4 	beq.w	8009770 <_strtod_l+0x498>
 8009a28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f002 f810 	bl	800ba50 <_Bfree>
 8009a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a32:	931e      	str	r3, [sp, #120]	; 0x78
 8009a34:	f1b8 0f00 	cmp.w	r8, #0
 8009a38:	f300 8091 	bgt.w	8009b5e <_strtod_l+0x886>
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dd08      	ble.n	8009a54 <_strtod_l+0x77c>
 8009a42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a44:	9907      	ldr	r1, [sp, #28]
 8009a46:	4620      	mov	r0, r4
 8009a48:	f002 f9c4 	bl	800bdd4 <__pow5mult>
 8009a4c:	9007      	str	r0, [sp, #28]
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f ae8e 	beq.w	8009770 <_strtod_l+0x498>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	dd08      	ble.n	8009a6a <_strtod_l+0x792>
 8009a58:	9907      	ldr	r1, [sp, #28]
 8009a5a:	463a      	mov	r2, r7
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f002 fa13 	bl	800be88 <__lshift>
 8009a62:	9007      	str	r0, [sp, #28]
 8009a64:	2800      	cmp	r0, #0
 8009a66:	f43f ae83 	beq.w	8009770 <_strtod_l+0x498>
 8009a6a:	f1b9 0f00 	cmp.w	r9, #0
 8009a6e:	dd08      	ble.n	8009a82 <_strtod_l+0x7aa>
 8009a70:	4631      	mov	r1, r6
 8009a72:	464a      	mov	r2, r9
 8009a74:	4620      	mov	r0, r4
 8009a76:	f002 fa07 	bl	800be88 <__lshift>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f ae77 	beq.w	8009770 <_strtod_l+0x498>
 8009a82:	9a07      	ldr	r2, [sp, #28]
 8009a84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a86:	4620      	mov	r0, r4
 8009a88:	f002 fa86 	bl	800bf98 <__mdiff>
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f43f ae6e 	beq.w	8009770 <_strtod_l+0x498>
 8009a94:	68c3      	ldr	r3, [r0, #12]
 8009a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60c3      	str	r3, [r0, #12]
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	f002 fa5f 	bl	800bf60 <__mcmp>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	da65      	bge.n	8009b72 <_strtod_l+0x89a>
 8009aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8009aac:	f040 8087 	bne.w	8009bbe <_strtod_l+0x8e6>
 8009ab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 8082 	bne.w	8009bbe <_strtod_l+0x8e6>
 8009aba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009abe:	0d1b      	lsrs	r3, r3, #20
 8009ac0:	051b      	lsls	r3, r3, #20
 8009ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ac6:	d97a      	bls.n	8009bbe <_strtod_l+0x8e6>
 8009ac8:	696b      	ldr	r3, [r5, #20]
 8009aca:	b913      	cbnz	r3, 8009ad2 <_strtod_l+0x7fa>
 8009acc:	692b      	ldr	r3, [r5, #16]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	dd75      	ble.n	8009bbe <_strtod_l+0x8e6>
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f002 f9d6 	bl	800be88 <__lshift>
 8009adc:	4631      	mov	r1, r6
 8009ade:	4605      	mov	r5, r0
 8009ae0:	f002 fa3e 	bl	800bf60 <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	dd6a      	ble.n	8009bbe <_strtod_l+0x8e6>
 8009ae8:	9904      	ldr	r1, [sp, #16]
 8009aea:	4a55      	ldr	r2, [pc, #340]	; (8009c40 <_strtod_l+0x968>)
 8009aec:	465b      	mov	r3, fp
 8009aee:	2900      	cmp	r1, #0
 8009af0:	f000 8085 	beq.w	8009bfe <_strtod_l+0x926>
 8009af4:	ea02 010b 	and.w	r1, r2, fp
 8009af8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009afc:	dc7f      	bgt.n	8009bfe <_strtod_l+0x926>
 8009afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b02:	f77f aeaa 	ble.w	800985a <_strtod_l+0x582>
 8009b06:	4a4f      	ldr	r2, [pc, #316]	; (8009c44 <_strtod_l+0x96c>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009b0e:	4650      	mov	r0, sl
 8009b10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009b14:	4659      	mov	r1, fp
 8009b16:	f7f6 fd6f 	bl	80005f8 <__aeabi_dmul>
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4303      	orrs	r3, r0
 8009b1e:	bf08      	it	eq
 8009b20:	2322      	moveq	r3, #34	; 0x22
 8009b22:	4682      	mov	sl, r0
 8009b24:	468b      	mov	fp, r1
 8009b26:	bf08      	it	eq
 8009b28:	6023      	streq	r3, [r4, #0]
 8009b2a:	e62b      	b.n	8009784 <_strtod_l+0x4ac>
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	ea03 0a0a 	and.w	sl, r3, sl
 8009b38:	e6de      	b.n	80098f8 <_strtod_l+0x620>
 8009b3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b4a:	fa01 f308 	lsl.w	r3, r1, r8
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	9111      	str	r1, [sp, #68]	; 0x44
 8009b52:	e741      	b.n	80099d8 <_strtod_l+0x700>
 8009b54:	2300      	movs	r3, #0
 8009b56:	930c      	str	r3, [sp, #48]	; 0x30
 8009b58:	2301      	movs	r3, #1
 8009b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b5c:	e73c      	b.n	80099d8 <_strtod_l+0x700>
 8009b5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b60:	4642      	mov	r2, r8
 8009b62:	4620      	mov	r0, r4
 8009b64:	f002 f990 	bl	800be88 <__lshift>
 8009b68:	901e      	str	r0, [sp, #120]	; 0x78
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f47f af66 	bne.w	8009a3c <_strtod_l+0x764>
 8009b70:	e5fe      	b.n	8009770 <_strtod_l+0x498>
 8009b72:	465f      	mov	r7, fp
 8009b74:	d16e      	bne.n	8009c54 <_strtod_l+0x97c>
 8009b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b7c:	b342      	cbz	r2, 8009bd0 <_strtod_l+0x8f8>
 8009b7e:	4a32      	ldr	r2, [pc, #200]	; (8009c48 <_strtod_l+0x970>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d128      	bne.n	8009bd6 <_strtod_l+0x8fe>
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	4650      	mov	r0, sl
 8009b88:	b1eb      	cbz	r3, 8009bc6 <_strtod_l+0x8ee>
 8009b8a:	4a2d      	ldr	r2, [pc, #180]	; (8009c40 <_strtod_l+0x968>)
 8009b8c:	403a      	ands	r2, r7
 8009b8e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b92:	f04f 31ff 	mov.w	r1, #4294967295
 8009b96:	d819      	bhi.n	8009bcc <_strtod_l+0x8f4>
 8009b98:	0d12      	lsrs	r2, r2, #20
 8009b9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	d117      	bne.n	8009bd6 <_strtod_l+0x8fe>
 8009ba6:	4b29      	ldr	r3, [pc, #164]	; (8009c4c <_strtod_l+0x974>)
 8009ba8:	429f      	cmp	r7, r3
 8009baa:	d102      	bne.n	8009bb2 <_strtod_l+0x8da>
 8009bac:	3001      	adds	r0, #1
 8009bae:	f43f addf 	beq.w	8009770 <_strtod_l+0x498>
 8009bb2:	4b23      	ldr	r3, [pc, #140]	; (8009c40 <_strtod_l+0x968>)
 8009bb4:	403b      	ands	r3, r7
 8009bb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009bba:	f04f 0a00 	mov.w	sl, #0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1a0      	bne.n	8009b06 <_strtod_l+0x82e>
 8009bc4:	e5de      	b.n	8009784 <_strtod_l+0x4ac>
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bca:	e7ea      	b.n	8009ba2 <_strtod_l+0x8ca>
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e7e8      	b.n	8009ba2 <_strtod_l+0x8ca>
 8009bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8009bd4:	d088      	beq.n	8009ae8 <_strtod_l+0x810>
 8009bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd8:	b1db      	cbz	r3, 8009c12 <_strtod_l+0x93a>
 8009bda:	423b      	tst	r3, r7
 8009bdc:	d0ef      	beq.n	8009bbe <_strtod_l+0x8e6>
 8009bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009be0:	9a04      	ldr	r2, [sp, #16]
 8009be2:	4650      	mov	r0, sl
 8009be4:	4659      	mov	r1, fp
 8009be6:	b1c3      	cbz	r3, 8009c1a <_strtod_l+0x942>
 8009be8:	f7ff fb5a 	bl	80092a0 <sulp>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bf4:	f7f6 fb4a 	bl	800028c <__adddf3>
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	468b      	mov	fp, r1
 8009bfc:	e7df      	b.n	8009bbe <_strtod_l+0x8e6>
 8009bfe:	4013      	ands	r3, r2
 8009c00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c10:	e7d5      	b.n	8009bbe <_strtod_l+0x8e6>
 8009c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c14:	ea13 0f0a 	tst.w	r3, sl
 8009c18:	e7e0      	b.n	8009bdc <_strtod_l+0x904>
 8009c1a:	f7ff fb41 	bl	80092a0 <sulp>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c26:	f7f6 fb2f 	bl	8000288 <__aeabi_dsub>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4682      	mov	sl, r0
 8009c30:	468b      	mov	fp, r1
 8009c32:	f7f6 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d0c1      	beq.n	8009bbe <_strtod_l+0x8e6>
 8009c3a:	e60e      	b.n	800985a <_strtod_l+0x582>
 8009c3c:	fffffc02 	.word	0xfffffc02
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	39500000 	.word	0x39500000
 8009c48:	000fffff 	.word	0x000fffff
 8009c4c:	7fefffff 	.word	0x7fefffff
 8009c50:	0800cfb0 	.word	0x0800cfb0
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	f002 fafe 	bl	800c258 <__ratio>
 8009c5c:	ec59 8b10 	vmov	r8, r9, d0
 8009c60:	ee10 0a10 	vmov	r0, s0
 8009c64:	2200      	movs	r2, #0
 8009c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	f7f6 ff40 	bl	8000af0 <__aeabi_dcmple>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d07c      	beq.n	8009d6e <_strtod_l+0xa96>
 8009c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d04c      	beq.n	8009d14 <_strtod_l+0xa3c>
 8009c7a:	4b95      	ldr	r3, [pc, #596]	; (8009ed0 <_strtod_l+0xbf8>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009c82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009ed0 <_strtod_l+0xbf8>
 8009c86:	f04f 0800 	mov.w	r8, #0
 8009c8a:	4b92      	ldr	r3, [pc, #584]	; (8009ed4 <_strtod_l+0xbfc>)
 8009c8c:	403b      	ands	r3, r7
 8009c8e:	9311      	str	r3, [sp, #68]	; 0x44
 8009c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c92:	4b91      	ldr	r3, [pc, #580]	; (8009ed8 <_strtod_l+0xc00>)
 8009c94:	429a      	cmp	r2, r3
 8009c96:	f040 80b2 	bne.w	8009dfe <_strtod_l+0xb26>
 8009c9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ca2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009ca6:	ec4b ab10 	vmov	d0, sl, fp
 8009caa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009cae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cb2:	f002 f9f9 	bl	800c0a8 <__ulp>
 8009cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cba:	ec53 2b10 	vmov	r2, r3, d0
 8009cbe:	f7f6 fc9b 	bl	80005f8 <__aeabi_dmul>
 8009cc2:	4652      	mov	r2, sl
 8009cc4:	465b      	mov	r3, fp
 8009cc6:	f7f6 fae1 	bl	800028c <__adddf3>
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4981      	ldr	r1, [pc, #516]	; (8009ed4 <_strtod_l+0xbfc>)
 8009cce:	4a83      	ldr	r2, [pc, #524]	; (8009edc <_strtod_l+0xc04>)
 8009cd0:	4019      	ands	r1, r3
 8009cd2:	4291      	cmp	r1, r2
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	d95e      	bls.n	8009d96 <_strtod_l+0xabe>
 8009cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cda:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d103      	bne.n	8009cea <_strtod_l+0xa12>
 8009ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	f43f ad43 	beq.w	8009770 <_strtod_l+0x498>
 8009cea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009ee8 <_strtod_l+0xc10>
 8009cee:	f04f 3aff 	mov.w	sl, #4294967295
 8009cf2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f001 feab 	bl	800ba50 <_Bfree>
 8009cfa:	9907      	ldr	r1, [sp, #28]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 fea7 	bl	800ba50 <_Bfree>
 8009d02:	4631      	mov	r1, r6
 8009d04:	4620      	mov	r0, r4
 8009d06:	f001 fea3 	bl	800ba50 <_Bfree>
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f001 fe9f 	bl	800ba50 <_Bfree>
 8009d12:	e613      	b.n	800993c <_strtod_l+0x664>
 8009d14:	f1ba 0f00 	cmp.w	sl, #0
 8009d18:	d11b      	bne.n	8009d52 <_strtod_l+0xa7a>
 8009d1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d1e:	b9f3      	cbnz	r3, 8009d5e <_strtod_l+0xa86>
 8009d20:	4b6b      	ldr	r3, [pc, #428]	; (8009ed0 <_strtod_l+0xbf8>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	4640      	mov	r0, r8
 8009d26:	4649      	mov	r1, r9
 8009d28:	f7f6 fed8 	bl	8000adc <__aeabi_dcmplt>
 8009d2c:	b9d0      	cbnz	r0, 8009d64 <_strtod_l+0xa8c>
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	4b6b      	ldr	r3, [pc, #428]	; (8009ee0 <_strtod_l+0xc08>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4689      	mov	r9, r1
 8009d3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009d4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d50:	e79b      	b.n	8009c8a <_strtod_l+0x9b2>
 8009d52:	f1ba 0f01 	cmp.w	sl, #1
 8009d56:	d102      	bne.n	8009d5e <_strtod_l+0xa86>
 8009d58:	2f00      	cmp	r7, #0
 8009d5a:	f43f ad7e 	beq.w	800985a <_strtod_l+0x582>
 8009d5e:	4b61      	ldr	r3, [pc, #388]	; (8009ee4 <_strtod_l+0xc0c>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	e78c      	b.n	8009c7e <_strtod_l+0x9a6>
 8009d64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ee0 <_strtod_l+0xc08>
 8009d68:	f04f 0800 	mov.w	r8, #0
 8009d6c:	e7e7      	b.n	8009d3e <_strtod_l+0xa66>
 8009d6e:	4b5c      	ldr	r3, [pc, #368]	; (8009ee0 <_strtod_l+0xc08>)
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	2200      	movs	r2, #0
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	4689      	mov	r9, r1
 8009d80:	b933      	cbnz	r3, 8009d90 <_strtod_l+0xab8>
 8009d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d86:	9012      	str	r0, [sp, #72]	; 0x48
 8009d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009d8e:	e7dd      	b.n	8009d4c <_strtod_l+0xa74>
 8009d90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009d94:	e7f9      	b.n	8009d8a <_strtod_l+0xab2>
 8009d96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1a8      	bne.n	8009cf2 <_strtod_l+0xa1a>
 8009da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009da4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009da6:	0d1b      	lsrs	r3, r3, #20
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d1a1      	bne.n	8009cf2 <_strtod_l+0xa1a>
 8009dae:	4640      	mov	r0, r8
 8009db0:	4649      	mov	r1, r9
 8009db2:	f7f6 ff81 	bl	8000cb8 <__aeabi_d2lz>
 8009db6:	f7f6 fbf1 	bl	800059c <__aeabi_l2d>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	f7f6 fa61 	bl	8000288 <__aeabi_dsub>
 8009dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dcc:	ea43 030a 	orr.w	r3, r3, sl
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	d053      	beq.n	8009e80 <_strtod_l+0xba8>
 8009dd8:	a335      	add	r3, pc, #212	; (adr r3, 8009eb0 <_strtod_l+0xbd8>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f47f acce 	bne.w	8009784 <_strtod_l+0x4ac>
 8009de8:	a333      	add	r3, pc, #204	; (adr r3, 8009eb8 <_strtod_l+0xbe0>)
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f af7b 	beq.w	8009cf2 <_strtod_l+0xa1a>
 8009dfc:	e4c2      	b.n	8009784 <_strtod_l+0x4ac>
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	b333      	cbz	r3, 8009e50 <_strtod_l+0xb78>
 8009e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e08:	d822      	bhi.n	8009e50 <_strtod_l+0xb78>
 8009e0a:	a32d      	add	r3, pc, #180	; (adr r3, 8009ec0 <_strtod_l+0xbe8>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	4640      	mov	r0, r8
 8009e12:	4649      	mov	r1, r9
 8009e14:	f7f6 fe6c 	bl	8000af0 <__aeabi_dcmple>
 8009e18:	b1a0      	cbz	r0, 8009e44 <_strtod_l+0xb6c>
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f7f6 fec3 	bl	8000ba8 <__aeabi_d2uiz>
 8009e22:	2801      	cmp	r0, #1
 8009e24:	bf38      	it	cc
 8009e26:	2001      	movcc	r0, #1
 8009e28:	f7f6 fb6c 	bl	8000504 <__aeabi_ui2d>
 8009e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e2e:	4680      	mov	r8, r0
 8009e30:	4689      	mov	r9, r1
 8009e32:	bb13      	cbnz	r3, 8009e7a <_strtod_l+0xba2>
 8009e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e38:	9014      	str	r0, [sp, #80]	; 0x50
 8009e3a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e5c:	f002 f924 	bl	800c0a8 <__ulp>
 8009e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e64:	ec53 2b10 	vmov	r2, r3, d0
 8009e68:	f7f6 fbc6 	bl	80005f8 <__aeabi_dmul>
 8009e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e70:	f7f6 fa0c 	bl	800028c <__adddf3>
 8009e74:	4682      	mov	sl, r0
 8009e76:	468b      	mov	fp, r1
 8009e78:	e78f      	b.n	8009d9a <_strtod_l+0xac2>
 8009e7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009e7e:	e7dd      	b.n	8009e3c <_strtod_l+0xb64>
 8009e80:	a311      	add	r3, pc, #68	; (adr r3, 8009ec8 <_strtod_l+0xbf0>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fe29 	bl	8000adc <__aeabi_dcmplt>
 8009e8a:	e7b4      	b.n	8009df6 <_strtod_l+0xb1e>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	f7ff ba65 	b.w	8009364 <_strtod_l+0x8c>
 8009e9a:	2b65      	cmp	r3, #101	; 0x65
 8009e9c:	f43f ab5d 	beq.w	800955a <_strtod_l+0x282>
 8009ea0:	2b45      	cmp	r3, #69	; 0x45
 8009ea2:	f43f ab5a 	beq.w	800955a <_strtod_l+0x282>
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f7ff bb92 	b.w	80095d0 <_strtod_l+0x2f8>
 8009eac:	f3af 8000 	nop.w
 8009eb0:	94a03595 	.word	0x94a03595
 8009eb4:	3fdfffff 	.word	0x3fdfffff
 8009eb8:	35afe535 	.word	0x35afe535
 8009ebc:	3fe00000 	.word	0x3fe00000
 8009ec0:	ffc00000 	.word	0xffc00000
 8009ec4:	41dfffff 	.word	0x41dfffff
 8009ec8:	94a03595 	.word	0x94a03595
 8009ecc:	3fcfffff 	.word	0x3fcfffff
 8009ed0:	3ff00000 	.word	0x3ff00000
 8009ed4:	7ff00000 	.word	0x7ff00000
 8009ed8:	7fe00000 	.word	0x7fe00000
 8009edc:	7c9fffff 	.word	0x7c9fffff
 8009ee0:	3fe00000 	.word	0x3fe00000
 8009ee4:	bff00000 	.word	0xbff00000
 8009ee8:	7fefffff 	.word	0x7fefffff

08009eec <_strtod_r>:
 8009eec:	4b01      	ldr	r3, [pc, #4]	; (8009ef4 <_strtod_r+0x8>)
 8009eee:	f7ff b9f3 	b.w	80092d8 <_strtod_l>
 8009ef2:	bf00      	nop
 8009ef4:	20000074 	.word	0x20000074

08009ef8 <_strtol_l.isra.0>:
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efe:	d001      	beq.n	8009f04 <_strtol_l.isra.0+0xc>
 8009f00:	2b24      	cmp	r3, #36	; 0x24
 8009f02:	d906      	bls.n	8009f12 <_strtol_l.isra.0+0x1a>
 8009f04:	f7fe fa5e 	bl	80083c4 <__errno>
 8009f08:	2316      	movs	r3, #22
 8009f0a:	6003      	str	r3, [r0, #0]
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	4f3a      	ldr	r7, [pc, #232]	; (8009ffc <_strtol_l.isra.0+0x104>)
 8009f14:	468e      	mov	lr, r1
 8009f16:	4676      	mov	r6, lr
 8009f18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009f1c:	5de5      	ldrb	r5, [r4, r7]
 8009f1e:	f015 0508 	ands.w	r5, r5, #8
 8009f22:	d1f8      	bne.n	8009f16 <_strtol_l.isra.0+0x1e>
 8009f24:	2c2d      	cmp	r4, #45	; 0x2d
 8009f26:	d134      	bne.n	8009f92 <_strtol_l.isra.0+0x9a>
 8009f28:	f89e 4000 	ldrb.w	r4, [lr]
 8009f2c:	f04f 0801 	mov.w	r8, #1
 8009f30:	f106 0e02 	add.w	lr, r6, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d05c      	beq.n	8009ff2 <_strtol_l.isra.0+0xfa>
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	d10c      	bne.n	8009f56 <_strtol_l.isra.0+0x5e>
 8009f3c:	2c30      	cmp	r4, #48	; 0x30
 8009f3e:	d10a      	bne.n	8009f56 <_strtol_l.isra.0+0x5e>
 8009f40:	f89e 4000 	ldrb.w	r4, [lr]
 8009f44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f48:	2c58      	cmp	r4, #88	; 0x58
 8009f4a:	d14d      	bne.n	8009fe8 <_strtol_l.isra.0+0xf0>
 8009f4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009f50:	2310      	movs	r3, #16
 8009f52:	f10e 0e02 	add.w	lr, lr, #2
 8009f56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009f5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f5e:	2600      	movs	r6, #0
 8009f60:	fbbc f9f3 	udiv	r9, ip, r3
 8009f64:	4635      	mov	r5, r6
 8009f66:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009f6e:	2f09      	cmp	r7, #9
 8009f70:	d818      	bhi.n	8009fa4 <_strtol_l.isra.0+0xac>
 8009f72:	463c      	mov	r4, r7
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	dd24      	ble.n	8009fc2 <_strtol_l.isra.0+0xca>
 8009f78:	2e00      	cmp	r6, #0
 8009f7a:	db1f      	blt.n	8009fbc <_strtol_l.isra.0+0xc4>
 8009f7c:	45a9      	cmp	r9, r5
 8009f7e:	d31d      	bcc.n	8009fbc <_strtol_l.isra.0+0xc4>
 8009f80:	d101      	bne.n	8009f86 <_strtol_l.isra.0+0x8e>
 8009f82:	45a2      	cmp	sl, r4
 8009f84:	db1a      	blt.n	8009fbc <_strtol_l.isra.0+0xc4>
 8009f86:	fb05 4503 	mla	r5, r5, r3, r4
 8009f8a:	2601      	movs	r6, #1
 8009f8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009f90:	e7eb      	b.n	8009f6a <_strtol_l.isra.0+0x72>
 8009f92:	2c2b      	cmp	r4, #43	; 0x2b
 8009f94:	bf08      	it	eq
 8009f96:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009f9a:	46a8      	mov	r8, r5
 8009f9c:	bf08      	it	eq
 8009f9e:	f106 0e02 	addeq.w	lr, r6, #2
 8009fa2:	e7c7      	b.n	8009f34 <_strtol_l.isra.0+0x3c>
 8009fa4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009fa8:	2f19      	cmp	r7, #25
 8009faa:	d801      	bhi.n	8009fb0 <_strtol_l.isra.0+0xb8>
 8009fac:	3c37      	subs	r4, #55	; 0x37
 8009fae:	e7e1      	b.n	8009f74 <_strtol_l.isra.0+0x7c>
 8009fb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009fb4:	2f19      	cmp	r7, #25
 8009fb6:	d804      	bhi.n	8009fc2 <_strtol_l.isra.0+0xca>
 8009fb8:	3c57      	subs	r4, #87	; 0x57
 8009fba:	e7db      	b.n	8009f74 <_strtol_l.isra.0+0x7c>
 8009fbc:	f04f 36ff 	mov.w	r6, #4294967295
 8009fc0:	e7e4      	b.n	8009f8c <_strtol_l.isra.0+0x94>
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	da05      	bge.n	8009fd2 <_strtol_l.isra.0+0xda>
 8009fc6:	2322      	movs	r3, #34	; 0x22
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	4665      	mov	r5, ip
 8009fcc:	b942      	cbnz	r2, 8009fe0 <_strtol_l.isra.0+0xe8>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	e79d      	b.n	8009f0e <_strtol_l.isra.0+0x16>
 8009fd2:	f1b8 0f00 	cmp.w	r8, #0
 8009fd6:	d000      	beq.n	8009fda <_strtol_l.isra.0+0xe2>
 8009fd8:	426d      	negs	r5, r5
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	d0f7      	beq.n	8009fce <_strtol_l.isra.0+0xd6>
 8009fde:	b10e      	cbz	r6, 8009fe4 <_strtol_l.isra.0+0xec>
 8009fe0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009fe4:	6011      	str	r1, [r2, #0]
 8009fe6:	e7f2      	b.n	8009fce <_strtol_l.isra.0+0xd6>
 8009fe8:	2430      	movs	r4, #48	; 0x30
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1b3      	bne.n	8009f56 <_strtol_l.isra.0+0x5e>
 8009fee:	2308      	movs	r3, #8
 8009ff0:	e7b1      	b.n	8009f56 <_strtol_l.isra.0+0x5e>
 8009ff2:	2c30      	cmp	r4, #48	; 0x30
 8009ff4:	d0a4      	beq.n	8009f40 <_strtol_l.isra.0+0x48>
 8009ff6:	230a      	movs	r3, #10
 8009ff8:	e7ad      	b.n	8009f56 <_strtol_l.isra.0+0x5e>
 8009ffa:	bf00      	nop
 8009ffc:	0800cfd9 	.word	0x0800cfd9

0800a000 <_strtol_r>:
 800a000:	f7ff bf7a 	b.w	8009ef8 <_strtol_l.isra.0>

0800a004 <__swbuf_r>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	460e      	mov	r6, r1
 800a008:	4614      	mov	r4, r2
 800a00a:	4605      	mov	r5, r0
 800a00c:	b118      	cbz	r0, 800a016 <__swbuf_r+0x12>
 800a00e:	6983      	ldr	r3, [r0, #24]
 800a010:	b90b      	cbnz	r3, 800a016 <__swbuf_r+0x12>
 800a012:	f001 f84b 	bl	800b0ac <__sinit>
 800a016:	4b21      	ldr	r3, [pc, #132]	; (800a09c <__swbuf_r+0x98>)
 800a018:	429c      	cmp	r4, r3
 800a01a:	d12b      	bne.n	800a074 <__swbuf_r+0x70>
 800a01c:	686c      	ldr	r4, [r5, #4]
 800a01e:	69a3      	ldr	r3, [r4, #24]
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	071a      	lsls	r2, r3, #28
 800a026:	d52f      	bpl.n	800a088 <__swbuf_r+0x84>
 800a028:	6923      	ldr	r3, [r4, #16]
 800a02a:	b36b      	cbz	r3, 800a088 <__swbuf_r+0x84>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	1ac0      	subs	r0, r0, r3
 800a032:	6963      	ldr	r3, [r4, #20]
 800a034:	b2f6      	uxtb	r6, r6
 800a036:	4283      	cmp	r3, r0
 800a038:	4637      	mov	r7, r6
 800a03a:	dc04      	bgt.n	800a046 <__swbuf_r+0x42>
 800a03c:	4621      	mov	r1, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 ffa0 	bl	800af84 <_fflush_r>
 800a044:	bb30      	cbnz	r0, 800a094 <__swbuf_r+0x90>
 800a046:	68a3      	ldr	r3, [r4, #8]
 800a048:	3b01      	subs	r3, #1
 800a04a:	60a3      	str	r3, [r4, #8]
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	6022      	str	r2, [r4, #0]
 800a052:	701e      	strb	r6, [r3, #0]
 800a054:	6963      	ldr	r3, [r4, #20]
 800a056:	3001      	adds	r0, #1
 800a058:	4283      	cmp	r3, r0
 800a05a:	d004      	beq.n	800a066 <__swbuf_r+0x62>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	07db      	lsls	r3, r3, #31
 800a060:	d506      	bpl.n	800a070 <__swbuf_r+0x6c>
 800a062:	2e0a      	cmp	r6, #10
 800a064:	d104      	bne.n	800a070 <__swbuf_r+0x6c>
 800a066:	4621      	mov	r1, r4
 800a068:	4628      	mov	r0, r5
 800a06a:	f000 ff8b 	bl	800af84 <_fflush_r>
 800a06e:	b988      	cbnz	r0, 800a094 <__swbuf_r+0x90>
 800a070:	4638      	mov	r0, r7
 800a072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <__swbuf_r+0x9c>)
 800a076:	429c      	cmp	r4, r3
 800a078:	d101      	bne.n	800a07e <__swbuf_r+0x7a>
 800a07a:	68ac      	ldr	r4, [r5, #8]
 800a07c:	e7cf      	b.n	800a01e <__swbuf_r+0x1a>
 800a07e:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <__swbuf_r+0xa0>)
 800a080:	429c      	cmp	r4, r3
 800a082:	bf08      	it	eq
 800a084:	68ec      	ldreq	r4, [r5, #12]
 800a086:	e7ca      	b.n	800a01e <__swbuf_r+0x1a>
 800a088:	4621      	mov	r1, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 f80c 	bl	800a0a8 <__swsetup_r>
 800a090:	2800      	cmp	r0, #0
 800a092:	d0cb      	beq.n	800a02c <__swbuf_r+0x28>
 800a094:	f04f 37ff 	mov.w	r7, #4294967295
 800a098:	e7ea      	b.n	800a070 <__swbuf_r+0x6c>
 800a09a:	bf00      	nop
 800a09c:	0800d190 	.word	0x0800d190
 800a0a0:	0800d1b0 	.word	0x0800d1b0
 800a0a4:	0800d170 	.word	0x0800d170

0800a0a8 <__swsetup_r>:
 800a0a8:	4b32      	ldr	r3, [pc, #200]	; (800a174 <__swsetup_r+0xcc>)
 800a0aa:	b570      	push	{r4, r5, r6, lr}
 800a0ac:	681d      	ldr	r5, [r3, #0]
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	b125      	cbz	r5, 800a0be <__swsetup_r+0x16>
 800a0b4:	69ab      	ldr	r3, [r5, #24]
 800a0b6:	b913      	cbnz	r3, 800a0be <__swsetup_r+0x16>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 fff7 	bl	800b0ac <__sinit>
 800a0be:	4b2e      	ldr	r3, [pc, #184]	; (800a178 <__swsetup_r+0xd0>)
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	d10f      	bne.n	800a0e4 <__swsetup_r+0x3c>
 800a0c4:	686c      	ldr	r4, [r5, #4]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0cc:	0719      	lsls	r1, r3, #28
 800a0ce:	d42c      	bmi.n	800a12a <__swsetup_r+0x82>
 800a0d0:	06dd      	lsls	r5, r3, #27
 800a0d2:	d411      	bmi.n	800a0f8 <__swsetup_r+0x50>
 800a0d4:	2309      	movs	r3, #9
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	e03e      	b.n	800a162 <__swsetup_r+0xba>
 800a0e4:	4b25      	ldr	r3, [pc, #148]	; (800a17c <__swsetup_r+0xd4>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d101      	bne.n	800a0ee <__swsetup_r+0x46>
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	e7eb      	b.n	800a0c6 <__swsetup_r+0x1e>
 800a0ee:	4b24      	ldr	r3, [pc, #144]	; (800a180 <__swsetup_r+0xd8>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	bf08      	it	eq
 800a0f4:	68ec      	ldreq	r4, [r5, #12]
 800a0f6:	e7e6      	b.n	800a0c6 <__swsetup_r+0x1e>
 800a0f8:	0758      	lsls	r0, r3, #29
 800a0fa:	d512      	bpl.n	800a122 <__swsetup_r+0x7a>
 800a0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0fe:	b141      	cbz	r1, 800a112 <__swsetup_r+0x6a>
 800a100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a104:	4299      	cmp	r1, r3
 800a106:	d002      	beq.n	800a10e <__swsetup_r+0x66>
 800a108:	4630      	mov	r0, r6
 800a10a:	f002 f92b 	bl	800c364 <_free_r>
 800a10e:	2300      	movs	r3, #0
 800a110:	6363      	str	r3, [r4, #52]	; 0x34
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	2300      	movs	r3, #0
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	f043 0308 	orr.w	r3, r3, #8
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	b94b      	cbnz	r3, 800a142 <__swsetup_r+0x9a>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a138:	d003      	beq.n	800a142 <__swsetup_r+0x9a>
 800a13a:	4621      	mov	r1, r4
 800a13c:	4630      	mov	r0, r6
 800a13e:	f001 fbed 	bl	800b91c <__smakebuf_r>
 800a142:	89a0      	ldrh	r0, [r4, #12]
 800a144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a148:	f010 0301 	ands.w	r3, r0, #1
 800a14c:	d00a      	beq.n	800a164 <__swsetup_r+0xbc>
 800a14e:	2300      	movs	r3, #0
 800a150:	60a3      	str	r3, [r4, #8]
 800a152:	6963      	ldr	r3, [r4, #20]
 800a154:	425b      	negs	r3, r3
 800a156:	61a3      	str	r3, [r4, #24]
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	b943      	cbnz	r3, 800a16e <__swsetup_r+0xc6>
 800a15c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a160:	d1ba      	bne.n	800a0d8 <__swsetup_r+0x30>
 800a162:	bd70      	pop	{r4, r5, r6, pc}
 800a164:	0781      	lsls	r1, r0, #30
 800a166:	bf58      	it	pl
 800a168:	6963      	ldrpl	r3, [r4, #20]
 800a16a:	60a3      	str	r3, [r4, #8]
 800a16c:	e7f4      	b.n	800a158 <__swsetup_r+0xb0>
 800a16e:	2000      	movs	r0, #0
 800a170:	e7f7      	b.n	800a162 <__swsetup_r+0xba>
 800a172:	bf00      	nop
 800a174:	2000000c 	.word	0x2000000c
 800a178:	0800d190 	.word	0x0800d190
 800a17c:	0800d1b0 	.word	0x0800d1b0
 800a180:	0800d170 	.word	0x0800d170

0800a184 <quorem>:
 800a184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	6903      	ldr	r3, [r0, #16]
 800a18a:	690c      	ldr	r4, [r1, #16]
 800a18c:	42a3      	cmp	r3, r4
 800a18e:	4607      	mov	r7, r0
 800a190:	f2c0 8081 	blt.w	800a296 <quorem+0x112>
 800a194:	3c01      	subs	r4, #1
 800a196:	f101 0814 	add.w	r8, r1, #20
 800a19a:	f100 0514 	add.w	r5, r0, #20
 800a19e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1bc:	d331      	bcc.n	800a222 <quorem+0x9e>
 800a1be:	f04f 0e00 	mov.w	lr, #0
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	46ac      	mov	ip, r5
 800a1c6:	46f2      	mov	sl, lr
 800a1c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1cc:	b293      	uxth	r3, r2
 800a1ce:	fb06 e303 	mla	r3, r6, r3, lr
 800a1d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	ebaa 0303 	sub.w	r3, sl, r3
 800a1dc:	0c12      	lsrs	r2, r2, #16
 800a1de:	f8dc a000 	ldr.w	sl, [ip]
 800a1e2:	fb06 e202 	mla	r2, r6, r2, lr
 800a1e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1ee:	fa1f fa82 	uxth.w	sl, r2
 800a1f2:	f8dc 2000 	ldr.w	r2, [ip]
 800a1f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a204:	4581      	cmp	r9, r0
 800a206:	f84c 3b04 	str.w	r3, [ip], #4
 800a20a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a20e:	d2db      	bcs.n	800a1c8 <quorem+0x44>
 800a210:	f855 300b 	ldr.w	r3, [r5, fp]
 800a214:	b92b      	cbnz	r3, 800a222 <quorem+0x9e>
 800a216:	9b01      	ldr	r3, [sp, #4]
 800a218:	3b04      	subs	r3, #4
 800a21a:	429d      	cmp	r5, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	d32e      	bcc.n	800a27e <quorem+0xfa>
 800a220:	613c      	str	r4, [r7, #16]
 800a222:	4638      	mov	r0, r7
 800a224:	f001 fe9c 	bl	800bf60 <__mcmp>
 800a228:	2800      	cmp	r0, #0
 800a22a:	db24      	blt.n	800a276 <quorem+0xf2>
 800a22c:	3601      	adds	r6, #1
 800a22e:	4628      	mov	r0, r5
 800a230:	f04f 0c00 	mov.w	ip, #0
 800a234:	f858 2b04 	ldr.w	r2, [r8], #4
 800a238:	f8d0 e000 	ldr.w	lr, [r0]
 800a23c:	b293      	uxth	r3, r2
 800a23e:	ebac 0303 	sub.w	r3, ip, r3
 800a242:	0c12      	lsrs	r2, r2, #16
 800a244:	fa13 f38e 	uxtah	r3, r3, lr
 800a248:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a24c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a250:	b29b      	uxth	r3, r3
 800a252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a256:	45c1      	cmp	r9, r8
 800a258:	f840 3b04 	str.w	r3, [r0], #4
 800a25c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a260:	d2e8      	bcs.n	800a234 <quorem+0xb0>
 800a262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a26a:	b922      	cbnz	r2, 800a276 <quorem+0xf2>
 800a26c:	3b04      	subs	r3, #4
 800a26e:	429d      	cmp	r5, r3
 800a270:	461a      	mov	r2, r3
 800a272:	d30a      	bcc.n	800a28a <quorem+0x106>
 800a274:	613c      	str	r4, [r7, #16]
 800a276:	4630      	mov	r0, r6
 800a278:	b003      	add	sp, #12
 800a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	6812      	ldr	r2, [r2, #0]
 800a280:	3b04      	subs	r3, #4
 800a282:	2a00      	cmp	r2, #0
 800a284:	d1cc      	bne.n	800a220 <quorem+0x9c>
 800a286:	3c01      	subs	r4, #1
 800a288:	e7c7      	b.n	800a21a <quorem+0x96>
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	3b04      	subs	r3, #4
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d1f0      	bne.n	800a274 <quorem+0xf0>
 800a292:	3c01      	subs	r4, #1
 800a294:	e7eb      	b.n	800a26e <quorem+0xea>
 800a296:	2000      	movs	r0, #0
 800a298:	e7ee      	b.n	800a278 <quorem+0xf4>
 800a29a:	0000      	movs	r0, r0
 800a29c:	0000      	movs	r0, r0
	...

0800a2a0 <_dtoa_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	ed2d 8b02 	vpush	{d8}
 800a2a8:	ec57 6b10 	vmov	r6, r7, d0
 800a2ac:	b095      	sub	sp, #84	; 0x54
 800a2ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2b4:	9105      	str	r1, [sp, #20]
 800a2b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c0:	b975      	cbnz	r5, 800a2e0 <_dtoa_r+0x40>
 800a2c2:	2010      	movs	r0, #16
 800a2c4:	f001 fb6a 	bl	800b99c <malloc>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a2cc:	b920      	cbnz	r0, 800a2d8 <_dtoa_r+0x38>
 800a2ce:	4bb2      	ldr	r3, [pc, #712]	; (800a598 <_dtoa_r+0x2f8>)
 800a2d0:	21ea      	movs	r1, #234	; 0xea
 800a2d2:	48b2      	ldr	r0, [pc, #712]	; (800a59c <_dtoa_r+0x2fc>)
 800a2d4:	f002 fc34 	bl	800cb40 <__assert_func>
 800a2d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2dc:	6005      	str	r5, [r0, #0]
 800a2de:	60c5      	str	r5, [r0, #12]
 800a2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2e2:	6819      	ldr	r1, [r3, #0]
 800a2e4:	b151      	cbz	r1, 800a2fc <_dtoa_r+0x5c>
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	604a      	str	r2, [r1, #4]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4093      	lsls	r3, r2
 800a2ee:	608b      	str	r3, [r1, #8]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f001 fbad 	bl	800ba50 <_Bfree>
 800a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	1e3b      	subs	r3, r7, #0
 800a2fe:	bfb9      	ittee	lt
 800a300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a304:	9303      	strlt	r3, [sp, #12]
 800a306:	2300      	movge	r3, #0
 800a308:	f8c8 3000 	strge.w	r3, [r8]
 800a30c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a310:	4ba3      	ldr	r3, [pc, #652]	; (800a5a0 <_dtoa_r+0x300>)
 800a312:	bfbc      	itt	lt
 800a314:	2201      	movlt	r2, #1
 800a316:	f8c8 2000 	strlt.w	r2, [r8]
 800a31a:	ea33 0309 	bics.w	r3, r3, r9
 800a31e:	d11b      	bne.n	800a358 <_dtoa_r+0xb8>
 800a320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a322:	f242 730f 	movw	r3, #9999	; 0x270f
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a32c:	4333      	orrs	r3, r6
 800a32e:	f000 857a 	beq.w	800ae26 <_dtoa_r+0xb86>
 800a332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a334:	b963      	cbnz	r3, 800a350 <_dtoa_r+0xb0>
 800a336:	4b9b      	ldr	r3, [pc, #620]	; (800a5a4 <_dtoa_r+0x304>)
 800a338:	e024      	b.n	800a384 <_dtoa_r+0xe4>
 800a33a:	4b9b      	ldr	r3, [pc, #620]	; (800a5a8 <_dtoa_r+0x308>)
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	9800      	ldr	r0, [sp, #0]
 800a346:	b015      	add	sp, #84	; 0x54
 800a348:	ecbd 8b02 	vpop	{d8}
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	4b94      	ldr	r3, [pc, #592]	; (800a5a4 <_dtoa_r+0x304>)
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	3303      	adds	r3, #3
 800a356:	e7f3      	b.n	800a340 <_dtoa_r+0xa0>
 800a358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	ec51 0b17 	vmov	r0, r1, d7
 800a362:	2300      	movs	r3, #0
 800a364:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a368:	f7f6 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a36c:	4680      	mov	r8, r0
 800a36e:	b158      	cbz	r0, 800a388 <_dtoa_r+0xe8>
 800a370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a372:	2301      	movs	r3, #1
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8551 	beq.w	800ae20 <_dtoa_r+0xb80>
 800a37e:	488b      	ldr	r0, [pc, #556]	; (800a5ac <_dtoa_r+0x30c>)
 800a380:	6018      	str	r0, [r3, #0]
 800a382:	1e43      	subs	r3, r0, #1
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	e7dd      	b.n	800a344 <_dtoa_r+0xa4>
 800a388:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a38c:	aa12      	add	r2, sp, #72	; 0x48
 800a38e:	a913      	add	r1, sp, #76	; 0x4c
 800a390:	4620      	mov	r0, r4
 800a392:	f001 ff05 	bl	800c1a0 <__d2b>
 800a396:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a39a:	4683      	mov	fp, r0
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	d07c      	beq.n	800a49a <_dtoa_r+0x1fa>
 800a3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ba:	4b7d      	ldr	r3, [pc, #500]	; (800a5b0 <_dtoa_r+0x310>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff61 	bl	8000288 <__aeabi_dsub>
 800a3c6:	a36e      	add	r3, pc, #440	; (adr r3, 800a580 <_dtoa_r+0x2e0>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	a36d      	add	r3, pc, #436	; (adr r3, 800a588 <_dtoa_r+0x2e8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff59 	bl	800028c <__adddf3>
 800a3da:	4606      	mov	r6, r0
 800a3dc:	4628      	mov	r0, r5
 800a3de:	460f      	mov	r7, r1
 800a3e0:	f7f6 f8a0 	bl	8000524 <__aeabi_i2d>
 800a3e4:	a36a      	add	r3, pc, #424	; (adr r3, 800a590 <_dtoa_r+0x2f0>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f6 f905 	bl	80005f8 <__aeabi_dmul>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	f7f5 ff49 	bl	800028c <__adddf3>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	f7f6 fbab 	bl	8000b58 <__aeabi_d2iz>
 800a402:	2200      	movs	r2, #0
 800a404:	4682      	mov	sl, r0
 800a406:	2300      	movs	r3, #0
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f6 fb66 	bl	8000adc <__aeabi_dcmplt>
 800a410:	b148      	cbz	r0, 800a426 <_dtoa_r+0x186>
 800a412:	4650      	mov	r0, sl
 800a414:	f7f6 f886 	bl	8000524 <__aeabi_i2d>
 800a418:	4632      	mov	r2, r6
 800a41a:	463b      	mov	r3, r7
 800a41c:	f7f6 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 800a420:	b908      	cbnz	r0, 800a426 <_dtoa_r+0x186>
 800a422:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a426:	f1ba 0f16 	cmp.w	sl, #22
 800a42a:	d854      	bhi.n	800a4d6 <_dtoa_r+0x236>
 800a42c:	4b61      	ldr	r3, [pc, #388]	; (800a5b4 <_dtoa_r+0x314>)
 800a42e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a43a:	f7f6 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d04b      	beq.n	800a4da <_dtoa_r+0x23a>
 800a442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a446:	2300      	movs	r3, #0
 800a448:	930e      	str	r3, [sp, #56]	; 0x38
 800a44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a44c:	1b5d      	subs	r5, r3, r5
 800a44e:	1e6b      	subs	r3, r5, #1
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	bf43      	ittte	mi
 800a454:	2300      	movmi	r3, #0
 800a456:	f1c5 0801 	rsbmi	r8, r5, #1
 800a45a:	9304      	strmi	r3, [sp, #16]
 800a45c:	f04f 0800 	movpl.w	r8, #0
 800a460:	f1ba 0f00 	cmp.w	sl, #0
 800a464:	db3b      	blt.n	800a4de <_dtoa_r+0x23e>
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a46c:	4453      	add	r3, sl
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	2300      	movs	r3, #0
 800a472:	9306      	str	r3, [sp, #24]
 800a474:	9b05      	ldr	r3, [sp, #20]
 800a476:	2b09      	cmp	r3, #9
 800a478:	d869      	bhi.n	800a54e <_dtoa_r+0x2ae>
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	bfc4      	itt	gt
 800a47e:	3b04      	subgt	r3, #4
 800a480:	9305      	strgt	r3, [sp, #20]
 800a482:	9b05      	ldr	r3, [sp, #20]
 800a484:	f1a3 0302 	sub.w	r3, r3, #2
 800a488:	bfcc      	ite	gt
 800a48a:	2500      	movgt	r5, #0
 800a48c:	2501      	movle	r5, #1
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d869      	bhi.n	800a566 <_dtoa_r+0x2c6>
 800a492:	e8df f003 	tbb	[pc, r3]
 800a496:	4e2c      	.short	0x4e2c
 800a498:	5a4c      	.short	0x5a4c
 800a49a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a49e:	441d      	add	r5, r3
 800a4a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	bfc1      	itttt	gt
 800a4a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4b8:	bfda      	itte	le
 800a4ba:	f1c3 0320 	rsble	r3, r3, #32
 800a4be:	fa06 f003 	lslle.w	r0, r6, r3
 800a4c2:	4318      	orrgt	r0, r3
 800a4c4:	f7f6 f81e 	bl	8000504 <__aeabi_ui2d>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4d0:	3d01      	subs	r5, #1
 800a4d2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4d4:	e771      	b.n	800a3ba <_dtoa_r+0x11a>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7b6      	b.n	800a448 <_dtoa_r+0x1a8>
 800a4da:	900e      	str	r0, [sp, #56]	; 0x38
 800a4dc:	e7b5      	b.n	800a44a <_dtoa_r+0x1aa>
 800a4de:	f1ca 0300 	rsb	r3, sl, #0
 800a4e2:	9306      	str	r3, [sp, #24]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	eba8 080a 	sub.w	r8, r8, sl
 800a4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ec:	e7c2      	b.n	800a474 <_dtoa_r+0x1d4>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dc39      	bgt.n	800a56c <_dtoa_r+0x2cc>
 800a4f8:	f04f 0901 	mov.w	r9, #1
 800a4fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a500:	464b      	mov	r3, r9
 800a502:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a508:	2200      	movs	r2, #0
 800a50a:	6042      	str	r2, [r0, #4]
 800a50c:	2204      	movs	r2, #4
 800a50e:	f102 0614 	add.w	r6, r2, #20
 800a512:	429e      	cmp	r6, r3
 800a514:	6841      	ldr	r1, [r0, #4]
 800a516:	d92f      	bls.n	800a578 <_dtoa_r+0x2d8>
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 fa59 	bl	800b9d0 <_Balloc>
 800a51e:	9000      	str	r0, [sp, #0]
 800a520:	2800      	cmp	r0, #0
 800a522:	d14b      	bne.n	800a5bc <_dtoa_r+0x31c>
 800a524:	4b24      	ldr	r3, [pc, #144]	; (800a5b8 <_dtoa_r+0x318>)
 800a526:	4602      	mov	r2, r0
 800a528:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a52c:	e6d1      	b.n	800a2d2 <_dtoa_r+0x32>
 800a52e:	2301      	movs	r3, #1
 800a530:	e7de      	b.n	800a4f0 <_dtoa_r+0x250>
 800a532:	2300      	movs	r3, #0
 800a534:	9308      	str	r3, [sp, #32]
 800a536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a538:	eb0a 0903 	add.w	r9, sl, r3
 800a53c:	f109 0301 	add.w	r3, r9, #1
 800a540:	2b01      	cmp	r3, #1
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	bfb8      	it	lt
 800a546:	2301      	movlt	r3, #1
 800a548:	e7dd      	b.n	800a506 <_dtoa_r+0x266>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e7f2      	b.n	800a534 <_dtoa_r+0x294>
 800a54e:	2501      	movs	r5, #1
 800a550:	2300      	movs	r3, #0
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	9508      	str	r5, [sp, #32]
 800a556:	f04f 39ff 	mov.w	r9, #4294967295
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a560:	2312      	movs	r3, #18
 800a562:	9209      	str	r2, [sp, #36]	; 0x24
 800a564:	e7cf      	b.n	800a506 <_dtoa_r+0x266>
 800a566:	2301      	movs	r3, #1
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	e7f4      	b.n	800a556 <_dtoa_r+0x2b6>
 800a56c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a570:	f8cd 9004 	str.w	r9, [sp, #4]
 800a574:	464b      	mov	r3, r9
 800a576:	e7c6      	b.n	800a506 <_dtoa_r+0x266>
 800a578:	3101      	adds	r1, #1
 800a57a:	6041      	str	r1, [r0, #4]
 800a57c:	0052      	lsls	r2, r2, #1
 800a57e:	e7c6      	b.n	800a50e <_dtoa_r+0x26e>
 800a580:	636f4361 	.word	0x636f4361
 800a584:	3fd287a7 	.word	0x3fd287a7
 800a588:	8b60c8b3 	.word	0x8b60c8b3
 800a58c:	3fc68a28 	.word	0x3fc68a28
 800a590:	509f79fb 	.word	0x509f79fb
 800a594:	3fd34413 	.word	0x3fd34413
 800a598:	0800d0e6 	.word	0x0800d0e6
 800a59c:	0800d0fd 	.word	0x0800d0fd
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	0800d0e2 	.word	0x0800d0e2
 800a5a8:	0800d0d9 	.word	0x0800d0d9
 800a5ac:	0800cf5d 	.word	0x0800cf5d
 800a5b0:	3ff80000 	.word	0x3ff80000
 800a5b4:	0800d2d8 	.word	0x0800d2d8
 800a5b8:	0800d15c 	.word	0x0800d15c
 800a5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5be:	9a00      	ldr	r2, [sp, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	2b0e      	cmp	r3, #14
 800a5c6:	f200 80ad 	bhi.w	800a724 <_dtoa_r+0x484>
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	f000 80aa 	beq.w	800a724 <_dtoa_r+0x484>
 800a5d0:	f1ba 0f00 	cmp.w	sl, #0
 800a5d4:	dd36      	ble.n	800a644 <_dtoa_r+0x3a4>
 800a5d6:	4ac3      	ldr	r2, [pc, #780]	; (800a8e4 <_dtoa_r+0x644>)
 800a5d8:	f00a 030f 	and.w	r3, sl, #15
 800a5dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5ec:	eeb0 8a47 	vmov.f32	s16, s14
 800a5f0:	eef0 8a67 	vmov.f32	s17, s15
 800a5f4:	d016      	beq.n	800a624 <_dtoa_r+0x384>
 800a5f6:	4bbc      	ldr	r3, [pc, #752]	; (800a8e8 <_dtoa_r+0x648>)
 800a5f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a600:	f7f6 f924 	bl	800084c <__aeabi_ddiv>
 800a604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a608:	f007 070f 	and.w	r7, r7, #15
 800a60c:	2503      	movs	r5, #3
 800a60e:	4eb6      	ldr	r6, [pc, #728]	; (800a8e8 <_dtoa_r+0x648>)
 800a610:	b957      	cbnz	r7, 800a628 <_dtoa_r+0x388>
 800a612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a616:	ec53 2b18 	vmov	r2, r3, d8
 800a61a:	f7f6 f917 	bl	800084c <__aeabi_ddiv>
 800a61e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a622:	e029      	b.n	800a678 <_dtoa_r+0x3d8>
 800a624:	2502      	movs	r5, #2
 800a626:	e7f2      	b.n	800a60e <_dtoa_r+0x36e>
 800a628:	07f9      	lsls	r1, r7, #31
 800a62a:	d508      	bpl.n	800a63e <_dtoa_r+0x39e>
 800a62c:	ec51 0b18 	vmov	r0, r1, d8
 800a630:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a634:	f7f5 ffe0 	bl	80005f8 <__aeabi_dmul>
 800a638:	ec41 0b18 	vmov	d8, r0, r1
 800a63c:	3501      	adds	r5, #1
 800a63e:	107f      	asrs	r7, r7, #1
 800a640:	3608      	adds	r6, #8
 800a642:	e7e5      	b.n	800a610 <_dtoa_r+0x370>
 800a644:	f000 80a6 	beq.w	800a794 <_dtoa_r+0x4f4>
 800a648:	f1ca 0600 	rsb	r6, sl, #0
 800a64c:	4ba5      	ldr	r3, [pc, #660]	; (800a8e4 <_dtoa_r+0x644>)
 800a64e:	4fa6      	ldr	r7, [pc, #664]	; (800a8e8 <_dtoa_r+0x648>)
 800a650:	f006 020f 	and.w	r2, r6, #15
 800a654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a660:	f7f5 ffca 	bl	80005f8 <__aeabi_dmul>
 800a664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a668:	1136      	asrs	r6, r6, #4
 800a66a:	2300      	movs	r3, #0
 800a66c:	2502      	movs	r5, #2
 800a66e:	2e00      	cmp	r6, #0
 800a670:	f040 8085 	bne.w	800a77e <_dtoa_r+0x4de>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1d2      	bne.n	800a61e <_dtoa_r+0x37e>
 800a678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 808c 	beq.w	800a798 <_dtoa_r+0x4f8>
 800a680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a684:	4b99      	ldr	r3, [pc, #612]	; (800a8ec <_dtoa_r+0x64c>)
 800a686:	2200      	movs	r2, #0
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f6 fa26 	bl	8000adc <__aeabi_dcmplt>
 800a690:	2800      	cmp	r0, #0
 800a692:	f000 8081 	beq.w	800a798 <_dtoa_r+0x4f8>
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d07d      	beq.n	800a798 <_dtoa_r+0x4f8>
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	dd3c      	ble.n	800a71c <_dtoa_r+0x47c>
 800a6a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a6a6:	9307      	str	r3, [sp, #28]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4b91      	ldr	r3, [pc, #580]	; (800a8f0 <_dtoa_r+0x650>)
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7f5 ff2e 	bl	8000524 <__aeabi_i2d>
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	463b      	mov	r3, r7
 800a6cc:	f7f5 ff94 	bl	80005f8 <__aeabi_dmul>
 800a6d0:	4b88      	ldr	r3, [pc, #544]	; (800a8f4 <_dtoa_r+0x654>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f7f5 fdda 	bl	800028c <__adddf3>
 800a6d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d15c      	bne.n	800a7a2 <_dtoa_r+0x502>
 800a6e8:	4b83      	ldr	r3, [pc, #524]	; (800a8f8 <_dtoa_r+0x658>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f5 fdca 	bl	8000288 <__aeabi_dsub>
 800a6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	f7f6 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 800a700:	2800      	cmp	r0, #0
 800a702:	f040 8296 	bne.w	800ac32 <_dtoa_r+0x992>
 800a706:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a70a:	4630      	mov	r0, r6
 800a70c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a710:	4639      	mov	r1, r7
 800a712:	f7f6 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 8288 	bne.w	800ac2c <_dtoa_r+0x98c>
 800a71c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a726:	2b00      	cmp	r3, #0
 800a728:	f2c0 8158 	blt.w	800a9dc <_dtoa_r+0x73c>
 800a72c:	f1ba 0f0e 	cmp.w	sl, #14
 800a730:	f300 8154 	bgt.w	800a9dc <_dtoa_r+0x73c>
 800a734:	4b6b      	ldr	r3, [pc, #428]	; (800a8e4 <_dtoa_r+0x644>)
 800a736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a73a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	f280 80e3 	bge.w	800a90c <_dtoa_r+0x66c>
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f300 80df 	bgt.w	800a90c <_dtoa_r+0x66c>
 800a74e:	f040 826d 	bne.w	800ac2c <_dtoa_r+0x98c>
 800a752:	4b69      	ldr	r3, [pc, #420]	; (800a8f8 <_dtoa_r+0x658>)
 800a754:	2200      	movs	r2, #0
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a762:	f7f6 f9cf 	bl	8000b04 <__aeabi_dcmpge>
 800a766:	9e01      	ldr	r6, [sp, #4]
 800a768:	4637      	mov	r7, r6
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f040 8243 	bne.w	800abf6 <_dtoa_r+0x956>
 800a770:	9d00      	ldr	r5, [sp, #0]
 800a772:	2331      	movs	r3, #49	; 0x31
 800a774:	f805 3b01 	strb.w	r3, [r5], #1
 800a778:	f10a 0a01 	add.w	sl, sl, #1
 800a77c:	e23f      	b.n	800abfe <_dtoa_r+0x95e>
 800a77e:	07f2      	lsls	r2, r6, #31
 800a780:	d505      	bpl.n	800a78e <_dtoa_r+0x4ee>
 800a782:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a786:	f7f5 ff37 	bl	80005f8 <__aeabi_dmul>
 800a78a:	3501      	adds	r5, #1
 800a78c:	2301      	movs	r3, #1
 800a78e:	1076      	asrs	r6, r6, #1
 800a790:	3708      	adds	r7, #8
 800a792:	e76c      	b.n	800a66e <_dtoa_r+0x3ce>
 800a794:	2502      	movs	r5, #2
 800a796:	e76f      	b.n	800a678 <_dtoa_r+0x3d8>
 800a798:	9b01      	ldr	r3, [sp, #4]
 800a79a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a79e:	930c      	str	r3, [sp, #48]	; 0x30
 800a7a0:	e78d      	b.n	800a6be <_dtoa_r+0x41e>
 800a7a2:	9900      	ldr	r1, [sp, #0]
 800a7a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a8:	4b4e      	ldr	r3, [pc, #312]	; (800a8e4 <_dtoa_r+0x644>)
 800a7aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ae:	4401      	add	r1, r0
 800a7b0:	9102      	str	r1, [sp, #8]
 800a7b2:	9908      	ldr	r1, [sp, #32]
 800a7b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7b8:	eef0 8a67 	vmov.f32	s17, s15
 800a7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	d045      	beq.n	800a854 <_dtoa_r+0x5b4>
 800a7c8:	494c      	ldr	r1, [pc, #304]	; (800a8fc <_dtoa_r+0x65c>)
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f7f6 f83e 	bl	800084c <__aeabi_ddiv>
 800a7d0:	ec53 2b18 	vmov	r2, r3, d8
 800a7d4:	f7f5 fd58 	bl	8000288 <__aeabi_dsub>
 800a7d8:	9d00      	ldr	r5, [sp, #0]
 800a7da:	ec41 0b18 	vmov	d8, r0, r1
 800a7de:	4639      	mov	r1, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7f6 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800a7e6:	900c      	str	r0, [sp, #48]	; 0x30
 800a7e8:	f7f5 fe9c 	bl	8000524 <__aeabi_i2d>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f5 fd48 	bl	8000288 <__aeabi_dsub>
 800a7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fa:	3330      	adds	r3, #48	; 0x30
 800a7fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a800:	ec53 2b18 	vmov	r2, r3, d8
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	f7f6 f968 	bl	8000adc <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d165      	bne.n	800a8dc <_dtoa_r+0x63c>
 800a810:	4632      	mov	r2, r6
 800a812:	463b      	mov	r3, r7
 800a814:	4935      	ldr	r1, [pc, #212]	; (800a8ec <_dtoa_r+0x64c>)
 800a816:	2000      	movs	r0, #0
 800a818:	f7f5 fd36 	bl	8000288 <__aeabi_dsub>
 800a81c:	ec53 2b18 	vmov	r2, r3, d8
 800a820:	f7f6 f95c 	bl	8000adc <__aeabi_dcmplt>
 800a824:	2800      	cmp	r0, #0
 800a826:	f040 80b9 	bne.w	800a99c <_dtoa_r+0x6fc>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	429d      	cmp	r5, r3
 800a82e:	f43f af75 	beq.w	800a71c <_dtoa_r+0x47c>
 800a832:	4b2f      	ldr	r3, [pc, #188]	; (800a8f0 <_dtoa_r+0x650>)
 800a834:	ec51 0b18 	vmov	r0, r1, d8
 800a838:	2200      	movs	r2, #0
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	4b2c      	ldr	r3, [pc, #176]	; (800a8f0 <_dtoa_r+0x650>)
 800a840:	ec41 0b18 	vmov	d8, r0, r1
 800a844:	2200      	movs	r2, #0
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	f7f5 fed5 	bl	80005f8 <__aeabi_dmul>
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	e7c4      	b.n	800a7de <_dtoa_r+0x53e>
 800a854:	ec51 0b17 	vmov	r0, r1, d7
 800a858:	f7f5 fece 	bl	80005f8 <__aeabi_dmul>
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	9d00      	ldr	r5, [sp, #0]
 800a860:	930c      	str	r3, [sp, #48]	; 0x30
 800a862:	ec41 0b18 	vmov	d8, r0, r1
 800a866:	4639      	mov	r1, r7
 800a868:	4630      	mov	r0, r6
 800a86a:	f7f6 f975 	bl	8000b58 <__aeabi_d2iz>
 800a86e:	9011      	str	r0, [sp, #68]	; 0x44
 800a870:	f7f5 fe58 	bl	8000524 <__aeabi_i2d>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f5 fd04 	bl	8000288 <__aeabi_dsub>
 800a880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a882:	3330      	adds	r3, #48	; 0x30
 800a884:	f805 3b01 	strb.w	r3, [r5], #1
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	429d      	cmp	r5, r3
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	d134      	bne.n	800a900 <_dtoa_r+0x660>
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <_dtoa_r+0x65c>)
 800a898:	ec51 0b18 	vmov	r0, r1, d8
 800a89c:	f7f5 fcf6 	bl	800028c <__adddf3>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f6 f936 	bl	8000b18 <__aeabi_dcmpgt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d175      	bne.n	800a99c <_dtoa_r+0x6fc>
 800a8b0:	ec53 2b18 	vmov	r2, r3, d8
 800a8b4:	4911      	ldr	r1, [pc, #68]	; (800a8fc <_dtoa_r+0x65c>)
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f7f5 fce6 	bl	8000288 <__aeabi_dsub>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f6 f90a 	bl	8000adc <__aeabi_dcmplt>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f43f af27 	beq.w	800a71c <_dtoa_r+0x47c>
 800a8ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d0:	1e6b      	subs	r3, r5, #1
 800a8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d8:	2b30      	cmp	r3, #48	; 0x30
 800a8da:	d0f8      	beq.n	800a8ce <_dtoa_r+0x62e>
 800a8dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8e0:	e04a      	b.n	800a978 <_dtoa_r+0x6d8>
 800a8e2:	bf00      	nop
 800a8e4:	0800d2d8 	.word	0x0800d2d8
 800a8e8:	0800d2b0 	.word	0x0800d2b0
 800a8ec:	3ff00000 	.word	0x3ff00000
 800a8f0:	40240000 	.word	0x40240000
 800a8f4:	401c0000 	.word	0x401c0000
 800a8f8:	40140000 	.word	0x40140000
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	4baf      	ldr	r3, [pc, #700]	; (800abc0 <_dtoa_r+0x920>)
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	e7ac      	b.n	800a866 <_dtoa_r+0x5c6>
 800a90c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a910:	9d00      	ldr	r5, [sp, #0]
 800a912:	4642      	mov	r2, r8
 800a914:	464b      	mov	r3, r9
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f5 ff97 	bl	800084c <__aeabi_ddiv>
 800a91e:	f7f6 f91b 	bl	8000b58 <__aeabi_d2iz>
 800a922:	9002      	str	r0, [sp, #8]
 800a924:	f7f5 fdfe 	bl	8000524 <__aeabi_i2d>
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	f7f5 fe64 	bl	80005f8 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fca6 	bl	8000288 <__aeabi_dsub>
 800a93c:	9e02      	ldr	r6, [sp, #8]
 800a93e:	9f01      	ldr	r7, [sp, #4]
 800a940:	3630      	adds	r6, #48	; 0x30
 800a942:	f805 6b01 	strb.w	r6, [r5], #1
 800a946:	9e00      	ldr	r6, [sp, #0]
 800a948:	1bae      	subs	r6, r5, r6
 800a94a:	42b7      	cmp	r7, r6
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	d137      	bne.n	800a9c2 <_dtoa_r+0x722>
 800a952:	f7f5 fc9b 	bl	800028c <__adddf3>
 800a956:	4642      	mov	r2, r8
 800a958:	464b      	mov	r3, r9
 800a95a:	4606      	mov	r6, r0
 800a95c:	460f      	mov	r7, r1
 800a95e:	f7f6 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 800a962:	b9c8      	cbnz	r0, 800a998 <_dtoa_r+0x6f8>
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f6 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a970:	b110      	cbz	r0, 800a978 <_dtoa_r+0x6d8>
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d40f      	bmi.n	800a998 <_dtoa_r+0x6f8>
 800a978:	4620      	mov	r0, r4
 800a97a:	4659      	mov	r1, fp
 800a97c:	f001 f868 	bl	800ba50 <_Bfree>
 800a980:	2300      	movs	r3, #0
 800a982:	702b      	strb	r3, [r5, #0]
 800a984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a986:	f10a 0001 	add.w	r0, sl, #1
 800a98a:	6018      	str	r0, [r3, #0]
 800a98c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f43f acd8 	beq.w	800a344 <_dtoa_r+0xa4>
 800a994:	601d      	str	r5, [r3, #0]
 800a996:	e4d5      	b.n	800a344 <_dtoa_r+0xa4>
 800a998:	f8cd a01c 	str.w	sl, [sp, #28]
 800a99c:	462b      	mov	r3, r5
 800a99e:	461d      	mov	r5, r3
 800a9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9a4:	2a39      	cmp	r2, #57	; 0x39
 800a9a6:	d108      	bne.n	800a9ba <_dtoa_r+0x71a>
 800a9a8:	9a00      	ldr	r2, [sp, #0]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d1f7      	bne.n	800a99e <_dtoa_r+0x6fe>
 800a9ae:	9a07      	ldr	r2, [sp, #28]
 800a9b0:	9900      	ldr	r1, [sp, #0]
 800a9b2:	3201      	adds	r2, #1
 800a9b4:	9207      	str	r2, [sp, #28]
 800a9b6:	2230      	movs	r2, #48	; 0x30
 800a9b8:	700a      	strb	r2, [r1, #0]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	3201      	adds	r2, #1
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e78c      	b.n	800a8dc <_dtoa_r+0x63c>
 800a9c2:	4b7f      	ldr	r3, [pc, #508]	; (800abc0 <_dtoa_r+0x920>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	f7f6 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d09b      	beq.n	800a912 <_dtoa_r+0x672>
 800a9da:	e7cd      	b.n	800a978 <_dtoa_r+0x6d8>
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	f000 80c4 	beq.w	800ab6c <_dtoa_r+0x8cc>
 800a9e4:	9a05      	ldr	r2, [sp, #20]
 800a9e6:	2a01      	cmp	r2, #1
 800a9e8:	f300 80a8 	bgt.w	800ab3c <_dtoa_r+0x89c>
 800a9ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	f000 80a0 	beq.w	800ab34 <_dtoa_r+0x894>
 800a9f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9f8:	9e06      	ldr	r6, [sp, #24]
 800a9fa:	4645      	mov	r5, r8
 800a9fc:	9a04      	ldr	r2, [sp, #16]
 800a9fe:	2101      	movs	r1, #1
 800aa00:	441a      	add	r2, r3
 800aa02:	4620      	mov	r0, r4
 800aa04:	4498      	add	r8, r3
 800aa06:	9204      	str	r2, [sp, #16]
 800aa08:	f001 f928 	bl	800bc5c <__i2b>
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	2d00      	cmp	r5, #0
 800aa10:	dd0b      	ble.n	800aa2a <_dtoa_r+0x78a>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd08      	ble.n	800aa2a <_dtoa_r+0x78a>
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	bfa8      	it	ge
 800aa1e:	462b      	movge	r3, r5
 800aa20:	eba8 0803 	sub.w	r8, r8, r3
 800aa24:	1aed      	subs	r5, r5, r3
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	b1fb      	cbz	r3, 800aa6e <_dtoa_r+0x7ce>
 800aa2e:	9b08      	ldr	r3, [sp, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 809f 	beq.w	800ab74 <_dtoa_r+0x8d4>
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	dd11      	ble.n	800aa5e <_dtoa_r+0x7be>
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 f9c8 	bl	800bdd4 <__pow5mult>
 800aa44:	465a      	mov	r2, fp
 800aa46:	4601      	mov	r1, r0
 800aa48:	4607      	mov	r7, r0
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f001 f91c 	bl	800bc88 <__multiply>
 800aa50:	4659      	mov	r1, fp
 800aa52:	9007      	str	r0, [sp, #28]
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fffb 	bl	800ba50 <_Bfree>
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	469b      	mov	fp, r3
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	1b9a      	subs	r2, r3, r6
 800aa62:	d004      	beq.n	800aa6e <_dtoa_r+0x7ce>
 800aa64:	4659      	mov	r1, fp
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 f9b4 	bl	800bdd4 <__pow5mult>
 800aa6c:	4683      	mov	fp, r0
 800aa6e:	2101      	movs	r1, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	f001 f8f3 	bl	800bc5c <__i2b>
 800aa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	dd7c      	ble.n	800ab78 <_dtoa_r+0x8d8>
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4601      	mov	r1, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f001 f9a6 	bl	800bdd4 <__pow5mult>
 800aa88:	9b05      	ldr	r3, [sp, #20]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	dd76      	ble.n	800ab7e <_dtoa_r+0x8de>
 800aa90:	2300      	movs	r3, #0
 800aa92:	9306      	str	r3, [sp, #24]
 800aa94:	6933      	ldr	r3, [r6, #16]
 800aa96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa9a:	6918      	ldr	r0, [r3, #16]
 800aa9c:	f001 f88e 	bl	800bbbc <__hi0bits>
 800aaa0:	f1c0 0020 	rsb	r0, r0, #32
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	4418      	add	r0, r3
 800aaa8:	f010 001f 	ands.w	r0, r0, #31
 800aaac:	f000 8086 	beq.w	800abbc <_dtoa_r+0x91c>
 800aab0:	f1c0 0320 	rsb	r3, r0, #32
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	dd7f      	ble.n	800abb8 <_dtoa_r+0x918>
 800aab8:	f1c0 001c 	rsb	r0, r0, #28
 800aabc:	9b04      	ldr	r3, [sp, #16]
 800aabe:	4403      	add	r3, r0
 800aac0:	4480      	add	r8, r0
 800aac2:	4405      	add	r5, r0
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	f1b8 0f00 	cmp.w	r8, #0
 800aaca:	dd05      	ble.n	800aad8 <_dtoa_r+0x838>
 800aacc:	4659      	mov	r1, fp
 800aace:	4642      	mov	r2, r8
 800aad0:	4620      	mov	r0, r4
 800aad2:	f001 f9d9 	bl	800be88 <__lshift>
 800aad6:	4683      	mov	fp, r0
 800aad8:	9b04      	ldr	r3, [sp, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd05      	ble.n	800aaea <_dtoa_r+0x84a>
 800aade:	4631      	mov	r1, r6
 800aae0:	461a      	mov	r2, r3
 800aae2:	4620      	mov	r0, r4
 800aae4:	f001 f9d0 	bl	800be88 <__lshift>
 800aae8:	4606      	mov	r6, r0
 800aaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d069      	beq.n	800abc4 <_dtoa_r+0x924>
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	f001 fa34 	bl	800bf60 <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	da63      	bge.n	800abc4 <_dtoa_r+0x924>
 800aafc:	2300      	movs	r3, #0
 800aafe:	4659      	mov	r1, fp
 800ab00:	220a      	movs	r2, #10
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 ffc6 	bl	800ba94 <__multadd>
 800ab08:	9b08      	ldr	r3, [sp, #32]
 800ab0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab0e:	4683      	mov	fp, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 818f 	beq.w	800ae34 <_dtoa_r+0xb94>
 800ab16:	4639      	mov	r1, r7
 800ab18:	2300      	movs	r3, #0
 800ab1a:	220a      	movs	r2, #10
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 ffb9 	bl	800ba94 <__multadd>
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	4607      	mov	r7, r0
 800ab28:	f300 808e 	bgt.w	800ac48 <_dtoa_r+0x9a8>
 800ab2c:	9b05      	ldr	r3, [sp, #20]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	dc50      	bgt.n	800abd4 <_dtoa_r+0x934>
 800ab32:	e089      	b.n	800ac48 <_dtoa_r+0x9a8>
 800ab34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab3a:	e75d      	b.n	800a9f8 <_dtoa_r+0x758>
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	1e5e      	subs	r6, r3, #1
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	42b3      	cmp	r3, r6
 800ab44:	bfbf      	itttt	lt
 800ab46:	9b06      	ldrlt	r3, [sp, #24]
 800ab48:	9606      	strlt	r6, [sp, #24]
 800ab4a:	1af2      	sublt	r2, r6, r3
 800ab4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab4e:	bfb6      	itet	lt
 800ab50:	189b      	addlt	r3, r3, r2
 800ab52:	1b9e      	subge	r6, r3, r6
 800ab54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	bfb8      	it	lt
 800ab5a:	2600      	movlt	r6, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bfb5      	itete	lt
 800ab60:	eba8 0503 	sublt.w	r5, r8, r3
 800ab64:	9b01      	ldrge	r3, [sp, #4]
 800ab66:	2300      	movlt	r3, #0
 800ab68:	4645      	movge	r5, r8
 800ab6a:	e747      	b.n	800a9fc <_dtoa_r+0x75c>
 800ab6c:	9e06      	ldr	r6, [sp, #24]
 800ab6e:	9f08      	ldr	r7, [sp, #32]
 800ab70:	4645      	mov	r5, r8
 800ab72:	e74c      	b.n	800aa0e <_dtoa_r+0x76e>
 800ab74:	9a06      	ldr	r2, [sp, #24]
 800ab76:	e775      	b.n	800aa64 <_dtoa_r+0x7c4>
 800ab78:	9b05      	ldr	r3, [sp, #20]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	dc18      	bgt.n	800abb0 <_dtoa_r+0x910>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	b9b3      	cbnz	r3, 800abb0 <_dtoa_r+0x910>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab88:	b9a3      	cbnz	r3, 800abb4 <_dtoa_r+0x914>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab90:	0d1b      	lsrs	r3, r3, #20
 800ab92:	051b      	lsls	r3, r3, #20
 800ab94:	b12b      	cbz	r3, 800aba2 <_dtoa_r+0x902>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	f108 0801 	add.w	r8, r8, #1
 800aba0:	2301      	movs	r3, #1
 800aba2:	9306      	str	r3, [sp, #24]
 800aba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f47f af74 	bne.w	800aa94 <_dtoa_r+0x7f4>
 800abac:	2001      	movs	r0, #1
 800abae:	e779      	b.n	800aaa4 <_dtoa_r+0x804>
 800abb0:	2300      	movs	r3, #0
 800abb2:	e7f6      	b.n	800aba2 <_dtoa_r+0x902>
 800abb4:	9b02      	ldr	r3, [sp, #8]
 800abb6:	e7f4      	b.n	800aba2 <_dtoa_r+0x902>
 800abb8:	d085      	beq.n	800aac6 <_dtoa_r+0x826>
 800abba:	4618      	mov	r0, r3
 800abbc:	301c      	adds	r0, #28
 800abbe:	e77d      	b.n	800aabc <_dtoa_r+0x81c>
 800abc0:	40240000 	.word	0x40240000
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	dc38      	bgt.n	800ac3c <_dtoa_r+0x99c>
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	dd35      	ble.n	800ac3c <_dtoa_r+0x99c>
 800abd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abd4:	f1b9 0f00 	cmp.w	r9, #0
 800abd8:	d10d      	bne.n	800abf6 <_dtoa_r+0x956>
 800abda:	4631      	mov	r1, r6
 800abdc:	464b      	mov	r3, r9
 800abde:	2205      	movs	r2, #5
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 ff57 	bl	800ba94 <__multadd>
 800abe6:	4601      	mov	r1, r0
 800abe8:	4606      	mov	r6, r0
 800abea:	4658      	mov	r0, fp
 800abec:	f001 f9b8 	bl	800bf60 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f73f adbd 	bgt.w	800a770 <_dtoa_r+0x4d0>
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	9d00      	ldr	r5, [sp, #0]
 800abfa:	ea6f 0a03 	mvn.w	sl, r3
 800abfe:	f04f 0800 	mov.w	r8, #0
 800ac02:	4631      	mov	r1, r6
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 ff23 	bl	800ba50 <_Bfree>
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	f43f aeb4 	beq.w	800a978 <_dtoa_r+0x6d8>
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d005      	beq.n	800ac22 <_dtoa_r+0x982>
 800ac16:	45b8      	cmp	r8, r7
 800ac18:	d003      	beq.n	800ac22 <_dtoa_r+0x982>
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 ff17 	bl	800ba50 <_Bfree>
 800ac22:	4639      	mov	r1, r7
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 ff13 	bl	800ba50 <_Bfree>
 800ac2a:	e6a5      	b.n	800a978 <_dtoa_r+0x6d8>
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	4637      	mov	r7, r6
 800ac30:	e7e1      	b.n	800abf6 <_dtoa_r+0x956>
 800ac32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac38:	4637      	mov	r7, r6
 800ac3a:	e599      	b.n	800a770 <_dtoa_r+0x4d0>
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 80fd 	beq.w	800ae42 <_dtoa_r+0xba2>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	dd05      	ble.n	800ac58 <_dtoa_r+0x9b8>
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	f001 f919 	bl	800be88 <__lshift>
 800ac56:	4607      	mov	r7, r0
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d05c      	beq.n	800ad18 <_dtoa_r+0xa78>
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 feb5 	bl	800b9d0 <_Balloc>
 800ac66:	4605      	mov	r5, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <_dtoa_r+0x9d6>
 800ac6a:	4b80      	ldr	r3, [pc, #512]	; (800ae6c <_dtoa_r+0xbcc>)
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac72:	f7ff bb2e 	b.w	800a2d2 <_dtoa_r+0x32>
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	3202      	adds	r2, #2
 800ac7a:	0092      	lsls	r2, r2, #2
 800ac7c:	f107 010c 	add.w	r1, r7, #12
 800ac80:	300c      	adds	r0, #12
 800ac82:	f7fd fbc9 	bl	8008418 <memcpy>
 800ac86:	2201      	movs	r2, #1
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f001 f8fc 	bl	800be88 <__lshift>
 800ac90:	9b00      	ldr	r3, [sp, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	444b      	add	r3, r9
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	46b8      	mov	r8, r7
 800aca4:	9306      	str	r3, [sp, #24]
 800aca6:	4607      	mov	r7, r0
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	4631      	mov	r1, r6
 800acac:	3b01      	subs	r3, #1
 800acae:	4658      	mov	r0, fp
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	f7ff fa67 	bl	800a184 <quorem>
 800acb6:	4603      	mov	r3, r0
 800acb8:	3330      	adds	r3, #48	; 0x30
 800acba:	9004      	str	r0, [sp, #16]
 800acbc:	4641      	mov	r1, r8
 800acbe:	4658      	mov	r0, fp
 800acc0:	9308      	str	r3, [sp, #32]
 800acc2:	f001 f94d 	bl	800bf60 <__mcmp>
 800acc6:	463a      	mov	r2, r7
 800acc8:	4681      	mov	r9, r0
 800acca:	4631      	mov	r1, r6
 800accc:	4620      	mov	r0, r4
 800acce:	f001 f963 	bl	800bf98 <__mdiff>
 800acd2:	68c2      	ldr	r2, [r0, #12]
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	4605      	mov	r5, r0
 800acd8:	bb02      	cbnz	r2, 800ad1c <_dtoa_r+0xa7c>
 800acda:	4601      	mov	r1, r0
 800acdc:	4658      	mov	r0, fp
 800acde:	f001 f93f 	bl	800bf60 <__mcmp>
 800ace2:	9b08      	ldr	r3, [sp, #32]
 800ace4:	4602      	mov	r2, r0
 800ace6:	4629      	mov	r1, r5
 800ace8:	4620      	mov	r0, r4
 800acea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800acee:	f000 feaf 	bl	800ba50 <_Bfree>
 800acf2:	9b05      	ldr	r3, [sp, #20]
 800acf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf6:	9d01      	ldr	r5, [sp, #4]
 800acf8:	ea43 0102 	orr.w	r1, r3, r2
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	430b      	orrs	r3, r1
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	d10d      	bne.n	800ad20 <_dtoa_r+0xa80>
 800ad04:	2b39      	cmp	r3, #57	; 0x39
 800ad06:	d029      	beq.n	800ad5c <_dtoa_r+0xabc>
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	dd01      	ble.n	800ad12 <_dtoa_r+0xa72>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	3331      	adds	r3, #49	; 0x31
 800ad12:	9a02      	ldr	r2, [sp, #8]
 800ad14:	7013      	strb	r3, [r2, #0]
 800ad16:	e774      	b.n	800ac02 <_dtoa_r+0x962>
 800ad18:	4638      	mov	r0, r7
 800ad1a:	e7b9      	b.n	800ac90 <_dtoa_r+0x9f0>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	e7e2      	b.n	800ace6 <_dtoa_r+0xa46>
 800ad20:	f1b9 0f00 	cmp.w	r9, #0
 800ad24:	db06      	blt.n	800ad34 <_dtoa_r+0xa94>
 800ad26:	9905      	ldr	r1, [sp, #20]
 800ad28:	ea41 0909 	orr.w	r9, r1, r9
 800ad2c:	9906      	ldr	r1, [sp, #24]
 800ad2e:	ea59 0101 	orrs.w	r1, r9, r1
 800ad32:	d120      	bne.n	800ad76 <_dtoa_r+0xad6>
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	ddec      	ble.n	800ad12 <_dtoa_r+0xa72>
 800ad38:	4659      	mov	r1, fp
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	f001 f8a2 	bl	800be88 <__lshift>
 800ad44:	4631      	mov	r1, r6
 800ad46:	4683      	mov	fp, r0
 800ad48:	f001 f90a 	bl	800bf60 <__mcmp>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	dc02      	bgt.n	800ad58 <_dtoa_r+0xab8>
 800ad52:	d1de      	bne.n	800ad12 <_dtoa_r+0xa72>
 800ad54:	07da      	lsls	r2, r3, #31
 800ad56:	d5dc      	bpl.n	800ad12 <_dtoa_r+0xa72>
 800ad58:	2b39      	cmp	r3, #57	; 0x39
 800ad5a:	d1d8      	bne.n	800ad0e <_dtoa_r+0xa6e>
 800ad5c:	9a02      	ldr	r2, [sp, #8]
 800ad5e:	2339      	movs	r3, #57	; 0x39
 800ad60:	7013      	strb	r3, [r2, #0]
 800ad62:	462b      	mov	r3, r5
 800ad64:	461d      	mov	r5, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad6c:	2a39      	cmp	r2, #57	; 0x39
 800ad6e:	d050      	beq.n	800ae12 <_dtoa_r+0xb72>
 800ad70:	3201      	adds	r2, #1
 800ad72:	701a      	strb	r2, [r3, #0]
 800ad74:	e745      	b.n	800ac02 <_dtoa_r+0x962>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	dd03      	ble.n	800ad82 <_dtoa_r+0xae2>
 800ad7a:	2b39      	cmp	r3, #57	; 0x39
 800ad7c:	d0ee      	beq.n	800ad5c <_dtoa_r+0xabc>
 800ad7e:	3301      	adds	r3, #1
 800ad80:	e7c7      	b.n	800ad12 <_dtoa_r+0xa72>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	9907      	ldr	r1, [sp, #28]
 800ad86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad8a:	428a      	cmp	r2, r1
 800ad8c:	d02a      	beq.n	800ade4 <_dtoa_r+0xb44>
 800ad8e:	4659      	mov	r1, fp
 800ad90:	2300      	movs	r3, #0
 800ad92:	220a      	movs	r2, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fe7d 	bl	800ba94 <__multadd>
 800ad9a:	45b8      	cmp	r8, r7
 800ad9c:	4683      	mov	fp, r0
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	f04f 020a 	mov.w	r2, #10
 800ada6:	4641      	mov	r1, r8
 800ada8:	4620      	mov	r0, r4
 800adaa:	d107      	bne.n	800adbc <_dtoa_r+0xb1c>
 800adac:	f000 fe72 	bl	800ba94 <__multadd>
 800adb0:	4680      	mov	r8, r0
 800adb2:	4607      	mov	r7, r0
 800adb4:	9b01      	ldr	r3, [sp, #4]
 800adb6:	3301      	adds	r3, #1
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	e775      	b.n	800aca8 <_dtoa_r+0xa08>
 800adbc:	f000 fe6a 	bl	800ba94 <__multadd>
 800adc0:	4639      	mov	r1, r7
 800adc2:	4680      	mov	r8, r0
 800adc4:	2300      	movs	r3, #0
 800adc6:	220a      	movs	r2, #10
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fe63 	bl	800ba94 <__multadd>
 800adce:	4607      	mov	r7, r0
 800add0:	e7f0      	b.n	800adb4 <_dtoa_r+0xb14>
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	9a00      	ldr	r2, [sp, #0]
 800add8:	bfcc      	ite	gt
 800adda:	464d      	movgt	r5, r9
 800addc:	2501      	movle	r5, #1
 800adde:	4415      	add	r5, r2
 800ade0:	f04f 0800 	mov.w	r8, #0
 800ade4:	4659      	mov	r1, fp
 800ade6:	2201      	movs	r2, #1
 800ade8:	4620      	mov	r0, r4
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	f001 f84c 	bl	800be88 <__lshift>
 800adf0:	4631      	mov	r1, r6
 800adf2:	4683      	mov	fp, r0
 800adf4:	f001 f8b4 	bl	800bf60 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dcb2      	bgt.n	800ad62 <_dtoa_r+0xac2>
 800adfc:	d102      	bne.n	800ae04 <_dtoa_r+0xb64>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	07db      	lsls	r3, r3, #31
 800ae02:	d4ae      	bmi.n	800ad62 <_dtoa_r+0xac2>
 800ae04:	462b      	mov	r3, r5
 800ae06:	461d      	mov	r5, r3
 800ae08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0c:	2a30      	cmp	r2, #48	; 0x30
 800ae0e:	d0fa      	beq.n	800ae06 <_dtoa_r+0xb66>
 800ae10:	e6f7      	b.n	800ac02 <_dtoa_r+0x962>
 800ae12:	9a00      	ldr	r2, [sp, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d1a5      	bne.n	800ad64 <_dtoa_r+0xac4>
 800ae18:	f10a 0a01 	add.w	sl, sl, #1
 800ae1c:	2331      	movs	r3, #49	; 0x31
 800ae1e:	e779      	b.n	800ad14 <_dtoa_r+0xa74>
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <_dtoa_r+0xbd0>)
 800ae22:	f7ff baaf 	b.w	800a384 <_dtoa_r+0xe4>
 800ae26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f47f aa86 	bne.w	800a33a <_dtoa_r+0x9a>
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <_dtoa_r+0xbd4>)
 800ae30:	f7ff baa8 	b.w	800a384 <_dtoa_r+0xe4>
 800ae34:	f1b9 0f00 	cmp.w	r9, #0
 800ae38:	dc03      	bgt.n	800ae42 <_dtoa_r+0xba2>
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f73f aec9 	bgt.w	800abd4 <_dtoa_r+0x934>
 800ae42:	9d00      	ldr	r5, [sp, #0]
 800ae44:	4631      	mov	r1, r6
 800ae46:	4658      	mov	r0, fp
 800ae48:	f7ff f99c 	bl	800a184 <quorem>
 800ae4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae50:	f805 3b01 	strb.w	r3, [r5], #1
 800ae54:	9a00      	ldr	r2, [sp, #0]
 800ae56:	1aaa      	subs	r2, r5, r2
 800ae58:	4591      	cmp	r9, r2
 800ae5a:	ddba      	ble.n	800add2 <_dtoa_r+0xb32>
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	2300      	movs	r3, #0
 800ae60:	220a      	movs	r2, #10
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fe16 	bl	800ba94 <__multadd>
 800ae68:	4683      	mov	fp, r0
 800ae6a:	e7eb      	b.n	800ae44 <_dtoa_r+0xba4>
 800ae6c:	0800d15c 	.word	0x0800d15c
 800ae70:	0800cf5c 	.word	0x0800cf5c
 800ae74:	0800d0d9 	.word	0x0800d0d9

0800ae78 <__sflush_r>:
 800ae78:	898a      	ldrh	r2, [r1, #12]
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	4605      	mov	r5, r0
 800ae80:	0710      	lsls	r0, r2, #28
 800ae82:	460c      	mov	r4, r1
 800ae84:	d458      	bmi.n	800af38 <__sflush_r+0xc0>
 800ae86:	684b      	ldr	r3, [r1, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc05      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc02      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d0f9      	beq.n	800ae92 <__sflush_r+0x1a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aea4:	682f      	ldr	r7, [r5, #0]
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	d032      	beq.n	800af10 <__sflush_r+0x98>
 800aeaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	075a      	lsls	r2, r3, #29
 800aeb0:	d505      	bpl.n	800aebe <__sflush_r+0x46>
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeb8:	b10b      	cbz	r3, 800aebe <__sflush_r+0x46>
 800aeba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aebc:	1ac0      	subs	r0, r0, r3
 800aebe:	2300      	movs	r3, #0
 800aec0:	4602      	mov	r2, r0
 800aec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b0      	blx	r6
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	d106      	bne.n	800aede <__sflush_r+0x66>
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	291d      	cmp	r1, #29
 800aed4:	d82c      	bhi.n	800af30 <__sflush_r+0xb8>
 800aed6:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <__sflush_r+0x108>)
 800aed8:	40ca      	lsrs	r2, r1
 800aeda:	07d6      	lsls	r6, r2, #31
 800aedc:	d528      	bpl.n	800af30 <__sflush_r+0xb8>
 800aede:	2200      	movs	r2, #0
 800aee0:	6062      	str	r2, [r4, #4]
 800aee2:	04d9      	lsls	r1, r3, #19
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	6022      	str	r2, [r4, #0]
 800aee8:	d504      	bpl.n	800aef4 <__sflush_r+0x7c>
 800aeea:	1c42      	adds	r2, r0, #1
 800aeec:	d101      	bne.n	800aef2 <__sflush_r+0x7a>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	b903      	cbnz	r3, 800aef4 <__sflush_r+0x7c>
 800aef2:	6560      	str	r0, [r4, #84]	; 0x54
 800aef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef6:	602f      	str	r7, [r5, #0]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d0ca      	beq.n	800ae92 <__sflush_r+0x1a>
 800aefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af00:	4299      	cmp	r1, r3
 800af02:	d002      	beq.n	800af0a <__sflush_r+0x92>
 800af04:	4628      	mov	r0, r5
 800af06:	f001 fa2d 	bl	800c364 <_free_r>
 800af0a:	2000      	movs	r0, #0
 800af0c:	6360      	str	r0, [r4, #52]	; 0x34
 800af0e:	e7c1      	b.n	800ae94 <__sflush_r+0x1c>
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	2301      	movs	r3, #1
 800af14:	4628      	mov	r0, r5
 800af16:	47b0      	blx	r6
 800af18:	1c41      	adds	r1, r0, #1
 800af1a:	d1c7      	bne.n	800aeac <__sflush_r+0x34>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0c4      	beq.n	800aeac <__sflush_r+0x34>
 800af22:	2b1d      	cmp	r3, #29
 800af24:	d001      	beq.n	800af2a <__sflush_r+0xb2>
 800af26:	2b16      	cmp	r3, #22
 800af28:	d101      	bne.n	800af2e <__sflush_r+0xb6>
 800af2a:	602f      	str	r7, [r5, #0]
 800af2c:	e7b1      	b.n	800ae92 <__sflush_r+0x1a>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7ad      	b.n	800ae94 <__sflush_r+0x1c>
 800af38:	690f      	ldr	r7, [r1, #16]
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d0a9      	beq.n	800ae92 <__sflush_r+0x1a>
 800af3e:	0793      	lsls	r3, r2, #30
 800af40:	680e      	ldr	r6, [r1, #0]
 800af42:	bf08      	it	eq
 800af44:	694b      	ldreq	r3, [r1, #20]
 800af46:	600f      	str	r7, [r1, #0]
 800af48:	bf18      	it	ne
 800af4a:	2300      	movne	r3, #0
 800af4c:	eba6 0807 	sub.w	r8, r6, r7
 800af50:	608b      	str	r3, [r1, #8]
 800af52:	f1b8 0f00 	cmp.w	r8, #0
 800af56:	dd9c      	ble.n	800ae92 <__sflush_r+0x1a>
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af5c:	4643      	mov	r3, r8
 800af5e:	463a      	mov	r2, r7
 800af60:	4628      	mov	r0, r5
 800af62:	47b0      	blx	r6
 800af64:	2800      	cmp	r0, #0
 800af66:	dc06      	bgt.n	800af76 <__sflush_r+0xfe>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	e78e      	b.n	800ae94 <__sflush_r+0x1c>
 800af76:	4407      	add	r7, r0
 800af78:	eba8 0800 	sub.w	r8, r8, r0
 800af7c:	e7e9      	b.n	800af52 <__sflush_r+0xda>
 800af7e:	bf00      	nop
 800af80:	20400001 	.word	0x20400001

0800af84 <_fflush_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b913      	cbnz	r3, 800af94 <_fflush_r+0x10>
 800af8e:	2500      	movs	r5, #0
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	b118      	cbz	r0, 800af9e <_fflush_r+0x1a>
 800af96:	6983      	ldr	r3, [r0, #24]
 800af98:	b90b      	cbnz	r3, 800af9e <_fflush_r+0x1a>
 800af9a:	f000 f887 	bl	800b0ac <__sinit>
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <_fflush_r+0x6c>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d11b      	bne.n	800afdc <_fflush_r+0x58>
 800afa4:	686c      	ldr	r4, [r5, #4]
 800afa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0ef      	beq.n	800af8e <_fflush_r+0xa>
 800afae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb0:	07d0      	lsls	r0, r2, #31
 800afb2:	d404      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb4:	0599      	lsls	r1, r3, #22
 800afb6:	d402      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afba:	f000 fc88 	bl	800b8ce <__retarget_lock_acquire_recursive>
 800afbe:	4628      	mov	r0, r5
 800afc0:	4621      	mov	r1, r4
 800afc2:	f7ff ff59 	bl	800ae78 <__sflush_r>
 800afc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc8:	07da      	lsls	r2, r3, #31
 800afca:	4605      	mov	r5, r0
 800afcc:	d4e0      	bmi.n	800af90 <_fflush_r+0xc>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	059b      	lsls	r3, r3, #22
 800afd2:	d4dd      	bmi.n	800af90 <_fflush_r+0xc>
 800afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd6:	f000 fc7b 	bl	800b8d0 <__retarget_lock_release_recursive>
 800afda:	e7d9      	b.n	800af90 <_fflush_r+0xc>
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <_fflush_r+0x70>)
 800afde:	429c      	cmp	r4, r3
 800afe0:	d101      	bne.n	800afe6 <_fflush_r+0x62>
 800afe2:	68ac      	ldr	r4, [r5, #8]
 800afe4:	e7df      	b.n	800afa6 <_fflush_r+0x22>
 800afe6:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <_fflush_r+0x74>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	bf08      	it	eq
 800afec:	68ec      	ldreq	r4, [r5, #12]
 800afee:	e7da      	b.n	800afa6 <_fflush_r+0x22>
 800aff0:	0800d190 	.word	0x0800d190
 800aff4:	0800d1b0 	.word	0x0800d1b0
 800aff8:	0800d170 	.word	0x0800d170

0800affc <std>:
 800affc:	2300      	movs	r3, #0
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	e9c0 3300 	strd	r3, r3, [r0]
 800b006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b00a:	6083      	str	r3, [r0, #8]
 800b00c:	8181      	strh	r1, [r0, #12]
 800b00e:	6643      	str	r3, [r0, #100]	; 0x64
 800b010:	81c2      	strh	r2, [r0, #14]
 800b012:	6183      	str	r3, [r0, #24]
 800b014:	4619      	mov	r1, r3
 800b016:	2208      	movs	r2, #8
 800b018:	305c      	adds	r0, #92	; 0x5c
 800b01a:	f7fd fa0b 	bl	8008434 <memset>
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <std+0x38>)
 800b020:	6263      	str	r3, [r4, #36]	; 0x24
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <std+0x3c>)
 800b024:	62a3      	str	r3, [r4, #40]	; 0x28
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <std+0x40>)
 800b028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <std+0x44>)
 800b02c:	6224      	str	r4, [r4, #32]
 800b02e:	6323      	str	r3, [r4, #48]	; 0x30
 800b030:	bd10      	pop	{r4, pc}
 800b032:	bf00      	nop
 800b034:	0800ca59 	.word	0x0800ca59
 800b038:	0800ca7b 	.word	0x0800ca7b
 800b03c:	0800cab3 	.word	0x0800cab3
 800b040:	0800cad7 	.word	0x0800cad7

0800b044 <_cleanup_r>:
 800b044:	4901      	ldr	r1, [pc, #4]	; (800b04c <_cleanup_r+0x8>)
 800b046:	f000 b8af 	b.w	800b1a8 <_fwalk_reent>
 800b04a:	bf00      	nop
 800b04c:	0800af85 	.word	0x0800af85

0800b050 <__sfmoreglue>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	1e4a      	subs	r2, r1, #1
 800b054:	2568      	movs	r5, #104	; 0x68
 800b056:	4355      	muls	r5, r2
 800b058:	460e      	mov	r6, r1
 800b05a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b05e:	f001 f9d1 	bl	800c404 <_malloc_r>
 800b062:	4604      	mov	r4, r0
 800b064:	b140      	cbz	r0, 800b078 <__sfmoreglue+0x28>
 800b066:	2100      	movs	r1, #0
 800b068:	e9c0 1600 	strd	r1, r6, [r0]
 800b06c:	300c      	adds	r0, #12
 800b06e:	60a0      	str	r0, [r4, #8]
 800b070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b074:	f7fd f9de 	bl	8008434 <memset>
 800b078:	4620      	mov	r0, r4
 800b07a:	bd70      	pop	{r4, r5, r6, pc}

0800b07c <__sfp_lock_acquire>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__sfp_lock_acquire+0x8>)
 800b07e:	f000 bc26 	b.w	800b8ce <__retarget_lock_acquire_recursive>
 800b082:	bf00      	nop
 800b084:	2000073c 	.word	0x2000073c

0800b088 <__sfp_lock_release>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__sfp_lock_release+0x8>)
 800b08a:	f000 bc21 	b.w	800b8d0 <__retarget_lock_release_recursive>
 800b08e:	bf00      	nop
 800b090:	2000073c 	.word	0x2000073c

0800b094 <__sinit_lock_acquire>:
 800b094:	4801      	ldr	r0, [pc, #4]	; (800b09c <__sinit_lock_acquire+0x8>)
 800b096:	f000 bc1a 	b.w	800b8ce <__retarget_lock_acquire_recursive>
 800b09a:	bf00      	nop
 800b09c:	20000737 	.word	0x20000737

0800b0a0 <__sinit_lock_release>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	; (800b0a8 <__sinit_lock_release+0x8>)
 800b0a2:	f000 bc15 	b.w	800b8d0 <__retarget_lock_release_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20000737 	.word	0x20000737

0800b0ac <__sinit>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	f7ff fff0 	bl	800b094 <__sinit_lock_acquire>
 800b0b4:	69a3      	ldr	r3, [r4, #24]
 800b0b6:	b11b      	cbz	r3, 800b0c0 <__sinit+0x14>
 800b0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0bc:	f7ff bff0 	b.w	800b0a0 <__sinit_lock_release>
 800b0c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0c4:	6523      	str	r3, [r4, #80]	; 0x50
 800b0c6:	4b13      	ldr	r3, [pc, #76]	; (800b114 <__sinit+0x68>)
 800b0c8:	4a13      	ldr	r2, [pc, #76]	; (800b118 <__sinit+0x6c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0ce:	42a3      	cmp	r3, r4
 800b0d0:	bf04      	itt	eq
 800b0d2:	2301      	moveq	r3, #1
 800b0d4:	61a3      	streq	r3, [r4, #24]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f820 	bl	800b11c <__sfp>
 800b0dc:	6060      	str	r0, [r4, #4]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f81c 	bl	800b11c <__sfp>
 800b0e4:	60a0      	str	r0, [r4, #8]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 f818 	bl	800b11c <__sfp>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	60e0      	str	r0, [r4, #12]
 800b0f0:	2104      	movs	r1, #4
 800b0f2:	6860      	ldr	r0, [r4, #4]
 800b0f4:	f7ff ff82 	bl	800affc <std>
 800b0f8:	68a0      	ldr	r0, [r4, #8]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	2109      	movs	r1, #9
 800b0fe:	f7ff ff7d 	bl	800affc <std>
 800b102:	68e0      	ldr	r0, [r4, #12]
 800b104:	2202      	movs	r2, #2
 800b106:	2112      	movs	r1, #18
 800b108:	f7ff ff78 	bl	800affc <std>
 800b10c:	2301      	movs	r3, #1
 800b10e:	61a3      	str	r3, [r4, #24]
 800b110:	e7d2      	b.n	800b0b8 <__sinit+0xc>
 800b112:	bf00      	nop
 800b114:	0800cf48 	.word	0x0800cf48
 800b118:	0800b045 	.word	0x0800b045

0800b11c <__sfp>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	4607      	mov	r7, r0
 800b120:	f7ff ffac 	bl	800b07c <__sfp_lock_acquire>
 800b124:	4b1e      	ldr	r3, [pc, #120]	; (800b1a0 <__sfp+0x84>)
 800b126:	681e      	ldr	r6, [r3, #0]
 800b128:	69b3      	ldr	r3, [r6, #24]
 800b12a:	b913      	cbnz	r3, 800b132 <__sfp+0x16>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ffbd 	bl	800b0ac <__sinit>
 800b132:	3648      	adds	r6, #72	; 0x48
 800b134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b138:	3b01      	subs	r3, #1
 800b13a:	d503      	bpl.n	800b144 <__sfp+0x28>
 800b13c:	6833      	ldr	r3, [r6, #0]
 800b13e:	b30b      	cbz	r3, 800b184 <__sfp+0x68>
 800b140:	6836      	ldr	r6, [r6, #0]
 800b142:	e7f7      	b.n	800b134 <__sfp+0x18>
 800b144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b148:	b9d5      	cbnz	r5, 800b180 <__sfp+0x64>
 800b14a:	4b16      	ldr	r3, [pc, #88]	; (800b1a4 <__sfp+0x88>)
 800b14c:	60e3      	str	r3, [r4, #12]
 800b14e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b152:	6665      	str	r5, [r4, #100]	; 0x64
 800b154:	f000 fbba 	bl	800b8cc <__retarget_lock_init_recursive>
 800b158:	f7ff ff96 	bl	800b088 <__sfp_lock_release>
 800b15c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b164:	6025      	str	r5, [r4, #0]
 800b166:	61a5      	str	r5, [r4, #24]
 800b168:	2208      	movs	r2, #8
 800b16a:	4629      	mov	r1, r5
 800b16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b170:	f7fd f960 	bl	8008434 <memset>
 800b174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b17c:	4620      	mov	r0, r4
 800b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b180:	3468      	adds	r4, #104	; 0x68
 800b182:	e7d9      	b.n	800b138 <__sfp+0x1c>
 800b184:	2104      	movs	r1, #4
 800b186:	4638      	mov	r0, r7
 800b188:	f7ff ff62 	bl	800b050 <__sfmoreglue>
 800b18c:	4604      	mov	r4, r0
 800b18e:	6030      	str	r0, [r6, #0]
 800b190:	2800      	cmp	r0, #0
 800b192:	d1d5      	bne.n	800b140 <__sfp+0x24>
 800b194:	f7ff ff78 	bl	800b088 <__sfp_lock_release>
 800b198:	230c      	movs	r3, #12
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	e7ee      	b.n	800b17c <__sfp+0x60>
 800b19e:	bf00      	nop
 800b1a0:	0800cf48 	.word	0x0800cf48
 800b1a4:	ffff0001 	.word	0xffff0001

0800b1a8 <_fwalk_reent>:
 800b1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	4688      	mov	r8, r1
 800b1b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1b4:	2700      	movs	r7, #0
 800b1b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1ba:	f1b9 0901 	subs.w	r9, r9, #1
 800b1be:	d505      	bpl.n	800b1cc <_fwalk_reent+0x24>
 800b1c0:	6824      	ldr	r4, [r4, #0]
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	d1f7      	bne.n	800b1b6 <_fwalk_reent+0xe>
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	89ab      	ldrh	r3, [r5, #12]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d907      	bls.n	800b1e2 <_fwalk_reent+0x3a>
 800b1d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	d003      	beq.n	800b1e2 <_fwalk_reent+0x3a>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4630      	mov	r0, r6
 800b1de:	47c0      	blx	r8
 800b1e0:	4307      	orrs	r7, r0
 800b1e2:	3568      	adds	r5, #104	; 0x68
 800b1e4:	e7e9      	b.n	800b1ba <_fwalk_reent+0x12>

0800b1e6 <rshift>:
 800b1e6:	6903      	ldr	r3, [r0, #16]
 800b1e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1f4:	f100 0414 	add.w	r4, r0, #20
 800b1f8:	dd45      	ble.n	800b286 <rshift+0xa0>
 800b1fa:	f011 011f 	ands.w	r1, r1, #31
 800b1fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b202:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b206:	d10c      	bne.n	800b222 <rshift+0x3c>
 800b208:	f100 0710 	add.w	r7, r0, #16
 800b20c:	4629      	mov	r1, r5
 800b20e:	42b1      	cmp	r1, r6
 800b210:	d334      	bcc.n	800b27c <rshift+0x96>
 800b212:	1a9b      	subs	r3, r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	1eea      	subs	r2, r5, #3
 800b218:	4296      	cmp	r6, r2
 800b21a:	bf38      	it	cc
 800b21c:	2300      	movcc	r3, #0
 800b21e:	4423      	add	r3, r4
 800b220:	e015      	b.n	800b24e <rshift+0x68>
 800b222:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b226:	f1c1 0820 	rsb	r8, r1, #32
 800b22a:	40cf      	lsrs	r7, r1
 800b22c:	f105 0e04 	add.w	lr, r5, #4
 800b230:	46a1      	mov	r9, r4
 800b232:	4576      	cmp	r6, lr
 800b234:	46f4      	mov	ip, lr
 800b236:	d815      	bhi.n	800b264 <rshift+0x7e>
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	009a      	lsls	r2, r3, #2
 800b23c:	3a04      	subs	r2, #4
 800b23e:	3501      	adds	r5, #1
 800b240:	42ae      	cmp	r6, r5
 800b242:	bf38      	it	cc
 800b244:	2200      	movcc	r2, #0
 800b246:	18a3      	adds	r3, r4, r2
 800b248:	50a7      	str	r7, [r4, r2]
 800b24a:	b107      	cbz	r7, 800b24e <rshift+0x68>
 800b24c:	3304      	adds	r3, #4
 800b24e:	1b1a      	subs	r2, r3, r4
 800b250:	42a3      	cmp	r3, r4
 800b252:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b256:	bf08      	it	eq
 800b258:	2300      	moveq	r3, #0
 800b25a:	6102      	str	r2, [r0, #16]
 800b25c:	bf08      	it	eq
 800b25e:	6143      	streq	r3, [r0, #20]
 800b260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b264:	f8dc c000 	ldr.w	ip, [ip]
 800b268:	fa0c fc08 	lsl.w	ip, ip, r8
 800b26c:	ea4c 0707 	orr.w	r7, ip, r7
 800b270:	f849 7b04 	str.w	r7, [r9], #4
 800b274:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b278:	40cf      	lsrs	r7, r1
 800b27a:	e7da      	b.n	800b232 <rshift+0x4c>
 800b27c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b280:	f847 cf04 	str.w	ip, [r7, #4]!
 800b284:	e7c3      	b.n	800b20e <rshift+0x28>
 800b286:	4623      	mov	r3, r4
 800b288:	e7e1      	b.n	800b24e <rshift+0x68>

0800b28a <__hexdig_fun>:
 800b28a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b28e:	2b09      	cmp	r3, #9
 800b290:	d802      	bhi.n	800b298 <__hexdig_fun+0xe>
 800b292:	3820      	subs	r0, #32
 800b294:	b2c0      	uxtb	r0, r0
 800b296:	4770      	bx	lr
 800b298:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b29c:	2b05      	cmp	r3, #5
 800b29e:	d801      	bhi.n	800b2a4 <__hexdig_fun+0x1a>
 800b2a0:	3847      	subs	r0, #71	; 0x47
 800b2a2:	e7f7      	b.n	800b294 <__hexdig_fun+0xa>
 800b2a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2a8:	2b05      	cmp	r3, #5
 800b2aa:	d801      	bhi.n	800b2b0 <__hexdig_fun+0x26>
 800b2ac:	3827      	subs	r0, #39	; 0x27
 800b2ae:	e7f1      	b.n	800b294 <__hexdig_fun+0xa>
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	4770      	bx	lr

0800b2b4 <__gethex>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	ed2d 8b02 	vpush	{d8}
 800b2bc:	b089      	sub	sp, #36	; 0x24
 800b2be:	ee08 0a10 	vmov	s16, r0
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	4bbc      	ldr	r3, [pc, #752]	; (800b5b8 <__gethex+0x304>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	f7f4 ff7e 	bl	80001d0 <strlen>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	f8db 2000 	ldr.w	r2, [fp]
 800b2da:	4403      	add	r3, r0
 800b2dc:	4682      	mov	sl, r0
 800b2de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	1c93      	adds	r3, r2, #2
 800b2e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2ee:	32fe      	adds	r2, #254	; 0xfe
 800b2f0:	18d1      	adds	r1, r2, r3
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2f8:	9100      	str	r1, [sp, #0]
 800b2fa:	2830      	cmp	r0, #48	; 0x30
 800b2fc:	d0f8      	beq.n	800b2f0 <__gethex+0x3c>
 800b2fe:	f7ff ffc4 	bl	800b28a <__hexdig_fun>
 800b302:	4604      	mov	r4, r0
 800b304:	2800      	cmp	r0, #0
 800b306:	d13a      	bne.n	800b37e <__gethex+0xca>
 800b308:	9901      	ldr	r1, [sp, #4]
 800b30a:	4652      	mov	r2, sl
 800b30c:	4638      	mov	r0, r7
 800b30e:	f001 fbe6 	bl	800cade <strncmp>
 800b312:	4605      	mov	r5, r0
 800b314:	2800      	cmp	r0, #0
 800b316:	d168      	bne.n	800b3ea <__gethex+0x136>
 800b318:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b31c:	eb07 060a 	add.w	r6, r7, sl
 800b320:	f7ff ffb3 	bl	800b28a <__hexdig_fun>
 800b324:	2800      	cmp	r0, #0
 800b326:	d062      	beq.n	800b3ee <__gethex+0x13a>
 800b328:	4633      	mov	r3, r6
 800b32a:	7818      	ldrb	r0, [r3, #0]
 800b32c:	2830      	cmp	r0, #48	; 0x30
 800b32e:	461f      	mov	r7, r3
 800b330:	f103 0301 	add.w	r3, r3, #1
 800b334:	d0f9      	beq.n	800b32a <__gethex+0x76>
 800b336:	f7ff ffa8 	bl	800b28a <__hexdig_fun>
 800b33a:	2301      	movs	r3, #1
 800b33c:	fab0 f480 	clz	r4, r0
 800b340:	0964      	lsrs	r4, r4, #5
 800b342:	4635      	mov	r5, r6
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	463a      	mov	r2, r7
 800b348:	4616      	mov	r6, r2
 800b34a:	3201      	adds	r2, #1
 800b34c:	7830      	ldrb	r0, [r6, #0]
 800b34e:	f7ff ff9c 	bl	800b28a <__hexdig_fun>
 800b352:	2800      	cmp	r0, #0
 800b354:	d1f8      	bne.n	800b348 <__gethex+0x94>
 800b356:	9901      	ldr	r1, [sp, #4]
 800b358:	4652      	mov	r2, sl
 800b35a:	4630      	mov	r0, r6
 800b35c:	f001 fbbf 	bl	800cade <strncmp>
 800b360:	b980      	cbnz	r0, 800b384 <__gethex+0xd0>
 800b362:	b94d      	cbnz	r5, 800b378 <__gethex+0xc4>
 800b364:	eb06 050a 	add.w	r5, r6, sl
 800b368:	462a      	mov	r2, r5
 800b36a:	4616      	mov	r6, r2
 800b36c:	3201      	adds	r2, #1
 800b36e:	7830      	ldrb	r0, [r6, #0]
 800b370:	f7ff ff8b 	bl	800b28a <__hexdig_fun>
 800b374:	2800      	cmp	r0, #0
 800b376:	d1f8      	bne.n	800b36a <__gethex+0xb6>
 800b378:	1bad      	subs	r5, r5, r6
 800b37a:	00ad      	lsls	r5, r5, #2
 800b37c:	e004      	b.n	800b388 <__gethex+0xd4>
 800b37e:	2400      	movs	r4, #0
 800b380:	4625      	mov	r5, r4
 800b382:	e7e0      	b.n	800b346 <__gethex+0x92>
 800b384:	2d00      	cmp	r5, #0
 800b386:	d1f7      	bne.n	800b378 <__gethex+0xc4>
 800b388:	7833      	ldrb	r3, [r6, #0]
 800b38a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b38e:	2b50      	cmp	r3, #80	; 0x50
 800b390:	d13b      	bne.n	800b40a <__gethex+0x156>
 800b392:	7873      	ldrb	r3, [r6, #1]
 800b394:	2b2b      	cmp	r3, #43	; 0x2b
 800b396:	d02c      	beq.n	800b3f2 <__gethex+0x13e>
 800b398:	2b2d      	cmp	r3, #45	; 0x2d
 800b39a:	d02e      	beq.n	800b3fa <__gethex+0x146>
 800b39c:	1c71      	adds	r1, r6, #1
 800b39e:	f04f 0900 	mov.w	r9, #0
 800b3a2:	7808      	ldrb	r0, [r1, #0]
 800b3a4:	f7ff ff71 	bl	800b28a <__hexdig_fun>
 800b3a8:	1e43      	subs	r3, r0, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b18      	cmp	r3, #24
 800b3ae:	d82c      	bhi.n	800b40a <__gethex+0x156>
 800b3b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3b8:	f7ff ff67 	bl	800b28a <__hexdig_fun>
 800b3bc:	1e43      	subs	r3, r0, #1
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b18      	cmp	r3, #24
 800b3c2:	d91d      	bls.n	800b400 <__gethex+0x14c>
 800b3c4:	f1b9 0f00 	cmp.w	r9, #0
 800b3c8:	d000      	beq.n	800b3cc <__gethex+0x118>
 800b3ca:	4252      	negs	r2, r2
 800b3cc:	4415      	add	r5, r2
 800b3ce:	f8cb 1000 	str.w	r1, [fp]
 800b3d2:	b1e4      	cbz	r4, 800b40e <__gethex+0x15a>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bf14      	ite	ne
 800b3da:	2700      	movne	r7, #0
 800b3dc:	2706      	moveq	r7, #6
 800b3de:	4638      	mov	r0, r7
 800b3e0:	b009      	add	sp, #36	; 0x24
 800b3e2:	ecbd 8b02 	vpop	{d8}
 800b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ea:	463e      	mov	r6, r7
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	2401      	movs	r4, #1
 800b3f0:	e7ca      	b.n	800b388 <__gethex+0xd4>
 800b3f2:	f04f 0900 	mov.w	r9, #0
 800b3f6:	1cb1      	adds	r1, r6, #2
 800b3f8:	e7d3      	b.n	800b3a2 <__gethex+0xee>
 800b3fa:	f04f 0901 	mov.w	r9, #1
 800b3fe:	e7fa      	b.n	800b3f6 <__gethex+0x142>
 800b400:	230a      	movs	r3, #10
 800b402:	fb03 0202 	mla	r2, r3, r2, r0
 800b406:	3a10      	subs	r2, #16
 800b408:	e7d4      	b.n	800b3b4 <__gethex+0x100>
 800b40a:	4631      	mov	r1, r6
 800b40c:	e7df      	b.n	800b3ce <__gethex+0x11a>
 800b40e:	1bf3      	subs	r3, r6, r7
 800b410:	3b01      	subs	r3, #1
 800b412:	4621      	mov	r1, r4
 800b414:	2b07      	cmp	r3, #7
 800b416:	dc0b      	bgt.n	800b430 <__gethex+0x17c>
 800b418:	ee18 0a10 	vmov	r0, s16
 800b41c:	f000 fad8 	bl	800b9d0 <_Balloc>
 800b420:	4604      	mov	r4, r0
 800b422:	b940      	cbnz	r0, 800b436 <__gethex+0x182>
 800b424:	4b65      	ldr	r3, [pc, #404]	; (800b5bc <__gethex+0x308>)
 800b426:	4602      	mov	r2, r0
 800b428:	21de      	movs	r1, #222	; 0xde
 800b42a:	4865      	ldr	r0, [pc, #404]	; (800b5c0 <__gethex+0x30c>)
 800b42c:	f001 fb88 	bl	800cb40 <__assert_func>
 800b430:	3101      	adds	r1, #1
 800b432:	105b      	asrs	r3, r3, #1
 800b434:	e7ee      	b.n	800b414 <__gethex+0x160>
 800b436:	f100 0914 	add.w	r9, r0, #20
 800b43a:	f04f 0b00 	mov.w	fp, #0
 800b43e:	f1ca 0301 	rsb	r3, sl, #1
 800b442:	f8cd 9008 	str.w	r9, [sp, #8]
 800b446:	f8cd b000 	str.w	fp, [sp]
 800b44a:	9306      	str	r3, [sp, #24]
 800b44c:	42b7      	cmp	r7, r6
 800b44e:	d340      	bcc.n	800b4d2 <__gethex+0x21e>
 800b450:	9802      	ldr	r0, [sp, #8]
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	f840 3b04 	str.w	r3, [r0], #4
 800b458:	eba0 0009 	sub.w	r0, r0, r9
 800b45c:	1080      	asrs	r0, r0, #2
 800b45e:	0146      	lsls	r6, r0, #5
 800b460:	6120      	str	r0, [r4, #16]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fbaa 	bl	800bbbc <__hi0bits>
 800b468:	1a30      	subs	r0, r6, r0
 800b46a:	f8d8 6000 	ldr.w	r6, [r8]
 800b46e:	42b0      	cmp	r0, r6
 800b470:	dd63      	ble.n	800b53a <__gethex+0x286>
 800b472:	1b87      	subs	r7, r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	4620      	mov	r0, r4
 800b478:	f000 ff44 	bl	800c304 <__any_on>
 800b47c:	4682      	mov	sl, r0
 800b47e:	b1a8      	cbz	r0, 800b4ac <__gethex+0x1f8>
 800b480:	1e7b      	subs	r3, r7, #1
 800b482:	1159      	asrs	r1, r3, #5
 800b484:	f003 021f 	and.w	r2, r3, #31
 800b488:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b48c:	f04f 0a01 	mov.w	sl, #1
 800b490:	fa0a f202 	lsl.w	r2, sl, r2
 800b494:	420a      	tst	r2, r1
 800b496:	d009      	beq.n	800b4ac <__gethex+0x1f8>
 800b498:	4553      	cmp	r3, sl
 800b49a:	dd05      	ble.n	800b4a8 <__gethex+0x1f4>
 800b49c:	1eb9      	subs	r1, r7, #2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 ff30 	bl	800c304 <__any_on>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d145      	bne.n	800b534 <__gethex+0x280>
 800b4a8:	f04f 0a02 	mov.w	sl, #2
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff fe99 	bl	800b1e6 <rshift>
 800b4b4:	443d      	add	r5, r7
 800b4b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4ba:	42ab      	cmp	r3, r5
 800b4bc:	da4c      	bge.n	800b558 <__gethex+0x2a4>
 800b4be:	ee18 0a10 	vmov	r0, s16
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	f000 fac4 	bl	800ba50 <_Bfree>
 800b4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	27a3      	movs	r7, #163	; 0xa3
 800b4d0:	e785      	b.n	800b3de <__gethex+0x12a>
 800b4d2:	1e73      	subs	r3, r6, #1
 800b4d4:	9a05      	ldr	r2, [sp, #20]
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d019      	beq.n	800b514 <__gethex+0x260>
 800b4e0:	f1bb 0f20 	cmp.w	fp, #32
 800b4e4:	d107      	bne.n	800b4f6 <__gethex+0x242>
 800b4e6:	9b02      	ldr	r3, [sp, #8]
 800b4e8:	9a00      	ldr	r2, [sp, #0]
 800b4ea:	f843 2b04 	str.w	r2, [r3], #4
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	469b      	mov	fp, r3
 800b4f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4fa:	f7ff fec6 	bl	800b28a <__hexdig_fun>
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	f000 000f 	and.w	r0, r0, #15
 800b504:	fa00 f00b 	lsl.w	r0, r0, fp
 800b508:	4303      	orrs	r3, r0
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	f10b 0b04 	add.w	fp, fp, #4
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	e00d      	b.n	800b530 <__gethex+0x27c>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	9a06      	ldr	r2, [sp, #24]
 800b518:	4413      	add	r3, r2
 800b51a:	42bb      	cmp	r3, r7
 800b51c:	d3e0      	bcc.n	800b4e0 <__gethex+0x22c>
 800b51e:	4618      	mov	r0, r3
 800b520:	9901      	ldr	r1, [sp, #4]
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	4652      	mov	r2, sl
 800b526:	f001 fada 	bl	800cade <strncmp>
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d1d7      	bne.n	800b4e0 <__gethex+0x22c>
 800b530:	461e      	mov	r6, r3
 800b532:	e78b      	b.n	800b44c <__gethex+0x198>
 800b534:	f04f 0a03 	mov.w	sl, #3
 800b538:	e7b8      	b.n	800b4ac <__gethex+0x1f8>
 800b53a:	da0a      	bge.n	800b552 <__gethex+0x29e>
 800b53c:	1a37      	subs	r7, r6, r0
 800b53e:	4621      	mov	r1, r4
 800b540:	ee18 0a10 	vmov	r0, s16
 800b544:	463a      	mov	r2, r7
 800b546:	f000 fc9f 	bl	800be88 <__lshift>
 800b54a:	1bed      	subs	r5, r5, r7
 800b54c:	4604      	mov	r4, r0
 800b54e:	f100 0914 	add.w	r9, r0, #20
 800b552:	f04f 0a00 	mov.w	sl, #0
 800b556:	e7ae      	b.n	800b4b6 <__gethex+0x202>
 800b558:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b55c:	42a8      	cmp	r0, r5
 800b55e:	dd72      	ble.n	800b646 <__gethex+0x392>
 800b560:	1b45      	subs	r5, r0, r5
 800b562:	42ae      	cmp	r6, r5
 800b564:	dc36      	bgt.n	800b5d4 <__gethex+0x320>
 800b566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d02a      	beq.n	800b5c4 <__gethex+0x310>
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d02c      	beq.n	800b5cc <__gethex+0x318>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d115      	bne.n	800b5a2 <__gethex+0x2ee>
 800b576:	42ae      	cmp	r6, r5
 800b578:	d113      	bne.n	800b5a2 <__gethex+0x2ee>
 800b57a:	2e01      	cmp	r6, #1
 800b57c:	d10b      	bne.n	800b596 <__gethex+0x2e2>
 800b57e:	9a04      	ldr	r2, [sp, #16]
 800b580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	2301      	movs	r3, #1
 800b588:	6123      	str	r3, [r4, #16]
 800b58a:	f8c9 3000 	str.w	r3, [r9]
 800b58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b590:	2762      	movs	r7, #98	; 0x62
 800b592:	601c      	str	r4, [r3, #0]
 800b594:	e723      	b.n	800b3de <__gethex+0x12a>
 800b596:	1e71      	subs	r1, r6, #1
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 feb3 	bl	800c304 <__any_on>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d1ed      	bne.n	800b57e <__gethex+0x2ca>
 800b5a2:	ee18 0a10 	vmov	r0, s16
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	f000 fa52 	bl	800ba50 <_Bfree>
 800b5ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	2750      	movs	r7, #80	; 0x50
 800b5b4:	e713      	b.n	800b3de <__gethex+0x12a>
 800b5b6:	bf00      	nop
 800b5b8:	0800d23c 	.word	0x0800d23c
 800b5bc:	0800d15c 	.word	0x0800d15c
 800b5c0:	0800d1d0 	.word	0x0800d1d0
 800b5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1eb      	bne.n	800b5a2 <__gethex+0x2ee>
 800b5ca:	e7d8      	b.n	800b57e <__gethex+0x2ca>
 800b5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1d5      	bne.n	800b57e <__gethex+0x2ca>
 800b5d2:	e7e6      	b.n	800b5a2 <__gethex+0x2ee>
 800b5d4:	1e6f      	subs	r7, r5, #1
 800b5d6:	f1ba 0f00 	cmp.w	sl, #0
 800b5da:	d131      	bne.n	800b640 <__gethex+0x38c>
 800b5dc:	b127      	cbz	r7, 800b5e8 <__gethex+0x334>
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fe8f 	bl	800c304 <__any_on>
 800b5e6:	4682      	mov	sl, r0
 800b5e8:	117b      	asrs	r3, r7, #5
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5f0:	f007 071f 	and.w	r7, r7, #31
 800b5f4:	fa01 f707 	lsl.w	r7, r1, r7
 800b5f8:	421f      	tst	r7, r3
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bf18      	it	ne
 800b600:	f04a 0a02 	orrne.w	sl, sl, #2
 800b604:	1b76      	subs	r6, r6, r5
 800b606:	f7ff fdee 	bl	800b1e6 <rshift>
 800b60a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b60e:	2702      	movs	r7, #2
 800b610:	f1ba 0f00 	cmp.w	sl, #0
 800b614:	d048      	beq.n	800b6a8 <__gethex+0x3f4>
 800b616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d015      	beq.n	800b64a <__gethex+0x396>
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d017      	beq.n	800b652 <__gethex+0x39e>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d109      	bne.n	800b63a <__gethex+0x386>
 800b626:	f01a 0f02 	tst.w	sl, #2
 800b62a:	d006      	beq.n	800b63a <__gethex+0x386>
 800b62c:	f8d9 0000 	ldr.w	r0, [r9]
 800b630:	ea4a 0a00 	orr.w	sl, sl, r0
 800b634:	f01a 0f01 	tst.w	sl, #1
 800b638:	d10e      	bne.n	800b658 <__gethex+0x3a4>
 800b63a:	f047 0710 	orr.w	r7, r7, #16
 800b63e:	e033      	b.n	800b6a8 <__gethex+0x3f4>
 800b640:	f04f 0a01 	mov.w	sl, #1
 800b644:	e7d0      	b.n	800b5e8 <__gethex+0x334>
 800b646:	2701      	movs	r7, #1
 800b648:	e7e2      	b.n	800b610 <__gethex+0x35c>
 800b64a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b64c:	f1c3 0301 	rsb	r3, r3, #1
 800b650:	9315      	str	r3, [sp, #84]	; 0x54
 800b652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <__gethex+0x386>
 800b658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b65c:	f104 0314 	add.w	r3, r4, #20
 800b660:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b664:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b668:	f04f 0c00 	mov.w	ip, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b672:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b676:	d01c      	beq.n	800b6b2 <__gethex+0x3fe>
 800b678:	3201      	adds	r2, #1
 800b67a:	6002      	str	r2, [r0, #0]
 800b67c:	2f02      	cmp	r7, #2
 800b67e:	f104 0314 	add.w	r3, r4, #20
 800b682:	d13f      	bne.n	800b704 <__gethex+0x450>
 800b684:	f8d8 2000 	ldr.w	r2, [r8]
 800b688:	3a01      	subs	r2, #1
 800b68a:	42b2      	cmp	r2, r6
 800b68c:	d10a      	bne.n	800b6a4 <__gethex+0x3f0>
 800b68e:	1171      	asrs	r1, r6, #5
 800b690:	2201      	movs	r2, #1
 800b692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b696:	f006 061f 	and.w	r6, r6, #31
 800b69a:	fa02 f606 	lsl.w	r6, r2, r6
 800b69e:	421e      	tst	r6, r3
 800b6a0:	bf18      	it	ne
 800b6a2:	4617      	movne	r7, r2
 800b6a4:	f047 0720 	orr.w	r7, r7, #32
 800b6a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6aa:	601c      	str	r4, [r3, #0]
 800b6ac:	9b04      	ldr	r3, [sp, #16]
 800b6ae:	601d      	str	r5, [r3, #0]
 800b6b0:	e695      	b.n	800b3de <__gethex+0x12a>
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6b8:	d8d8      	bhi.n	800b66c <__gethex+0x3b8>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	459b      	cmp	fp, r3
 800b6be:	db19      	blt.n	800b6f4 <__gethex+0x440>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	ee18 0a10 	vmov	r0, s16
 800b6c6:	3101      	adds	r1, #1
 800b6c8:	f000 f982 	bl	800b9d0 <_Balloc>
 800b6cc:	4681      	mov	r9, r0
 800b6ce:	b918      	cbnz	r0, 800b6d8 <__gethex+0x424>
 800b6d0:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <__gethex+0x488>)
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	2184      	movs	r1, #132	; 0x84
 800b6d6:	e6a8      	b.n	800b42a <__gethex+0x176>
 800b6d8:	6922      	ldr	r2, [r4, #16]
 800b6da:	3202      	adds	r2, #2
 800b6dc:	f104 010c 	add.w	r1, r4, #12
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	300c      	adds	r0, #12
 800b6e4:	f7fc fe98 	bl	8008418 <memcpy>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	ee18 0a10 	vmov	r0, s16
 800b6ee:	f000 f9af 	bl	800ba50 <_Bfree>
 800b6f2:	464c      	mov	r4, r9
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6fc:	6122      	str	r2, [r4, #16]
 800b6fe:	2201      	movs	r2, #1
 800b700:	615a      	str	r2, [r3, #20]
 800b702:	e7bb      	b.n	800b67c <__gethex+0x3c8>
 800b704:	6922      	ldr	r2, [r4, #16]
 800b706:	455a      	cmp	r2, fp
 800b708:	dd0b      	ble.n	800b722 <__gethex+0x46e>
 800b70a:	2101      	movs	r1, #1
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff fd6a 	bl	800b1e6 <rshift>
 800b712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b716:	3501      	adds	r5, #1
 800b718:	42ab      	cmp	r3, r5
 800b71a:	f6ff aed0 	blt.w	800b4be <__gethex+0x20a>
 800b71e:	2701      	movs	r7, #1
 800b720:	e7c0      	b.n	800b6a4 <__gethex+0x3f0>
 800b722:	f016 061f 	ands.w	r6, r6, #31
 800b726:	d0fa      	beq.n	800b71e <__gethex+0x46a>
 800b728:	449a      	add	sl, r3
 800b72a:	f1c6 0620 	rsb	r6, r6, #32
 800b72e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b732:	f000 fa43 	bl	800bbbc <__hi0bits>
 800b736:	42b0      	cmp	r0, r6
 800b738:	dbe7      	blt.n	800b70a <__gethex+0x456>
 800b73a:	e7f0      	b.n	800b71e <__gethex+0x46a>
 800b73c:	0800d15c 	.word	0x0800d15c

0800b740 <L_shift>:
 800b740:	f1c2 0208 	rsb	r2, r2, #8
 800b744:	0092      	lsls	r2, r2, #2
 800b746:	b570      	push	{r4, r5, r6, lr}
 800b748:	f1c2 0620 	rsb	r6, r2, #32
 800b74c:	6843      	ldr	r3, [r0, #4]
 800b74e:	6804      	ldr	r4, [r0, #0]
 800b750:	fa03 f506 	lsl.w	r5, r3, r6
 800b754:	432c      	orrs	r4, r5
 800b756:	40d3      	lsrs	r3, r2
 800b758:	6004      	str	r4, [r0, #0]
 800b75a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b75e:	4288      	cmp	r0, r1
 800b760:	d3f4      	bcc.n	800b74c <L_shift+0xc>
 800b762:	bd70      	pop	{r4, r5, r6, pc}

0800b764 <__match>:
 800b764:	b530      	push	{r4, r5, lr}
 800b766:	6803      	ldr	r3, [r0, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76e:	b914      	cbnz	r4, 800b776 <__match+0x12>
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	2001      	movs	r0, #1
 800b774:	bd30      	pop	{r4, r5, pc}
 800b776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b77e:	2d19      	cmp	r5, #25
 800b780:	bf98      	it	ls
 800b782:	3220      	addls	r2, #32
 800b784:	42a2      	cmp	r2, r4
 800b786:	d0f0      	beq.n	800b76a <__match+0x6>
 800b788:	2000      	movs	r0, #0
 800b78a:	e7f3      	b.n	800b774 <__match+0x10>

0800b78c <__hexnan>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	680b      	ldr	r3, [r1, #0]
 800b792:	6801      	ldr	r1, [r0, #0]
 800b794:	115e      	asrs	r6, r3, #5
 800b796:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b79a:	f013 031f 	ands.w	r3, r3, #31
 800b79e:	b087      	sub	sp, #28
 800b7a0:	bf18      	it	ne
 800b7a2:	3604      	addne	r6, #4
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	1f37      	subs	r7, r6, #4
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	4690      	mov	r8, r2
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7b2:	46b9      	mov	r9, r7
 800b7b4:	463c      	mov	r4, r7
 800b7b6:	9502      	str	r5, [sp, #8]
 800b7b8:	46ab      	mov	fp, r5
 800b7ba:	784a      	ldrb	r2, [r1, #1]
 800b7bc:	1c4b      	adds	r3, r1, #1
 800b7be:	9303      	str	r3, [sp, #12]
 800b7c0:	b342      	cbz	r2, 800b814 <__hexnan+0x88>
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	9105      	str	r1, [sp, #20]
 800b7c6:	9204      	str	r2, [sp, #16]
 800b7c8:	f7ff fd5f 	bl	800b28a <__hexdig_fun>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d14f      	bne.n	800b870 <__hexnan+0xe4>
 800b7d0:	9a04      	ldr	r2, [sp, #16]
 800b7d2:	9905      	ldr	r1, [sp, #20]
 800b7d4:	2a20      	cmp	r2, #32
 800b7d6:	d818      	bhi.n	800b80a <__hexnan+0x7e>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	459b      	cmp	fp, r3
 800b7dc:	dd13      	ble.n	800b806 <__hexnan+0x7a>
 800b7de:	454c      	cmp	r4, r9
 800b7e0:	d206      	bcs.n	800b7f0 <__hexnan+0x64>
 800b7e2:	2d07      	cmp	r5, #7
 800b7e4:	dc04      	bgt.n	800b7f0 <__hexnan+0x64>
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7ff ffa8 	bl	800b740 <L_shift>
 800b7f0:	4544      	cmp	r4, r8
 800b7f2:	d950      	bls.n	800b896 <__hexnan+0x10a>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b7fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b802:	464c      	mov	r4, r9
 800b804:	461d      	mov	r5, r3
 800b806:	9903      	ldr	r1, [sp, #12]
 800b808:	e7d7      	b.n	800b7ba <__hexnan+0x2e>
 800b80a:	2a29      	cmp	r2, #41	; 0x29
 800b80c:	d156      	bne.n	800b8bc <__hexnan+0x130>
 800b80e:	3102      	adds	r1, #2
 800b810:	f8ca 1000 	str.w	r1, [sl]
 800b814:	f1bb 0f00 	cmp.w	fp, #0
 800b818:	d050      	beq.n	800b8bc <__hexnan+0x130>
 800b81a:	454c      	cmp	r4, r9
 800b81c:	d206      	bcs.n	800b82c <__hexnan+0xa0>
 800b81e:	2d07      	cmp	r5, #7
 800b820:	dc04      	bgt.n	800b82c <__hexnan+0xa0>
 800b822:	462a      	mov	r2, r5
 800b824:	4649      	mov	r1, r9
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ff8a 	bl	800b740 <L_shift>
 800b82c:	4544      	cmp	r4, r8
 800b82e:	d934      	bls.n	800b89a <__hexnan+0x10e>
 800b830:	f1a8 0204 	sub.w	r2, r8, #4
 800b834:	4623      	mov	r3, r4
 800b836:	f853 1b04 	ldr.w	r1, [r3], #4
 800b83a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b83e:	429f      	cmp	r7, r3
 800b840:	d2f9      	bcs.n	800b836 <__hexnan+0xaa>
 800b842:	1b3b      	subs	r3, r7, r4
 800b844:	f023 0303 	bic.w	r3, r3, #3
 800b848:	3304      	adds	r3, #4
 800b84a:	3401      	adds	r4, #1
 800b84c:	3e03      	subs	r6, #3
 800b84e:	42b4      	cmp	r4, r6
 800b850:	bf88      	it	hi
 800b852:	2304      	movhi	r3, #4
 800b854:	4443      	add	r3, r8
 800b856:	2200      	movs	r2, #0
 800b858:	f843 2b04 	str.w	r2, [r3], #4
 800b85c:	429f      	cmp	r7, r3
 800b85e:	d2fb      	bcs.n	800b858 <__hexnan+0xcc>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	b91b      	cbnz	r3, 800b86c <__hexnan+0xe0>
 800b864:	4547      	cmp	r7, r8
 800b866:	d127      	bne.n	800b8b8 <__hexnan+0x12c>
 800b868:	2301      	movs	r3, #1
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	2005      	movs	r0, #5
 800b86e:	e026      	b.n	800b8be <__hexnan+0x132>
 800b870:	3501      	adds	r5, #1
 800b872:	2d08      	cmp	r5, #8
 800b874:	f10b 0b01 	add.w	fp, fp, #1
 800b878:	dd06      	ble.n	800b888 <__hexnan+0xfc>
 800b87a:	4544      	cmp	r4, r8
 800b87c:	d9c3      	bls.n	800b806 <__hexnan+0x7a>
 800b87e:	2300      	movs	r3, #0
 800b880:	f844 3c04 	str.w	r3, [r4, #-4]
 800b884:	2501      	movs	r5, #1
 800b886:	3c04      	subs	r4, #4
 800b888:	6822      	ldr	r2, [r4, #0]
 800b88a:	f000 000f 	and.w	r0, r0, #15
 800b88e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	e7b7      	b.n	800b806 <__hexnan+0x7a>
 800b896:	2508      	movs	r5, #8
 800b898:	e7b5      	b.n	800b806 <__hexnan+0x7a>
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0df      	beq.n	800b860 <__hexnan+0xd4>
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a4:	f1c3 0320 	rsb	r3, r3, #32
 800b8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8b0:	401a      	ands	r2, r3
 800b8b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8b6:	e7d3      	b.n	800b860 <__hexnan+0xd4>
 800b8b8:	3f04      	subs	r7, #4
 800b8ba:	e7d1      	b.n	800b860 <__hexnan+0xd4>
 800b8bc:	2004      	movs	r0, #4
 800b8be:	b007      	add	sp, #28
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8c4 <_localeconv_r>:
 800b8c4:	4800      	ldr	r0, [pc, #0]	; (800b8c8 <_localeconv_r+0x4>)
 800b8c6:	4770      	bx	lr
 800b8c8:	20000164 	.word	0x20000164

0800b8cc <__retarget_lock_init_recursive>:
 800b8cc:	4770      	bx	lr

0800b8ce <__retarget_lock_acquire_recursive>:
 800b8ce:	4770      	bx	lr

0800b8d0 <__retarget_lock_release_recursive>:
 800b8d0:	4770      	bx	lr

0800b8d2 <__swhatbuf_r>:
 800b8d2:	b570      	push	{r4, r5, r6, lr}
 800b8d4:	460e      	mov	r6, r1
 800b8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8da:	2900      	cmp	r1, #0
 800b8dc:	b096      	sub	sp, #88	; 0x58
 800b8de:	4614      	mov	r4, r2
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	da07      	bge.n	800b8f4 <__swhatbuf_r+0x22>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	89b3      	ldrh	r3, [r6, #12]
 800b8ea:	061a      	lsls	r2, r3, #24
 800b8ec:	d410      	bmi.n	800b910 <__swhatbuf_r+0x3e>
 800b8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f2:	e00e      	b.n	800b912 <__swhatbuf_r+0x40>
 800b8f4:	466a      	mov	r2, sp
 800b8f6:	f001 f963 	bl	800cbc0 <_fstat_r>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	dbf2      	blt.n	800b8e4 <__swhatbuf_r+0x12>
 800b8fe:	9a01      	ldr	r2, [sp, #4]
 800b900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b908:	425a      	negs	r2, r3
 800b90a:	415a      	adcs	r2, r3
 800b90c:	602a      	str	r2, [r5, #0]
 800b90e:	e7ee      	b.n	800b8ee <__swhatbuf_r+0x1c>
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	2000      	movs	r0, #0
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	b016      	add	sp, #88	; 0x58
 800b918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b91c <__smakebuf_r>:
 800b91c:	898b      	ldrh	r3, [r1, #12]
 800b91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b920:	079d      	lsls	r5, r3, #30
 800b922:	4606      	mov	r6, r0
 800b924:	460c      	mov	r4, r1
 800b926:	d507      	bpl.n	800b938 <__smakebuf_r+0x1c>
 800b928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	2301      	movs	r3, #1
 800b932:	6163      	str	r3, [r4, #20]
 800b934:	b002      	add	sp, #8
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	ab01      	add	r3, sp, #4
 800b93a:	466a      	mov	r2, sp
 800b93c:	f7ff ffc9 	bl	800b8d2 <__swhatbuf_r>
 800b940:	9900      	ldr	r1, [sp, #0]
 800b942:	4605      	mov	r5, r0
 800b944:	4630      	mov	r0, r6
 800b946:	f000 fd5d 	bl	800c404 <_malloc_r>
 800b94a:	b948      	cbnz	r0, 800b960 <__smakebuf_r+0x44>
 800b94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b950:	059a      	lsls	r2, r3, #22
 800b952:	d4ef      	bmi.n	800b934 <__smakebuf_r+0x18>
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	f043 0302 	orr.w	r3, r3, #2
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7e3      	b.n	800b928 <__smakebuf_r+0xc>
 800b960:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <__smakebuf_r+0x7c>)
 800b962:	62b3      	str	r3, [r6, #40]	; 0x28
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	6020      	str	r0, [r4, #0]
 800b968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96c:	81a3      	strh	r3, [r4, #12]
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	6163      	str	r3, [r4, #20]
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	6120      	str	r0, [r4, #16]
 800b976:	b15b      	cbz	r3, 800b990 <__smakebuf_r+0x74>
 800b978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b97c:	4630      	mov	r0, r6
 800b97e:	f001 f931 	bl	800cbe4 <_isatty_r>
 800b982:	b128      	cbz	r0, 800b990 <__smakebuf_r+0x74>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	f023 0303 	bic.w	r3, r3, #3
 800b98a:	f043 0301 	orr.w	r3, r3, #1
 800b98e:	81a3      	strh	r3, [r4, #12]
 800b990:	89a0      	ldrh	r0, [r4, #12]
 800b992:	4305      	orrs	r5, r0
 800b994:	81a5      	strh	r5, [r4, #12]
 800b996:	e7cd      	b.n	800b934 <__smakebuf_r+0x18>
 800b998:	0800b045 	.word	0x0800b045

0800b99c <malloc>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	; (800b9a8 <malloc+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f000 bd2f 	b.w	800c404 <_malloc_r>
 800b9a6:	bf00      	nop
 800b9a8:	2000000c 	.word	0x2000000c

0800b9ac <__ascii_mbtowc>:
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	b901      	cbnz	r1, 800b9b2 <__ascii_mbtowc+0x6>
 800b9b0:	a901      	add	r1, sp, #4
 800b9b2:	b142      	cbz	r2, 800b9c6 <__ascii_mbtowc+0x1a>
 800b9b4:	b14b      	cbz	r3, 800b9ca <__ascii_mbtowc+0x1e>
 800b9b6:	7813      	ldrb	r3, [r2, #0]
 800b9b8:	600b      	str	r3, [r1, #0]
 800b9ba:	7812      	ldrb	r2, [r2, #0]
 800b9bc:	1e10      	subs	r0, r2, #0
 800b9be:	bf18      	it	ne
 800b9c0:	2001      	movne	r0, #1
 800b9c2:	b002      	add	sp, #8
 800b9c4:	4770      	bx	lr
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	e7fb      	b.n	800b9c2 <__ascii_mbtowc+0x16>
 800b9ca:	f06f 0001 	mvn.w	r0, #1
 800b9ce:	e7f8      	b.n	800b9c2 <__ascii_mbtowc+0x16>

0800b9d0 <_Balloc>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	460d      	mov	r5, r1
 800b9d8:	b976      	cbnz	r6, 800b9f8 <_Balloc+0x28>
 800b9da:	2010      	movs	r0, #16
 800b9dc:	f7ff ffde 	bl	800b99c <malloc>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	6260      	str	r0, [r4, #36]	; 0x24
 800b9e4:	b920      	cbnz	r0, 800b9f0 <_Balloc+0x20>
 800b9e6:	4b18      	ldr	r3, [pc, #96]	; (800ba48 <_Balloc+0x78>)
 800b9e8:	4818      	ldr	r0, [pc, #96]	; (800ba4c <_Balloc+0x7c>)
 800b9ea:	2166      	movs	r1, #102	; 0x66
 800b9ec:	f001 f8a8 	bl	800cb40 <__assert_func>
 800b9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9f4:	6006      	str	r6, [r0, #0]
 800b9f6:	60c6      	str	r6, [r0, #12]
 800b9f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b9fa:	68f3      	ldr	r3, [r6, #12]
 800b9fc:	b183      	cbz	r3, 800ba20 <_Balloc+0x50>
 800b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba06:	b9b8      	cbnz	r0, 800ba38 <_Balloc+0x68>
 800ba08:	2101      	movs	r1, #1
 800ba0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba0e:	1d72      	adds	r2, r6, #5
 800ba10:	0092      	lsls	r2, r2, #2
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 fc97 	bl	800c346 <_calloc_r>
 800ba18:	b160      	cbz	r0, 800ba34 <_Balloc+0x64>
 800ba1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba1e:	e00e      	b.n	800ba3e <_Balloc+0x6e>
 800ba20:	2221      	movs	r2, #33	; 0x21
 800ba22:	2104      	movs	r1, #4
 800ba24:	4620      	mov	r0, r4
 800ba26:	f000 fc8e 	bl	800c346 <_calloc_r>
 800ba2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba2c:	60f0      	str	r0, [r6, #12]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e4      	bne.n	800b9fe <_Balloc+0x2e>
 800ba34:	2000      	movs	r0, #0
 800ba36:	bd70      	pop	{r4, r5, r6, pc}
 800ba38:	6802      	ldr	r2, [r0, #0]
 800ba3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba44:	e7f7      	b.n	800ba36 <_Balloc+0x66>
 800ba46:	bf00      	nop
 800ba48:	0800d0e6 	.word	0x0800d0e6
 800ba4c:	0800d250 	.word	0x0800d250

0800ba50 <_Bfree>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba54:	4605      	mov	r5, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	b976      	cbnz	r6, 800ba78 <_Bfree+0x28>
 800ba5a:	2010      	movs	r0, #16
 800ba5c:	f7ff ff9e 	bl	800b99c <malloc>
 800ba60:	4602      	mov	r2, r0
 800ba62:	6268      	str	r0, [r5, #36]	; 0x24
 800ba64:	b920      	cbnz	r0, 800ba70 <_Bfree+0x20>
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <_Bfree+0x3c>)
 800ba68:	4809      	ldr	r0, [pc, #36]	; (800ba90 <_Bfree+0x40>)
 800ba6a:	218a      	movs	r1, #138	; 0x8a
 800ba6c:	f001 f868 	bl	800cb40 <__assert_func>
 800ba70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba74:	6006      	str	r6, [r0, #0]
 800ba76:	60c6      	str	r6, [r0, #12]
 800ba78:	b13c      	cbz	r4, 800ba8a <_Bfree+0x3a>
 800ba7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba7c:	6862      	ldr	r2, [r4, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba84:	6021      	str	r1, [r4, #0]
 800ba86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	0800d0e6 	.word	0x0800d0e6
 800ba90:	0800d250 	.word	0x0800d250

0800ba94 <__multadd>:
 800ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	690e      	ldr	r6, [r1, #16]
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	4698      	mov	r8, r3
 800ba9e:	460c      	mov	r4, r1
 800baa0:	f101 0014 	add.w	r0, r1, #20
 800baa4:	2300      	movs	r3, #0
 800baa6:	6805      	ldr	r5, [r0, #0]
 800baa8:	b2a9      	uxth	r1, r5
 800baaa:	fb02 8101 	mla	r1, r2, r1, r8
 800baae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bab2:	0c2d      	lsrs	r5, r5, #16
 800bab4:	fb02 c505 	mla	r5, r2, r5, ip
 800bab8:	b289      	uxth	r1, r1
 800baba:	3301      	adds	r3, #1
 800babc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bac0:	429e      	cmp	r6, r3
 800bac2:	f840 1b04 	str.w	r1, [r0], #4
 800bac6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800baca:	dcec      	bgt.n	800baa6 <__multadd+0x12>
 800bacc:	f1b8 0f00 	cmp.w	r8, #0
 800bad0:	d022      	beq.n	800bb18 <__multadd+0x84>
 800bad2:	68a3      	ldr	r3, [r4, #8]
 800bad4:	42b3      	cmp	r3, r6
 800bad6:	dc19      	bgt.n	800bb0c <__multadd+0x78>
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	4638      	mov	r0, r7
 800badc:	3101      	adds	r1, #1
 800bade:	f7ff ff77 	bl	800b9d0 <_Balloc>
 800bae2:	4605      	mov	r5, r0
 800bae4:	b928      	cbnz	r0, 800baf2 <__multadd+0x5e>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <__multadd+0x8c>)
 800baea:	480e      	ldr	r0, [pc, #56]	; (800bb24 <__multadd+0x90>)
 800baec:	21b5      	movs	r1, #181	; 0xb5
 800baee:	f001 f827 	bl	800cb40 <__assert_func>
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	3202      	adds	r2, #2
 800baf6:	f104 010c 	add.w	r1, r4, #12
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	300c      	adds	r0, #12
 800bafe:	f7fc fc8b 	bl	8008418 <memcpy>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4638      	mov	r0, r7
 800bb06:	f7ff ffa3 	bl	800ba50 <_Bfree>
 800bb0a:	462c      	mov	r4, r5
 800bb0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb10:	3601      	adds	r6, #1
 800bb12:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb16:	6126      	str	r6, [r4, #16]
 800bb18:	4620      	mov	r0, r4
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	bf00      	nop
 800bb20:	0800d15c 	.word	0x0800d15c
 800bb24:	0800d250 	.word	0x0800d250

0800bb28 <__s2b>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	4615      	mov	r5, r2
 800bb30:	461f      	mov	r7, r3
 800bb32:	2209      	movs	r2, #9
 800bb34:	3308      	adds	r3, #8
 800bb36:	4606      	mov	r6, r0
 800bb38:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	2201      	movs	r2, #1
 800bb40:	429a      	cmp	r2, r3
 800bb42:	db09      	blt.n	800bb58 <__s2b+0x30>
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7ff ff43 	bl	800b9d0 <_Balloc>
 800bb4a:	b940      	cbnz	r0, 800bb5e <__s2b+0x36>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <__s2b+0x8c>)
 800bb50:	4819      	ldr	r0, [pc, #100]	; (800bbb8 <__s2b+0x90>)
 800bb52:	21ce      	movs	r1, #206	; 0xce
 800bb54:	f000 fff4 	bl	800cb40 <__assert_func>
 800bb58:	0052      	lsls	r2, r2, #1
 800bb5a:	3101      	adds	r1, #1
 800bb5c:	e7f0      	b.n	800bb40 <__s2b+0x18>
 800bb5e:	9b08      	ldr	r3, [sp, #32]
 800bb60:	6143      	str	r3, [r0, #20]
 800bb62:	2d09      	cmp	r5, #9
 800bb64:	f04f 0301 	mov.w	r3, #1
 800bb68:	6103      	str	r3, [r0, #16]
 800bb6a:	dd16      	ble.n	800bb9a <__s2b+0x72>
 800bb6c:	f104 0909 	add.w	r9, r4, #9
 800bb70:	46c8      	mov	r8, r9
 800bb72:	442c      	add	r4, r5
 800bb74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb78:	4601      	mov	r1, r0
 800bb7a:	3b30      	subs	r3, #48	; 0x30
 800bb7c:	220a      	movs	r2, #10
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ff88 	bl	800ba94 <__multadd>
 800bb84:	45a0      	cmp	r8, r4
 800bb86:	d1f5      	bne.n	800bb74 <__s2b+0x4c>
 800bb88:	f1a5 0408 	sub.w	r4, r5, #8
 800bb8c:	444c      	add	r4, r9
 800bb8e:	1b2d      	subs	r5, r5, r4
 800bb90:	1963      	adds	r3, r4, r5
 800bb92:	42bb      	cmp	r3, r7
 800bb94:	db04      	blt.n	800bba0 <__s2b+0x78>
 800bb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	340a      	adds	r4, #10
 800bb9c:	2509      	movs	r5, #9
 800bb9e:	e7f6      	b.n	800bb8e <__s2b+0x66>
 800bba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bba4:	4601      	mov	r1, r0
 800bba6:	3b30      	subs	r3, #48	; 0x30
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7ff ff72 	bl	800ba94 <__multadd>
 800bbb0:	e7ee      	b.n	800bb90 <__s2b+0x68>
 800bbb2:	bf00      	nop
 800bbb4:	0800d15c 	.word	0x0800d15c
 800bbb8:	0800d250 	.word	0x0800d250

0800bbbc <__hi0bits>:
 800bbbc:	0c03      	lsrs	r3, r0, #16
 800bbbe:	041b      	lsls	r3, r3, #16
 800bbc0:	b9d3      	cbnz	r3, 800bbf8 <__hi0bits+0x3c>
 800bbc2:	0400      	lsls	r0, r0, #16
 800bbc4:	2310      	movs	r3, #16
 800bbc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbca:	bf04      	itt	eq
 800bbcc:	0200      	lsleq	r0, r0, #8
 800bbce:	3308      	addeq	r3, #8
 800bbd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbd4:	bf04      	itt	eq
 800bbd6:	0100      	lsleq	r0, r0, #4
 800bbd8:	3304      	addeq	r3, #4
 800bbda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbde:	bf04      	itt	eq
 800bbe0:	0080      	lsleq	r0, r0, #2
 800bbe2:	3302      	addeq	r3, #2
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	db05      	blt.n	800bbf4 <__hi0bits+0x38>
 800bbe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbec:	f103 0301 	add.w	r3, r3, #1
 800bbf0:	bf08      	it	eq
 800bbf2:	2320      	moveq	r3, #32
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	4770      	bx	lr
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e7e4      	b.n	800bbc6 <__hi0bits+0xa>

0800bbfc <__lo0bits>:
 800bbfc:	6803      	ldr	r3, [r0, #0]
 800bbfe:	f013 0207 	ands.w	r2, r3, #7
 800bc02:	4601      	mov	r1, r0
 800bc04:	d00b      	beq.n	800bc1e <__lo0bits+0x22>
 800bc06:	07da      	lsls	r2, r3, #31
 800bc08:	d424      	bmi.n	800bc54 <__lo0bits+0x58>
 800bc0a:	0798      	lsls	r0, r3, #30
 800bc0c:	bf49      	itett	mi
 800bc0e:	085b      	lsrmi	r3, r3, #1
 800bc10:	089b      	lsrpl	r3, r3, #2
 800bc12:	2001      	movmi	r0, #1
 800bc14:	600b      	strmi	r3, [r1, #0]
 800bc16:	bf5c      	itt	pl
 800bc18:	600b      	strpl	r3, [r1, #0]
 800bc1a:	2002      	movpl	r0, #2
 800bc1c:	4770      	bx	lr
 800bc1e:	b298      	uxth	r0, r3
 800bc20:	b9b0      	cbnz	r0, 800bc50 <__lo0bits+0x54>
 800bc22:	0c1b      	lsrs	r3, r3, #16
 800bc24:	2010      	movs	r0, #16
 800bc26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc2a:	bf04      	itt	eq
 800bc2c:	0a1b      	lsreq	r3, r3, #8
 800bc2e:	3008      	addeq	r0, #8
 800bc30:	071a      	lsls	r2, r3, #28
 800bc32:	bf04      	itt	eq
 800bc34:	091b      	lsreq	r3, r3, #4
 800bc36:	3004      	addeq	r0, #4
 800bc38:	079a      	lsls	r2, r3, #30
 800bc3a:	bf04      	itt	eq
 800bc3c:	089b      	lsreq	r3, r3, #2
 800bc3e:	3002      	addeq	r0, #2
 800bc40:	07da      	lsls	r2, r3, #31
 800bc42:	d403      	bmi.n	800bc4c <__lo0bits+0x50>
 800bc44:	085b      	lsrs	r3, r3, #1
 800bc46:	f100 0001 	add.w	r0, r0, #1
 800bc4a:	d005      	beq.n	800bc58 <__lo0bits+0x5c>
 800bc4c:	600b      	str	r3, [r1, #0]
 800bc4e:	4770      	bx	lr
 800bc50:	4610      	mov	r0, r2
 800bc52:	e7e8      	b.n	800bc26 <__lo0bits+0x2a>
 800bc54:	2000      	movs	r0, #0
 800bc56:	4770      	bx	lr
 800bc58:	2020      	movs	r0, #32
 800bc5a:	4770      	bx	lr

0800bc5c <__i2b>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	460c      	mov	r4, r1
 800bc60:	2101      	movs	r1, #1
 800bc62:	f7ff feb5 	bl	800b9d0 <_Balloc>
 800bc66:	4602      	mov	r2, r0
 800bc68:	b928      	cbnz	r0, 800bc76 <__i2b+0x1a>
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <__i2b+0x24>)
 800bc6c:	4805      	ldr	r0, [pc, #20]	; (800bc84 <__i2b+0x28>)
 800bc6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc72:	f000 ff65 	bl	800cb40 <__assert_func>
 800bc76:	2301      	movs	r3, #1
 800bc78:	6144      	str	r4, [r0, #20]
 800bc7a:	6103      	str	r3, [r0, #16]
 800bc7c:	bd10      	pop	{r4, pc}
 800bc7e:	bf00      	nop
 800bc80:	0800d15c 	.word	0x0800d15c
 800bc84:	0800d250 	.word	0x0800d250

0800bc88 <__multiply>:
 800bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	4614      	mov	r4, r2
 800bc8e:	690a      	ldr	r2, [r1, #16]
 800bc90:	6923      	ldr	r3, [r4, #16]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	bfb8      	it	lt
 800bc96:	460b      	movlt	r3, r1
 800bc98:	460d      	mov	r5, r1
 800bc9a:	bfbc      	itt	lt
 800bc9c:	4625      	movlt	r5, r4
 800bc9e:	461c      	movlt	r4, r3
 800bca0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bca4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bca8:	68ab      	ldr	r3, [r5, #8]
 800bcaa:	6869      	ldr	r1, [r5, #4]
 800bcac:	eb0a 0709 	add.w	r7, sl, r9
 800bcb0:	42bb      	cmp	r3, r7
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	bfb8      	it	lt
 800bcb6:	3101      	addlt	r1, #1
 800bcb8:	f7ff fe8a 	bl	800b9d0 <_Balloc>
 800bcbc:	b930      	cbnz	r0, 800bccc <__multiply+0x44>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b42      	ldr	r3, [pc, #264]	; (800bdcc <__multiply+0x144>)
 800bcc2:	4843      	ldr	r0, [pc, #268]	; (800bdd0 <__multiply+0x148>)
 800bcc4:	f240 115d 	movw	r1, #349	; 0x15d
 800bcc8:	f000 ff3a 	bl	800cb40 <__assert_func>
 800bccc:	f100 0614 	add.w	r6, r0, #20
 800bcd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bcd4:	4633      	mov	r3, r6
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4543      	cmp	r3, r8
 800bcda:	d31e      	bcc.n	800bd1a <__multiply+0x92>
 800bcdc:	f105 0c14 	add.w	ip, r5, #20
 800bce0:	f104 0314 	add.w	r3, r4, #20
 800bce4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bce8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	ebac 0205 	sub.w	r2, ip, r5
 800bcf2:	3a15      	subs	r2, #21
 800bcf4:	f022 0203 	bic.w	r2, r2, #3
 800bcf8:	3204      	adds	r2, #4
 800bcfa:	f105 0115 	add.w	r1, r5, #21
 800bcfe:	458c      	cmp	ip, r1
 800bd00:	bf38      	it	cc
 800bd02:	2204      	movcc	r2, #4
 800bd04:	9201      	str	r2, [sp, #4]
 800bd06:	9a02      	ldr	r2, [sp, #8]
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d808      	bhi.n	800bd20 <__multiply+0x98>
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	dc55      	bgt.n	800bdbe <__multiply+0x136>
 800bd12:	6107      	str	r7, [r0, #16]
 800bd14:	b005      	add	sp, #20
 800bd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1a:	f843 2b04 	str.w	r2, [r3], #4
 800bd1e:	e7db      	b.n	800bcd8 <__multiply+0x50>
 800bd20:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd24:	f1ba 0f00 	cmp.w	sl, #0
 800bd28:	d020      	beq.n	800bd6c <__multiply+0xe4>
 800bd2a:	f105 0e14 	add.w	lr, r5, #20
 800bd2e:	46b1      	mov	r9, r6
 800bd30:	2200      	movs	r2, #0
 800bd32:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd36:	f8d9 b000 	ldr.w	fp, [r9]
 800bd3a:	b2a1      	uxth	r1, r4
 800bd3c:	fa1f fb8b 	uxth.w	fp, fp
 800bd40:	fb0a b101 	mla	r1, sl, r1, fp
 800bd44:	4411      	add	r1, r2
 800bd46:	f8d9 2000 	ldr.w	r2, [r9]
 800bd4a:	0c24      	lsrs	r4, r4, #16
 800bd4c:	0c12      	lsrs	r2, r2, #16
 800bd4e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd56:	b289      	uxth	r1, r1
 800bd58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd5c:	45f4      	cmp	ip, lr
 800bd5e:	f849 1b04 	str.w	r1, [r9], #4
 800bd62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd66:	d8e4      	bhi.n	800bd32 <__multiply+0xaa>
 800bd68:	9901      	ldr	r1, [sp, #4]
 800bd6a:	5072      	str	r2, [r6, r1]
 800bd6c:	9a03      	ldr	r2, [sp, #12]
 800bd6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd72:	3304      	adds	r3, #4
 800bd74:	f1b9 0f00 	cmp.w	r9, #0
 800bd78:	d01f      	beq.n	800bdba <__multiply+0x132>
 800bd7a:	6834      	ldr	r4, [r6, #0]
 800bd7c:	f105 0114 	add.w	r1, r5, #20
 800bd80:	46b6      	mov	lr, r6
 800bd82:	f04f 0a00 	mov.w	sl, #0
 800bd86:	880a      	ldrh	r2, [r1, #0]
 800bd88:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd8c:	fb09 b202 	mla	r2, r9, r2, fp
 800bd90:	4492      	add	sl, r2
 800bd92:	b2a4      	uxth	r4, r4
 800bd94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd98:	f84e 4b04 	str.w	r4, [lr], #4
 800bd9c:	f851 4b04 	ldr.w	r4, [r1], #4
 800bda0:	f8be 2000 	ldrh.w	r2, [lr]
 800bda4:	0c24      	lsrs	r4, r4, #16
 800bda6:	fb09 2404 	mla	r4, r9, r4, r2
 800bdaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bdae:	458c      	cmp	ip, r1
 800bdb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdb4:	d8e7      	bhi.n	800bd86 <__multiply+0xfe>
 800bdb6:	9a01      	ldr	r2, [sp, #4]
 800bdb8:	50b4      	str	r4, [r6, r2]
 800bdba:	3604      	adds	r6, #4
 800bdbc:	e7a3      	b.n	800bd06 <__multiply+0x7e>
 800bdbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1a5      	bne.n	800bd12 <__multiply+0x8a>
 800bdc6:	3f01      	subs	r7, #1
 800bdc8:	e7a1      	b.n	800bd0e <__multiply+0x86>
 800bdca:	bf00      	nop
 800bdcc:	0800d15c 	.word	0x0800d15c
 800bdd0:	0800d250 	.word	0x0800d250

0800bdd4 <__pow5mult>:
 800bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd8:	4615      	mov	r5, r2
 800bdda:	f012 0203 	ands.w	r2, r2, #3
 800bdde:	4606      	mov	r6, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	d007      	beq.n	800bdf4 <__pow5mult+0x20>
 800bde4:	4c25      	ldr	r4, [pc, #148]	; (800be7c <__pow5mult+0xa8>)
 800bde6:	3a01      	subs	r2, #1
 800bde8:	2300      	movs	r3, #0
 800bdea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdee:	f7ff fe51 	bl	800ba94 <__multadd>
 800bdf2:	4607      	mov	r7, r0
 800bdf4:	10ad      	asrs	r5, r5, #2
 800bdf6:	d03d      	beq.n	800be74 <__pow5mult+0xa0>
 800bdf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdfa:	b97c      	cbnz	r4, 800be1c <__pow5mult+0x48>
 800bdfc:	2010      	movs	r0, #16
 800bdfe:	f7ff fdcd 	bl	800b99c <malloc>
 800be02:	4602      	mov	r2, r0
 800be04:	6270      	str	r0, [r6, #36]	; 0x24
 800be06:	b928      	cbnz	r0, 800be14 <__pow5mult+0x40>
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <__pow5mult+0xac>)
 800be0a:	481e      	ldr	r0, [pc, #120]	; (800be84 <__pow5mult+0xb0>)
 800be0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be10:	f000 fe96 	bl	800cb40 <__assert_func>
 800be14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be18:	6004      	str	r4, [r0, #0]
 800be1a:	60c4      	str	r4, [r0, #12]
 800be1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be24:	b94c      	cbnz	r4, 800be3a <__pow5mult+0x66>
 800be26:	f240 2171 	movw	r1, #625	; 0x271
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ff16 	bl	800bc5c <__i2b>
 800be30:	2300      	movs	r3, #0
 800be32:	f8c8 0008 	str.w	r0, [r8, #8]
 800be36:	4604      	mov	r4, r0
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	f04f 0900 	mov.w	r9, #0
 800be3e:	07eb      	lsls	r3, r5, #31
 800be40:	d50a      	bpl.n	800be58 <__pow5mult+0x84>
 800be42:	4639      	mov	r1, r7
 800be44:	4622      	mov	r2, r4
 800be46:	4630      	mov	r0, r6
 800be48:	f7ff ff1e 	bl	800bc88 <__multiply>
 800be4c:	4639      	mov	r1, r7
 800be4e:	4680      	mov	r8, r0
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fdfd 	bl	800ba50 <_Bfree>
 800be56:	4647      	mov	r7, r8
 800be58:	106d      	asrs	r5, r5, #1
 800be5a:	d00b      	beq.n	800be74 <__pow5mult+0xa0>
 800be5c:	6820      	ldr	r0, [r4, #0]
 800be5e:	b938      	cbnz	r0, 800be70 <__pow5mult+0x9c>
 800be60:	4622      	mov	r2, r4
 800be62:	4621      	mov	r1, r4
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff ff0f 	bl	800bc88 <__multiply>
 800be6a:	6020      	str	r0, [r4, #0]
 800be6c:	f8c0 9000 	str.w	r9, [r0]
 800be70:	4604      	mov	r4, r0
 800be72:	e7e4      	b.n	800be3e <__pow5mult+0x6a>
 800be74:	4638      	mov	r0, r7
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	bf00      	nop
 800be7c:	0800d3a0 	.word	0x0800d3a0
 800be80:	0800d0e6 	.word	0x0800d0e6
 800be84:	0800d250 	.word	0x0800d250

0800be88 <__lshift>:
 800be88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be8c:	460c      	mov	r4, r1
 800be8e:	6849      	ldr	r1, [r1, #4]
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	4607      	mov	r7, r0
 800be9a:	4691      	mov	r9, r2
 800be9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bea0:	f108 0601 	add.w	r6, r8, #1
 800bea4:	42b3      	cmp	r3, r6
 800bea6:	db0b      	blt.n	800bec0 <__lshift+0x38>
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff fd91 	bl	800b9d0 <_Balloc>
 800beae:	4605      	mov	r5, r0
 800beb0:	b948      	cbnz	r0, 800bec6 <__lshift+0x3e>
 800beb2:	4602      	mov	r2, r0
 800beb4:	4b28      	ldr	r3, [pc, #160]	; (800bf58 <__lshift+0xd0>)
 800beb6:	4829      	ldr	r0, [pc, #164]	; (800bf5c <__lshift+0xd4>)
 800beb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bebc:	f000 fe40 	bl	800cb40 <__assert_func>
 800bec0:	3101      	adds	r1, #1
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	e7ee      	b.n	800bea4 <__lshift+0x1c>
 800bec6:	2300      	movs	r3, #0
 800bec8:	f100 0114 	add.w	r1, r0, #20
 800becc:	f100 0210 	add.w	r2, r0, #16
 800bed0:	4618      	mov	r0, r3
 800bed2:	4553      	cmp	r3, sl
 800bed4:	db33      	blt.n	800bf3e <__lshift+0xb6>
 800bed6:	6920      	ldr	r0, [r4, #16]
 800bed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bedc:	f104 0314 	add.w	r3, r4, #20
 800bee0:	f019 091f 	ands.w	r9, r9, #31
 800bee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bee8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800beec:	d02b      	beq.n	800bf46 <__lshift+0xbe>
 800beee:	f1c9 0e20 	rsb	lr, r9, #32
 800bef2:	468a      	mov	sl, r1
 800bef4:	2200      	movs	r2, #0
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	fa00 f009 	lsl.w	r0, r0, r9
 800befc:	4302      	orrs	r2, r0
 800befe:	f84a 2b04 	str.w	r2, [sl], #4
 800bf02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf06:	459c      	cmp	ip, r3
 800bf08:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf0c:	d8f3      	bhi.n	800bef6 <__lshift+0x6e>
 800bf0e:	ebac 0304 	sub.w	r3, ip, r4
 800bf12:	3b15      	subs	r3, #21
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	3304      	adds	r3, #4
 800bf1a:	f104 0015 	add.w	r0, r4, #21
 800bf1e:	4584      	cmp	ip, r0
 800bf20:	bf38      	it	cc
 800bf22:	2304      	movcc	r3, #4
 800bf24:	50ca      	str	r2, [r1, r3]
 800bf26:	b10a      	cbz	r2, 800bf2c <__lshift+0xa4>
 800bf28:	f108 0602 	add.w	r6, r8, #2
 800bf2c:	3e01      	subs	r6, #1
 800bf2e:	4638      	mov	r0, r7
 800bf30:	612e      	str	r6, [r5, #16]
 800bf32:	4621      	mov	r1, r4
 800bf34:	f7ff fd8c 	bl	800ba50 <_Bfree>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf42:	3301      	adds	r3, #1
 800bf44:	e7c5      	b.n	800bed2 <__lshift+0x4a>
 800bf46:	3904      	subs	r1, #4
 800bf48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf50:	459c      	cmp	ip, r3
 800bf52:	d8f9      	bhi.n	800bf48 <__lshift+0xc0>
 800bf54:	e7ea      	b.n	800bf2c <__lshift+0xa4>
 800bf56:	bf00      	nop
 800bf58:	0800d15c 	.word	0x0800d15c
 800bf5c:	0800d250 	.word	0x0800d250

0800bf60 <__mcmp>:
 800bf60:	b530      	push	{r4, r5, lr}
 800bf62:	6902      	ldr	r2, [r0, #16]
 800bf64:	690c      	ldr	r4, [r1, #16]
 800bf66:	1b12      	subs	r2, r2, r4
 800bf68:	d10e      	bne.n	800bf88 <__mcmp+0x28>
 800bf6a:	f100 0314 	add.w	r3, r0, #20
 800bf6e:	3114      	adds	r1, #20
 800bf70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf80:	42a5      	cmp	r5, r4
 800bf82:	d003      	beq.n	800bf8c <__mcmp+0x2c>
 800bf84:	d305      	bcc.n	800bf92 <__mcmp+0x32>
 800bf86:	2201      	movs	r2, #1
 800bf88:	4610      	mov	r0, r2
 800bf8a:	bd30      	pop	{r4, r5, pc}
 800bf8c:	4283      	cmp	r3, r0
 800bf8e:	d3f3      	bcc.n	800bf78 <__mcmp+0x18>
 800bf90:	e7fa      	b.n	800bf88 <__mcmp+0x28>
 800bf92:	f04f 32ff 	mov.w	r2, #4294967295
 800bf96:	e7f7      	b.n	800bf88 <__mcmp+0x28>

0800bf98 <__mdiff>:
 800bf98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4617      	mov	r7, r2
 800bfa6:	f7ff ffdb 	bl	800bf60 <__mcmp>
 800bfaa:	1e05      	subs	r5, r0, #0
 800bfac:	d110      	bne.n	800bfd0 <__mdiff+0x38>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7ff fd0d 	bl	800b9d0 <_Balloc>
 800bfb6:	b930      	cbnz	r0, 800bfc6 <__mdiff+0x2e>
 800bfb8:	4b39      	ldr	r3, [pc, #228]	; (800c0a0 <__mdiff+0x108>)
 800bfba:	4602      	mov	r2, r0
 800bfbc:	f240 2132 	movw	r1, #562	; 0x232
 800bfc0:	4838      	ldr	r0, [pc, #224]	; (800c0a4 <__mdiff+0x10c>)
 800bfc2:	f000 fdbd 	bl	800cb40 <__assert_func>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd0:	bfa4      	itt	ge
 800bfd2:	463b      	movge	r3, r7
 800bfd4:	4627      	movge	r7, r4
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	bfa6      	itte	ge
 800bfdc:	461c      	movge	r4, r3
 800bfde:	2500      	movge	r5, #0
 800bfe0:	2501      	movlt	r5, #1
 800bfe2:	f7ff fcf5 	bl	800b9d0 <_Balloc>
 800bfe6:	b920      	cbnz	r0, 800bff2 <__mdiff+0x5a>
 800bfe8:	4b2d      	ldr	r3, [pc, #180]	; (800c0a0 <__mdiff+0x108>)
 800bfea:	4602      	mov	r2, r0
 800bfec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bff0:	e7e6      	b.n	800bfc0 <__mdiff+0x28>
 800bff2:	693e      	ldr	r6, [r7, #16]
 800bff4:	60c5      	str	r5, [r0, #12]
 800bff6:	6925      	ldr	r5, [r4, #16]
 800bff8:	f107 0114 	add.w	r1, r7, #20
 800bffc:	f104 0914 	add.w	r9, r4, #20
 800c000:	f100 0e14 	add.w	lr, r0, #20
 800c004:	f107 0210 	add.w	r2, r7, #16
 800c008:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c00c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c010:	46f2      	mov	sl, lr
 800c012:	2700      	movs	r7, #0
 800c014:	f859 3b04 	ldr.w	r3, [r9], #4
 800c018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c01c:	fa1f f883 	uxth.w	r8, r3
 800c020:	fa17 f78b 	uxtah	r7, r7, fp
 800c024:	0c1b      	lsrs	r3, r3, #16
 800c026:	eba7 0808 	sub.w	r8, r7, r8
 800c02a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c02e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c032:	fa1f f888 	uxth.w	r8, r8
 800c036:	141f      	asrs	r7, r3, #16
 800c038:	454d      	cmp	r5, r9
 800c03a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c03e:	f84a 3b04 	str.w	r3, [sl], #4
 800c042:	d8e7      	bhi.n	800c014 <__mdiff+0x7c>
 800c044:	1b2b      	subs	r3, r5, r4
 800c046:	3b15      	subs	r3, #21
 800c048:	f023 0303 	bic.w	r3, r3, #3
 800c04c:	3304      	adds	r3, #4
 800c04e:	3415      	adds	r4, #21
 800c050:	42a5      	cmp	r5, r4
 800c052:	bf38      	it	cc
 800c054:	2304      	movcc	r3, #4
 800c056:	4419      	add	r1, r3
 800c058:	4473      	add	r3, lr
 800c05a:	469e      	mov	lr, r3
 800c05c:	460d      	mov	r5, r1
 800c05e:	4565      	cmp	r5, ip
 800c060:	d30e      	bcc.n	800c080 <__mdiff+0xe8>
 800c062:	f10c 0203 	add.w	r2, ip, #3
 800c066:	1a52      	subs	r2, r2, r1
 800c068:	f022 0203 	bic.w	r2, r2, #3
 800c06c:	3903      	subs	r1, #3
 800c06e:	458c      	cmp	ip, r1
 800c070:	bf38      	it	cc
 800c072:	2200      	movcc	r2, #0
 800c074:	441a      	add	r2, r3
 800c076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c07a:	b17b      	cbz	r3, 800c09c <__mdiff+0x104>
 800c07c:	6106      	str	r6, [r0, #16]
 800c07e:	e7a5      	b.n	800bfcc <__mdiff+0x34>
 800c080:	f855 8b04 	ldr.w	r8, [r5], #4
 800c084:	fa17 f488 	uxtah	r4, r7, r8
 800c088:	1422      	asrs	r2, r4, #16
 800c08a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c08e:	b2a4      	uxth	r4, r4
 800c090:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c094:	f84e 4b04 	str.w	r4, [lr], #4
 800c098:	1417      	asrs	r7, r2, #16
 800c09a:	e7e0      	b.n	800c05e <__mdiff+0xc6>
 800c09c:	3e01      	subs	r6, #1
 800c09e:	e7ea      	b.n	800c076 <__mdiff+0xde>
 800c0a0:	0800d15c 	.word	0x0800d15c
 800c0a4:	0800d250 	.word	0x0800d250

0800c0a8 <__ulp>:
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	ed8d 0b00 	vstr	d0, [sp]
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	4912      	ldr	r1, [pc, #72]	; (800c0fc <__ulp+0x54>)
 800c0b2:	4019      	ands	r1, r3
 800c0b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	dd05      	ble.n	800c0c8 <__ulp+0x20>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	ec43 2b10 	vmov	d0, r2, r3
 800c0c4:	b002      	add	sp, #8
 800c0c6:	4770      	bx	lr
 800c0c8:	4249      	negs	r1, r1
 800c0ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c0ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	da04      	bge.n	800c0e6 <__ulp+0x3e>
 800c0dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c0e0:	fa41 f300 	asr.w	r3, r1, r0
 800c0e4:	e7ec      	b.n	800c0c0 <__ulp+0x18>
 800c0e6:	f1a0 0114 	sub.w	r1, r0, #20
 800c0ea:	291e      	cmp	r1, #30
 800c0ec:	bfda      	itte	le
 800c0ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c0f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800c0f6:	2101      	movgt	r1, #1
 800c0f8:	460a      	mov	r2, r1
 800c0fa:	e7e1      	b.n	800c0c0 <__ulp+0x18>
 800c0fc:	7ff00000 	.word	0x7ff00000

0800c100 <__b2d>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	6905      	ldr	r5, [r0, #16]
 800c104:	f100 0714 	add.w	r7, r0, #20
 800c108:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c10c:	1f2e      	subs	r6, r5, #4
 800c10e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c112:	4620      	mov	r0, r4
 800c114:	f7ff fd52 	bl	800bbbc <__hi0bits>
 800c118:	f1c0 0320 	rsb	r3, r0, #32
 800c11c:	280a      	cmp	r0, #10
 800c11e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c19c <__b2d+0x9c>
 800c122:	600b      	str	r3, [r1, #0]
 800c124:	dc14      	bgt.n	800c150 <__b2d+0x50>
 800c126:	f1c0 0e0b 	rsb	lr, r0, #11
 800c12a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c12e:	42b7      	cmp	r7, r6
 800c130:	ea41 030c 	orr.w	r3, r1, ip
 800c134:	bf34      	ite	cc
 800c136:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c13a:	2100      	movcs	r1, #0
 800c13c:	3015      	adds	r0, #21
 800c13e:	fa04 f000 	lsl.w	r0, r4, r0
 800c142:	fa21 f10e 	lsr.w	r1, r1, lr
 800c146:	ea40 0201 	orr.w	r2, r0, r1
 800c14a:	ec43 2b10 	vmov	d0, r2, r3
 800c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c150:	42b7      	cmp	r7, r6
 800c152:	bf3a      	itte	cc
 800c154:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c158:	f1a5 0608 	subcc.w	r6, r5, #8
 800c15c:	2100      	movcs	r1, #0
 800c15e:	380b      	subs	r0, #11
 800c160:	d017      	beq.n	800c192 <__b2d+0x92>
 800c162:	f1c0 0c20 	rsb	ip, r0, #32
 800c166:	fa04 f500 	lsl.w	r5, r4, r0
 800c16a:	42be      	cmp	r6, r7
 800c16c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c170:	ea45 0504 	orr.w	r5, r5, r4
 800c174:	bf8c      	ite	hi
 800c176:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c17a:	2400      	movls	r4, #0
 800c17c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c180:	fa01 f000 	lsl.w	r0, r1, r0
 800c184:	fa24 f40c 	lsr.w	r4, r4, ip
 800c188:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c18c:	ea40 0204 	orr.w	r2, r0, r4
 800c190:	e7db      	b.n	800c14a <__b2d+0x4a>
 800c192:	ea44 030c 	orr.w	r3, r4, ip
 800c196:	460a      	mov	r2, r1
 800c198:	e7d7      	b.n	800c14a <__b2d+0x4a>
 800c19a:	bf00      	nop
 800c19c:	3ff00000 	.word	0x3ff00000

0800c1a0 <__d2b>:
 800c1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	4689      	mov	r9, r1
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	ec57 6b10 	vmov	r6, r7, d0
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	f7ff fc0f 	bl	800b9d0 <_Balloc>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	b930      	cbnz	r0, 800c1c4 <__d2b+0x24>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	4b25      	ldr	r3, [pc, #148]	; (800c250 <__d2b+0xb0>)
 800c1ba:	4826      	ldr	r0, [pc, #152]	; (800c254 <__d2b+0xb4>)
 800c1bc:	f240 310a 	movw	r1, #778	; 0x30a
 800c1c0:	f000 fcbe 	bl	800cb40 <__assert_func>
 800c1c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1cc:	bb35      	cbnz	r5, 800c21c <__d2b+0x7c>
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	d028      	beq.n	800c226 <__d2b+0x86>
 800c1d4:	4668      	mov	r0, sp
 800c1d6:	9600      	str	r6, [sp, #0]
 800c1d8:	f7ff fd10 	bl	800bbfc <__lo0bits>
 800c1dc:	9900      	ldr	r1, [sp, #0]
 800c1de:	b300      	cbz	r0, 800c222 <__d2b+0x82>
 800c1e0:	9a01      	ldr	r2, [sp, #4]
 800c1e2:	f1c0 0320 	rsb	r3, r0, #32
 800c1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ea:	430b      	orrs	r3, r1
 800c1ec:	40c2      	lsrs	r2, r0
 800c1ee:	6163      	str	r3, [r4, #20]
 800c1f0:	9201      	str	r2, [sp, #4]
 800c1f2:	9b01      	ldr	r3, [sp, #4]
 800c1f4:	61a3      	str	r3, [r4, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	bf14      	ite	ne
 800c1fa:	2202      	movne	r2, #2
 800c1fc:	2201      	moveq	r2, #1
 800c1fe:	6122      	str	r2, [r4, #16]
 800c200:	b1d5      	cbz	r5, 800c238 <__d2b+0x98>
 800c202:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c206:	4405      	add	r5, r0
 800c208:	f8c9 5000 	str.w	r5, [r9]
 800c20c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c210:	f8c8 0000 	str.w	r0, [r8]
 800c214:	4620      	mov	r0, r4
 800c216:	b003      	add	sp, #12
 800c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c220:	e7d5      	b.n	800c1ce <__d2b+0x2e>
 800c222:	6161      	str	r1, [r4, #20]
 800c224:	e7e5      	b.n	800c1f2 <__d2b+0x52>
 800c226:	a801      	add	r0, sp, #4
 800c228:	f7ff fce8 	bl	800bbfc <__lo0bits>
 800c22c:	9b01      	ldr	r3, [sp, #4]
 800c22e:	6163      	str	r3, [r4, #20]
 800c230:	2201      	movs	r2, #1
 800c232:	6122      	str	r2, [r4, #16]
 800c234:	3020      	adds	r0, #32
 800c236:	e7e3      	b.n	800c200 <__d2b+0x60>
 800c238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c23c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c240:	f8c9 0000 	str.w	r0, [r9]
 800c244:	6918      	ldr	r0, [r3, #16]
 800c246:	f7ff fcb9 	bl	800bbbc <__hi0bits>
 800c24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c24e:	e7df      	b.n	800c210 <__d2b+0x70>
 800c250:	0800d15c 	.word	0x0800d15c
 800c254:	0800d250 	.word	0x0800d250

0800c258 <__ratio>:
 800c258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	4688      	mov	r8, r1
 800c25e:	4669      	mov	r1, sp
 800c260:	4681      	mov	r9, r0
 800c262:	f7ff ff4d 	bl	800c100 <__b2d>
 800c266:	a901      	add	r1, sp, #4
 800c268:	4640      	mov	r0, r8
 800c26a:	ec55 4b10 	vmov	r4, r5, d0
 800c26e:	f7ff ff47 	bl	800c100 <__b2d>
 800c272:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c276:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c27a:	eba3 0c02 	sub.w	ip, r3, r2
 800c27e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c282:	1a9b      	subs	r3, r3, r2
 800c284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c288:	ec51 0b10 	vmov	r0, r1, d0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bfd6      	itet	le
 800c290:	460a      	movle	r2, r1
 800c292:	462a      	movgt	r2, r5
 800c294:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c298:	468b      	mov	fp, r1
 800c29a:	462f      	mov	r7, r5
 800c29c:	bfd4      	ite	le
 800c29e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	ee10 2a10 	vmov	r2, s0
 800c2ac:	465b      	mov	r3, fp
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f4 facc 	bl	800084c <__aeabi_ddiv>
 800c2b4:	ec41 0b10 	vmov	d0, r0, r1
 800c2b8:	b003      	add	sp, #12
 800c2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2be <__copybits>:
 800c2be:	3901      	subs	r1, #1
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	1149      	asrs	r1, r1, #5
 800c2c4:	6914      	ldr	r4, [r2, #16]
 800c2c6:	3101      	adds	r1, #1
 800c2c8:	f102 0314 	add.w	r3, r2, #20
 800c2cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2d4:	1f05      	subs	r5, r0, #4
 800c2d6:	42a3      	cmp	r3, r4
 800c2d8:	d30c      	bcc.n	800c2f4 <__copybits+0x36>
 800c2da:	1aa3      	subs	r3, r4, r2
 800c2dc:	3b11      	subs	r3, #17
 800c2de:	f023 0303 	bic.w	r3, r3, #3
 800c2e2:	3211      	adds	r2, #17
 800c2e4:	42a2      	cmp	r2, r4
 800c2e6:	bf88      	it	hi
 800c2e8:	2300      	movhi	r3, #0
 800c2ea:	4418      	add	r0, r3
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4288      	cmp	r0, r1
 800c2f0:	d305      	bcc.n	800c2fe <__copybits+0x40>
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2fc:	e7eb      	b.n	800c2d6 <__copybits+0x18>
 800c2fe:	f840 3b04 	str.w	r3, [r0], #4
 800c302:	e7f4      	b.n	800c2ee <__copybits+0x30>

0800c304 <__any_on>:
 800c304:	f100 0214 	add.w	r2, r0, #20
 800c308:	6900      	ldr	r0, [r0, #16]
 800c30a:	114b      	asrs	r3, r1, #5
 800c30c:	4298      	cmp	r0, r3
 800c30e:	b510      	push	{r4, lr}
 800c310:	db11      	blt.n	800c336 <__any_on+0x32>
 800c312:	dd0a      	ble.n	800c32a <__any_on+0x26>
 800c314:	f011 011f 	ands.w	r1, r1, #31
 800c318:	d007      	beq.n	800c32a <__any_on+0x26>
 800c31a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c31e:	fa24 f001 	lsr.w	r0, r4, r1
 800c322:	fa00 f101 	lsl.w	r1, r0, r1
 800c326:	428c      	cmp	r4, r1
 800c328:	d10b      	bne.n	800c342 <__any_on+0x3e>
 800c32a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c32e:	4293      	cmp	r3, r2
 800c330:	d803      	bhi.n	800c33a <__any_on+0x36>
 800c332:	2000      	movs	r0, #0
 800c334:	bd10      	pop	{r4, pc}
 800c336:	4603      	mov	r3, r0
 800c338:	e7f7      	b.n	800c32a <__any_on+0x26>
 800c33a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c33e:	2900      	cmp	r1, #0
 800c340:	d0f5      	beq.n	800c32e <__any_on+0x2a>
 800c342:	2001      	movs	r0, #1
 800c344:	e7f6      	b.n	800c334 <__any_on+0x30>

0800c346 <_calloc_r>:
 800c346:	b513      	push	{r0, r1, r4, lr}
 800c348:	434a      	muls	r2, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	9201      	str	r2, [sp, #4]
 800c34e:	f000 f859 	bl	800c404 <_malloc_r>
 800c352:	4604      	mov	r4, r0
 800c354:	b118      	cbz	r0, 800c35e <_calloc_r+0x18>
 800c356:	9a01      	ldr	r2, [sp, #4]
 800c358:	2100      	movs	r1, #0
 800c35a:	f7fc f86b 	bl	8008434 <memset>
 800c35e:	4620      	mov	r0, r4
 800c360:	b002      	add	sp, #8
 800c362:	bd10      	pop	{r4, pc}

0800c364 <_free_r>:
 800c364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c366:	2900      	cmp	r1, #0
 800c368:	d048      	beq.n	800c3fc <_free_r+0x98>
 800c36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c36e:	9001      	str	r0, [sp, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f1a1 0404 	sub.w	r4, r1, #4
 800c376:	bfb8      	it	lt
 800c378:	18e4      	addlt	r4, r4, r3
 800c37a:	f000 fc6f 	bl	800cc5c <__malloc_lock>
 800c37e:	4a20      	ldr	r2, [pc, #128]	; (800c400 <_free_r+0x9c>)
 800c380:	9801      	ldr	r0, [sp, #4]
 800c382:	6813      	ldr	r3, [r2, #0]
 800c384:	4615      	mov	r5, r2
 800c386:	b933      	cbnz	r3, 800c396 <_free_r+0x32>
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	6014      	str	r4, [r2, #0]
 800c38c:	b003      	add	sp, #12
 800c38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c392:	f000 bc69 	b.w	800cc68 <__malloc_unlock>
 800c396:	42a3      	cmp	r3, r4
 800c398:	d90b      	bls.n	800c3b2 <_free_r+0x4e>
 800c39a:	6821      	ldr	r1, [r4, #0]
 800c39c:	1862      	adds	r2, r4, r1
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	bf04      	itt	eq
 800c3a2:	681a      	ldreq	r2, [r3, #0]
 800c3a4:	685b      	ldreq	r3, [r3, #4]
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	bf04      	itt	eq
 800c3aa:	1852      	addeq	r2, r2, r1
 800c3ac:	6022      	streq	r2, [r4, #0]
 800c3ae:	602c      	str	r4, [r5, #0]
 800c3b0:	e7ec      	b.n	800c38c <_free_r+0x28>
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	b10b      	cbz	r3, 800c3bc <_free_r+0x58>
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	d9fa      	bls.n	800c3b2 <_free_r+0x4e>
 800c3bc:	6811      	ldr	r1, [r2, #0]
 800c3be:	1855      	adds	r5, r2, r1
 800c3c0:	42a5      	cmp	r5, r4
 800c3c2:	d10b      	bne.n	800c3dc <_free_r+0x78>
 800c3c4:	6824      	ldr	r4, [r4, #0]
 800c3c6:	4421      	add	r1, r4
 800c3c8:	1854      	adds	r4, r2, r1
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	6011      	str	r1, [r2, #0]
 800c3ce:	d1dd      	bne.n	800c38c <_free_r+0x28>
 800c3d0:	681c      	ldr	r4, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	6053      	str	r3, [r2, #4]
 800c3d6:	4421      	add	r1, r4
 800c3d8:	6011      	str	r1, [r2, #0]
 800c3da:	e7d7      	b.n	800c38c <_free_r+0x28>
 800c3dc:	d902      	bls.n	800c3e4 <_free_r+0x80>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	e7d3      	b.n	800c38c <_free_r+0x28>
 800c3e4:	6825      	ldr	r5, [r4, #0]
 800c3e6:	1961      	adds	r1, r4, r5
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf04      	itt	eq
 800c3ec:	6819      	ldreq	r1, [r3, #0]
 800c3ee:	685b      	ldreq	r3, [r3, #4]
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	bf04      	itt	eq
 800c3f4:	1949      	addeq	r1, r1, r5
 800c3f6:	6021      	streq	r1, [r4, #0]
 800c3f8:	6054      	str	r4, [r2, #4]
 800c3fa:	e7c7      	b.n	800c38c <_free_r+0x28>
 800c3fc:	b003      	add	sp, #12
 800c3fe:	bd30      	pop	{r4, r5, pc}
 800c400:	20000200 	.word	0x20000200

0800c404 <_malloc_r>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	1ccd      	adds	r5, r1, #3
 800c408:	f025 0503 	bic.w	r5, r5, #3
 800c40c:	3508      	adds	r5, #8
 800c40e:	2d0c      	cmp	r5, #12
 800c410:	bf38      	it	cc
 800c412:	250c      	movcc	r5, #12
 800c414:	2d00      	cmp	r5, #0
 800c416:	4606      	mov	r6, r0
 800c418:	db01      	blt.n	800c41e <_malloc_r+0x1a>
 800c41a:	42a9      	cmp	r1, r5
 800c41c:	d903      	bls.n	800c426 <_malloc_r+0x22>
 800c41e:	230c      	movs	r3, #12
 800c420:	6033      	str	r3, [r6, #0]
 800c422:	2000      	movs	r0, #0
 800c424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c426:	f000 fc19 	bl	800cc5c <__malloc_lock>
 800c42a:	4921      	ldr	r1, [pc, #132]	; (800c4b0 <_malloc_r+0xac>)
 800c42c:	680a      	ldr	r2, [r1, #0]
 800c42e:	4614      	mov	r4, r2
 800c430:	b99c      	cbnz	r4, 800c45a <_malloc_r+0x56>
 800c432:	4f20      	ldr	r7, [pc, #128]	; (800c4b4 <_malloc_r+0xb0>)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	b923      	cbnz	r3, 800c442 <_malloc_r+0x3e>
 800c438:	4621      	mov	r1, r4
 800c43a:	4630      	mov	r0, r6
 800c43c:	f000 fafc 	bl	800ca38 <_sbrk_r>
 800c440:	6038      	str	r0, [r7, #0]
 800c442:	4629      	mov	r1, r5
 800c444:	4630      	mov	r0, r6
 800c446:	f000 faf7 	bl	800ca38 <_sbrk_r>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d123      	bne.n	800c496 <_malloc_r+0x92>
 800c44e:	230c      	movs	r3, #12
 800c450:	6033      	str	r3, [r6, #0]
 800c452:	4630      	mov	r0, r6
 800c454:	f000 fc08 	bl	800cc68 <__malloc_unlock>
 800c458:	e7e3      	b.n	800c422 <_malloc_r+0x1e>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	1b5b      	subs	r3, r3, r5
 800c45e:	d417      	bmi.n	800c490 <_malloc_r+0x8c>
 800c460:	2b0b      	cmp	r3, #11
 800c462:	d903      	bls.n	800c46c <_malloc_r+0x68>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	441c      	add	r4, r3
 800c468:	6025      	str	r5, [r4, #0]
 800c46a:	e004      	b.n	800c476 <_malloc_r+0x72>
 800c46c:	6863      	ldr	r3, [r4, #4]
 800c46e:	42a2      	cmp	r2, r4
 800c470:	bf0c      	ite	eq
 800c472:	600b      	streq	r3, [r1, #0]
 800c474:	6053      	strne	r3, [r2, #4]
 800c476:	4630      	mov	r0, r6
 800c478:	f000 fbf6 	bl	800cc68 <__malloc_unlock>
 800c47c:	f104 000b 	add.w	r0, r4, #11
 800c480:	1d23      	adds	r3, r4, #4
 800c482:	f020 0007 	bic.w	r0, r0, #7
 800c486:	1ac2      	subs	r2, r0, r3
 800c488:	d0cc      	beq.n	800c424 <_malloc_r+0x20>
 800c48a:	1a1b      	subs	r3, r3, r0
 800c48c:	50a3      	str	r3, [r4, r2]
 800c48e:	e7c9      	b.n	800c424 <_malloc_r+0x20>
 800c490:	4622      	mov	r2, r4
 800c492:	6864      	ldr	r4, [r4, #4]
 800c494:	e7cc      	b.n	800c430 <_malloc_r+0x2c>
 800c496:	1cc4      	adds	r4, r0, #3
 800c498:	f024 0403 	bic.w	r4, r4, #3
 800c49c:	42a0      	cmp	r0, r4
 800c49e:	d0e3      	beq.n	800c468 <_malloc_r+0x64>
 800c4a0:	1a21      	subs	r1, r4, r0
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f000 fac8 	bl	800ca38 <_sbrk_r>
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d1dd      	bne.n	800c468 <_malloc_r+0x64>
 800c4ac:	e7cf      	b.n	800c44e <_malloc_r+0x4a>
 800c4ae:	bf00      	nop
 800c4b0:	20000200 	.word	0x20000200
 800c4b4:	20000204 	.word	0x20000204

0800c4b8 <__ssputs_r>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	688e      	ldr	r6, [r1, #8]
 800c4be:	429e      	cmp	r6, r3
 800c4c0:	4682      	mov	sl, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	d838      	bhi.n	800c53c <__ssputs_r+0x84>
 800c4ca:	898a      	ldrh	r2, [r1, #12]
 800c4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4d0:	d032      	beq.n	800c538 <__ssputs_r+0x80>
 800c4d2:	6825      	ldr	r5, [r4, #0]
 800c4d4:	6909      	ldr	r1, [r1, #16]
 800c4d6:	eba5 0901 	sub.w	r9, r5, r1
 800c4da:	6965      	ldr	r5, [r4, #20]
 800c4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	444b      	add	r3, r9
 800c4e8:	106d      	asrs	r5, r5, #1
 800c4ea:	429d      	cmp	r5, r3
 800c4ec:	bf38      	it	cc
 800c4ee:	461d      	movcc	r5, r3
 800c4f0:	0553      	lsls	r3, r2, #21
 800c4f2:	d531      	bpl.n	800c558 <__ssputs_r+0xa0>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7ff ff85 	bl	800c404 <_malloc_r>
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	b950      	cbnz	r0, 800c514 <__ssputs_r+0x5c>
 800c4fe:	230c      	movs	r3, #12
 800c500:	f8ca 3000 	str.w	r3, [sl]
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c514:	6921      	ldr	r1, [r4, #16]
 800c516:	464a      	mov	r2, r9
 800c518:	f7fb ff7e 	bl	8008418 <memcpy>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c526:	81a3      	strh	r3, [r4, #12]
 800c528:	6126      	str	r6, [r4, #16]
 800c52a:	6165      	str	r5, [r4, #20]
 800c52c:	444e      	add	r6, r9
 800c52e:	eba5 0509 	sub.w	r5, r5, r9
 800c532:	6026      	str	r6, [r4, #0]
 800c534:	60a5      	str	r5, [r4, #8]
 800c536:	463e      	mov	r6, r7
 800c538:	42be      	cmp	r6, r7
 800c53a:	d900      	bls.n	800c53e <__ssputs_r+0x86>
 800c53c:	463e      	mov	r6, r7
 800c53e:	4632      	mov	r2, r6
 800c540:	6820      	ldr	r0, [r4, #0]
 800c542:	4641      	mov	r1, r8
 800c544:	f000 fb70 	bl	800cc28 <memmove>
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	6822      	ldr	r2, [r4, #0]
 800c54c:	1b9b      	subs	r3, r3, r6
 800c54e:	4432      	add	r2, r6
 800c550:	60a3      	str	r3, [r4, #8]
 800c552:	6022      	str	r2, [r4, #0]
 800c554:	2000      	movs	r0, #0
 800c556:	e7db      	b.n	800c510 <__ssputs_r+0x58>
 800c558:	462a      	mov	r2, r5
 800c55a:	f000 fb8b 	bl	800cc74 <_realloc_r>
 800c55e:	4606      	mov	r6, r0
 800c560:	2800      	cmp	r0, #0
 800c562:	d1e1      	bne.n	800c528 <__ssputs_r+0x70>
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	4650      	mov	r0, sl
 800c568:	f7ff fefc 	bl	800c364 <_free_r>
 800c56c:	e7c7      	b.n	800c4fe <__ssputs_r+0x46>
	...

0800c570 <_svfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	4698      	mov	r8, r3
 800c576:	898b      	ldrh	r3, [r1, #12]
 800c578:	061b      	lsls	r3, r3, #24
 800c57a:	b09d      	sub	sp, #116	; 0x74
 800c57c:	4607      	mov	r7, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	4614      	mov	r4, r2
 800c582:	d50e      	bpl.n	800c5a2 <_svfiprintf_r+0x32>
 800c584:	690b      	ldr	r3, [r1, #16]
 800c586:	b963      	cbnz	r3, 800c5a2 <_svfiprintf_r+0x32>
 800c588:	2140      	movs	r1, #64	; 0x40
 800c58a:	f7ff ff3b 	bl	800c404 <_malloc_r>
 800c58e:	6028      	str	r0, [r5, #0]
 800c590:	6128      	str	r0, [r5, #16]
 800c592:	b920      	cbnz	r0, 800c59e <_svfiprintf_r+0x2e>
 800c594:	230c      	movs	r3, #12
 800c596:	603b      	str	r3, [r7, #0]
 800c598:	f04f 30ff 	mov.w	r0, #4294967295
 800c59c:	e0d1      	b.n	800c742 <_svfiprintf_r+0x1d2>
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	616b      	str	r3, [r5, #20]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a6:	2320      	movs	r3, #32
 800c5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b0:	2330      	movs	r3, #48	; 0x30
 800c5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c75c <_svfiprintf_r+0x1ec>
 800c5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ba:	f04f 0901 	mov.w	r9, #1
 800c5be:	4623      	mov	r3, r4
 800c5c0:	469a      	mov	sl, r3
 800c5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c6:	b10a      	cbz	r2, 800c5cc <_svfiprintf_r+0x5c>
 800c5c8:	2a25      	cmp	r2, #37	; 0x25
 800c5ca:	d1f9      	bne.n	800c5c0 <_svfiprintf_r+0x50>
 800c5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d0:	d00b      	beq.n	800c5ea <_svfiprintf_r+0x7a>
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	4622      	mov	r2, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff ff6d 	bl	800c4b8 <__ssputs_r>
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f000 80aa 	beq.w	800c738 <_svfiprintf_r+0x1c8>
 800c5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e6:	445a      	add	r2, fp
 800c5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 80a2 	beq.w	800c738 <_svfiprintf_r+0x1c8>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5fe:	f10a 0a01 	add.w	sl, sl, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	9307      	str	r3, [sp, #28]
 800c606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c60a:	931a      	str	r3, [sp, #104]	; 0x68
 800c60c:	4654      	mov	r4, sl
 800c60e:	2205      	movs	r2, #5
 800c610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c614:	4851      	ldr	r0, [pc, #324]	; (800c75c <_svfiprintf_r+0x1ec>)
 800c616:	f7f3 fde3 	bl	80001e0 <memchr>
 800c61a:	9a04      	ldr	r2, [sp, #16]
 800c61c:	b9d8      	cbnz	r0, 800c656 <_svfiprintf_r+0xe6>
 800c61e:	06d0      	lsls	r0, r2, #27
 800c620:	bf44      	itt	mi
 800c622:	2320      	movmi	r3, #32
 800c624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c628:	0711      	lsls	r1, r2, #28
 800c62a:	bf44      	itt	mi
 800c62c:	232b      	movmi	r3, #43	; 0x2b
 800c62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c632:	f89a 3000 	ldrb.w	r3, [sl]
 800c636:	2b2a      	cmp	r3, #42	; 0x2a
 800c638:	d015      	beq.n	800c666 <_svfiprintf_r+0xf6>
 800c63a:	9a07      	ldr	r2, [sp, #28]
 800c63c:	4654      	mov	r4, sl
 800c63e:	2000      	movs	r0, #0
 800c640:	f04f 0c0a 	mov.w	ip, #10
 800c644:	4621      	mov	r1, r4
 800c646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c64a:	3b30      	subs	r3, #48	; 0x30
 800c64c:	2b09      	cmp	r3, #9
 800c64e:	d94e      	bls.n	800c6ee <_svfiprintf_r+0x17e>
 800c650:	b1b0      	cbz	r0, 800c680 <_svfiprintf_r+0x110>
 800c652:	9207      	str	r2, [sp, #28]
 800c654:	e014      	b.n	800c680 <_svfiprintf_r+0x110>
 800c656:	eba0 0308 	sub.w	r3, r0, r8
 800c65a:	fa09 f303 	lsl.w	r3, r9, r3
 800c65e:	4313      	orrs	r3, r2
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	46a2      	mov	sl, r4
 800c664:	e7d2      	b.n	800c60c <_svfiprintf_r+0x9c>
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	1d19      	adds	r1, r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	9103      	str	r1, [sp, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfbb      	ittet	lt
 800c672:	425b      	neglt	r3, r3
 800c674:	f042 0202 	orrlt.w	r2, r2, #2
 800c678:	9307      	strge	r3, [sp, #28]
 800c67a:	9307      	strlt	r3, [sp, #28]
 800c67c:	bfb8      	it	lt
 800c67e:	9204      	strlt	r2, [sp, #16]
 800c680:	7823      	ldrb	r3, [r4, #0]
 800c682:	2b2e      	cmp	r3, #46	; 0x2e
 800c684:	d10c      	bne.n	800c6a0 <_svfiprintf_r+0x130>
 800c686:	7863      	ldrb	r3, [r4, #1]
 800c688:	2b2a      	cmp	r3, #42	; 0x2a
 800c68a:	d135      	bne.n	800c6f8 <_svfiprintf_r+0x188>
 800c68c:	9b03      	ldr	r3, [sp, #12]
 800c68e:	1d1a      	adds	r2, r3, #4
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	9203      	str	r2, [sp, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	bfb8      	it	lt
 800c698:	f04f 33ff 	movlt.w	r3, #4294967295
 800c69c:	3402      	adds	r4, #2
 800c69e:	9305      	str	r3, [sp, #20]
 800c6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c76c <_svfiprintf_r+0x1fc>
 800c6a4:	7821      	ldrb	r1, [r4, #0]
 800c6a6:	2203      	movs	r2, #3
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	f7f3 fd99 	bl	80001e0 <memchr>
 800c6ae:	b140      	cbz	r0, 800c6c2 <_svfiprintf_r+0x152>
 800c6b0:	2340      	movs	r3, #64	; 0x40
 800c6b2:	eba0 000a 	sub.w	r0, r0, sl
 800c6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	4303      	orrs	r3, r0
 800c6be:	3401      	adds	r4, #1
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c6:	4826      	ldr	r0, [pc, #152]	; (800c760 <_svfiprintf_r+0x1f0>)
 800c6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6cc:	2206      	movs	r2, #6
 800c6ce:	f7f3 fd87 	bl	80001e0 <memchr>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d038      	beq.n	800c748 <_svfiprintf_r+0x1d8>
 800c6d6:	4b23      	ldr	r3, [pc, #140]	; (800c764 <_svfiprintf_r+0x1f4>)
 800c6d8:	bb1b      	cbnz	r3, 800c722 <_svfiprintf_r+0x1b2>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	3307      	adds	r3, #7
 800c6de:	f023 0307 	bic.w	r3, r3, #7
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	9303      	str	r3, [sp, #12]
 800c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e8:	4433      	add	r3, r6
 800c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ec:	e767      	b.n	800c5be <_svfiprintf_r+0x4e>
 800c6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	2001      	movs	r0, #1
 800c6f6:	e7a5      	b.n	800c644 <_svfiprintf_r+0xd4>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	3401      	adds	r4, #1
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	4619      	mov	r1, r3
 800c700:	f04f 0c0a 	mov.w	ip, #10
 800c704:	4620      	mov	r0, r4
 800c706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70a:	3a30      	subs	r2, #48	; 0x30
 800c70c:	2a09      	cmp	r2, #9
 800c70e:	d903      	bls.n	800c718 <_svfiprintf_r+0x1a8>
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0c5      	beq.n	800c6a0 <_svfiprintf_r+0x130>
 800c714:	9105      	str	r1, [sp, #20]
 800c716:	e7c3      	b.n	800c6a0 <_svfiprintf_r+0x130>
 800c718:	fb0c 2101 	mla	r1, ip, r1, r2
 800c71c:	4604      	mov	r4, r0
 800c71e:	2301      	movs	r3, #1
 800c720:	e7f0      	b.n	800c704 <_svfiprintf_r+0x194>
 800c722:	ab03      	add	r3, sp, #12
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	462a      	mov	r2, r5
 800c728:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <_svfiprintf_r+0x1f8>)
 800c72a:	a904      	add	r1, sp, #16
 800c72c:	4638      	mov	r0, r7
 800c72e:	f7fb ff29 	bl	8008584 <_printf_float>
 800c732:	1c42      	adds	r2, r0, #1
 800c734:	4606      	mov	r6, r0
 800c736:	d1d6      	bne.n	800c6e6 <_svfiprintf_r+0x176>
 800c738:	89ab      	ldrh	r3, [r5, #12]
 800c73a:	065b      	lsls	r3, r3, #25
 800c73c:	f53f af2c 	bmi.w	800c598 <_svfiprintf_r+0x28>
 800c740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c742:	b01d      	add	sp, #116	; 0x74
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	ab03      	add	r3, sp, #12
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	462a      	mov	r2, r5
 800c74e:	4b06      	ldr	r3, [pc, #24]	; (800c768 <_svfiprintf_r+0x1f8>)
 800c750:	a904      	add	r1, sp, #16
 800c752:	4638      	mov	r0, r7
 800c754:	f7fc f9ba 	bl	8008acc <_printf_i>
 800c758:	e7eb      	b.n	800c732 <_svfiprintf_r+0x1c2>
 800c75a:	bf00      	nop
 800c75c:	0800d3ac 	.word	0x0800d3ac
 800c760:	0800d3b6 	.word	0x0800d3b6
 800c764:	08008585 	.word	0x08008585
 800c768:	0800c4b9 	.word	0x0800c4b9
 800c76c:	0800d3b2 	.word	0x0800d3b2

0800c770 <__sfputc_r>:
 800c770:	6893      	ldr	r3, [r2, #8]
 800c772:	3b01      	subs	r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	b410      	push	{r4}
 800c778:	6093      	str	r3, [r2, #8]
 800c77a:	da08      	bge.n	800c78e <__sfputc_r+0x1e>
 800c77c:	6994      	ldr	r4, [r2, #24]
 800c77e:	42a3      	cmp	r3, r4
 800c780:	db01      	blt.n	800c786 <__sfputc_r+0x16>
 800c782:	290a      	cmp	r1, #10
 800c784:	d103      	bne.n	800c78e <__sfputc_r+0x1e>
 800c786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78a:	f7fd bc3b 	b.w	800a004 <__swbuf_r>
 800c78e:	6813      	ldr	r3, [r2, #0]
 800c790:	1c58      	adds	r0, r3, #1
 800c792:	6010      	str	r0, [r2, #0]
 800c794:	7019      	strb	r1, [r3, #0]
 800c796:	4608      	mov	r0, r1
 800c798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <__sfputs_r>:
 800c79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	4614      	mov	r4, r2
 800c7a6:	18d5      	adds	r5, r2, r3
 800c7a8:	42ac      	cmp	r4, r5
 800c7aa:	d101      	bne.n	800c7b0 <__sfputs_r+0x12>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e007      	b.n	800c7c0 <__sfputs_r+0x22>
 800c7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ffda 	bl	800c770 <__sfputc_r>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d1f3      	bne.n	800c7a8 <__sfputs_r+0xa>
 800c7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7c4 <_vfiprintf_r>:
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	460d      	mov	r5, r1
 800c7ca:	b09d      	sub	sp, #116	; 0x74
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4698      	mov	r8, r3
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	b118      	cbz	r0, 800c7dc <_vfiprintf_r+0x18>
 800c7d4:	6983      	ldr	r3, [r0, #24]
 800c7d6:	b90b      	cbnz	r3, 800c7dc <_vfiprintf_r+0x18>
 800c7d8:	f7fe fc68 	bl	800b0ac <__sinit>
 800c7dc:	4b89      	ldr	r3, [pc, #548]	; (800ca04 <_vfiprintf_r+0x240>)
 800c7de:	429d      	cmp	r5, r3
 800c7e0:	d11b      	bne.n	800c81a <_vfiprintf_r+0x56>
 800c7e2:	6875      	ldr	r5, [r6, #4]
 800c7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e6:	07d9      	lsls	r1, r3, #31
 800c7e8:	d405      	bmi.n	800c7f6 <_vfiprintf_r+0x32>
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	059a      	lsls	r2, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_vfiprintf_r+0x32>
 800c7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f2:	f7ff f86c 	bl	800b8ce <__retarget_lock_acquire_recursive>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	071b      	lsls	r3, r3, #28
 800c7fa:	d501      	bpl.n	800c800 <_vfiprintf_r+0x3c>
 800c7fc:	692b      	ldr	r3, [r5, #16]
 800c7fe:	b9eb      	cbnz	r3, 800c83c <_vfiprintf_r+0x78>
 800c800:	4629      	mov	r1, r5
 800c802:	4630      	mov	r0, r6
 800c804:	f7fd fc50 	bl	800a0a8 <__swsetup_r>
 800c808:	b1c0      	cbz	r0, 800c83c <_vfiprintf_r+0x78>
 800c80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c80c:	07dc      	lsls	r4, r3, #31
 800c80e:	d50e      	bpl.n	800c82e <_vfiprintf_r+0x6a>
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	b01d      	add	sp, #116	; 0x74
 800c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81a:	4b7b      	ldr	r3, [pc, #492]	; (800ca08 <_vfiprintf_r+0x244>)
 800c81c:	429d      	cmp	r5, r3
 800c81e:	d101      	bne.n	800c824 <_vfiprintf_r+0x60>
 800c820:	68b5      	ldr	r5, [r6, #8]
 800c822:	e7df      	b.n	800c7e4 <_vfiprintf_r+0x20>
 800c824:	4b79      	ldr	r3, [pc, #484]	; (800ca0c <_vfiprintf_r+0x248>)
 800c826:	429d      	cmp	r5, r3
 800c828:	bf08      	it	eq
 800c82a:	68f5      	ldreq	r5, [r6, #12]
 800c82c:	e7da      	b.n	800c7e4 <_vfiprintf_r+0x20>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	0598      	lsls	r0, r3, #22
 800c832:	d4ed      	bmi.n	800c810 <_vfiprintf_r+0x4c>
 800c834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c836:	f7ff f84b 	bl	800b8d0 <__retarget_lock_release_recursive>
 800c83a:	e7e9      	b.n	800c810 <_vfiprintf_r+0x4c>
 800c83c:	2300      	movs	r3, #0
 800c83e:	9309      	str	r3, [sp, #36]	; 0x24
 800c840:	2320      	movs	r3, #32
 800c842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c846:	f8cd 800c 	str.w	r8, [sp, #12]
 800c84a:	2330      	movs	r3, #48	; 0x30
 800c84c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca10 <_vfiprintf_r+0x24c>
 800c850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c854:	f04f 0901 	mov.w	r9, #1
 800c858:	4623      	mov	r3, r4
 800c85a:	469a      	mov	sl, r3
 800c85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c860:	b10a      	cbz	r2, 800c866 <_vfiprintf_r+0xa2>
 800c862:	2a25      	cmp	r2, #37	; 0x25
 800c864:	d1f9      	bne.n	800c85a <_vfiprintf_r+0x96>
 800c866:	ebba 0b04 	subs.w	fp, sl, r4
 800c86a:	d00b      	beq.n	800c884 <_vfiprintf_r+0xc0>
 800c86c:	465b      	mov	r3, fp
 800c86e:	4622      	mov	r2, r4
 800c870:	4629      	mov	r1, r5
 800c872:	4630      	mov	r0, r6
 800c874:	f7ff ff93 	bl	800c79e <__sfputs_r>
 800c878:	3001      	adds	r0, #1
 800c87a:	f000 80aa 	beq.w	800c9d2 <_vfiprintf_r+0x20e>
 800c87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c880:	445a      	add	r2, fp
 800c882:	9209      	str	r2, [sp, #36]	; 0x24
 800c884:	f89a 3000 	ldrb.w	r3, [sl]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 80a2 	beq.w	800c9d2 <_vfiprintf_r+0x20e>
 800c88e:	2300      	movs	r3, #0
 800c890:	f04f 32ff 	mov.w	r2, #4294967295
 800c894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c898:	f10a 0a01 	add.w	sl, sl, #1
 800c89c:	9304      	str	r3, [sp, #16]
 800c89e:	9307      	str	r3, [sp, #28]
 800c8a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8a4:	931a      	str	r3, [sp, #104]	; 0x68
 800c8a6:	4654      	mov	r4, sl
 800c8a8:	2205      	movs	r2, #5
 800c8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ae:	4858      	ldr	r0, [pc, #352]	; (800ca10 <_vfiprintf_r+0x24c>)
 800c8b0:	f7f3 fc96 	bl	80001e0 <memchr>
 800c8b4:	9a04      	ldr	r2, [sp, #16]
 800c8b6:	b9d8      	cbnz	r0, 800c8f0 <_vfiprintf_r+0x12c>
 800c8b8:	06d1      	lsls	r1, r2, #27
 800c8ba:	bf44      	itt	mi
 800c8bc:	2320      	movmi	r3, #32
 800c8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c2:	0713      	lsls	r3, r2, #28
 800c8c4:	bf44      	itt	mi
 800c8c6:	232b      	movmi	r3, #43	; 0x2b
 800c8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d2:	d015      	beq.n	800c900 <_vfiprintf_r+0x13c>
 800c8d4:	9a07      	ldr	r2, [sp, #28]
 800c8d6:	4654      	mov	r4, sl
 800c8d8:	2000      	movs	r0, #0
 800c8da:	f04f 0c0a 	mov.w	ip, #10
 800c8de:	4621      	mov	r1, r4
 800c8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8e4:	3b30      	subs	r3, #48	; 0x30
 800c8e6:	2b09      	cmp	r3, #9
 800c8e8:	d94e      	bls.n	800c988 <_vfiprintf_r+0x1c4>
 800c8ea:	b1b0      	cbz	r0, 800c91a <_vfiprintf_r+0x156>
 800c8ec:	9207      	str	r2, [sp, #28]
 800c8ee:	e014      	b.n	800c91a <_vfiprintf_r+0x156>
 800c8f0:	eba0 0308 	sub.w	r3, r0, r8
 800c8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	46a2      	mov	sl, r4
 800c8fe:	e7d2      	b.n	800c8a6 <_vfiprintf_r+0xe2>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	1d19      	adds	r1, r3, #4
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	9103      	str	r1, [sp, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bfbb      	ittet	lt
 800c90c:	425b      	neglt	r3, r3
 800c90e:	f042 0202 	orrlt.w	r2, r2, #2
 800c912:	9307      	strge	r3, [sp, #28]
 800c914:	9307      	strlt	r3, [sp, #28]
 800c916:	bfb8      	it	lt
 800c918:	9204      	strlt	r2, [sp, #16]
 800c91a:	7823      	ldrb	r3, [r4, #0]
 800c91c:	2b2e      	cmp	r3, #46	; 0x2e
 800c91e:	d10c      	bne.n	800c93a <_vfiprintf_r+0x176>
 800c920:	7863      	ldrb	r3, [r4, #1]
 800c922:	2b2a      	cmp	r3, #42	; 0x2a
 800c924:	d135      	bne.n	800c992 <_vfiprintf_r+0x1ce>
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	1d1a      	adds	r2, r3, #4
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	9203      	str	r2, [sp, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	bfb8      	it	lt
 800c932:	f04f 33ff 	movlt.w	r3, #4294967295
 800c936:	3402      	adds	r4, #2
 800c938:	9305      	str	r3, [sp, #20]
 800c93a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca20 <_vfiprintf_r+0x25c>
 800c93e:	7821      	ldrb	r1, [r4, #0]
 800c940:	2203      	movs	r2, #3
 800c942:	4650      	mov	r0, sl
 800c944:	f7f3 fc4c 	bl	80001e0 <memchr>
 800c948:	b140      	cbz	r0, 800c95c <_vfiprintf_r+0x198>
 800c94a:	2340      	movs	r3, #64	; 0x40
 800c94c:	eba0 000a 	sub.w	r0, r0, sl
 800c950:	fa03 f000 	lsl.w	r0, r3, r0
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	4303      	orrs	r3, r0
 800c958:	3401      	adds	r4, #1
 800c95a:	9304      	str	r3, [sp, #16]
 800c95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c960:	482c      	ldr	r0, [pc, #176]	; (800ca14 <_vfiprintf_r+0x250>)
 800c962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c966:	2206      	movs	r2, #6
 800c968:	f7f3 fc3a 	bl	80001e0 <memchr>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d03f      	beq.n	800c9f0 <_vfiprintf_r+0x22c>
 800c970:	4b29      	ldr	r3, [pc, #164]	; (800ca18 <_vfiprintf_r+0x254>)
 800c972:	bb1b      	cbnz	r3, 800c9bc <_vfiprintf_r+0x1f8>
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	3307      	adds	r3, #7
 800c978:	f023 0307 	bic.w	r3, r3, #7
 800c97c:	3308      	adds	r3, #8
 800c97e:	9303      	str	r3, [sp, #12]
 800c980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c982:	443b      	add	r3, r7
 800c984:	9309      	str	r3, [sp, #36]	; 0x24
 800c986:	e767      	b.n	800c858 <_vfiprintf_r+0x94>
 800c988:	fb0c 3202 	mla	r2, ip, r2, r3
 800c98c:	460c      	mov	r4, r1
 800c98e:	2001      	movs	r0, #1
 800c990:	e7a5      	b.n	800c8de <_vfiprintf_r+0x11a>
 800c992:	2300      	movs	r3, #0
 800c994:	3401      	adds	r4, #1
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	4619      	mov	r1, r3
 800c99a:	f04f 0c0a 	mov.w	ip, #10
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a4:	3a30      	subs	r2, #48	; 0x30
 800c9a6:	2a09      	cmp	r2, #9
 800c9a8:	d903      	bls.n	800c9b2 <_vfiprintf_r+0x1ee>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0c5      	beq.n	800c93a <_vfiprintf_r+0x176>
 800c9ae:	9105      	str	r1, [sp, #20]
 800c9b0:	e7c3      	b.n	800c93a <_vfiprintf_r+0x176>
 800c9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e7f0      	b.n	800c99e <_vfiprintf_r+0x1da>
 800c9bc:	ab03      	add	r3, sp, #12
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	462a      	mov	r2, r5
 800c9c2:	4b16      	ldr	r3, [pc, #88]	; (800ca1c <_vfiprintf_r+0x258>)
 800c9c4:	a904      	add	r1, sp, #16
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7fb fddc 	bl	8008584 <_printf_float>
 800c9cc:	4607      	mov	r7, r0
 800c9ce:	1c78      	adds	r0, r7, #1
 800c9d0:	d1d6      	bne.n	800c980 <_vfiprintf_r+0x1bc>
 800c9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9d4:	07d9      	lsls	r1, r3, #31
 800c9d6:	d405      	bmi.n	800c9e4 <_vfiprintf_r+0x220>
 800c9d8:	89ab      	ldrh	r3, [r5, #12]
 800c9da:	059a      	lsls	r2, r3, #22
 800c9dc:	d402      	bmi.n	800c9e4 <_vfiprintf_r+0x220>
 800c9de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9e0:	f7fe ff76 	bl	800b8d0 <__retarget_lock_release_recursive>
 800c9e4:	89ab      	ldrh	r3, [r5, #12]
 800c9e6:	065b      	lsls	r3, r3, #25
 800c9e8:	f53f af12 	bmi.w	800c810 <_vfiprintf_r+0x4c>
 800c9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ee:	e711      	b.n	800c814 <_vfiprintf_r+0x50>
 800c9f0:	ab03      	add	r3, sp, #12
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <_vfiprintf_r+0x258>)
 800c9f8:	a904      	add	r1, sp, #16
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7fc f866 	bl	8008acc <_printf_i>
 800ca00:	e7e4      	b.n	800c9cc <_vfiprintf_r+0x208>
 800ca02:	bf00      	nop
 800ca04:	0800d190 	.word	0x0800d190
 800ca08:	0800d1b0 	.word	0x0800d1b0
 800ca0c:	0800d170 	.word	0x0800d170
 800ca10:	0800d3ac 	.word	0x0800d3ac
 800ca14:	0800d3b6 	.word	0x0800d3b6
 800ca18:	08008585 	.word	0x08008585
 800ca1c:	0800c79f 	.word	0x0800c79f
 800ca20:	0800d3b2 	.word	0x0800d3b2
 800ca24:	00000000 	.word	0x00000000

0800ca28 <nan>:
 800ca28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca30 <nan+0x8>
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	00000000 	.word	0x00000000
 800ca34:	7ff80000 	.word	0x7ff80000

0800ca38 <_sbrk_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4d06      	ldr	r5, [pc, #24]	; (800ca54 <_sbrk_r+0x1c>)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4604      	mov	r4, r0
 800ca40:	4608      	mov	r0, r1
 800ca42:	602b      	str	r3, [r5, #0]
 800ca44:	f7f6 fd28 	bl	8003498 <_sbrk>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d102      	bne.n	800ca52 <_sbrk_r+0x1a>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	b103      	cbz	r3, 800ca52 <_sbrk_r+0x1a>
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	20000740 	.word	0x20000740

0800ca58 <__sread>:
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca60:	f000 f92e 	bl	800ccc0 <_read_r>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	bfab      	itete	ge
 800ca68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca6c:	181b      	addge	r3, r3, r0
 800ca6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca72:	bfac      	ite	ge
 800ca74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca76:	81a3      	strhlt	r3, [r4, #12]
 800ca78:	bd10      	pop	{r4, pc}

0800ca7a <__swrite>:
 800ca7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7e:	461f      	mov	r7, r3
 800ca80:	898b      	ldrh	r3, [r1, #12]
 800ca82:	05db      	lsls	r3, r3, #23
 800ca84:	4605      	mov	r5, r0
 800ca86:	460c      	mov	r4, r1
 800ca88:	4616      	mov	r6, r2
 800ca8a:	d505      	bpl.n	800ca98 <__swrite+0x1e>
 800ca8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca90:	2302      	movs	r3, #2
 800ca92:	2200      	movs	r2, #0
 800ca94:	f000 f8b6 	bl	800cc04 <_lseek_r>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caa2:	81a3      	strh	r3, [r4, #12]
 800caa4:	4632      	mov	r2, r6
 800caa6:	463b      	mov	r3, r7
 800caa8:	4628      	mov	r0, r5
 800caaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caae:	f000 b835 	b.w	800cb1c <_write_r>

0800cab2 <__sseek>:
 800cab2:	b510      	push	{r4, lr}
 800cab4:	460c      	mov	r4, r1
 800cab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caba:	f000 f8a3 	bl	800cc04 <_lseek_r>
 800cabe:	1c43      	adds	r3, r0, #1
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	bf15      	itete	ne
 800cac4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800caca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cace:	81a3      	strheq	r3, [r4, #12]
 800cad0:	bf18      	it	ne
 800cad2:	81a3      	strhne	r3, [r4, #12]
 800cad4:	bd10      	pop	{r4, pc}

0800cad6 <__sclose>:
 800cad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cada:	f000 b84f 	b.w	800cb7c <_close_r>

0800cade <strncmp>:
 800cade:	b510      	push	{r4, lr}
 800cae0:	b16a      	cbz	r2, 800cafe <strncmp+0x20>
 800cae2:	3901      	subs	r1, #1
 800cae4:	1884      	adds	r4, r0, r2
 800cae6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800caea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800caee:	4293      	cmp	r3, r2
 800caf0:	d103      	bne.n	800cafa <strncmp+0x1c>
 800caf2:	42a0      	cmp	r0, r4
 800caf4:	d001      	beq.n	800cafa <strncmp+0x1c>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f5      	bne.n	800cae6 <strncmp+0x8>
 800cafa:	1a98      	subs	r0, r3, r2
 800cafc:	bd10      	pop	{r4, pc}
 800cafe:	4610      	mov	r0, r2
 800cb00:	e7fc      	b.n	800cafc <strncmp+0x1e>

0800cb02 <__ascii_wctomb>:
 800cb02:	b149      	cbz	r1, 800cb18 <__ascii_wctomb+0x16>
 800cb04:	2aff      	cmp	r2, #255	; 0xff
 800cb06:	bf85      	ittet	hi
 800cb08:	238a      	movhi	r3, #138	; 0x8a
 800cb0a:	6003      	strhi	r3, [r0, #0]
 800cb0c:	700a      	strbls	r2, [r1, #0]
 800cb0e:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb12:	bf98      	it	ls
 800cb14:	2001      	movls	r0, #1
 800cb16:	4770      	bx	lr
 800cb18:	4608      	mov	r0, r1
 800cb1a:	4770      	bx	lr

0800cb1c <_write_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4d07      	ldr	r5, [pc, #28]	; (800cb3c <_write_r+0x20>)
 800cb20:	4604      	mov	r4, r0
 800cb22:	4608      	mov	r0, r1
 800cb24:	4611      	mov	r1, r2
 800cb26:	2200      	movs	r2, #0
 800cb28:	602a      	str	r2, [r5, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	f7f6 fc63 	bl	80033f6 <_write>
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	d102      	bne.n	800cb3a <_write_r+0x1e>
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	b103      	cbz	r3, 800cb3a <_write_r+0x1e>
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
 800cb3c:	20000740 	.word	0x20000740

0800cb40 <__assert_func>:
 800cb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb42:	4614      	mov	r4, r2
 800cb44:	461a      	mov	r2, r3
 800cb46:	4b09      	ldr	r3, [pc, #36]	; (800cb6c <__assert_func+0x2c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	68d8      	ldr	r0, [r3, #12]
 800cb4e:	b14c      	cbz	r4, 800cb64 <__assert_func+0x24>
 800cb50:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <__assert_func+0x30>)
 800cb52:	9100      	str	r1, [sp, #0]
 800cb54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb58:	4906      	ldr	r1, [pc, #24]	; (800cb74 <__assert_func+0x34>)
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	f000 f81e 	bl	800cb9c <fiprintf>
 800cb60:	f000 f8c0 	bl	800cce4 <abort>
 800cb64:	4b04      	ldr	r3, [pc, #16]	; (800cb78 <__assert_func+0x38>)
 800cb66:	461c      	mov	r4, r3
 800cb68:	e7f3      	b.n	800cb52 <__assert_func+0x12>
 800cb6a:	bf00      	nop
 800cb6c:	2000000c 	.word	0x2000000c
 800cb70:	0800d3bd 	.word	0x0800d3bd
 800cb74:	0800d3ca 	.word	0x0800d3ca
 800cb78:	0800d3f8 	.word	0x0800d3f8

0800cb7c <_close_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d06      	ldr	r5, [pc, #24]	; (800cb98 <_close_r+0x1c>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	602b      	str	r3, [r5, #0]
 800cb88:	f7f6 fc51 	bl	800342e <_close>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_close_r+0x1a>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_close_r+0x1a>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	20000740 	.word	0x20000740

0800cb9c <fiprintf>:
 800cb9c:	b40e      	push	{r1, r2, r3}
 800cb9e:	b503      	push	{r0, r1, lr}
 800cba0:	4601      	mov	r1, r0
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	4805      	ldr	r0, [pc, #20]	; (800cbbc <fiprintf+0x20>)
 800cba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbaa:	6800      	ldr	r0, [r0, #0]
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	f7ff fe09 	bl	800c7c4 <_vfiprintf_r>
 800cbb2:	b002      	add	sp, #8
 800cbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb8:	b003      	add	sp, #12
 800cbba:	4770      	bx	lr
 800cbbc:	2000000c 	.word	0x2000000c

0800cbc0 <_fstat_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d07      	ldr	r5, [pc, #28]	; (800cbe0 <_fstat_r+0x20>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	4611      	mov	r1, r2
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	f7f6 fc3a 	bl	8003446 <_fstat>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d102      	bne.n	800cbdc <_fstat_r+0x1c>
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	b103      	cbz	r3, 800cbdc <_fstat_r+0x1c>
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000740 	.word	0x20000740

0800cbe4 <_isatty_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d06      	ldr	r5, [pc, #24]	; (800cc00 <_isatty_r+0x1c>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f6 fc39 	bl	8003466 <_isatty>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_isatty_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_isatty_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20000740 	.word	0x20000740

0800cc04 <_lseek_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	; (800cc24 <_lseek_r+0x20>)
 800cc08:	4604      	mov	r4, r0
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	602a      	str	r2, [r5, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	f7f6 fc32 	bl	800347c <_lseek>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d102      	bne.n	800cc22 <_lseek_r+0x1e>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b103      	cbz	r3, 800cc22 <_lseek_r+0x1e>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	20000740 	.word	0x20000740

0800cc28 <memmove>:
 800cc28:	4288      	cmp	r0, r1
 800cc2a:	b510      	push	{r4, lr}
 800cc2c:	eb01 0402 	add.w	r4, r1, r2
 800cc30:	d902      	bls.n	800cc38 <memmove+0x10>
 800cc32:	4284      	cmp	r4, r0
 800cc34:	4623      	mov	r3, r4
 800cc36:	d807      	bhi.n	800cc48 <memmove+0x20>
 800cc38:	1e43      	subs	r3, r0, #1
 800cc3a:	42a1      	cmp	r1, r4
 800cc3c:	d008      	beq.n	800cc50 <memmove+0x28>
 800cc3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc46:	e7f8      	b.n	800cc3a <memmove+0x12>
 800cc48:	4402      	add	r2, r0
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	428a      	cmp	r2, r1
 800cc4e:	d100      	bne.n	800cc52 <memmove+0x2a>
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc5a:	e7f7      	b.n	800cc4c <memmove+0x24>

0800cc5c <__malloc_lock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	; (800cc64 <__malloc_lock+0x8>)
 800cc5e:	f7fe be36 	b.w	800b8ce <__retarget_lock_acquire_recursive>
 800cc62:	bf00      	nop
 800cc64:	20000738 	.word	0x20000738

0800cc68 <__malloc_unlock>:
 800cc68:	4801      	ldr	r0, [pc, #4]	; (800cc70 <__malloc_unlock+0x8>)
 800cc6a:	f7fe be31 	b.w	800b8d0 <__retarget_lock_release_recursive>
 800cc6e:	bf00      	nop
 800cc70:	20000738 	.word	0x20000738

0800cc74 <_realloc_r>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	4607      	mov	r7, r0
 800cc78:	4614      	mov	r4, r2
 800cc7a:	460e      	mov	r6, r1
 800cc7c:	b921      	cbnz	r1, 800cc88 <_realloc_r+0x14>
 800cc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc82:	4611      	mov	r1, r2
 800cc84:	f7ff bbbe 	b.w	800c404 <_malloc_r>
 800cc88:	b922      	cbnz	r2, 800cc94 <_realloc_r+0x20>
 800cc8a:	f7ff fb6b 	bl	800c364 <_free_r>
 800cc8e:	4625      	mov	r5, r4
 800cc90:	4628      	mov	r0, r5
 800cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc94:	f000 f82d 	bl	800ccf2 <_malloc_usable_size_r>
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d20f      	bcs.n	800ccbc <_realloc_r+0x48>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4638      	mov	r0, r7
 800cca0:	f7ff fbb0 	bl	800c404 <_malloc_r>
 800cca4:	4605      	mov	r5, r0
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d0f2      	beq.n	800cc90 <_realloc_r+0x1c>
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4622      	mov	r2, r4
 800ccae:	f7fb fbb3 	bl	8008418 <memcpy>
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	f7ff fb55 	bl	800c364 <_free_r>
 800ccba:	e7e9      	b.n	800cc90 <_realloc_r+0x1c>
 800ccbc:	4635      	mov	r5, r6
 800ccbe:	e7e7      	b.n	800cc90 <_realloc_r+0x1c>

0800ccc0 <_read_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d07      	ldr	r5, [pc, #28]	; (800cce0 <_read_r+0x20>)
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	4611      	mov	r1, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	602a      	str	r2, [r5, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f7f6 fb74 	bl	80033bc <_read>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d102      	bne.n	800ccde <_read_r+0x1e>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	b103      	cbz	r3, 800ccde <_read_r+0x1e>
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	20000740 	.word	0x20000740

0800cce4 <abort>:
 800cce4:	b508      	push	{r3, lr}
 800cce6:	2006      	movs	r0, #6
 800cce8:	f000 f834 	bl	800cd54 <raise>
 800ccec:	2001      	movs	r0, #1
 800ccee:	f7f6 fb5b 	bl	80033a8 <_exit>

0800ccf2 <_malloc_usable_size_r>:
 800ccf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccf6:	1f18      	subs	r0, r3, #4
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	bfbc      	itt	lt
 800ccfc:	580b      	ldrlt	r3, [r1, r0]
 800ccfe:	18c0      	addlt	r0, r0, r3
 800cd00:	4770      	bx	lr

0800cd02 <_raise_r>:
 800cd02:	291f      	cmp	r1, #31
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4604      	mov	r4, r0
 800cd08:	460d      	mov	r5, r1
 800cd0a:	d904      	bls.n	800cd16 <_raise_r+0x14>
 800cd0c:	2316      	movs	r3, #22
 800cd0e:	6003      	str	r3, [r0, #0]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd18:	b112      	cbz	r2, 800cd20 <_raise_r+0x1e>
 800cd1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd1e:	b94b      	cbnz	r3, 800cd34 <_raise_r+0x32>
 800cd20:	4620      	mov	r0, r4
 800cd22:	f000 f831 	bl	800cd88 <_getpid_r>
 800cd26:	462a      	mov	r2, r5
 800cd28:	4601      	mov	r1, r0
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd30:	f000 b818 	b.w	800cd64 <_kill_r>
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d00a      	beq.n	800cd4e <_raise_r+0x4c>
 800cd38:	1c59      	adds	r1, r3, #1
 800cd3a:	d103      	bne.n	800cd44 <_raise_r+0x42>
 800cd3c:	2316      	movs	r3, #22
 800cd3e:	6003      	str	r3, [r0, #0]
 800cd40:	2001      	movs	r0, #1
 800cd42:	e7e7      	b.n	800cd14 <_raise_r+0x12>
 800cd44:	2400      	movs	r4, #0
 800cd46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	4798      	blx	r3
 800cd4e:	2000      	movs	r0, #0
 800cd50:	e7e0      	b.n	800cd14 <_raise_r+0x12>
	...

0800cd54 <raise>:
 800cd54:	4b02      	ldr	r3, [pc, #8]	; (800cd60 <raise+0xc>)
 800cd56:	4601      	mov	r1, r0
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	f7ff bfd2 	b.w	800cd02 <_raise_r>
 800cd5e:	bf00      	nop
 800cd60:	2000000c 	.word	0x2000000c

0800cd64 <_kill_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d07      	ldr	r5, [pc, #28]	; (800cd84 <_kill_r+0x20>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	4611      	mov	r1, r2
 800cd70:	602b      	str	r3, [r5, #0]
 800cd72:	f7f6 fb09 	bl	8003388 <_kill>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	d102      	bne.n	800cd80 <_kill_r+0x1c>
 800cd7a:	682b      	ldr	r3, [r5, #0]
 800cd7c:	b103      	cbz	r3, 800cd80 <_kill_r+0x1c>
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	bf00      	nop
 800cd84:	20000740 	.word	0x20000740

0800cd88 <_getpid_r>:
 800cd88:	f7f6 baf6 	b.w	8003378 <_getpid>

0800cd8c <_init>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr

0800cd98 <_fini>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	bf00      	nop
 800cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9e:	bc08      	pop	{r3}
 800cda0:	469e      	mov	lr, r3
 800cda2:	4770      	bx	lr
