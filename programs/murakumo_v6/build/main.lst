ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB252:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.</center></h2>
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****  * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****  * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****  *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****  *
  17:Core/Src/main.c ****  ********************************************dsd**********************************
  18:Core/Src/main.c ****  */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "stdio.h"
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** //#include "math.h"
  29:Core/Src/main.c **** #include "ICM20648.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** #ifdef __GNUC__
  41:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  42:Core/Src/main.c **** #else
  43:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  44:Core/Src/main.c **** #endif
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** #define PLAY 1
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** #define D_ANALOG 0
  49:Core/Src/main.c **** #define D_MOTOR 0
  50:Core/Src/main.c **** #define D_SIDESENS 0	//
  51:Core/Src/main.c **** #define D_ENCODER 0	// Debug Encoder
  52:Core/Src/main.c **** #define D_PWM 0
  53:Core/Src/main.c **** #define D_ROTARY 0
  54:Core/Src/main.c **** #define D_SWITCH 0
  55:Core/Src/main.c **** #define D_IMU 0
  56:Core/Src/main.c **** #define D_LED 0
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** #define USE_ANALOG 0
  59:Core/Src/main.c **** #define USE_MOTOR 1
  60:Core/Src/main.c **** #define USE_SIDESENSOR 1	// Use SideSensor
  61:Core/Src/main.c **** #define USE_ENCODER 1
  62:Core/Src/main.c **** #define USE_ROTARY 1
  63:Core/Src/main.c **** #define USE_SWITCH 1
  64:Core/Src/main.c **** #define USE_FLASH 0
  65:Core/Src/main.c **** #define USE_IMU 0
  66:Core/Src/main.c **** #define USE_BUZZER 0
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** #define ATTACH_LONGSENSOR 0	// use normal sensor and long sensor
  69:Core/Src/main.c **** #define USE_LONGSENSOR 0	// only use long sensor
  70:Core/Src/main.c **** #define CSV_FORMAT 0	//
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** #define SECOND 1
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PD */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  77:Core/Src/main.c **** /* USER CODE BEGIN PM */
  78:Core/Src/main.c **** #if USE_FLASH
  79:Core/Src/main.c **** #define BACKUP_FLASH_SECTOR_NUM FLASH_SECTOR_11
  80:Core/Src/main.c **** #define BACKUP_FLASH_SECTOR_SIZE (1024 * 16)
  81:Core/Src/main.c **** #define ENC_SIZE 128
  82:Core/Src/main.c **** #endif
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** #define ADC_CONVERTED_DATA_BUFFER_SIZE 16	// ADC Channel Count
  85:Core/Src/main.c **** #define SENSGETCOUNT 9
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** #define ENCODER_MIDDLE (65536/2)
  88:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 3


  89:Core/Src/main.c **** #define PI 3	// PI
  90:Core/Src/main.c **** #define TIREDIAMETER 21000	// um
  91:Core/Src/main.c **** #define PULSEPERROTATE 1024	// Pulse / Rotate
  92:Core/Src/main.c **** #define ENCODERPERIOD 1 // ms
  93:Core/Src/main.c **** #define PINIONGEAR 25
  94:Core/Src/main.c **** #define SPURGEAR 64
  95:Core/Src/main.c **** #define COURSELENGTH 60
  96:Core/Src/main.c **** #define TREAD 103000
  97:Core/Src/main.c **** #define RMIN 100000	// MINIMUM RADIUS
  98:Core/Src/main.c **** #define BATTERYVOLTAGE 8.0f	// V
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** #define COMMONSPEED1 100	// 700 // 570
 101:Core/Src/main.c **** #define KPL1 8	// 30 // 25
 102:Core/Src/main.c **** #define KPR1 8	// 30 // 25
 103:Core/Src/main.c **** #define KDL1 0	// 8  // 10
 104:Core/Src/main.c **** #define KDR1 0	// 8  // 10
 105:Core/Src/main.c **** #define KIL1 0
 106:Core/Src/main.c **** #define KIR1 0
 107:Core/Src/main.c **** #define COMMONSPEED2 1000	// 700 // 570
 108:Core/Src/main.c **** #define KPL2 40	// 30 // 25
 109:Core/Src/main.c **** #define KPR2 40	// 30 // 25
 110:Core/Src/main.c **** #define KDL2 0	// 8  // 10
 111:Core/Src/main.c **** #define KDR2 0	// 8  // 10
 112:Core/Src/main.c **** #define KIL2 0
 113:Core/Src/main.c **** #define KIR2 0
 114:Core/Src/main.c **** #define COMMONSPEED3 450	// 700 // 570
 115:Core/Src/main.c **** #define KPL3 25	// 30 // 25
 116:Core/Src/main.c **** #define KPR3 25	// 30 // 25
 117:Core/Src/main.c **** #define KDL3 10	// 8  // 10
 118:Core/Src/main.c **** #define KDR3 10	// 8  // 10
 119:Core/Src/main.c **** #define KIL3 0
 120:Core/Src/main.c **** #define KIR3 0
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** #define PWMMAX 1000 // 3360
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** #if D_PWM
 125:Core/Src/main.c **** #define STATICPWM 1
 126:Core/Src/main.c **** #endif
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** #define D_VELOCITY_CONTROL 1
 129:Core/Src/main.c **** #define D_VELOCITY_CONTROL_TIMER 1
 130:Core/Src/main.c **** #define D_VELOCITY_CONTROL_IN_WHILE 0
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 133:Core/Src/main.c **** #define VELOCITY_TARGET 0 	// MAX 8500 // mm/s
 134:Core/Src/main.c **** #define VELOCITY_MAX 8500
 135:Core/Src/main.c **** #define VELOCITY_CONTROL_RATE 1
 136:Core/Src/main.c **** #define VKPL 0	// LEFT
 137:Core/Src/main.c **** #define VKIL 0
 138:Core/Src/main.c **** #define VKPR 15	// RIGHT
 139:Core/Src/main.c **** #define VKIR 0
 140:Core/Src/main.c **** #if D_VELOCITY_CONTROL_TIMER
 141:Core/Src/main.c **** #define STOPTIME 13188
 142:Core/Src/main.c **** #endif
 143:Core/Src/main.c **** #endif
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** #define ESC_MAG	"\x1b[35m"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 4


 146:Core/Src/main.c **** #define ESC_RED "\x1b[31m"
 147:Core/Src/main.c **** #define ESC_YEL	"\x1b[33m"
 148:Core/Src/main.c **** #define ESC_GRE	"\x1b[32m"
 149:Core/Src/main.c **** #define ESC_CYA	"\x1b[36m"
 150:Core/Src/main.c **** #define ESC_BLU	"\x1b[34m"
 151:Core/Src/main.c **** #define ESC_DEF "\x1b[39m"
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE END PM */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 156:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 157:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** TIM_HandleTypeDef htim1;
 164:Core/Src/main.c **** TIM_HandleTypeDef htim3;
 165:Core/Src/main.c **** TIM_HandleTypeDef htim4;
 166:Core/Src/main.c **** TIM_HandleTypeDef htim6;
 167:Core/Src/main.c **** TIM_HandleTypeDef htim10;
 168:Core/Src/main.c **** TIM_HandleTypeDef htim11;
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** UART_HandleTypeDef huart6;
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* USER CODE BEGIN PV */
 173:Core/Src/main.c **** #if USE_FLASH
 174:Core/Src/main.c **** typedef struct {
 175:Core/Src/main.c **** 	uint8_t svl[ENC_SIZE];
 176:Core/Src/main.c **** 	uint8_t svr[ENC_SIZE];
 177:Core/Src/main.c **** 	uint32_t common_speed2[ENC_SIZE];
 178:Core/Src/main.c **** 	uint32_t common_speed3[ENC_SIZE];
 179:Core/Src/main.c **** //	uint16_t second[ENC_SIZE];
 180:Core/Src/main.c **** 	Inertial inertial[ENC_SIZE];
 181:Core/Src/main.c **** } FlashBuffer;
 182:Core/Src/main.c **** #endif
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** // analog
 185:Core/Src/main.c **** uint16_t analograw[ADC_CONVERTED_DATA_BUFFER_SIZE];	// Analog Data
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** #if ATTACH_LONGSENSOR	// use normal sensor and long sensor
 188:Core/Src/main.c **** #define CALIBRATIONSIZE 16
 189:Core/Src/main.c **** #else
 190:Core/Src/main.c **** #if USE_LONGSENSOR	// only use long sensor
 191:Core/Src/main.c **** #define CALIBRATIONSIZE 4
 192:Core/Src/main.c **** #else
 193:Core/Src/main.c **** #define CALIBRATIONSIZE 12
 194:Core/Src/main.c **** #endif
 195:Core/Src/main.c **** #endif
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** uint16_t analog[CALIBRATIONSIZE];
 198:Core/Src/main.c **** uint16_t analogmax[CALIBRATIONSIZE];
 199:Core/Src/main.c **** uint16_t analogmin[CALIBRATIONSIZE];
 200:Core/Src/main.c **** uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];
 201:Core/Src/main.c **** 
 202:Core/Src/main.c **** uint16_t analograte[CALIBRATIONSIZE];
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 5


 203:Core/Src/main.c **** uint16_t analogr, analogl;	// Sum Right Analog Sensor, Sum Left Analog Sensor
 204:Core/Src/main.c **** int direction, beforedirection;	// = analogr - analogl
 205:Core/Src/main.c **** unsigned char sensgettime;
 206:Core/Src/main.c **** uint8_t calibrationsize;
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** double kpl, kpr, kdl, kdr, kil, kir;
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;// 0 ~ 255(2^8-1)
 211:Core/Src/main.c **** short int encoder_l, encoder_r;
 212:Core/Src/main.c **** // int vl_row, vr_row, dvl, dvr;
 213:Core/Src/main.c **** // uint8_t lengthl, lengthr, prelengthl, prelengthr, velocityl, velocityr;
 214:Core/Src/main.c **** double LENGTHPERPULSE;	// (um / pulse)
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** #if SECOND
 217:Core/Src/main.c **** // uint8_t velocity[COURSELENGTH * 1000];
 218:Core/Src/main.c **** #endif
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** #if USE_FLASH
 221:Core/Src/main.c **** const uint32_t start_address = 0x080E0000;
 222:Core/Src/main.c **** const uint32_t end_address = 0x080FFFFF;
 223:Core/Src/main.c **** FlashBuffer flash_buffer;
 224:Core/Src/main.c **** uint8_t course_state_time;
 225:Core/Src/main.c **** #endif
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** #if D_PWM
 228:Core/Src/main.c **** #define PWM_STEP_AMPLITUDE 1000		// (288 + 1024 * 3) // PWM Pulse Amplitude
 229:Core/Src/main.c **** #define PWM_STEP_OMEGA 100	// PWM Step Omega (unit mrad / s)
 230:Core/Src/main.c **** uint32_t pwmstepoutput;	// PWM Duty
 231:Core/Src/main.c **** uint32_t pwmsteptime;	// PWM Step Time
 232:Core/Src/main.c **** char pwmstepud;	// PWM Step upword or downword
 233:Core/Src/main.c **** #endif
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** #if D_ENCODER
 236:Core/Src/main.c **** uint16_t d_encoder_left, dd_encoder_left, pre_d_encoder_left, d_encoder_right,
 237:Core/Src/main.c **** 		dd_encoder_right, pre_d_encoder_right;
 238:Core/Src/main.c **** uint16_t enc1, enc2, enc3;
 239:Core/Src/main.c **** #endif
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 242:Core/Src/main.c **** uint16_t stoptime;
 243:Core/Src/main.c **** //int velocity, velocity_error, s_velocity_error, velocity_next, velocity_raw;
 244:Core/Src/main.c **** // int nextspeed;
 245:Core/Src/main.c **** double velocity_l, velocity_error_l, s_velocity_error_l, velocity_next_l, velocity_l_raw, nextspeed
 246:Core/Src/main.c **** double velocity_r, velocity_error_r, s_velocity_error_r, velocity_next_r, velocity_r_raw, nextspeed
 247:Core/Src/main.c **** #endif
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** // motor
 250:Core/Src/main.c **** short int commonspeed;
 251:Core/Src/main.c **** double leftmotor;
 252:Core/Src/main.c **** double rightmotor;
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** // switch
 255:Core/Src/main.c **** uint8_t rotary_value;
 256:Core/Src/main.c **** char enter;
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** // flag
 259:Core/Src/main.c **** uint8_t motorenable;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c **** /* USER CODE END PV */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 264:Core/Src/main.c **** void SystemClock_Config(void);
 265:Core/Src/main.c **** static void MX_GPIO_Init(void);
 266:Core/Src/main.c **** static void MX_DMA_Init(void);
 267:Core/Src/main.c **** static void MX_ADC1_Init(void);
 268:Core/Src/main.c **** static void MX_USART6_UART_Init(void);
 269:Core/Src/main.c **** static void MX_TIM6_Init(void);
 270:Core/Src/main.c **** static void MX_TIM4_Init(void);
 271:Core/Src/main.c **** static void MX_TIM1_Init(void);
 272:Core/Src/main.c **** static void MX_TIM3_Init(void);
 273:Core/Src/main.c **** static void MX_TIM10_Init(void);
 274:Core/Src/main.c **** static void MX_TIM11_Init(void);
 275:Core/Src/main.c **** static void MX_SPI2_Init(void);
 276:Core/Src/main.c **** static void MX_I2C1_Init(void);
 277:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** PUTCHAR_PROTOTYPE;
 280:Core/Src/main.c **** void led_rgb(char r, char g, char b);
 281:Core/Src/main.c **** void running_initialize();
 282:Core/Src/main.c **** void running_finalize();
 283:Core/Src/main.c **** void sensor_initialize();
 284:Core/Src/main.c **** void sensor_finalize();
 285:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle);
 286:Core/Src/main.c **** double power(double, double);
 287:Core/Src/main.c **** #if USE_ENCODER
 288:Core/Src/main.c **** void encoder_initialize();
 289:Core/Src/main.c **** void encoder_finalize();
 290:Core/Src/main.c **** #endif
 291:Core/Src/main.c **** #if USE_FLASH
 292:Core/Src/main.c **** void eraseFlash(void);
 293:Core/Src/main.c **** void writeFlash(uint32_t, uint8_t*, uint32_t);
 294:Core/Src/main.c **** void loadFlash(uint32_t, uint8_t*, uint32_t);
 295:Core/Src/main.c **** #endif
 296:Core/Src/main.c **** void d_print();
 297:Core/Src/main.c **** #if USE_IMU
 298:Core/Src/main.c **** void IMU_printf(Inertial*);
 299:Core/Src/main.c **** void IMU_raw_printf();
 300:Core/Src/main.c **** #endif
 301:Core/Src/main.c **** int low_pass_filter(int val, int pre_val, unsigned short int gamma);
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 304:Core/Src/main.c **** 	if (htim->Instance == TIM6) {
 305:Core/Src/main.c **** #if D_LED
 306:Core/Src/main.c **** 		HAL_TIM_Base_Start_IT(&htim6);	// PID
 307:Core/Src/main.c **** 
 308:Core/Src/main.c **** 		if(enter)
 309:Core/Src/main.c **** 		{
 310:Core/Src/main.c **** 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 311:Core/Src/main.c **** 			enter = 0;
 312:Core/Src/main.c **** 		}
 313:Core/Src/main.c **** 		else
 314:Core/Src/main.c **** 		{
 315:Core/Src/main.c **** 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 316:Core/Src/main.c **** 			enter = 1;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 7


 317:Core/Src/main.c **** 		}
 318:Core/Src/main.c **** #else
 319:Core/Src/main.c **** #if USE_MOTOR
 320:Core/Src/main.c **** #if D_VELOCITY_CONTROL_TIMER
 321:Core/Src/main.c **** 		if(stoptime < STOPTIME)
 322:Core/Src/main.c **** 		{
 323:Core/Src/main.c **** 			stoptime++;
 324:Core/Src/main.c **** 		}
 325:Core/Src/main.c **** 		else
 326:Core/Src/main.c **** 		{
 327:Core/Src/main.c **** 			motorenable = 0;
 328:Core/Src/main.c **** 		}
 329:Core/Src/main.c **** #endif // D_VELOCITY_CONTROL_TIMER
 330:Core/Src/main.c **** 
 331:Core/Src/main.c **** 		if (motorenable)
 332:Core/Src/main.c **** 		{
 333:Core/Src/main.c **** #if !STATICMOTORPWM
 334:Core/Src/main.c **** #if USE_ANALOG
 335:Core/Src/main.c **** 			analogl = 0;
 336:Core/Src/main.c **** 			analogr = 0;
 337:Core/Src/main.c **** 			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 338:Core/Src/main.c **** 			{
 339:Core/Src/main.c **** 				uint16_t analogbuf = analog[i];
 340:Core/Src/main.c **** 				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
 341:Core/Src/main.c **** 				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
 342:Core/Src/main.c **** 				if(analogmax[i] < analogbuf)
 343:Core/Src/main.c **** 				{
 344:Core/Src/main.c **** 					analogmax[i] = analogbuf;
 345:Core/Src/main.c **** 				}
 346:Core/Src/main.c **** 				if(analogmin[i] > analogbuf)
 347:Core/Src/main.c **** 				{
 348:Core/Src/main.c **** 					analogmin[i] = analogbuf;
 349:Core/Src/main.c **** 				}
 350:Core/Src/main.c **** 
 351:Core/Src/main.c **** 				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** 				if(i % 2 == 0)
 354:Core/Src/main.c **** 				{
 355:Core/Src/main.c **** 				  analogl += analograte[i];
 356:Core/Src/main.c **** 				}
 357:Core/Src/main.c **** 				else
 358:Core/Src/main.c **** 				{
 359:Core/Src/main.c **** 				  analogr += analograte[i];
 360:Core/Src/main.c **** 				}
 361:Core/Src/main.c **** 			}
 362:Core/Src/main.c **** 			switch(rotary_value)
 363:Core/Src/main.c **** 			{
 364:Core/Src/main.c **** 				case 0x1:
 365:Core/Src/main.c **** //					commonspeed = COMMONSPEED1;
 366:Core/Src/main.c **** 					break;
 367:Core/Src/main.c **** 				case 0x2:
 368:Core/Src/main.c **** #if USE_FLASH
 369:Core/Src/main.c **** 					commonspeed = flash_buffer.common_speed2[course_state_time];
 370:Core/Src/main.c **** #endif
 371:Core/Src/main.c **** 					break;
 372:Core/Src/main.c **** 				case 0x3:
 373:Core/Src/main.c **** #if USE_FLASH
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 8


 374:Core/Src/main.c **** 					commonspeed = flash_buffer.common_speed3[course_state_time];
 375:Core/Src/main.c **** #endif
 376:Core/Src/main.c **** 					break;
 377:Core/Src/main.c **** 				case 0xE:
 378:Core/Src/main.c **** 					break;
 379:Core/Src/main.c **** 				default:
 380:Core/Src/main.c **** 					commonspeed = 0;
 381:Core/Src/main.c **** 					break;
 382:Core/Src/main.c **** 			}
 383:Core/Src/main.c **** 			// ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
 384:Core/Src/main.c **** 			// When ( direction > 0 ) , must turn right.
 385:Core/Src/main.c **** 			direction = (analogl - analogr);	// difference
 386:Core/Src/main.c **** #endif // USE_ANALOG
 387:Core/Src/main.c **** #if USE_ANALOG
 388:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** 			// left
 391:Core/Src/main.c **** 			if(nextspeed_l > 0)
 392:Core/Src/main.c **** 			{
 393:Core/Src/main.c **** 				leftmotor = nextspeed_l + direction / CALIBRATIONSIZE / 2 * kpl + (direction - beforedirection)
 394:Core/Src/main.c **** 			}
 395:Core/Src/main.c **** 			else
 396:Core/Src/main.c **** 			{
 397:Core/Src/main.c **** 				leftmotor = nextspeed_r - direction / CALIBRATIONSIZE / 2 * kpl - (direction - beforedirection)
 398:Core/Src/main.c **** 			}
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** 			// right
 401:Core/Src/main.c **** 			if(nextspeed_r > 0)
 402:Core/Src/main.c **** 			{
 403:Core/Src/main.c **** 				rightmotor = nextspeed_l - direction / CALIBRATIONSIZE / 2 * kpr - (direction - beforedirection
 404:Core/Src/main.c **** 			}
 405:Core/Src/main.c **** 			else
 406:Core/Src/main.c **** 			{
 407:Core/Src/main.c **** 				rightmotor = nextspeed_r + direction / CALIBRATIONSIZE / 2 * kpr + (direction - beforedirection
 408:Core/Src/main.c **** 			}
 409:Core/Src/main.c **** #else
 410:Core/Src/main.c **** 			if(commonspeed > 0)
 411:Core/Src/main.c **** 			{
 412:Core/Src/main.c **** 				leftmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * kpl + (direction - beforedirection)
 413:Core/Src/main.c **** 				rightmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * kpr - (direction - beforedirection
 414:Core/Src/main.c **** 			}
 415:Core/Src/main.c **** 			else
 416:Core/Src/main.c **** 			{
 417:Core/Src/main.c **** 				leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * kpl - (direction - beforedirection)
 418:Core/Src/main.c **** 				rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * kpr + (direction - beforedirection
 419:Core/Src/main.c **** 			}
 420:Core/Src/main.c **** #endif	// D_VELOCITY_CONTROL
 421:Core/Src/main.c **** #endif	// USE_ANALOG
 422:Core/Src/main.c **** #if !USE_ANALOG && D_VELOCITY_CONTROL
 423:Core/Src/main.c **** 			leftmotor = nextspeed_l;
 424:Core/Src/main.c **** 			rightmotor = nextspeed_r;
 425:Core/Src/main.c **** #endif	// !USE_ANALOG
 426:Core/Src/main.c **** #if USE_ANALOG
 427:Core/Src/main.c **** 			beforedirection = direction;
 428:Core/Src/main.c **** #endif	// USE_ANALOG
 429:Core/Src/main.c **** #else	// !STATICMOTORPWM
 430:Core/Src/main.c **** 			leftmotor = COMMONSPEED1;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 9


 431:Core/Src/main.c **** 			rightmotor = COMMONSPEED1;
 432:Core/Src/main.c **** #endif	// !STATICMOTORPWM
 433:Core/Src/main.c **** 		}
 434:Core/Src/main.c **** 		else	// if(motorenable)
 435:Core/Src/main.c **** 		{
 436:Core/Src/main.c **** 			leftmotor = 0;
 437:Core/Src/main.c **** 			rightmotor = 0;
 438:Core/Src/main.c **** 		}
 439:Core/Src/main.c **** 		if(leftmotor < 0)
 440:Core/Src/main.c **** 		{
 441:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 442:Core/Src/main.c **** 		  leftmotor = leftmotor * -1;
 443:Core/Src/main.c **** 		}
 444:Core/Src/main.c **** 		else
 445:Core/Src/main.c **** 		{
 446:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 447:Core/Src/main.c **** 		}
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** 		if(rightmotor < 0)
 450:Core/Src/main.c **** 		{
 451:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 452:Core/Src/main.c **** 		  rightmotor = rightmotor * -1;
 453:Core/Src/main.c **** 		}
 454:Core/Src/main.c **** 		else
 455:Core/Src/main.c **** 		{
 456:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 457:Core/Src/main.c **** 		}
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** 		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 460:Core/Src/main.c **** 		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 461:Core/Src/main.c **** #endif
 462:Core/Src/main.c **** 
 463:Core/Src/main.c **** #if !D_PWM
 464:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 465:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 466:Core/Src/main.c **** #else
 467:Core/Src/main.c **** #if !STATICPWM
 468:Core/Src/main.c **** 		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))	// SW1
 469:Core/Src/main.c **** 		{
 470:Core/Src/main.c **** 			pwmstepoutput = PWM_STEP_OMEGA * pwmsteptime / 1000;
 471:Core/Src/main.c **** 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 472:Core/Src/main.c **** 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 473:Core/Src/main.c **** 			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwmstepoutput);
 474:Core/Src/main.c **** 			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwmstepoutput);
 475:Core/Src/main.c **** 			pwmstepud = (PWM_STEP_AMPLITUDE <= pwmstepoutput) ? 255 : (0 >= pwmstepoutput) ? 1 : pwmstepud;
 476:Core/Src/main.c **** 			pwmsteptime = (pwmstepud == 255) ? pwmsteptime - 1 : pwmsteptime + 1;
 477:Core/Src/main.c **** 		}
 478:Core/Src/main.c **** #else	// !STATICPWM
 479:Core/Src/main.c **** 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 480:Core/Src/main.c **** 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 481:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, COMMONSPEED1);
 482:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED1);
 483:Core/Src/main.c **** #endif	// STATICPWM
 484:Core/Src/main.c **** #endif	// D_PWM
 485:Core/Src/main.c **** #endif	// !     D_LED
 486:Core/Src/main.c **** 	}	// TIM6
 487:Core/Src/main.c **** 	if (htim->Instance == TIM10)	// TIM10 // 1ms
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 10


 488:Core/Src/main.c **** 	{
 489:Core/Src/main.c **** #if USE_SIDESENSOR
 490:Core/Src/main.c **** 		unsigned char subsens, first, second;
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** 		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 493:Core/Src/main.c **** 		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** 		if (subsens != subsensbuf) {
 496:Core/Src/main.c **** 			subsensbuf = subsens;
 497:Core/Src/main.c **** 			marker += subsens << (2 * sidedeltacount);
 498:Core/Src/main.c **** 			if (subsens == 0b00 && sidedeltacount != 0) {
 499:Core/Src/main.c **** 				first = (marker & 0b0011);
 500:Core/Src/main.c **** 				second = (marker & 0b1100) >> 2;
 501:Core/Src/main.c **** 				if (second == 0b00) {
 502:Core/Src/main.c **** 					if (first == 0b01) {
 503:Core/Src/main.c **** 						// right -> stop
 504:Core/Src/main.c **** 						markerstate = 0b01;
 505:Core/Src/main.c **** 						if (rightmarkercount == 0) {
 506:Core/Src/main.c **** 							rightmarkercount++;
 507:Core/Src/main.c **** 						} else if (rightmarkercount == 1) {
 508:Core/Src/main.c **** 							enter = 0;
 509:Core/Src/main.c **** 						}
 510:Core/Src/main.c **** 					} else if (first == 0b10) {
 511:Core/Src/main.c **** 						// left -> curve
 512:Core/Src/main.c **** 						markerstate = 0b10;
 513:Core/Src/main.c **** #if USE_FLASH
 514:Core/Src/main.c **** 						course_state_time++;
 515:Core/Src/main.c **** 						if (course_state_time >= ENC_SIZE) {
 516:Core/Src/main.c **** 							motorenable = 0;
 517:Core/Src/main.c **** 						}
 518:Core/Src/main.c **** #endif
 519:Core/Src/main.c **** 					} else {
 520:Core/Src/main.c **** 						// cross
 521:Core/Src/main.c **** 						markerstate = 0b11;
 522:Core/Src/main.c **** 					}
 523:Core/Src/main.c **** 				} else {
 524:Core/Src/main.c **** 					// cross
 525:Core/Src/main.c **** 					markerstate = 0b11;
 526:Core/Src/main.c **** 				}
 527:Core/Src/main.c **** 				sidedeltacount = 0;
 528:Core/Src/main.c **** 				marker = 0;
 529:Core/Src/main.c **** 				markerstate = 0;
 530:Core/Src/main.c **** 			} else {
 531:Core/Src/main.c **** 				sidedeltacount++;
 532:Core/Src/main.c **** 			}
 533:Core/Src/main.c **** 		}
 534:Core/Src/main.c **** #endif	// USE_SIDESENSOR
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** #if USE_ENCODER
 537:Core/Src/main.c **** 		// 1ms
 538:Core/Src/main.c **** 		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 539:Core/Src/main.c **** 		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 540:Core/Src/main.c **** 
 541:Core/Src/main.c **** 		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 542:Core/Src/main.c **** 		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** 		TIM1->CNT = ENCODER_MIDDLE;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 11


 545:Core/Src/main.c **** 		TIM3->CNT = ENCODER_MIDDLE;
 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** 		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 548:Core/Src/main.c **** 		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 551:Core/Src/main.c **** #if !D_VELOCITY_CONTROL_IN_WHILE
 552:Core/Src/main.c **** 		/*
 553:Core/Src/main.c **** 		velocity_raw = (encoder_l + encoder_r) / 2 * LENGTHPERPULSE;
 554:Core/Src/main.c **** 		velocity = low_pass_filter(velocity_raw, velocity, 400);
 555:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 556:Core/Src/main.c **** 		velocity_error = (VELOCITY_TARGET - velocity);
 557:Core/Src/main.c **** 		s_velocity_error = s_velocity_error + velocity_error;
 558:Core/Src/main.c **** 		// PI
 559:Core/Src/main.c **** 		velocity_next = VKP * velocity_error + VKI * s_velocity_error;
 560:Core/Src/main.c **** 		velocity_next = velocity_next / VELOCITY_CONTROL_RATE;
 561:Core/Src/main.c **** 		nextspeed = (VELOCITY_TARGET + velocity_next) * PWMMAX / VELOCITY_MAX;
 562:Core/Src/main.c **** 		*/
 563:Core/Src/main.c **** 
 564:Core/Src/main.c **** 		// left
 565:Core/Src/main.c **** 		velocity_l_raw = encoder_l * LENGTHPERPULSE;
 566:Core/Src/main.c **** 		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 567:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 568:Core/Src/main.c **** 		velocity_error_l = (VELOCITY_TARGET*2 - velocity_l);
 569:Core/Src/main.c **** 		s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 570:Core/Src/main.c **** 		// PI
 571:Core/Src/main.c **** 		velocity_next_l = VKPL * velocity_error_l + VKIL * s_velocity_error_l;
 572:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 573:Core/Src/main.c **** 		nextspeed_l = (VELOCITY_TARGET + velocity_next_l) * PWMMAX / VELOCITY_MAX;
 574:Core/Src/main.c **** 
 575:Core/Src/main.c **** 		// right
 576:Core/Src/main.c **** 		velocity_r_raw = encoder_r * LENGTHPERPULSE;
 577:Core/Src/main.c **** 		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 578:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 579:Core/Src/main.c **** 		velocity_error_r = (VELOCITY_TARGET - velocity_r);
 580:Core/Src/main.c **** 		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 581:Core/Src/main.c **** 		// PI
 582:Core/Src/main.c **** 		velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
 583:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 584:Core/Src/main.c **** 		nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
 585:Core/Src/main.c **** #endif
 586:Core/Src/main.c **** #endif
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** #if USE_FLASH
 589:Core/Src/main.c **** 		flash_buffer.svl[course_state_time] += encoder_l * LENGTHPERPULSE
 590:Core/Src/main.c **** 				/ 1000;
 591:Core/Src/main.c **** 		flash_buffer.svr[course_state_time] += encoder_r * LENGTHPERPULSE
 592:Core/Src/main.c **** 				/ 1000;
 593:Core/Src/main.c **** #if USE_IMU
 594:Core/Src/main.c **** 		Inertial_Integral(&flash_buffer.inertial[course_state_time]);
 595:Core/Src/main.c **** #endif
 596:Core/Src/main.c **** #endif
 597:Core/Src/main.c **** 
 598:Core/Src/main.c **** 		/*
 599:Core/Src/main.c **** 		 lengthl = LENGTHPERPULSE * dvl;	// um
 600:Core/Src/main.c **** 		 lengthr = LENGTHPERPULSE * dvr;	// um
 601:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 12


 602:Core/Src/main.c **** 		 velocityl = lengthl / ENCODERPERIOD / 1000;
 603:Core/Src/main.c **** 		 velocityr = lengthr / ENCODERPERIOD / 1000;
 604:Core/Src/main.c **** 		 */
 605:Core/Src/main.c **** #endif	// USE_ENCODER
 606:Core/Src/main.c **** 	}	// TIM10
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** 	if (htim->Instance == TIM11)	// TIM11 // 1ms
 609:Core/Src/main.c **** 	{
 610:Core/Src/main.c **** 		uint8_t rotary_value_row;
 611:Core/Src/main.c **** 		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 614:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 615:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** #if USE_BUZZER
 618:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
 619:Core/Src/main.c **** #endif
 620:Core/Src/main.c **** 
 621:Core/Src/main.c **** 		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 622:Core/Src/main.c **** 				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 623:Core/Src/main.c **** 			enter = 1;
 624:Core/Src/main.c **** 		}
 625:Core/Src/main.c **** 		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 626:Core/Src/main.c **** 				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 627:Core/Src/main.c **** 			enter = 0;
 628:Core/Src/main.c **** 		}
 629:Core/Src/main.c **** 	}
 630:Core/Src/main.c **** 
 631:Core/Src/main.c **** 	/*
 632:Core/Src/main.c **** 	if (htim->Instance == TIM13)	// TIM13 // 1ms
 633:Core/Src/main.c **** 	{
 634:Core/Src/main.c **** 	}
 635:Core/Src/main.c **** 
 636:Core/Src/main.c **** 	if (htim->Instance == TIM7)	// F // 0.1ms
 637:Core/Src/main.c **** 	{
 638:Core/Src/main.c **** 	}
 639:Core/Src/main.c **** 	*/
 640:Core/Src/main.c **** }
 641:Core/Src/main.c **** 
 642:Core/Src/main.c **** /* USER CODE END PFP */
 643:Core/Src/main.c **** 
 644:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 645:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 646:Core/Src/main.c **** 
 647:Core/Src/main.c **** /* USER CODE END 0 */
 648:Core/Src/main.c **** 
 649:Core/Src/main.c **** /**
 650:Core/Src/main.c ****   * @brief  The application entry point.
 651:Core/Src/main.c ****   * @retval int
 652:Core/Src/main.c ****   */
 653:Core/Src/main.c **** int main(void)
 654:Core/Src/main.c **** {
 655:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 656:Core/Src/main.c **** 
 657:Core/Src/main.c ****   /* USER CODE END 1 */
 658:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 13


 659:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 660:Core/Src/main.c **** 
 661:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 662:Core/Src/main.c ****   HAL_Init();
 663:Core/Src/main.c **** 
 664:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 665:Core/Src/main.c **** #if USE_FLASH
 666:Core/Src/main.c **** 	FlashBuffer readrom;
 667:Core/Src/main.c **** #endif
 668:Core/Src/main.c **** 
 669:Core/Src/main.c **** 	enter = 0;
 670:Core/Src/main.c **** 	motorenable = 0;
 671:Core/Src/main.c **** 	rotary_value = 0;
 672:Core/Src/main.c **** 	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 673:Core/Src/main.c **** 	commonspeed = 0;
 674:Core/Src/main.c **** #if D_PWM
 675:Core/Src/main.c **** 	pwmsteptime = 0;
 676:Core/Src/main.c **** 	pwmstepud = 1;
 677:Core/Src/main.c **** #endif
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** 	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 680:Core/Src/main.c **** 		analogmax[i] = 0;
 681:Core/Src/main.c **** 		analogmin[i] = 4096;
 682:Core/Src/main.c **** 	}
 683:Core/Src/main.c **** 
 684:Core/Src/main.c ****   /* USER CODE END Init */
 685:Core/Src/main.c **** 
 686:Core/Src/main.c ****   /* Configure the system clock */
 687:Core/Src/main.c ****   SystemClock_Config();
 688:Core/Src/main.c **** 
 689:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 690:Core/Src/main.c **** 
 691:Core/Src/main.c ****   /* USER CODE END SysInit */
 692:Core/Src/main.c **** 
 693:Core/Src/main.c ****   /* Initialize all configured peripherals */
 694:Core/Src/main.c ****   MX_GPIO_Init();
 695:Core/Src/main.c ****   MX_DMA_Init();
 696:Core/Src/main.c ****   MX_ADC1_Init();
 697:Core/Src/main.c ****   MX_USART6_UART_Init();
 698:Core/Src/main.c ****   MX_TIM6_Init();
 699:Core/Src/main.c ****   MX_TIM4_Init();
 700:Core/Src/main.c ****   MX_TIM1_Init();
 701:Core/Src/main.c ****   MX_TIM3_Init();
 702:Core/Src/main.c ****   MX_TIM10_Init();
 703:Core/Src/main.c ****   MX_TIM11_Init();
 704:Core/Src/main.c ****   MX_SPI2_Init();
 705:Core/Src/main.c ****   MX_I2C1_Init();
 706:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 707:Core/Src/main.c **** 	printf(ESC_DEF);
 708:Core/Src/main.c **** 	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** 	printf("Starting Analog Read\r\n");
 711:Core/Src/main.c **** 	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 712:Core/Src/main.c **** 		Error_Handler();
 713:Core/Src/main.c **** 	}
 714:Core/Src/main.c **** 
 715:Core/Src/main.c **** 	printf("Starting TIM11\r\n");
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 14


 716:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 717:Core/Src/main.c **** 
 718:Core/Src/main.c **** #if USE_BUZZER
 719:Core/Src/main.c **** 	printf("Starting TIM2 (Buzzer)\r\n");
 720:Core/Src/main.c **** 	if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 721:Core/Src/main.c **** 	{
 722:Core/Src/main.c **** 		Error_Handler();
 723:Core/Src/main.c **** 	}
 724:Core/Src/main.c **** #endif
 725:Core/Src/main.c **** 
 726:Core/Src/main.c **** #if USE_IMU
 727:Core/Src/main.c **** 	printf("Starting SPI2 (IMU)\r\n");
 728:Core/Src/main.c **** 	uint8_t wai, ret;
 729:Core/Src/main.c **** 	ret = IMU_init(&wai);
 730:Core/Src/main.c **** 	printf("who_am_i = %d\r\n", wai);
 731:Core/Src/main.c **** 	if (ret == 1) {
 732:Core/Src/main.c **** 		printf("SPI INIT COLLECT!\r\n");
 733:Core/Src/main.c **** 	} else {
 734:Core/Src/main.c **** 		printf("SPI INIT FAILURE x_x \r\n");
 735:Core/Src/main.c **** 	}
 736:Core/Src/main.c **** #if D_IMU
 737:Core/Src/main.c **** 	printf("inertial offset\r\n");
 738:Core/Src/main.c **** 	printf("ax = %4d, ay = %4d, az = %4d\r\n", inertial_offset.accel.x,
 739:Core/Src/main.c **** 			inertial_offset.accel.y, inertial_offset.accel.z);
 740:Core/Src/main.c **** 	printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial_offset.gyro.x,
 741:Core/Src/main.c **** 			inertial_offset.gyro.y, inertial_offset.gyro.z);
 742:Core/Src/main.c **** #endif
 743:Core/Src/main.c **** #endif
 744:Core/Src/main.c **** 
 745:Core/Src/main.c **** #if D_ENCODER
 746:Core/Src/main.c **** 	printf("LENGTHPERPULSE = %u\r\n", LENGTHPERPULSE);
 747:Core/Src/main.c **** #endif
 748:Core/Src/main.c **** 
 749:Core/Src/main.c ****   /* USER CODE END 2 */
 750:Core/Src/main.c **** 
 751:Core/Src/main.c ****   /* Infinite loop */
 752:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 753:Core/Src/main.c **** 	led_rgb(1, 1, 1);	// White
 754:Core/Src/main.c **** #if D_LED
 755:Core/Src/main.c **** 		HAL_TIM_Base_Start_IT(&htim6);	// PID
 756:Core/Src/main.c **** #endif
 757:Core/Src/main.c **** 	while (1) {
 758:Core/Src/main.c **** #if !D_LED
 759:Core/Src/main.c **** 		printf("///// WHILE /////\n\r");
 760:Core/Src/main.c **** #if D_SWITCH
 761:Core/Src/main.c **** 		printf("enter = %d\r\n", enter);
 762:Core/Src/main.c **** #endif
 763:Core/Src/main.c **** #if D_ROTARY
 764:Core/Src/main.c **** 		printf("rotary_value = %x\r\n", rotary_value);
 765:Core/Src/main.c **** #endif
 766:Core/Src/main.c **** 		if (enter) {
 767:Core/Src/main.c **** 			switch (rotary_value) {
 768:Core/Src/main.c **** 			case 0x0:
 769:Core/Src/main.c **** 				led_rgb(1, 1, 0);	// Yellow
 770:Core/Src/main.c **** 
 771:Core/Src/main.c **** 				sensor_initialize();
 772:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 15


 773:Core/Src/main.c **** 				while (enter) {
 774:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 775:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 776:Core/Src/main.c **** 						analogmax[j] =
 777:Core/Src/main.c **** 								(analogmax[j] < analogbuf) ?
 778:Core/Src/main.c **** 										analogbuf : analogmax[j];
 779:Core/Src/main.c **** 						analogmin[j] =
 780:Core/Src/main.c **** 								(analogmin[j] > analogbuf) ?
 781:Core/Src/main.c **** 										analogbuf : analogmin[j];
 782:Core/Src/main.c **** #if D_ANALOG
 783:Core/Src/main.c **** 						printf("[%2d] = ", j);
 784:Core/Src/main.c **** 						printf("%4d", analogbuf);
 785:Core/Src/main.c **** 						if (j != CALIBRATIONSIZE - 1) {
 786:Core/Src/main.c **** 							printf(", ");
 787:Core/Src/main.c **** 						} else {
 788:Core/Src/main.c **** 							printf("\r\n");
 789:Core/Src/main.c **** 						}
 790:Core/Src/main.c **** #endif
 791:Core/Src/main.c **** 					}
 792:Core/Src/main.c **** 					HAL_Delay(250);
 793:Core/Src/main.c **** 				}
 794:Core/Src/main.c **** 				sensor_finalize();
 795:Core/Src/main.c **** #if D_ANALOG
 796:Core/Src/main.c **** 				printf(ESC_YEL);
 797:Core/Src/main.c **** 				for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 798:Core/Src/main.c **** 					printf("[%2d] = ", j);
 799:Core/Src/main.c **** 					printf("%4d,", analogmax[j]);
 800:Core/Src/main.c **** 				}
 801:Core/Src/main.c **** 				printf("\r\n");
 802:Core/Src/main.c **** 				printf(ESC_CYA);
 803:Core/Src/main.c **** 				for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 804:Core/Src/main.c **** 					printf("[%2d] = ", j);
 805:Core/Src/main.c **** 					printf("%4d,", analogmin[j]);
 806:Core/Src/main.c **** 				}
 807:Core/Src/main.c **** 				printf("\r\n");
 808:Core/Src/main.c **** 				printf(ESC_DEF);
 809:Core/Src/main.c **** 				for (unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++) {
 810:Core/Src/main.c **** 					printf("v");
 811:Core/Src/main.c **** 				}
 812:Core/Src/main.c **** 				printf("\r\n");
 813:Core/Src/main.c **** 				printf(ESC_YEL);
 814:Core/Src/main.c **** 				for (unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++) {
 815:Core/Src/main.c **** 					printf("[%2d] = ", i * 2);
 816:Core/Src/main.c **** 					printf("%4d, ", analogmax[i * 2]);
 817:Core/Src/main.c **** 				}
 818:Core/Src/main.c **** 				for (unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--) {
 819:Core/Src/main.c **** 					printf("[%2d] = ", i * 2 - 1);
 820:Core/Src/main.c **** 					printf("%4d,", analogmax[i * 2 - 1]);
 821:Core/Src/main.c **** 				}
 822:Core/Src/main.c **** 				printf("\r\n");
 823:Core/Src/main.c **** 				printf(ESC_CYA);
 824:Core/Src/main.c **** 				for (unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++) {
 825:Core/Src/main.c **** 					printf("[%2d] = ", i * 2);
 826:Core/Src/main.c **** 					printf("%4d, ", analogmin[i * 2]);
 827:Core/Src/main.c **** 				}
 828:Core/Src/main.c **** 				for (unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--) {
 829:Core/Src/main.c **** 					printf("[%2d] = ", i * 2 - 1);
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 16


 830:Core/Src/main.c **** 					printf("%4d,", analogmin[i * 2 - 1]);
 831:Core/Src/main.c **** 				}
 832:Core/Src/main.c **** 				printf("\r\n");
 833:Core/Src/main.c **** 				printf(ESC_DEF);
 834:Core/Src/main.c **** #endif
 835:Core/Src/main.c **** 				break;	// case 0x00:
 836:Core/Src/main.c **** 			case 0x1:
 837:Core/Src/main.c **** 				commonspeed = COMMONSPEED1;
 838:Core/Src/main.c **** 				kpl = KPL1;
 839:Core/Src/main.c **** 				kpr = KPR1;
 840:Core/Src/main.c **** 				kdl = KDL1;
 841:Core/Src/main.c **** 				kdr = KDR1;
 842:Core/Src/main.c **** 				kil = KIL1;
 843:Core/Src/main.c **** 				kir = KIR1;
 844:Core/Src/main.c **** 				running_initialize();
 845:Core/Src/main.c **** 
 846:Core/Src/main.c **** 				while (enter) {
 847:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 848:Core/Src/main.c **** 					// left
 849:Core/Src/main.c **** 					velocity_l_raw = encoder_l * LENGTHPERPULSE;
 850:Core/Src/main.c **** 					velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 851:Core/Src/main.c **** 					// Here VELOCITY_TARGET is array from Flash ROM.
 852:Core/Src/main.c **** 					velocity_error_l = (VELOCITY_TARGET - velocity_l);
 853:Core/Src/main.c **** 					s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 854:Core/Src/main.c **** 					// PI
 855:Core/Src/main.c **** 					velocity_next_l = VKPL * velocity_error_l + VKIL * s_velocity_error_l;
 856:Core/Src/main.c **** 					velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 857:Core/Src/main.c **** 					nextspeed_l = (VELOCITY_TARGET + velocity_next_l) * PWMMAX / VELOCITY_MAX;
 858:Core/Src/main.c **** 
 859:Core/Src/main.c **** 					// right
 860:Core/Src/main.c **** 					velocity_r_raw = encoder_r * LENGTHPERPULSE;
 861:Core/Src/main.c **** 					velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 862:Core/Src/main.c **** 					// Here VELOCITY_TARGET is array from Flash ROM.
 863:Core/Src/main.c **** 					velocity_error_r = (VELOCITY_TARGET - velocity_r);
 864:Core/Src/main.c **** 					s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 865:Core/Src/main.c **** 					// PI
 866:Core/Src/main.c **** 					velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
 867:Core/Src/main.c **** 					velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 868:Core/Src/main.c **** 					nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
 869:Core/Src/main.c **** #endif
 870:Core/Src/main.c **** 					d_print();
 871:Core/Src/main.c **** 					HAL_Delay(250);
 872:Core/Src/main.c **** 				}
 873:Core/Src/main.c **** 
 874:Core/Src/main.c **** 				running_finalize();
 875:Core/Src/main.c **** #if USE_FLASH
 876:Core/Src/main.c **** 				for (int i = 0; i < ENC_SIZE; i++) {
 877:Core/Src/main.c **** 					flash_buffer.common_speed2[i] = (TREAD / 2)
 878:Core/Src/main.c **** 							* (flash_buffer.svl[i] + flash_buffer.svr[i])
 879:Core/Src/main.c **** 							/ (flash_buffer.svl[i] - flash_buffer.svr[i]);
 880:Core/Src/main.c **** 					flash_buffer.common_speed2[i] =
 881:Core/Src/main.c **** 							COMMONSPEED1
 882:Core/Src/main.c **** 									+ (COMMONSPEED2 - COMMONSPEED1)
 883:Core/Src/main.c **** 											* (flash_buffer.common_speed2[course_state_time]
 884:Core/Src/main.c **** 													- RMIN)
 885:Core/Src/main.c **** 											/ ((power(2,
 886:Core/Src/main.c **** 													8
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 17


 887:Core/Src/main.c **** 															* (sizeof(flash_buffer.common_speed2[0])))
 888:Core/Src/main.c **** 													- 1) - RMIN);
 889:Core/Src/main.c **** 					flash_buffer.common_speed3[i] = (TREAD / 2)
 890:Core/Src/main.c **** 							* (flash_buffer.svl[i] + flash_buffer.svr[i])
 891:Core/Src/main.c **** 							/ (flash_buffer.svl[i] - flash_buffer.svr[i]);
 892:Core/Src/main.c **** 					flash_buffer.common_speed3[i] =
 893:Core/Src/main.c **** 							COMMONSPEED1
 894:Core/Src/main.c **** 									+ (COMMONSPEED3 - COMMONSPEED1)
 895:Core/Src/main.c **** 											* (flash_buffer.common_speed3[course_state_time]
 896:Core/Src/main.c **** 													- RMIN)
 897:Core/Src/main.c **** 											/ ((power(2,
 898:Core/Src/main.c **** 													8
 899:Core/Src/main.c **** 															* (sizeof(flash_buffer.common_speed3[0])))
 900:Core/Src/main.c **** 													- 1) - RMIN);
 901:Core/Src/main.c **** 				}
 902:Core/Src/main.c **** 				for (int i = 0; i < ENC_SIZE; i++) {
 903:Core/Src/main.c **** 				}
 904:Core/Src/main.c **** 				writeFlash(start_address, (uint8_t*) &flash_buffer,
 905:Core/Src/main.c **** 						sizeof(FlashBuffer));
 906:Core/Src/main.c **** #endif
 907:Core/Src/main.c **** 				break;
 908:Core/Src/main.c **** 			case 0x2:
 909:Core/Src/main.c **** 				commonspeed = COMMONSPEED2;
 910:Core/Src/main.c **** 				kpl = KPL2;
 911:Core/Src/main.c **** 				kpr = KPR2;
 912:Core/Src/main.c **** 				kdl = KDL2;
 913:Core/Src/main.c **** 				kdr = KDR2;
 914:Core/Src/main.c **** 				kil = KIL2;
 915:Core/Src/main.c **** 				kir = KIR2;
 916:Core/Src/main.c **** #if USE_FLASH
 917:Core/Src/main.c **** 				loadFlash(start_address, (uint8_t*) &flash_buffer,
 918:Core/Src/main.c **** 						sizeof(FlashBuffer));
 919:Core/Src/main.c **** #endif
 920:Core/Src/main.c **** 				running_initialize();
 921:Core/Src/main.c **** 
 922:Core/Src/main.c **** 				while (enter) {
 923:Core/Src/main.c **** 					d_print();
 924:Core/Src/main.c **** 					HAL_Delay(250);
 925:Core/Src/main.c **** 				}
 926:Core/Src/main.c **** 
 927:Core/Src/main.c **** 				running_finalize();
 928:Core/Src/main.c **** 				break;
 929:Core/Src/main.c **** 			case 0x3:
 930:Core/Src/main.c **** 				commonspeed = COMMONSPEED3;
 931:Core/Src/main.c **** 				kpl = KPL3;
 932:Core/Src/main.c **** 				kpr = KPR3;
 933:Core/Src/main.c **** 				kdl = KDL3;
 934:Core/Src/main.c **** 				kdr = KDR3;
 935:Core/Src/main.c **** 				kil = KIL3;
 936:Core/Src/main.c **** 				kir = KIR3;
 937:Core/Src/main.c **** 				running_initialize();
 938:Core/Src/main.c **** 
 939:Core/Src/main.c **** 				while (enter) {
 940:Core/Src/main.c **** 					d_print();
 941:Core/Src/main.c **** 					HAL_Delay(250);
 942:Core/Src/main.c **** 				}
 943:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 18


 944:Core/Src/main.c **** 				running_finalize();
 945:Core/Src/main.c **** 				break;
 946:Core/Src/main.c **** 			case 0xE:
 947:Core/Src/main.c **** #if D_MOTOR
 948:Core/Src/main.c **** 					kpl = KPL1;
 949:Core/Src/main.c **** 					kpr = KPR1;
 950:Core/Src/main.c **** 					kdl = KDL1;
 951:Core/Src/main.c **** 					kdr = KDR1;
 952:Core/Src/main.c **** 					kil = KIL1;
 953:Core/Src/main.c **** 					kir = KIR1;
 954:Core/Src/main.c **** 					HAL_Delay(3000);
 955:Core/Src/main.c **** 					running_initialize();
 956:Core/Src/main.c **** 					while(enter)
 957:Core/Src/main.c **** 					{
 958:Core/Src/main.c **** 						// MOTOR TEST
 959:Core/Src/main.c **** 						commonspeed = PWMMAX * rotary_value / 16;
 960:Core/Src/main.c **** 						d_print();
 961:Core/Src/main.c **** 						HAL_Delay(250);
 962:Core/Src/main.c **** 					}
 963:Core/Src/main.c **** 					running_finalize();
 964:Core/Src/main.c **** #endif
 965:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 966:Core/Src/main.c **** 				running_initialize();
 967:Core/Src/main.c **** 
 968:Core/Src/main.c **** 				while (enter) {
 969:Core/Src/main.c **** 					d_print();
 970:Core/Src/main.c **** 					HAL_Delay(250);
 971:Core/Src/main.c **** 				}
 972:Core/Src/main.c **** 
 973:Core/Src/main.c **** 				running_finalize();
 974:Core/Src/main.c **** #endif
 975:Core/Src/main.c **** 				break;
 976:Core/Src/main.c **** 			case 0xF:
 977:Core/Src/main.c **** 				// load flash output
 978:Core/Src/main.c **** #if USE_FLASH
 979:Core/Src/main.c **** 				// FLASH PRINT
 980:Core/Src/main.c **** 				loadFlash(start_address, (uint8_t*) &readrom,
 981:Core/Src/main.c **** 						sizeof(FlashBuffer));
 982:Core/Src/main.c **** 				printf("////////// Encorder //////////\r\n");
 983:Core/Src/main.c **** 				for (int i = 0; i < ENC_SIZE; i++) {
 984:Core/Src/main.c **** 					printf("%2d, %4d, %4d\r\n", i, readrom.svl[i],
 985:Core/Src/main.c **** 							readrom.svr[i]);
 986:Core/Src/main.c **** 				}
 987:Core/Src/main.c **** 				printf("////////// IMU //////////\r\n");
 988:Core/Src/main.c **** 				for (int i = 0; i < ENC_SIZE; i++) {
 989:Core/Src/main.c **** 					printf("%3d, ", i);
 990:Core/Src/main.c **** 					IMU_printf(&readrom.inertial[i]);
 991:Core/Src/main.c **** 				}
 992:Core/Src/main.c **** #endif
 993:Core/Src/main.c **** 
 994:Core/Src/main.c **** 				while (enter) {
 995:Core/Src/main.c **** 					HAL_Delay(250);
 996:Core/Src/main.c **** 				}
 997:Core/Src/main.c **** 				break;
 998:Core/Src/main.c **** 			case 0xD:
 999:Core/Src/main.c **** #if USE_IMU
1000:Core/Src/main.c **** #if D_IMU
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 19


1001:Core/Src/main.c **** 				/*
1002:Core/Src/main.c **** 				 // IMU TEST
1003:Core/Src/main.c **** 				 IMU_set_offset();
1004:Core/Src/main.c **** 				 printf("inertial offset\r\n");
1005:Core/Src/main.c **** 				 printf("ax = %4d, ay = %4d, az = %4d\r\n", inertial_offset.accel.x, inertial_offset.accel.y, i
1006:Core/Src/main.c **** 				 printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial_offset.gyro.x, inertial_offset.gyro.y, ine
1007:Core/Src/main.c **** 				 while(enter)
1008:Core/Src/main.c **** 				 {
1009:Core/Src/main.c **** 				 printf("////////// IMU ///////////\r\n");
1010:Core/Src/main.c **** 				 IMU_read();
1011:Core/Src/main.c **** 				 printf("ax = %4d, ay = %4d, az = %4d\r\n", inertial.accel.x - inertial_offset.accel.x, inertia
1012:Core/Src/main.c **** 				 printf("gx = %4d, gy = %4d, gz = %4d\r\n", inertial.gyro.x - inertial_offset.gyro.x, inertial.
1013:Core/Src/main.c **** 				 HAL_Delay(250);
1014:Core/Src/main.c **** 				 }
1015:Core/Src/main.c **** 				 */
1016:Core/Src/main.c **** 				while (enter) {
1017:Core/Src/main.c **** 					printf("////////// IMU ///////////\r\n");
1018:Core/Src/main.c **** 					IMU_read();
1019:Core/Src/main.c **** 					IMU_raw_printf();
1020:Core/Src/main.c **** 					HAL_Delay(250);
1021:Core/Src/main.c **** 				}
1022:Core/Src/main.c **** #endif // D_IMU
1023:Core/Src/main.c **** #if !D_IMU
1024:Core/Src/main.c **** #endif // D_IMU
1025:Core/Src/main.c **** #endif
1026:Core/Src/main.c **** 				break;
1027:Core/Src/main.c **** 			} // switch(rotary_value)
1028:Core/Src/main.c **** 		}	// if(enter)
1029:Core/Src/main.c **** #endif	// !D_LED
1030:Core/Src/main.c **** 	}	// while(1)
1031:Core/Src/main.c **** 	HAL_Delay(250);
1032:Core/Src/main.c ****     /* USER CODE END WHILE */
1033:Core/Src/main.c **** 
1034:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
1035:Core/Src/main.c ****   /* USER CODE END 3 */
1036:Core/Src/main.c **** }
1037:Core/Src/main.c **** 
1038:Core/Src/main.c **** /**
1039:Core/Src/main.c ****   * @brief System Clock Configuration
1040:Core/Src/main.c ****   * @retval None
1041:Core/Src/main.c ****   */
1042:Core/Src/main.c **** void SystemClock_Config(void)
1043:Core/Src/main.c **** {
1044:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
1045:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1046:Core/Src/main.c **** 
1047:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
1048:Core/Src/main.c ****   */
1049:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
1050:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
1051:Core/Src/main.c **** 
1052:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
1053:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
1054:Core/Src/main.c ****   */
1055:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
1056:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
1057:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 20


1058:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
1059:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
1060:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
1061:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
1062:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
1063:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1064:Core/Src/main.c ****   {
1065:Core/Src/main.c ****     Error_Handler();
1066:Core/Src/main.c ****   }
1067:Core/Src/main.c **** 
1068:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
1069:Core/Src/main.c ****   */
1070:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
1071:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
1072:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
1073:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
1074:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
1075:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
1076:Core/Src/main.c **** 
1077:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
1078:Core/Src/main.c ****   {
1079:Core/Src/main.c ****     Error_Handler();
1080:Core/Src/main.c ****   }
1081:Core/Src/main.c **** }
1082:Core/Src/main.c **** 
1083:Core/Src/main.c **** /**
1084:Core/Src/main.c ****   * @brief ADC1 Initialization Function
1085:Core/Src/main.c ****   * @param None
1086:Core/Src/main.c ****   * @retval None
1087:Core/Src/main.c ****   */
1088:Core/Src/main.c **** static void MX_ADC1_Init(void)
1089:Core/Src/main.c **** {
1090:Core/Src/main.c **** 
1091:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
1092:Core/Src/main.c **** 
1093:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
1094:Core/Src/main.c **** 
1095:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
1096:Core/Src/main.c **** 
1097:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
1098:Core/Src/main.c **** 
1099:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
1100:Core/Src/main.c **** 
1101:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
1102:Core/Src/main.c ****   */
1103:Core/Src/main.c ****   hadc1.Instance = ADC1;
1104:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
1105:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
1106:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
1107:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
1108:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
1109:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
1110:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
1111:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
1112:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 16;
1113:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
1114:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 21


1115:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
1116:Core/Src/main.c ****   {
1117:Core/Src/main.c ****     Error_Handler();
1118:Core/Src/main.c ****   }
1119:Core/Src/main.c **** 
1120:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1121:Core/Src/main.c ****   */
1122:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_9;
1123:Core/Src/main.c ****   sConfig.Rank = 1;
1124:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
1125:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1126:Core/Src/main.c ****   {
1127:Core/Src/main.c ****     Error_Handler();
1128:Core/Src/main.c ****   }
1129:Core/Src/main.c **** 
1130:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1131:Core/Src/main.c ****   */
1132:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_10;
1133:Core/Src/main.c ****   sConfig.Rank = 2;
1134:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1135:Core/Src/main.c ****   {
1136:Core/Src/main.c ****     Error_Handler();
1137:Core/Src/main.c ****   }
1138:Core/Src/main.c **** 
1139:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1140:Core/Src/main.c ****   */
1141:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
1142:Core/Src/main.c ****   sConfig.Rank = 3;
1143:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1144:Core/Src/main.c ****   {
1145:Core/Src/main.c ****     Error_Handler();
1146:Core/Src/main.c ****   }
1147:Core/Src/main.c **** 
1148:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1149:Core/Src/main.c ****   */
1150:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_11;
1151:Core/Src/main.c ****   sConfig.Rank = 4;
1152:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1153:Core/Src/main.c ****   {
1154:Core/Src/main.c ****     Error_Handler();
1155:Core/Src/main.c ****   }
1156:Core/Src/main.c **** 
1157:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1158:Core/Src/main.c ****   */
1159:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_14;
1160:Core/Src/main.c ****   sConfig.Rank = 5;
1161:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1162:Core/Src/main.c ****   {
1163:Core/Src/main.c ****     Error_Handler();
1164:Core/Src/main.c ****   }
1165:Core/Src/main.c **** 
1166:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1167:Core/Src/main.c ****   */
1168:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_15;
1169:Core/Src/main.c ****   sConfig.Rank = 6;
1170:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1171:Core/Src/main.c ****   {
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 22


1172:Core/Src/main.c ****     Error_Handler();
1173:Core/Src/main.c ****   }
1174:Core/Src/main.c **** 
1175:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1176:Core/Src/main.c ****   */
1177:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_12;
1178:Core/Src/main.c ****   sConfig.Rank = 7;
1179:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1180:Core/Src/main.c ****   {
1181:Core/Src/main.c ****     Error_Handler();
1182:Core/Src/main.c ****   }
1183:Core/Src/main.c **** 
1184:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1185:Core/Src/main.c ****   */
1186:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_13;
1187:Core/Src/main.c ****   sConfig.Rank = 8;
1188:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1189:Core/Src/main.c ****   {
1190:Core/Src/main.c ****     Error_Handler();
1191:Core/Src/main.c ****   }
1192:Core/Src/main.c **** 
1193:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1194:Core/Src/main.c ****   */
1195:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
1196:Core/Src/main.c ****   sConfig.Rank = 9;
1197:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1198:Core/Src/main.c ****   {
1199:Core/Src/main.c ****     Error_Handler();
1200:Core/Src/main.c ****   }
1201:Core/Src/main.c **** 
1202:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1203:Core/Src/main.c ****   */
1204:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
1205:Core/Src/main.c ****   sConfig.Rank = 10;
1206:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1207:Core/Src/main.c ****   {
1208:Core/Src/main.c ****     Error_Handler();
1209:Core/Src/main.c ****   }
1210:Core/Src/main.c **** 
1211:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1212:Core/Src/main.c ****   */
1213:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
1214:Core/Src/main.c ****   sConfig.Rank = 11;
1215:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1216:Core/Src/main.c ****   {
1217:Core/Src/main.c ****     Error_Handler();
1218:Core/Src/main.c ****   }
1219:Core/Src/main.c **** 
1220:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1221:Core/Src/main.c ****   */
1222:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
1223:Core/Src/main.c ****   sConfig.Rank = 12;
1224:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1225:Core/Src/main.c ****   {
1226:Core/Src/main.c ****     Error_Handler();
1227:Core/Src/main.c ****   }
1228:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 23


1229:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1230:Core/Src/main.c ****   */
1231:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
1232:Core/Src/main.c ****   sConfig.Rank = 13;
1233:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1234:Core/Src/main.c ****   {
1235:Core/Src/main.c ****     Error_Handler();
1236:Core/Src/main.c ****   }
1237:Core/Src/main.c **** 
1238:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1239:Core/Src/main.c ****   */
1240:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
1241:Core/Src/main.c ****   sConfig.Rank = 14;
1242:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1243:Core/Src/main.c ****   {
1244:Core/Src/main.c ****     Error_Handler();
1245:Core/Src/main.c ****   }
1246:Core/Src/main.c **** 
1247:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1248:Core/Src/main.c ****   */
1249:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
1250:Core/Src/main.c ****   sConfig.Rank = 15;
1251:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1252:Core/Src/main.c ****   {
1253:Core/Src/main.c ****     Error_Handler();
1254:Core/Src/main.c ****   }
1255:Core/Src/main.c **** 
1256:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
1257:Core/Src/main.c ****   */
1258:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
1259:Core/Src/main.c ****   sConfig.Rank = 16;
1260:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
1261:Core/Src/main.c ****   {
1262:Core/Src/main.c ****     Error_Handler();
1263:Core/Src/main.c ****   }
1264:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
1265:Core/Src/main.c **** 
1266:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
1267:Core/Src/main.c **** 
1268:Core/Src/main.c **** }
1269:Core/Src/main.c **** 
1270:Core/Src/main.c **** /**
1271:Core/Src/main.c ****   * @brief I2C1 Initialization Function
1272:Core/Src/main.c ****   * @param None
1273:Core/Src/main.c ****   * @retval None
1274:Core/Src/main.c ****   */
1275:Core/Src/main.c **** static void MX_I2C1_Init(void)
1276:Core/Src/main.c **** {
1277:Core/Src/main.c **** 
1278:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
1279:Core/Src/main.c **** 
1280:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
1281:Core/Src/main.c **** 
1282:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
1283:Core/Src/main.c **** 
1284:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
1285:Core/Src/main.c ****   hi2c1.Instance = I2C1;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 24


1286:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
1287:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
1288:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
1289:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
1290:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
1291:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
1292:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
1293:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
1294:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
1295:Core/Src/main.c ****   {
1296:Core/Src/main.c ****     Error_Handler();
1297:Core/Src/main.c ****   }
1298:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
1299:Core/Src/main.c **** 
1300:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
1301:Core/Src/main.c **** 
1302:Core/Src/main.c **** }
1303:Core/Src/main.c **** 
1304:Core/Src/main.c **** /**
1305:Core/Src/main.c ****   * @brief SPI2 Initialization Function
1306:Core/Src/main.c ****   * @param None
1307:Core/Src/main.c ****   * @retval None
1308:Core/Src/main.c ****   */
1309:Core/Src/main.c **** static void MX_SPI2_Init(void)
1310:Core/Src/main.c **** {
1311:Core/Src/main.c **** 
1312:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
1313:Core/Src/main.c **** 
1314:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
1315:Core/Src/main.c **** 
1316:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
1317:Core/Src/main.c **** 
1318:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
1319:Core/Src/main.c ****   /* SPI2 parameter configuration*/
1320:Core/Src/main.c ****   hspi2.Instance = SPI2;
1321:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
1322:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
1323:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
1324:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
1325:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
1326:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
1327:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
1328:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
1329:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
1330:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
1331:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
1332:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
1333:Core/Src/main.c ****   {
1334:Core/Src/main.c ****     Error_Handler();
1335:Core/Src/main.c ****   }
1336:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
1337:Core/Src/main.c **** 
1338:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
1339:Core/Src/main.c **** 
1340:Core/Src/main.c **** }
1341:Core/Src/main.c **** 
1342:Core/Src/main.c **** /**
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 25


1343:Core/Src/main.c ****   * @brief TIM1 Initialization Function
1344:Core/Src/main.c ****   * @param None
1345:Core/Src/main.c ****   * @retval None
1346:Core/Src/main.c ****   */
1347:Core/Src/main.c **** static void MX_TIM1_Init(void)
1348:Core/Src/main.c **** {
1349:Core/Src/main.c **** 
1350:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
1351:Core/Src/main.c **** 
1352:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
1353:Core/Src/main.c **** 
1354:Core/Src/main.c ****   TIM_Encoder_InitTypeDef sConfig = {0};
1355:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1356:Core/Src/main.c **** 
1357:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
1358:Core/Src/main.c **** 
1359:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
1360:Core/Src/main.c ****   htim1.Instance = TIM1;
1361:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
1362:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
1363:Core/Src/main.c ****   htim1.Init.Period = 65535;
1364:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1365:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
1366:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1367:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
1368:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
1369:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
1370:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
1371:Core/Src/main.c ****   sConfig.IC1Filter = 0;
1372:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
1373:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
1374:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
1375:Core/Src/main.c ****   sConfig.IC2Filter = 0;
1376:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
1377:Core/Src/main.c ****   {
1378:Core/Src/main.c ****     Error_Handler();
1379:Core/Src/main.c ****   }
1380:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1381:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1382:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
1383:Core/Src/main.c ****   {
1384:Core/Src/main.c ****     Error_Handler();
1385:Core/Src/main.c ****   }
1386:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
1387:Core/Src/main.c **** 
1388:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
1389:Core/Src/main.c **** 
1390:Core/Src/main.c **** }
1391:Core/Src/main.c **** 
1392:Core/Src/main.c **** /**
1393:Core/Src/main.c ****   * @brief TIM3 Initialization Function
1394:Core/Src/main.c ****   * @param None
1395:Core/Src/main.c ****   * @retval None
1396:Core/Src/main.c ****   */
1397:Core/Src/main.c **** static void MX_TIM3_Init(void)
1398:Core/Src/main.c **** {
1399:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 26


1400:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
1401:Core/Src/main.c **** 
1402:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
1403:Core/Src/main.c **** 
1404:Core/Src/main.c ****   TIM_Encoder_InitTypeDef sConfig = {0};
1405:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1406:Core/Src/main.c **** 
1407:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
1408:Core/Src/main.c **** 
1409:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
1410:Core/Src/main.c ****   htim3.Instance = TIM3;
1411:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
1412:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
1413:Core/Src/main.c ****   htim3.Init.Period = 65535;
1414:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1415:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1416:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
1417:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
1418:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
1419:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
1420:Core/Src/main.c ****   sConfig.IC1Filter = 0;
1421:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
1422:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
1423:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
1424:Core/Src/main.c ****   sConfig.IC2Filter = 0;
1425:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
1426:Core/Src/main.c ****   {
1427:Core/Src/main.c ****     Error_Handler();
1428:Core/Src/main.c ****   }
1429:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1430:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1431:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
1432:Core/Src/main.c ****   {
1433:Core/Src/main.c ****     Error_Handler();
1434:Core/Src/main.c ****   }
1435:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
1436:Core/Src/main.c **** 
1437:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
1438:Core/Src/main.c **** 
1439:Core/Src/main.c **** }
1440:Core/Src/main.c **** 
1441:Core/Src/main.c **** /**
1442:Core/Src/main.c ****   * @brief TIM4 Initialization Function
1443:Core/Src/main.c ****   * @param None
1444:Core/Src/main.c ****   * @retval None
1445:Core/Src/main.c ****   */
1446:Core/Src/main.c **** static void MX_TIM4_Init(void)
1447:Core/Src/main.c **** {
1448:Core/Src/main.c **** 
1449:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
1450:Core/Src/main.c **** 
1451:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
1452:Core/Src/main.c **** 
1453:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1454:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
1455:Core/Src/main.c **** 
1456:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 27


1457:Core/Src/main.c **** 
1458:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
1459:Core/Src/main.c ****   htim4.Instance = TIM4;
1460:Core/Src/main.c ****   htim4.Init.Prescaler = 1;
1461:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
1462:Core/Src/main.c ****   htim4.Init.Period = 999;
1463:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1464:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1465:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
1466:Core/Src/main.c ****   {
1467:Core/Src/main.c ****     Error_Handler();
1468:Core/Src/main.c ****   }
1469:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1470:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1471:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
1472:Core/Src/main.c ****   {
1473:Core/Src/main.c ****     Error_Handler();
1474:Core/Src/main.c ****   }
1475:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1476:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1477:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1478:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1479:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1480:Core/Src/main.c ****   {
1481:Core/Src/main.c ****     Error_Handler();
1482:Core/Src/main.c ****   }
1483:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
1484:Core/Src/main.c ****   {
1485:Core/Src/main.c ****     Error_Handler();
1486:Core/Src/main.c ****   }
1487:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
1488:Core/Src/main.c **** 
1489:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
1490:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
1491:Core/Src/main.c **** 
1492:Core/Src/main.c **** }
1493:Core/Src/main.c **** 
1494:Core/Src/main.c **** /**
1495:Core/Src/main.c ****   * @brief TIM6 Initialization Function
1496:Core/Src/main.c ****   * @param None
1497:Core/Src/main.c ****   * @retval None
1498:Core/Src/main.c ****   */
1499:Core/Src/main.c **** static void MX_TIM6_Init(void)
1500:Core/Src/main.c **** {
1501:Core/Src/main.c **** 
1502:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
1503:Core/Src/main.c **** 
1504:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
1505:Core/Src/main.c **** 
1506:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1507:Core/Src/main.c **** 
1508:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
1509:Core/Src/main.c **** 
1510:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
1511:Core/Src/main.c ****   htim6.Instance = TIM6;
1512:Core/Src/main.c ****   htim6.Init.Prescaler = 4;
1513:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 28


1514:Core/Src/main.c ****   htim6.Init.Period = 16799;
1515:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1516:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
1517:Core/Src/main.c ****   {
1518:Core/Src/main.c ****     Error_Handler();
1519:Core/Src/main.c ****   }
1520:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1521:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1522:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
1523:Core/Src/main.c ****   {
1524:Core/Src/main.c ****     Error_Handler();
1525:Core/Src/main.c ****   }
1526:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
1527:Core/Src/main.c **** 
1528:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
1529:Core/Src/main.c **** 
1530:Core/Src/main.c **** }
1531:Core/Src/main.c **** 
1532:Core/Src/main.c **** /**
1533:Core/Src/main.c ****   * @brief TIM10 Initialization Function
1534:Core/Src/main.c ****   * @param None
1535:Core/Src/main.c ****   * @retval None
1536:Core/Src/main.c ****   */
1537:Core/Src/main.c **** static void MX_TIM10_Init(void)
1538:Core/Src/main.c **** {
1539:Core/Src/main.c **** 
1540:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 0 */
1541:Core/Src/main.c **** 
1542:Core/Src/main.c ****   /* USER CODE END TIM10_Init 0 */
1543:Core/Src/main.c **** 
1544:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 1 */
1545:Core/Src/main.c **** 
1546:Core/Src/main.c ****   /* USER CODE END TIM10_Init 1 */
1547:Core/Src/main.c ****   htim10.Instance = TIM10;
1548:Core/Src/main.c ****   htim10.Init.Prescaler = 4;
1549:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
1550:Core/Src/main.c ****   htim10.Init.Period = 16799;
1551:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1552:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1553:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
1554:Core/Src/main.c ****   {
1555:Core/Src/main.c ****     Error_Handler();
1556:Core/Src/main.c ****   }
1557:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 2 */
1558:Core/Src/main.c **** 
1559:Core/Src/main.c ****   /* USER CODE END TIM10_Init 2 */
1560:Core/Src/main.c **** 
1561:Core/Src/main.c **** }
1562:Core/Src/main.c **** 
1563:Core/Src/main.c **** /**
1564:Core/Src/main.c ****   * @brief TIM11 Initialization Function
1565:Core/Src/main.c ****   * @param None
1566:Core/Src/main.c ****   * @retval None
1567:Core/Src/main.c ****   */
1568:Core/Src/main.c **** static void MX_TIM11_Init(void)
1569:Core/Src/main.c **** {
1570:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 29


1571:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 0 */
1572:Core/Src/main.c **** 
1573:Core/Src/main.c ****   /* USER CODE END TIM11_Init 0 */
1574:Core/Src/main.c **** 
1575:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 1 */
1576:Core/Src/main.c **** 
1577:Core/Src/main.c ****   /* USER CODE END TIM11_Init 1 */
1578:Core/Src/main.c ****   htim11.Instance = TIM11;
1579:Core/Src/main.c ****   htim11.Init.Prescaler = 4;
1580:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
1581:Core/Src/main.c ****   htim11.Init.Period = 16799;
1582:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1583:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1584:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
1585:Core/Src/main.c ****   {
1586:Core/Src/main.c ****     Error_Handler();
1587:Core/Src/main.c ****   }
1588:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 2 */
1589:Core/Src/main.c **** 
1590:Core/Src/main.c ****   /* USER CODE END TIM11_Init 2 */
1591:Core/Src/main.c **** 
1592:Core/Src/main.c **** }
1593:Core/Src/main.c **** 
1594:Core/Src/main.c **** /**
1595:Core/Src/main.c ****   * @brief USART6 Initialization Function
1596:Core/Src/main.c ****   * @param None
1597:Core/Src/main.c ****   * @retval None
1598:Core/Src/main.c ****   */
1599:Core/Src/main.c **** static void MX_USART6_UART_Init(void)
1600:Core/Src/main.c **** {
1601:Core/Src/main.c **** 
1602:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 0 */
1603:Core/Src/main.c **** 
1604:Core/Src/main.c ****   /* USER CODE END USART6_Init 0 */
1605:Core/Src/main.c **** 
1606:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 1 */
1607:Core/Src/main.c **** 
1608:Core/Src/main.c ****   /* USER CODE END USART6_Init 1 */
1609:Core/Src/main.c ****   huart6.Instance = USART6;
1610:Core/Src/main.c ****   huart6.Init.BaudRate = 9600;
1611:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
1612:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
1613:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
1614:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
1615:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1616:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
1617:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
1618:Core/Src/main.c ****   {
1619:Core/Src/main.c ****     Error_Handler();
1620:Core/Src/main.c ****   }
1621:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 2 */
1622:Core/Src/main.c **** 
1623:Core/Src/main.c ****   /* USER CODE END USART6_Init 2 */
1624:Core/Src/main.c **** 
1625:Core/Src/main.c **** }
1626:Core/Src/main.c **** 
1627:Core/Src/main.c **** /**
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 30


1628:Core/Src/main.c ****   * Enable DMA controller clock
1629:Core/Src/main.c ****   */
1630:Core/Src/main.c **** static void MX_DMA_Init(void)
1631:Core/Src/main.c **** {
1632:Core/Src/main.c **** 
1633:Core/Src/main.c ****   /* DMA controller clock enable */
1634:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
1635:Core/Src/main.c **** 
1636:Core/Src/main.c ****   /* DMA interrupt init */
1637:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
1638:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
1639:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
1640:Core/Src/main.c **** 
1641:Core/Src/main.c **** }
1642:Core/Src/main.c **** 
1643:Core/Src/main.c **** /**
1644:Core/Src/main.c ****   * @brief GPIO Initialization Function
1645:Core/Src/main.c ****   * @param None
1646:Core/Src/main.c ****   * @retval None
1647:Core/Src/main.c ****   */
1648:Core/Src/main.c **** static void MX_GPIO_Init(void)
1649:Core/Src/main.c **** {
  28              		.loc 1 1649 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 28
  35              		.cfi_offset 4, -28
  36              		.cfi_offset 5, -24
  37              		.cfi_offset 6, -20
  38              		.cfi_offset 7, -16
  39              		.cfi_offset 8, -12
  40              		.cfi_offset 9, -8
  41              		.cfi_offset 14, -4
  42 0004 8BB0     		sub	sp, sp, #44
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 72
1650:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  45              		.loc 1 1650 3 view .LVU1
  46              		.loc 1 1650 20 is_stmt 0 view .LVU2
  47 0006 0024     		movs	r4, #0
  48 0008 0594     		str	r4, [sp, #20]
  49 000a 0694     		str	r4, [sp, #24]
  50 000c 0794     		str	r4, [sp, #28]
  51 000e 0894     		str	r4, [sp, #32]
  52 0010 0994     		str	r4, [sp, #36]
1651:Core/Src/main.c **** 
1652:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
1653:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 1653 3 is_stmt 1 view .LVU3
  54              	.LBB4:
  55              		.loc 1 1653 3 view .LVU4
  56 0012 0094     		str	r4, [sp]
  57              		.loc 1 1653 3 view .LVU5
  58 0014 504B     		ldr	r3, .L3
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 31


  59 0016 1A6B     		ldr	r2, [r3, #48]
  60 0018 42F00402 		orr	r2, r2, #4
  61 001c 1A63     		str	r2, [r3, #48]
  62              		.loc 1 1653 3 view .LVU6
  63 001e 1A6B     		ldr	r2, [r3, #48]
  64 0020 02F00402 		and	r2, r2, #4
  65 0024 0092     		str	r2, [sp]
  66              		.loc 1 1653 3 view .LVU7
  67 0026 009A     		ldr	r2, [sp]
  68              	.LBE4:
  69              		.loc 1 1653 3 view .LVU8
1654:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  70              		.loc 1 1654 3 view .LVU9
  71              	.LBB5:
  72              		.loc 1 1654 3 view .LVU10
  73 0028 0194     		str	r4, [sp, #4]
  74              		.loc 1 1654 3 view .LVU11
  75 002a 1A6B     		ldr	r2, [r3, #48]
  76 002c 42F08002 		orr	r2, r2, #128
  77 0030 1A63     		str	r2, [r3, #48]
  78              		.loc 1 1654 3 view .LVU12
  79 0032 1A6B     		ldr	r2, [r3, #48]
  80 0034 02F08002 		and	r2, r2, #128
  81 0038 0192     		str	r2, [sp, #4]
  82              		.loc 1 1654 3 view .LVU13
  83 003a 019A     		ldr	r2, [sp, #4]
  84              	.LBE5:
  85              		.loc 1 1654 3 view .LVU14
1655:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  86              		.loc 1 1655 3 view .LVU15
  87              	.LBB6:
  88              		.loc 1 1655 3 view .LVU16
  89 003c 0294     		str	r4, [sp, #8]
  90              		.loc 1 1655 3 view .LVU17
  91 003e 1A6B     		ldr	r2, [r3, #48]
  92 0040 42F00102 		orr	r2, r2, #1
  93 0044 1A63     		str	r2, [r3, #48]
  94              		.loc 1 1655 3 view .LVU18
  95 0046 1A6B     		ldr	r2, [r3, #48]
  96 0048 02F00102 		and	r2, r2, #1
  97 004c 0292     		str	r2, [sp, #8]
  98              		.loc 1 1655 3 view .LVU19
  99 004e 029A     		ldr	r2, [sp, #8]
 100              	.LBE6:
 101              		.loc 1 1655 3 view .LVU20
1656:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 102              		.loc 1 1656 3 view .LVU21
 103              	.LBB7:
 104              		.loc 1 1656 3 view .LVU22
 105 0050 0394     		str	r4, [sp, #12]
 106              		.loc 1 1656 3 view .LVU23
 107 0052 1A6B     		ldr	r2, [r3, #48]
 108 0054 42F00202 		orr	r2, r2, #2
 109 0058 1A63     		str	r2, [r3, #48]
 110              		.loc 1 1656 3 view .LVU24
 111 005a 1A6B     		ldr	r2, [r3, #48]
 112 005c 02F00202 		and	r2, r2, #2
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 32


 113 0060 0392     		str	r2, [sp, #12]
 114              		.loc 1 1656 3 view .LVU25
 115 0062 039A     		ldr	r2, [sp, #12]
 116              	.LBE7:
 117              		.loc 1 1656 3 view .LVU26
1657:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 118              		.loc 1 1657 3 view .LVU27
 119              	.LBB8:
 120              		.loc 1 1657 3 view .LVU28
 121 0064 0494     		str	r4, [sp, #16]
 122              		.loc 1 1657 3 view .LVU29
 123 0066 1A6B     		ldr	r2, [r3, #48]
 124 0068 42F00802 		orr	r2, r2, #8
 125 006c 1A63     		str	r2, [r3, #48]
 126              		.loc 1 1657 3 view .LVU30
 127 006e 1B6B     		ldr	r3, [r3, #48]
 128 0070 03F00803 		and	r3, r3, #8
 129 0074 0493     		str	r3, [sp, #16]
 130              		.loc 1 1657 3 view .LVU31
 131 0076 049B     		ldr	r3, [sp, #16]
 132              	.LBE8:
 133              		.loc 1 1657 3 view .LVU32
1658:Core/Src/main.c **** 
1659:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1660:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 134              		.loc 1 1660 3 view .LVU33
 135 0078 DFF8E880 		ldr	r8, .L3+12
 136 007c 2246     		mov	r2, r4
 137 007e 4FF40C51 		mov	r1, #8960
 138 0082 4046     		mov	r0, r8
 139 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 140              	.LVL0:
1661:Core/Src/main.c **** 
1662:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1663:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 141              		.loc 1 1663 3 view .LVU34
 142 0088 344F     		ldr	r7, .L3+4
 143 008a 2246     		mov	r2, r4
 144 008c 4FF44051 		mov	r1, #12288
 145 0090 3846     		mov	r0, r7
 146 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 147              	.LVL1:
1664:Core/Src/main.c **** 
1665:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1666:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 148              		.loc 1 1666 3 view .LVU35
 149 0096 324E     		ldr	r6, .L3+8
 150 0098 2246     		mov	r2, r4
 151 009a 4FF44061 		mov	r1, #3072
 152 009e 3046     		mov	r0, r6
 153 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 154              	.LVL2:
1667:Core/Src/main.c **** 
1668:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1669:Core/Src/main.c ****   HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 155              		.loc 1 1669 3 view .LVU36
 156 00a4 DFF8C090 		ldr	r9, .L3+16
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 33


 157 00a8 2246     		mov	r2, r4
 158 00aa 0421     		movs	r1, #4
 159 00ac 4846     		mov	r0, r9
 160 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 161              	.LVL3:
1670:Core/Src/main.c **** 
1671:Core/Src/main.c ****   /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
1672:Core/Src/main.c ****   GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 162              		.loc 1 1672 3 view .LVU37
 163              		.loc 1 1672 23 is_stmt 0 view .LVU38
 164 00b2 4FF40C53 		mov	r3, #8960
 165 00b6 0593     		str	r3, [sp, #20]
1673:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 166              		.loc 1 1673 3 is_stmt 1 view .LVU39
 167              		.loc 1 1673 24 is_stmt 0 view .LVU40
 168 00b8 0125     		movs	r5, #1
 169 00ba 0695     		str	r5, [sp, #24]
1674:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 170              		.loc 1 1674 3 is_stmt 1 view .LVU41
 171              		.loc 1 1674 24 is_stmt 0 view .LVU42
 172 00bc 0794     		str	r4, [sp, #28]
1675:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 173              		.loc 1 1675 3 is_stmt 1 view .LVU43
 174              		.loc 1 1675 25 is_stmt 0 view .LVU44
 175 00be 0894     		str	r4, [sp, #32]
1676:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 176              		.loc 1 1676 3 is_stmt 1 view .LVU45
 177 00c0 05A9     		add	r1, sp, #20
 178 00c2 4046     		mov	r0, r8
 179 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL4:
1677:Core/Src/main.c **** 
1678:Core/Src/main.c ****   /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
1679:Core/Src/main.c ****                            Rotary1_Pin */
1680:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 181              		.loc 1 1680 3 view .LVU46
 182              		.loc 1 1680 23 is_stmt 0 view .LVU47
 183 00c8 4FF45C43 		mov	r3, #56320
 184 00cc 0593     		str	r3, [sp, #20]
1681:Core/Src/main.c ****                           |Rotary1_Pin;
1682:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 185              		.loc 1 1682 3 is_stmt 1 view .LVU48
 186              		.loc 1 1682 24 is_stmt 0 view .LVU49
 187 00ce 0694     		str	r4, [sp, #24]
1683:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 188              		.loc 1 1683 3 is_stmt 1 view .LVU50
 189              		.loc 1 1683 24 is_stmt 0 view .LVU51
 190 00d0 0794     		str	r4, [sp, #28]
1684:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 191              		.loc 1 1684 3 is_stmt 1 view .LVU52
 192 00d2 05A9     		add	r1, sp, #20
 193 00d4 4046     		mov	r0, r8
 194 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 195              	.LVL5:
1685:Core/Src/main.c **** 
1686:Core/Src/main.c ****   /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
1687:Core/Src/main.c ****   GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 34


 196              		.loc 1 1687 3 view .LVU53
 197              		.loc 1 1687 23 is_stmt 0 view .LVU54
 198 00da 40F60403 		movw	r3, #2052
 199 00de 0593     		str	r3, [sp, #20]
1688:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 200              		.loc 1 1688 3 is_stmt 1 view .LVU55
 201              		.loc 1 1688 24 is_stmt 0 view .LVU56
 202 00e0 0694     		str	r4, [sp, #24]
1689:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 203              		.loc 1 1689 3 is_stmt 1 view .LVU57
 204              		.loc 1 1689 24 is_stmt 0 view .LVU58
 205 00e2 0794     		str	r4, [sp, #28]
1690:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 206              		.loc 1 1690 3 is_stmt 1 view .LVU59
 207 00e4 05A9     		add	r1, sp, #20
 208 00e6 3846     		mov	r0, r7
 209 00e8 FFF7FEFF 		bl	HAL_GPIO_Init
 210              	.LVL6:
1691:Core/Src/main.c **** 
1692:Core/Src/main.c ****   /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
1693:Core/Src/main.c ****   GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 211              		.loc 1 1693 3 view .LVU60
 212              		.loc 1 1693 23 is_stmt 0 view .LVU61
 213 00ec 4FF44053 		mov	r3, #12288
 214 00f0 0593     		str	r3, [sp, #20]
1694:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 215              		.loc 1 1694 3 is_stmt 1 view .LVU62
 216              		.loc 1 1694 24 is_stmt 0 view .LVU63
 217 00f2 0695     		str	r5, [sp, #24]
1695:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 218              		.loc 1 1695 3 is_stmt 1 view .LVU64
 219              		.loc 1 1695 24 is_stmt 0 view .LVU65
 220 00f4 0794     		str	r4, [sp, #28]
1696:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 221              		.loc 1 1696 3 is_stmt 1 view .LVU66
 222              		.loc 1 1696 25 is_stmt 0 view .LVU67
 223 00f6 0894     		str	r4, [sp, #32]
1697:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 224              		.loc 1 1697 3 is_stmt 1 view .LVU68
 225 00f8 05A9     		add	r1, sp, #20
 226 00fa 3846     		mov	r0, r7
 227 00fc FFF7FEFF 		bl	HAL_GPIO_Init
 228              	.LVL7:
1698:Core/Src/main.c **** 
1699:Core/Src/main.c ****   /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
1700:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 229              		.loc 1 1700 3 view .LVU69
 230              		.loc 1 1700 23 is_stmt 0 view .LVU70
 231 0100 4FF44063 		mov	r3, #3072
 232 0104 0593     		str	r3, [sp, #20]
1701:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 233              		.loc 1 1701 3 is_stmt 1 view .LVU71
 234              		.loc 1 1701 24 is_stmt 0 view .LVU72
 235 0106 0695     		str	r5, [sp, #24]
1702:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 236              		.loc 1 1702 3 is_stmt 1 view .LVU73
 237              		.loc 1 1702 24 is_stmt 0 view .LVU74
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 35


 238 0108 0794     		str	r4, [sp, #28]
1703:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 239              		.loc 1 1703 3 is_stmt 1 view .LVU75
 240              		.loc 1 1703 25 is_stmt 0 view .LVU76
 241 010a 0894     		str	r4, [sp, #32]
1704:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 242              		.loc 1 1704 3 is_stmt 1 view .LVU77
 243 010c 05A9     		add	r1, sp, #20
 244 010e 3046     		mov	r0, r6
 245 0110 FFF7FEFF 		bl	HAL_GPIO_Init
 246              	.LVL8:
1705:Core/Src/main.c **** 
1706:Core/Src/main.c ****   /*Configure GPIO pin : Rotary4_Pin */
1707:Core/Src/main.c ****   GPIO_InitStruct.Pin = Rotary4_Pin;
 247              		.loc 1 1707 3 view .LVU78
 248              		.loc 1 1707 23 is_stmt 0 view .LVU79
 249 0114 4FF48053 		mov	r3, #4096
 250 0118 0593     		str	r3, [sp, #20]
1708:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 251              		.loc 1 1708 3 is_stmt 1 view .LVU80
 252              		.loc 1 1708 24 is_stmt 0 view .LVU81
 253 011a 0694     		str	r4, [sp, #24]
1709:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 254              		.loc 1 1709 3 is_stmt 1 view .LVU82
 255              		.loc 1 1709 24 is_stmt 0 view .LVU83
 256 011c 0794     		str	r4, [sp, #28]
1710:Core/Src/main.c ****   HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 257              		.loc 1 1710 3 is_stmt 1 view .LVU84
 258 011e 05A9     		add	r1, sp, #20
 259 0120 3046     		mov	r0, r6
 260 0122 FFF7FEFF 		bl	HAL_GPIO_Init
 261              	.LVL9:
1711:Core/Src/main.c **** 
1712:Core/Src/main.c ****   /*Configure GPIO pin : PA15 */
1713:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 262              		.loc 1 1713 3 view .LVU85
 263              		.loc 1 1713 23 is_stmt 0 view .LVU86
 264 0126 4FF40043 		mov	r3, #32768
 265 012a 0593     		str	r3, [sp, #20]
1714:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 266              		.loc 1 1714 3 is_stmt 1 view .LVU87
 267              		.loc 1 1714 24 is_stmt 0 view .LVU88
 268 012c 0223     		movs	r3, #2
 269 012e 0693     		str	r3, [sp, #24]
1715:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 270              		.loc 1 1715 3 is_stmt 1 view .LVU89
 271              		.loc 1 1715 24 is_stmt 0 view .LVU90
 272 0130 0794     		str	r4, [sp, #28]
1716:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 273              		.loc 1 1716 3 is_stmt 1 view .LVU91
 274              		.loc 1 1716 25 is_stmt 0 view .LVU92
 275 0132 0894     		str	r4, [sp, #32]
1717:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 276              		.loc 1 1717 3 is_stmt 1 view .LVU93
 277              		.loc 1 1717 29 is_stmt 0 view .LVU94
 278 0134 0995     		str	r5, [sp, #36]
1718:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 36


 279              		.loc 1 1718 3 is_stmt 1 view .LVU95
 280 0136 05A9     		add	r1, sp, #20
 281 0138 3046     		mov	r0, r6
 282 013a FFF7FEFF 		bl	HAL_GPIO_Init
 283              	.LVL10:
1719:Core/Src/main.c **** 
1720:Core/Src/main.c ****   /*Configure GPIO pin : DRV1_PH_Pin */
1721:Core/Src/main.c ****   GPIO_InitStruct.Pin = DRV1_PH_Pin;
 284              		.loc 1 1721 3 view .LVU96
 285              		.loc 1 1721 23 is_stmt 0 view .LVU97
 286 013e 0423     		movs	r3, #4
 287 0140 0593     		str	r3, [sp, #20]
1722:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 288              		.loc 1 1722 3 is_stmt 1 view .LVU98
 289              		.loc 1 1722 24 is_stmt 0 view .LVU99
 290 0142 0695     		str	r5, [sp, #24]
1723:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 291              		.loc 1 1723 3 is_stmt 1 view .LVU100
 292              		.loc 1 1723 24 is_stmt 0 view .LVU101
 293 0144 0794     		str	r4, [sp, #28]
1724:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 294              		.loc 1 1724 3 is_stmt 1 view .LVU102
 295              		.loc 1 1724 25 is_stmt 0 view .LVU103
 296 0146 0894     		str	r4, [sp, #32]
1725:Core/Src/main.c ****   HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 297              		.loc 1 1725 3 is_stmt 1 view .LVU104
 298 0148 05A9     		add	r1, sp, #20
 299 014a 4846     		mov	r0, r9
 300 014c FFF7FEFF 		bl	HAL_GPIO_Init
 301              	.LVL11:
1726:Core/Src/main.c **** 
1727:Core/Src/main.c **** }
 302              		.loc 1 1727 1 is_stmt 0 view .LVU105
 303 0150 0BB0     		add	sp, sp, #44
 304              	.LCFI2:
 305              		.cfi_def_cfa_offset 28
 306              		@ sp needed
 307 0152 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 308              	.L4:
 309 0156 00BF     		.align	2
 310              	.L3:
 311 0158 00380240 		.word	1073887232
 312 015c 00040240 		.word	1073873920
 313 0160 00000240 		.word	1073872896
 314 0164 00080240 		.word	1073874944
 315 0168 000C0240 		.word	1073875968
 316              		.cfi_endproc
 317              	.LFE252:
 319              		.section	.text.MX_DMA_Init,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	MX_DMA_Init:
 326              	.LFB251:
1631:Core/Src/main.c **** 
 327              		.loc 1 1631 1 is_stmt 1 view -0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 37


 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 00B5     		push	{lr}
 332              	.LCFI3:
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 14, -4
 335 0002 83B0     		sub	sp, sp, #12
 336              	.LCFI4:
 337              		.cfi_def_cfa_offset 16
1634:Core/Src/main.c **** 
 338              		.loc 1 1634 3 view .LVU107
 339              	.LBB9:
1634:Core/Src/main.c **** 
 340              		.loc 1 1634 3 view .LVU108
 341 0004 0021     		movs	r1, #0
 342 0006 0191     		str	r1, [sp, #4]
1634:Core/Src/main.c **** 
 343              		.loc 1 1634 3 view .LVU109
 344 0008 094B     		ldr	r3, .L7
 345 000a 1A6B     		ldr	r2, [r3, #48]
 346 000c 42F48002 		orr	r2, r2, #4194304
 347 0010 1A63     		str	r2, [r3, #48]
1634:Core/Src/main.c **** 
 348              		.loc 1 1634 3 view .LVU110
 349 0012 1B6B     		ldr	r3, [r3, #48]
 350 0014 03F48003 		and	r3, r3, #4194304
 351 0018 0193     		str	r3, [sp, #4]
1634:Core/Src/main.c **** 
 352              		.loc 1 1634 3 view .LVU111
 353 001a 019B     		ldr	r3, [sp, #4]
 354              	.LBE9:
1634:Core/Src/main.c **** 
 355              		.loc 1 1634 3 view .LVU112
1638:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 356              		.loc 1 1638 3 view .LVU113
 357 001c 0A46     		mov	r2, r1
 358 001e 3820     		movs	r0, #56
 359 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 360              	.LVL12:
1639:Core/Src/main.c **** 
 361              		.loc 1 1639 3 view .LVU114
 362 0024 3820     		movs	r0, #56
 363 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 364              	.LVL13:
1641:Core/Src/main.c **** 
 365              		.loc 1 1641 1 is_stmt 0 view .LVU115
 366 002a 03B0     		add	sp, sp, #12
 367              	.LCFI5:
 368              		.cfi_def_cfa_offset 4
 369              		@ sp needed
 370 002c 5DF804FB 		ldr	pc, [sp], #4
 371              	.L8:
 372              		.align	2
 373              	.L7:
 374 0030 00380240 		.word	1073887232
 375              		.cfi_endproc
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 38


 376              	.LFE251:
 378              		.section	.text.rotary_read,"ax",%progbits
 379              		.align	1
 380              		.global	rotary_read
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	rotary_read:
 386              	.LFB253:
1728:Core/Src/main.c **** 
1729:Core/Src/main.c **** /* USER CODE BEGIN 4 */
1730:Core/Src/main.c **** 
1731:Core/Src/main.c **** uint8_t rotary_read() {
 387              		.loc 1 1731 23 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 38B5     		push	{r3, r4, r5, lr}
 392              	.LCFI6:
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 3, -16
 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
1732:Core/Src/main.c **** 	uint8_t _rotaryvalue = 0;
 398              		.loc 1 1732 2 view .LVU117
 399              	.LVL14:
1733:Core/Src/main.c **** 	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 0 : 1;	// Rotary1
 400              		.loc 1 1733 2 view .LVU118
 401              		.loc 1 1733 19 is_stmt 0 view .LVU119
 402 0002 114D     		ldr	r5, .L11
 403 0004 4FF48051 		mov	r1, #4096
 404 0008 2846     		mov	r0, r5
 405 000a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 406              	.LVL15:
 407              		.loc 1 1733 61 view .LVU120
 408 000e B0FA80F4 		clz	r4, r0
 409 0012 6409     		lsrs	r4, r4, #5
 410              	.LVL16:
1734:Core/Src/main.c **** 	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 0 : 1;	// Rotary2
 411              		.loc 1 1734 2 is_stmt 1 view .LVU121
 412              		.loc 1 1734 19 is_stmt 0 view .LVU122
 413 0014 4FF48061 		mov	r1, #1024
 414 0018 2846     		mov	r0, r5
 415 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 416              	.LVL17:
 417              		.loc 1 1734 15 view .LVU123
 418 001e 0028     		cmp	r0, #0
 419 0020 08BF     		it	eq
 420 0022 0134     		addeq	r4, r4, #1
 421              	.LVL18:
1735:Core/Src/main.c **** 	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 0 : 1;	// Rotary4
 422              		.loc 1 1735 2 is_stmt 1 view .LVU124
 423              		.loc 1 1735 19 is_stmt 0 view .LVU125
 424 0024 4FF48051 		mov	r1, #4096
 425 0028 0848     		ldr	r0, .L11+4
 426 002a FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 39


 427              	.LVL19:
 428              		.loc 1 1735 15 view .LVU126
 429 002e 0028     		cmp	r0, #0
 430 0030 08BF     		it	eq
 431 0032 0134     		addeq	r4, r4, #1
 432              	.LVL20:
1736:Core/Src/main.c **** 	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
 433              		.loc 1 1736 2 is_stmt 1 view .LVU127
 434              		.loc 1 1736 19 is_stmt 0 view .LVU128
 435 0034 4FF40061 		mov	r1, #2048
 436 0038 2846     		mov	r0, r5
 437 003a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 438              	.LVL21:
1737:Core/Src/main.c **** 	return _rotaryvalue;
 439              		.loc 1 1737 2 is_stmt 1 view .LVU129
1738:Core/Src/main.c **** }
 440              		.loc 1 1738 1 is_stmt 0 view .LVU130
 441 003e 0028     		cmp	r0, #0
 442 0040 14BF     		ite	ne
 443 0042 2046     		movne	r0, r4
 444 0044 601C     		addeq	r0, r4, #1
 445              	.LVL22:
 446              		.loc 1 1738 1 view .LVU131
 447 0046 38BD     		pop	{r3, r4, r5, pc}
 448              	.L12:
 449              		.align	2
 450              	.L11:
 451 0048 00080240 		.word	1073874944
 452 004c 00000240 		.word	1073872896
 453              		.cfi_endproc
 454              	.LFE253:
 456              		.section	.text.led_rgb,"ax",%progbits
 457              		.align	1
 458              		.global	led_rgb
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 463              	led_rgb:
 464              	.LVL23:
 465              	.LFB254:
1739:Core/Src/main.c **** 
1740:Core/Src/main.c **** void led_rgb(char r, char g, char b) {
 466              		.loc 1 1740 38 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		.loc 1 1740 38 is_stmt 0 view .LVU133
 471 0000 70B5     		push	{r4, r5, r6, lr}
 472              	.LCFI7:
 473              		.cfi_def_cfa_offset 16
 474              		.cfi_offset 4, -16
 475              		.cfi_offset 5, -12
 476              		.cfi_offset 6, -8
 477              		.cfi_offset 14, -4
 478 0002 0D46     		mov	r5, r1
 479 0004 1446     		mov	r4, r2
1741:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 40


 480              		.loc 1 1741 2 is_stmt 1 view .LVU134
 481 0006 0D4E     		ldr	r6, .L15
 482 0008 B0FA80F2 		clz	r2, r0
 483              	.LVL24:
 484              		.loc 1 1741 2 is_stmt 0 view .LVU135
 485 000c 5209     		lsrs	r2, r2, #5
 486 000e 4FF40061 		mov	r1, #2048
 487              	.LVL25:
 488              		.loc 1 1741 2 view .LVU136
 489 0012 3046     		mov	r0, r6
 490              	.LVL26:
 491              		.loc 1 1741 2 view .LVU137
 492 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 493              	.LVL27:
1742:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 494              		.loc 1 1742 2 is_stmt 1 view .LVU138
 495 0018 B5FA85F2 		clz	r2, r5
 496 001c 5209     		lsrs	r2, r2, #5
 497 001e 4FF48061 		mov	r1, #1024
 498 0022 3046     		mov	r0, r6
 499 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 500              	.LVL28:
1743:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 501              		.loc 1 1743 2 view .LVU139
 502 0028 B4FA84F2 		clz	r2, r4
 503 002c 5209     		lsrs	r2, r2, #5
 504 002e 4FF40071 		mov	r1, #512
 505 0032 0348     		ldr	r0, .L15+4
 506 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 507              	.LVL29:
1744:Core/Src/main.c **** }
 508              		.loc 1 1744 1 is_stmt 0 view .LVU140
 509 0038 70BD     		pop	{r4, r5, r6, pc}
 510              	.L16:
 511 003a 00BF     		.align	2
 512              	.L15:
 513 003c 00000240 		.word	1073872896
 514 0040 00080240 		.word	1073874944
 515              		.cfi_endproc
 516              	.LFE254:
 518              		.section	.text.sensor_finalize,"ax",%progbits
 519              		.align	1
 520              		.global	sensor_finalize
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 525              	sensor_finalize:
 526              	.LFB256:
1745:Core/Src/main.c **** 
1746:Core/Src/main.c **** void sensor_initialize() {
1747:Core/Src/main.c **** 	sensgettime = 0;
1748:Core/Src/main.c **** 	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
1749:Core/Src/main.c **** 	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
1750:Core/Src/main.c **** 		Error_Handler();
1751:Core/Src/main.c **** 	}
1752:Core/Src/main.c **** 	HAL_Delay(1000);
1753:Core/Src/main.c **** }
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 41


1754:Core/Src/main.c **** 
1755:Core/Src/main.c **** void sensor_finalize() {
 527              		.loc 1 1755 24 is_stmt 1 view -0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531 0000 08B5     		push	{r3, lr}
 532              	.LCFI8:
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 3, -8
 535              		.cfi_offset 14, -4
1756:Core/Src/main.c **** 	HAL_ADC_Stop_DMA(&hadc1);
 536              		.loc 1 1756 2 view .LVU142
 537 0002 0248     		ldr	r0, .L19
 538 0004 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 539              	.LVL30:
1757:Core/Src/main.c **** }
 540              		.loc 1 1757 1 is_stmt 0 view .LVU143
 541 0008 08BD     		pop	{r3, pc}
 542              	.L20:
 543 000a 00BF     		.align	2
 544              	.L19:
 545 000c 00000000 		.word	.LANCHOR0
 546              		.cfi_endproc
 547              	.LFE256:
 549              		.section	.rodata.d_print.str1.4,"aMS",%progbits,1
 550              		.align	2
 551              	.LC0:
 552 0000 2F2F2F2F 		.ascii	"////////// d_print //////////\015\000"
 552      2F2F2F2F 
 552      2F2F2064 
 552      5F707269 
 552      6E74202F 
 553 001f 00       		.align	2
 554              	.LC1:
 555 0020 656E636F 		.ascii	"encoder_l = %5d, encoder_r = %5d\015\012\000"
 555      6465725F 
 555      6C203D20 
 555      2535642C 
 555      20656E63 
 556              		.global	__aeabi_d2f
 557              		.global	__aeabi_f2d
 558 0043 00       		.align	2
 559              	.LC2:
 560 0044 76656C6F 		.ascii	"velocity = %5.3f\015\012\000"
 560      63697479 
 560      203D2025 
 560      352E3366 
 560      0D0A00
 561 0057 00       		.align	2
 562              	.LC3:
 563 0058 76656C6F 		.ascii	"velocity_error = %5.3f, s_velocity_error = %5.3f\015"
 563      63697479 
 563      5F657272 
 563      6F72203D 
 563      2025352E 
 564 0089 0A00     		.ascii	"\012\000"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 42


 565 008b 00       		.align	2
 566              	.LC4:
 567 008c 76656C6F 		.ascii	"velocity_next = %5.3f\015\012\000"
 567      63697479 
 567      5F6E6578 
 567      74203D20 
 567      25352E33 
 568              		.align	2
 569              	.LC5:
 570 00a4 6E657874 		.ascii	"nextspeed = %5.3f\015\012\000"
 570      73706565 
 570      64203D20 
 570      25352E33 
 570      660D0A00 
 571              		.align	2
 572              	.LC6:
 573 00b8 6C656674 		.ascii	"leftmotor = %5.3f, rightmotor = %5.3f\015\012\000"
 573      6D6F746F 
 573      72203D20 
 573      25352E33 
 573      662C2072 
 574              		.section	.text.d_print,"ax",%progbits
 575              		.align	1
 576              		.global	d_print
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 581              	d_print:
 582              	.LFB259:
1758:Core/Src/main.c **** 
1759:Core/Src/main.c **** void running_initialize() {
1760:Core/Src/main.c **** 	sensor_initialize();
1761:Core/Src/main.c **** #if D_VELOCITY_CONTROL
1762:Core/Src/main.c **** #if D_VELOCITY_CONTROL_TIMER
1763:Core/Src/main.c **** 	stoptime = 0;
1764:Core/Src/main.c **** #endif
1765:Core/Src/main.c **** 	s_velocity_error_l = 0;
1766:Core/Src/main.c **** 	s_velocity_error_r = 0;
1767:Core/Src/main.c **** #endif
1768:Core/Src/main.c **** 	printf("Encoder_Start\r\n");
1769:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
1770:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
1771:Core/Src/main.c **** 	subsensbuf = 0;
1772:Core/Src/main.c **** 	marker = 0;
1773:Core/Src/main.c **** 	sidedeltacount = 0;
1774:Core/Src/main.c **** 	markerstate = 0;
1775:Core/Src/main.c **** 	rightmarkercount = 0;
1776:Core/Src/main.c **** #if USE_FLASH
1777:Core/Src/main.c **** 	course_state_time = 0;
1778:Core/Src/main.c **** #endif
1779:Core/Src/main.c **** 	printf("SIDESENSOR ENCODER\r\n");
1780:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim10);
1781:Core/Src/main.c **** 	leftmotor = 0;
1782:Core/Src/main.c **** 	rightmotor = 0;
1783:Core/Src/main.c **** 	beforedirection = 0;
1784:Core/Src/main.c **** 	encoder_initialize();
1785:Core/Src/main.c **** 	printf("PWM_Start\r\n");
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 43


1786:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
1787:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
1788:Core/Src/main.c **** 	printf("PID\r\n");
1789:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim6);	// PID
1790:Core/Src/main.c **** #if PLAY
1791:Core/Src/main.c **** 	motorenable = 1;
1792:Core/Src/main.c **** #endif
1793:Core/Src/main.c **** }
1794:Core/Src/main.c **** 
1795:Core/Src/main.c **** void running_finalize() {
1796:Core/Src/main.c **** 	motorenable = 0;
1797:Core/Src/main.c **** 	sensor_finalize();
1798:Core/Src/main.c **** 	HAL_TIM_Base_Stop_IT(&htim6);
1799:Core/Src/main.c **** 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
1800:Core/Src/main.c **** 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
1801:Core/Src/main.c **** 	encoder_finalize();
1802:Core/Src/main.c **** 	HAL_TIM_Base_Stop_IT(&htim10);
1803:Core/Src/main.c **** }
1804:Core/Src/main.c **** 
1805:Core/Src/main.c **** void d_print() {
 583              		.loc 1 1805 16 is_stmt 1 view -0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587 0000 00B5     		push	{lr}
 588              	.LCFI9:
 589              		.cfi_def_cfa_offset 4
 590              		.cfi_offset 14, -4
 591 0002 83B0     		sub	sp, sp, #12
 592              	.LCFI10:
 593              		.cfi_def_cfa_offset 16
1806:Core/Src/main.c **** 	printf("////////// d_print //////////\r\n");
 594              		.loc 1 1806 2 view .LVU145
 595 0004 1E48     		ldr	r0, .L23
 596 0006 FFF7FEFF 		bl	puts
 597              	.LVL31:
1807:Core/Src/main.c **** 
1808:Core/Src/main.c **** #if D_ANALOG
1809:Core/Src/main.c **** #if !CSV_FORMAT
1810:Core/Src/main.c **** #if ATTACH_LONGSENSOR
1811:Core/Src/main.c **** 	// use normal sensor and long sensor
1812:Core/Src/main.c **** 	printf("\x1b[24C");	// Cursor move right *24
1813:Core/Src/main.c **** 	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
1814:Core/Src/main.c **** 	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], an
1815:Core/Src/main.c **** #else	// ATTACH_LONGSENSOR
1816:Core/Src/main.c **** #if !USE_LONGSENSOR
1817:Core/Src/main.c **** 	// only use normal sensor
1818:Core/Src/main.c **** 	printf("\x1b[24C");	// Cursor move right *24
1819:Core/Src/main.c **** 	printf(ESC_RED);
1820:Core/Src/main.c **** 	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3],
1821:Core/Src/main.c **** 			analog[2]);
1822:Core/Src/main.c **** 	printf(ESC_DEF);
1823:Core/Src/main.c **** 	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
1824:Core/Src/main.c **** 			analog[9], analog[8], analog[15], analog[14], analog[7], analog[6],
1825:Core/Src/main.c **** 			analog[1], analog[0], analog[13], analog[12], analog[11],
1826:Core/Src/main.c **** 			analog[10]);
1827:Core/Src/main.c **** #else	// !USE_LONGSENSOR
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 44


1828:Core/Src/main.c **** 	// only use long sensor
1829:Core/Src/main.c **** 	printf("\x1b[24C");	// Cursor move right *24
1830:Core/Src/main.c **** 	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
1831:Core/Src/main.c **** 	printf(ESC_RED);
1832:Core/Src/main.c **** 	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], an
1833:Core/Src/main.c **** 	printf(ESC_DEF);
1834:Core/Src/main.c **** #endif	// !USE_LONGSENSOR
1835:Core/Src/main.c **** #endif	// ATTACH_LONGSENSOR
1836:Core/Src/main.c **** 	printf("\r\n");
1837:Core/Src/main.c **** #else	// !CSV_FORMAT
1838:Core/Src/main.c **** 	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
1839:Core/Src/main.c **** 	{
1840:Core/Src/main.c **** 		printf("[%2d] = ", i * 2);
1841:Core/Src/main.c **** 		printf("%4d,", analograte[i * 2]);
1842:Core/Src/main.c **** 	}
1843:Core/Src/main.c **** 	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
1844:Core/Src/main.c **** 	{
1845:Core/Src/main.c **** 		printf("[%2d] = ", i * 2 - 1);
1846:Core/Src/main.c **** 		printf("%4d,", analograte[i * 2 - 1]);
1847:Core/Src/main.c **** 	}
1848:Core/Src/main.c **** 	printf("analograte\r\n");
1849:Core/Src/main.c **** 	printf(ESC_CYA);
1850:Core/Src/main.c **** 	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
1851:Core/Src/main.c **** 	{
1852:Core/Src/main.c **** 		printf("[%2d] = ", i * 2);
1853:Core/Src/main.c **** 		printf("%4d,", analog[i * 2]);
1854:Core/Src/main.c **** 	}
1855:Core/Src/main.c **** 	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
1856:Core/Src/main.c **** 	{
1857:Core/Src/main.c **** 		printf("[%2d] = ", i * 2 - 1);
1858:Core/Src/main.c **** 		printf("%4d,", analog[i * 2 - 1]);
1859:Core/Src/main.c **** 	}
1860:Core/Src/main.c **** 	printf("analog\r\n");
1861:Core/Src/main.c **** 	printf(ESC_RED);
1862:Core/Src/main.c **** 	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
1863:Core/Src/main.c **** 	{
1864:Core/Src/main.c **** 		printf("[%2d] = ", i * 2);
1865:Core/Src/main.c **** 		printf("%4d,", analogmax[i * 2]);
1866:Core/Src/main.c **** 	}
1867:Core/Src/main.c **** 	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
1868:Core/Src/main.c **** 	{
1869:Core/Src/main.c **** 		printf("[%2d] = ", i * 2 - 1);
1870:Core/Src/main.c **** 		printf("%4d,", analogmax[i * 2 - 1]);
1871:Core/Src/main.c **** 	}
1872:Core/Src/main.c **** 	printf("analogmax\r\n");
1873:Core/Src/main.c **** 	printf(ESC_BLU);
1874:Core/Src/main.c **** 	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
1875:Core/Src/main.c **** 	{
1876:Core/Src/main.c **** 		printf("[%2d] = ", i * 2);
1877:Core/Src/main.c **** 		printf("%4d,", analogmin[i * 2]);
1878:Core/Src/main.c **** 	}
1879:Core/Src/main.c **** 	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
1880:Core/Src/main.c **** 	{
1881:Core/Src/main.c **** 		printf("[%2d] = ", i * 2 - 1);
1882:Core/Src/main.c **** 		printf("%4d,", analogmin[i * 2 - 1]);
1883:Core/Src/main.c **** 	}
1884:Core/Src/main.c **** 	printf("analogmin\r\n");
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 45


1885:Core/Src/main.c **** 	printf(ESC_GRE);
1886:Core/Src/main.c **** 	printf("leftmotor = %5d, rightmotor = %5d,", leftmotor, rightmotor);
1887:Core/Src/main.c **** 	printf("analogl = %5d, analogr = %5d, direction = %5d", analogl, analogr, direction);
1888:Core/Src/main.c **** 	printf("\r\n");
1889:Core/Src/main.c **** 	printf(ESC_DEF);
1890:Core/Src/main.c **** 	printf("\r\n");
1891:Core/Src/main.c **** #endif	// !CSV_FORMAT
1892:Core/Src/main.c **** #endif	// D_ANALOG
1893:Core/Src/main.c **** 
1894:Core/Src/main.c **** #if D_ENCODER
1895:Core/Src/main.c **** 	printf("encoder_l = %d, encoder_r = %d \r\ndvl = %d, dvr = %d\r\n",
1896:Core/Src/main.c **** 			encoder_l, encoder_r, dvl, dvr);
1897:Core/Src/main.c **** 	printf("lengthl = %d, lengthr = %d \r\nvelocityl = %d, velocityr = %d\r\n",
1898:Core/Src/main.c **** 			lengthl, lengthr, velocityl, velocityr);
1899:Core/Src/main.c **** #endif
1900:Core/Src/main.c **** 
1901:Core/Src/main.c **** #if D_PWM
1902:Core/Src/main.c **** 	printf("pwmstepoutput = %5d, pwmsteptime = %5d, pwmstepud = %d\r\n", pwmstepoutput, pwmsteptime, p
1903:Core/Src/main.c **** #endif
1904:Core/Src/main.c **** 
1905:Core/Src/main.c **** #if D_ROTARY
1906:Core/Src/main.c **** 	printf("rotary_value = %x\r\n", rotary_value);
1907:Core/Src/main.c **** #endif
1908:Core/Src/main.c **** 
1909:Core/Src/main.c **** #if D_SWITCH
1910:Core/Src/main.c **** 	printf("enter = %d\r\n", enter);
1911:Core/Src/main.c **** #endif
1912:Core/Src/main.c **** 
1913:Core/Src/main.c **** #if D_IMU
1914:Core/Src/main.c **** #endif
1915:Core/Src/main.c **** 
1916:Core/Src/main.c **** #if D_VELOCITY_CONTROL
1917:Core/Src/main.c **** 	printf("encoder_l = %5d, encoder_r = %5d\r\n", encoder_l, encoder_r);
 598              		.loc 1 1917 2 view .LVU146
 599 000a 1E4B     		ldr	r3, .L23+4
 600 000c B3F90020 		ldrsh	r2, [r3]
 601 0010 1D4B     		ldr	r3, .L23+8
 602 0012 B3F90010 		ldrsh	r1, [r3]
 603 0016 1D48     		ldr	r0, .L23+12
 604 0018 FFF7FEFF 		bl	printf
 605              	.LVL32:
1918:Core/Src/main.c **** 	printf("velocity = %5.3f\r\n", (float)velocity_r);
 606              		.loc 1 1918 2 view .LVU147
 607              		.loc 1 1918 33 is_stmt 0 view .LVU148
 608 001c 1C4B     		ldr	r3, .L23+16
 609 001e D3E90001 		ldrd	r0, [r3]
 610 0022 FFF7FEFF 		bl	__aeabi_d2f
 611              	.LVL33:
 612              		.loc 1 1918 2 view .LVU149
 613 0026 FFF7FEFF 		bl	__aeabi_f2d
 614              	.LVL34:
 615 002a 0246     		mov	r2, r0
 616 002c 0B46     		mov	r3, r1
 617 002e 1948     		ldr	r0, .L23+20
 618 0030 FFF7FEFF 		bl	printf
 619              	.LVL35:
1919:Core/Src/main.c **** 	printf("velocity_error = %5.3f, s_velocity_error = %5.3f\r\n", velocity_error_r, s_velocity_error_
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 46


 620              		.loc 1 1919 2 is_stmt 1 view .LVU150
 621 0034 184B     		ldr	r3, .L23+24
 622 0036 D3E90023 		ldrd	r2, [r3]
 623 003a CDE90023 		strd	r2, [sp]
 624 003e 174B     		ldr	r3, .L23+28
 625 0040 D3E90023 		ldrd	r2, [r3]
 626 0044 1648     		ldr	r0, .L23+32
 627 0046 FFF7FEFF 		bl	printf
 628              	.LVL36:
1920:Core/Src/main.c **** 	printf("velocity_next = %5.3f\r\n", velocity_next_r);
 629              		.loc 1 1920 2 view .LVU151
 630 004a 164B     		ldr	r3, .L23+36
 631 004c D3E90023 		ldrd	r2, [r3]
 632 0050 1548     		ldr	r0, .L23+40
 633 0052 FFF7FEFF 		bl	printf
 634              	.LVL37:
1921:Core/Src/main.c **** 	printf("nextspeed = %5.3f\r\n", nextspeed_r);
 635              		.loc 1 1921 2 view .LVU152
 636 0056 154B     		ldr	r3, .L23+44
 637 0058 D3E90023 		ldrd	r2, [r3]
 638 005c 1448     		ldr	r0, .L23+48
 639 005e FFF7FEFF 		bl	printf
 640              	.LVL38:
1922:Core/Src/main.c **** 	printf("leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor);
 641              		.loc 1 1922 2 view .LVU153
 642 0062 144B     		ldr	r3, .L23+52
 643 0064 D3E90023 		ldrd	r2, [r3]
 644 0068 CDE90023 		strd	r2, [sp]
 645 006c 124B     		ldr	r3, .L23+56
 646 006e D3E90023 		ldrd	r2, [r3]
 647 0072 1248     		ldr	r0, .L23+60
 648 0074 FFF7FEFF 		bl	printf
 649              	.LVL39:
1923:Core/Src/main.c **** #endif
1924:Core/Src/main.c **** }	// d_print
 650              		.loc 1 1924 1 is_stmt 0 view .LVU154
 651 0078 03B0     		add	sp, sp, #12
 652              	.LCFI11:
 653              		.cfi_def_cfa_offset 4
 654              		@ sp needed
 655 007a 5DF804FB 		ldr	pc, [sp], #4
 656              	.L24:
 657 007e 00BF     		.align	2
 658              	.L23:
 659 0080 00000000 		.word	.LC0
 660 0084 00000000 		.word	.LANCHOR1
 661 0088 00000000 		.word	.LANCHOR2
 662 008c 20000000 		.word	.LC1
 663 0090 00000000 		.word	.LANCHOR3
 664 0094 44000000 		.word	.LC2
 665 0098 00000000 		.word	.LANCHOR5
 666 009c 00000000 		.word	.LANCHOR4
 667 00a0 58000000 		.word	.LC3
 668 00a4 00000000 		.word	.LANCHOR6
 669 00a8 8C000000 		.word	.LC4
 670 00ac 00000000 		.word	.LANCHOR7
 671 00b0 A4000000 		.word	.LC5
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 47


 672 00b4 00000000 		.word	.LANCHOR9
 673 00b8 00000000 		.word	.LANCHOR8
 674 00bc B8000000 		.word	.LC6
 675              		.cfi_endproc
 676              	.LFE259:
 678              		.section	.text.encoder_initialize,"ax",%progbits
 679              		.align	1
 680              		.global	encoder_initialize
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 685              	encoder_initialize:
 686              	.LFB260:
1925:Core/Src/main.c **** 
1926:Core/Src/main.c **** #if USE_IMU
1927:Core/Src/main.c **** void IMU_printf(Inertial *a) {
1928:Core/Src/main.c **** 	printf("%4d, %4d, %4d, ", a->accel.x, a->accel.y, a->accel.z);
1929:Core/Src/main.c **** 	printf("%4d, %4d, %4d\r\n", a->gyro.x, a->gyro.y, a->gyro.z);
1930:Core/Src/main.c **** }
1931:Core/Src/main.c **** 
1932:Core/Src/main.c **** void IMU_raw_printf() {
1933:Core/Src/main.c **** 	printf("%4d, %4d, %4d, ", inertial.accel.x, inertial.accel.y,
1934:Core/Src/main.c **** 			inertial.accel.z);
1935:Core/Src/main.c **** 	printf("%4d, %4d, %4d\r\n", inertial.gyro.x, inertial.gyro.y,
1936:Core/Src/main.c **** 			inertial.gyro.z);
1937:Core/Src/main.c **** }
1938:Core/Src/main.c **** #endif
1939:Core/Src/main.c **** 
1940:Core/Src/main.c **** void encoder_initialize() {
 687              		.loc 1 1940 27 is_stmt 1 view -0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691 0000 08B5     		push	{r3, lr}
 692              	.LCFI12:
 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 3, -8
 695              		.cfi_offset 14, -4
1941:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 696              		.loc 1 1941 2 view .LVU156
 697 0002 3C21     		movs	r1, #60
 698 0004 0648     		ldr	r0, .L27
 699 0006 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 700              	.LVL40:
1942:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 701              		.loc 1 1942 2 view .LVU157
 702 000a 3C21     		movs	r1, #60
 703 000c 0548     		ldr	r0, .L27+4
 704 000e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 705              	.LVL41:
1943:Core/Src/main.c **** 
1944:Core/Src/main.c **** 	TIM1->CNT = 0;
 706              		.loc 1 1944 2 view .LVU158
 707              		.loc 1 1944 12 is_stmt 0 view .LVU159
 708 0012 0023     		movs	r3, #0
 709 0014 044A     		ldr	r2, .L27+8
 710 0016 5362     		str	r3, [r2, #36]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 48


1945:Core/Src/main.c **** 	TIM3->CNT = 0;
 711              		.loc 1 1945 2 is_stmt 1 view .LVU160
 712              		.loc 1 1945 12 is_stmt 0 view .LVU161
 713 0018 A2F57C42 		sub	r2, r2, #64512
 714 001c 5362     		str	r3, [r2, #36]
1946:Core/Src/main.c **** }
 715              		.loc 1 1946 1 view .LVU162
 716 001e 08BD     		pop	{r3, pc}
 717              	.L28:
 718              		.align	2
 719              	.L27:
 720 0020 00000000 		.word	.LANCHOR10
 721 0024 00000000 		.word	.LANCHOR11
 722 0028 00000140 		.word	1073807360
 723              		.cfi_endproc
 724              	.LFE260:
 726              		.section	.text.encoder_finalize,"ax",%progbits
 727              		.align	1
 728              		.global	encoder_finalize
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 733              	encoder_finalize:
 734              	.LFB261:
1947:Core/Src/main.c **** 
1948:Core/Src/main.c **** void encoder_finalize() {
 735              		.loc 1 1948 25 is_stmt 1 view -0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739 0000 08B5     		push	{r3, lr}
 740              	.LCFI13:
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 3, -8
 743              		.cfi_offset 14, -4
1949:Core/Src/main.c **** 	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 744              		.loc 1 1949 2 view .LVU164
 745 0002 3C21     		movs	r1, #60
 746 0004 0348     		ldr	r0, .L31
 747 0006 FFF7FEFF 		bl	HAL_TIM_Encoder_Stop
 748              	.LVL42:
1950:Core/Src/main.c **** 	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 749              		.loc 1 1950 2 view .LVU165
 750 000a 3C21     		movs	r1, #60
 751 000c 0248     		ldr	r0, .L31+4
 752 000e FFF7FEFF 		bl	HAL_TIM_Encoder_Stop
 753              	.LVL43:
1951:Core/Src/main.c **** }
 754              		.loc 1 1951 1 is_stmt 0 view .LVU166
 755 0012 08BD     		pop	{r3, pc}
 756              	.L32:
 757              		.align	2
 758              	.L31:
 759 0014 00000000 		.word	.LANCHOR10
 760 0018 00000000 		.word	.LANCHOR11
 761              		.cfi_endproc
 762              	.LFE261:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 49


 764              		.section	.text.running_finalize,"ax",%progbits
 765              		.align	1
 766              		.global	running_finalize
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 771              	running_finalize:
 772              	.LFB258:
1795:Core/Src/main.c **** 	motorenable = 0;
 773              		.loc 1 1795 25 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777 0000 38B5     		push	{r3, r4, r5, lr}
 778              	.LCFI14:
 779              		.cfi_def_cfa_offset 16
 780              		.cfi_offset 3, -16
 781              		.cfi_offset 4, -12
 782              		.cfi_offset 5, -8
 783              		.cfi_offset 14, -4
1796:Core/Src/main.c **** 	sensor_finalize();
 784              		.loc 1 1796 2 view .LVU168
1796:Core/Src/main.c **** 	sensor_finalize();
 785              		.loc 1 1796 14 is_stmt 0 view .LVU169
 786 0002 0025     		movs	r5, #0
 787 0004 0A4B     		ldr	r3, .L35
 788 0006 1D70     		strb	r5, [r3]
1797:Core/Src/main.c **** 	HAL_TIM_Base_Stop_IT(&htim6);
 789              		.loc 1 1797 2 is_stmt 1 view .LVU170
 790 0008 FFF7FEFF 		bl	sensor_finalize
 791              	.LVL44:
1798:Core/Src/main.c **** 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 792              		.loc 1 1798 2 view .LVU171
 793 000c 0948     		ldr	r0, .L35+4
 794 000e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 795              	.LVL45:
1799:Core/Src/main.c **** 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 796              		.loc 1 1799 2 view .LVU172
 797 0012 094C     		ldr	r4, .L35+8
 798 0014 0421     		movs	r1, #4
 799 0016 2046     		mov	r0, r4
 800 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 801              	.LVL46:
1800:Core/Src/main.c **** 	encoder_finalize();
 802              		.loc 1 1800 2 view .LVU173
 803 001c 2946     		mov	r1, r5
 804 001e 2046     		mov	r0, r4
 805 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 806              	.LVL47:
1801:Core/Src/main.c **** 	HAL_TIM_Base_Stop_IT(&htim10);
 807              		.loc 1 1801 2 view .LVU174
 808 0024 FFF7FEFF 		bl	encoder_finalize
 809              	.LVL48:
1802:Core/Src/main.c **** }
 810              		.loc 1 1802 2 view .LVU175
 811 0028 0448     		ldr	r0, .L35+12
 812 002a FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 50


 813              	.LVL49:
1803:Core/Src/main.c **** 
 814              		.loc 1 1803 1 is_stmt 0 view .LVU176
 815 002e 38BD     		pop	{r3, r4, r5, pc}
 816              	.L36:
 817              		.align	2
 818              	.L35:
 819 0030 00000000 		.word	.LANCHOR12
 820 0034 00000000 		.word	.LANCHOR13
 821 0038 00000000 		.word	.LANCHOR14
 822 003c 00000000 		.word	.LANCHOR15
 823              		.cfi_endproc
 824              	.LFE258:
 826              		.section	.text.__io_putchar,"ax",%progbits
 827              		.align	1
 828              		.global	__io_putchar
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 833              	__io_putchar:
 834              	.LVL50:
 835              	.LFB262:
1952:Core/Src/main.c **** 
1953:Core/Src/main.c **** PUTCHAR_PROTOTYPE {
 836              		.loc 1 1953 19 is_stmt 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 8
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		.loc 1 1953 19 is_stmt 0 view .LVU178
 841 0000 00B5     		push	{lr}
 842              	.LCFI15:
 843              		.cfi_def_cfa_offset 4
 844              		.cfi_offset 14, -4
 845 0002 83B0     		sub	sp, sp, #12
 846              	.LCFI16:
 847              		.cfi_def_cfa_offset 16
 848 0004 0190     		str	r0, [sp, #4]
1954:Core/Src/main.c **** 	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 849              		.loc 1 1954 2 is_stmt 1 view .LVU179
 850 0006 4FF6FF73 		movw	r3, #65535
 851 000a 0122     		movs	r2, #1
 852 000c 01A9     		add	r1, sp, #4
 853 000e 0348     		ldr	r0, .L39
 854              	.LVL51:
 855              		.loc 1 1954 2 is_stmt 0 view .LVU180
 856 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 857              	.LVL52:
1955:Core/Src/main.c **** 	return ch;
 858              		.loc 1 1955 2 is_stmt 1 view .LVU181
1956:Core/Src/main.c **** }
 859              		.loc 1 1956 1 is_stmt 0 view .LVU182
 860 0014 0198     		ldr	r0, [sp, #4]
 861 0016 03B0     		add	sp, sp, #12
 862              	.LCFI17:
 863              		.cfi_def_cfa_offset 4
 864              		@ sp needed
 865 0018 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 51


 866              	.L40:
 867              		.align	2
 868              	.L39:
 869 001c 00000000 		.word	.LANCHOR16
 870              		.cfi_endproc
 871              	.LFE262:
 873              		.section	.text.low_pass_filter,"ax",%progbits
 874              		.align	1
 875              		.global	low_pass_filter
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 880              	low_pass_filter:
 881              	.LVL53:
 882              	.LFB263:
1957:Core/Src/main.c **** 
1958:Core/Src/main.c **** int low_pass_filter(int val, int pre_val, unsigned short int gamma)
1959:Core/Src/main.c **** {
 883              		.loc 1 1959 1 is_stmt 1 view -0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
1960:Core/Src/main.c **** 	return (gamma * pre_val + (1000 - gamma) * val) / 1000;
 888              		.loc 1 1960 2 view .LVU184
 889              		.loc 1 1960 34 is_stmt 0 view .LVU185
 890 0000 C2F57A73 		rsb	r3, r2, #1000
 891              		.loc 1 1960 43 view .LVU186
 892 0004 00FB03F3 		mul	r3, r0, r3
 893              		.loc 1 1960 26 view .LVU187
 894 0008 01FB0231 		mla	r1, r1, r2, r3
 895              	.LVL54:
 896              		.loc 1 1960 50 view .LVU188
 897 000c 0348     		ldr	r0, .L42
 898              	.LVL55:
 899              		.loc 1 1960 50 view .LVU189
 900 000e 80FB0130 		smull	r3, r0, r0, r1
 901 0012 C917     		asrs	r1, r1, #31
1961:Core/Src/main.c **** }
 902              		.loc 1 1961 1 view .LVU190
 903 0014 C1EBA010 		rsb	r0, r1, r0, asr #6
 904 0018 7047     		bx	lr
 905              	.L43:
 906 001a 00BF     		.align	2
 907              	.L42:
 908 001c D34D6210 		.word	274877907
 909              		.cfi_endproc
 910              	.LFE263:
 912              		.global	__aeabi_dcmplt
 913              		.global	__aeabi_dcmpgt
 914              		.global	__aeabi_d2uiz
 915              		.global	__aeabi_i2d
 916              		.global	__aeabi_dmul
 917              		.global	__aeabi_d2iz
 918              		.global	__aeabi_dsub
 919              		.global	__aeabi_dadd
 920              		.global	__aeabi_ddiv
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 52


 921              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 922              		.align	1
 923              		.global	HAL_TIM_PeriodElapsedCallback
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 928              	HAL_TIM_PeriodElapsedCallback:
 929              	.LVL56:
 930              	.LFB238:
 303:Core/Src/main.c **** 	if (htim->Instance == TIM6) {
 931              		.loc 1 303 61 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 303:Core/Src/main.c **** 	if (htim->Instance == TIM6) {
 935              		.loc 1 303 61 is_stmt 0 view .LVU192
 936 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 937              	.LCFI18:
 938              		.cfi_def_cfa_offset 40
 939              		.cfi_offset 3, -40
 940              		.cfi_offset 4, -36
 941              		.cfi_offset 5, -32
 942              		.cfi_offset 6, -28
 943              		.cfi_offset 7, -24
 944              		.cfi_offset 8, -20
 945              		.cfi_offset 9, -16
 946              		.cfi_offset 10, -12
 947              		.cfi_offset 11, -8
 948              		.cfi_offset 14, -4
 949 0004 2DED028B 		vpush.64	{d8}
 950              	.LCFI19:
 951              		.cfi_def_cfa_offset 48
 952              		.cfi_offset 80, -48
 953              		.cfi_offset 81, -44
 954 0008 0446     		mov	r4, r0
 304:Core/Src/main.c **** #if D_LED
 955              		.loc 1 304 2 is_stmt 1 view .LVU193
 304:Core/Src/main.c **** #if D_LED
 956              		.loc 1 304 10 is_stmt 0 view .LVU194
 957 000a 0268     		ldr	r2, [r0]
 304:Core/Src/main.c **** #if D_LED
 958              		.loc 1 304 5 view .LVU195
 959 000c 754B     		ldr	r3, .L93
 960 000e 9A42     		cmp	r2, r3
 961 0010 0DD0     		beq	.L85
 962              	.LVL57:
 963              	.L45:
 487:Core/Src/main.c **** 	{
 964              		.loc 1 487 2 is_stmt 1 view .LVU196
 487:Core/Src/main.c **** 	{
 965              		.loc 1 487 10 is_stmt 0 view .LVU197
 966 0012 2268     		ldr	r2, [r4]
 487:Core/Src/main.c **** 	{
 967              		.loc 1 487 5 view .LVU198
 968 0014 744B     		ldr	r3, .L93+4
 969 0016 9A42     		cmp	r2, r3
 970 0018 00F09480 		beq	.L86
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 53


 971              	.L60:
 608:Core/Src/main.c **** 	{
 972              		.loc 1 608 2 is_stmt 1 view .LVU199
 608:Core/Src/main.c **** 	{
 973              		.loc 1 608 10 is_stmt 0 view .LVU200
 974 001c 2268     		ldr	r2, [r4]
 608:Core/Src/main.c **** 	{
 975              		.loc 1 608 5 view .LVU201
 976 001e 734B     		ldr	r3, .L93+8
 977 0020 9A42     		cmp	r2, r3
 978 0022 00F0EF81 		beq	.L87
 979              	.LVL58:
 980              	.L44:
 640:Core/Src/main.c **** 
 981              		.loc 1 640 1 view .LVU202
 982 0026 BDEC028B 		vldm	sp!, {d8}
 983              	.LCFI20:
 984              		.cfi_remember_state
 985              		.cfi_restore 80
 986              		.cfi_restore 81
 987              		.cfi_def_cfa_offset 40
 988 002a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 989              	.LVL59:
 990              	.L85:
 991              	.LCFI21:
 992              		.cfi_restore_state
 321:Core/Src/main.c **** 		{
 993              		.loc 1 321 3 is_stmt 1 view .LVU203
 321:Core/Src/main.c **** 		{
 994              		.loc 1 321 15 is_stmt 0 view .LVU204
 995 002e 704B     		ldr	r3, .L93+12
 996 0030 1B88     		ldrh	r3, [r3]
 321:Core/Src/main.c **** 		{
 997              		.loc 1 321 5 view .LVU205
 998 0032 43F28332 		movw	r2, #13187
 999 0036 9342     		cmp	r3, r2
 1000 0038 5CD8     		bhi	.L46
 323:Core/Src/main.c **** 		}
 1001              		.loc 1 323 4 is_stmt 1 view .LVU206
 323:Core/Src/main.c **** 		}
 1002              		.loc 1 323 12 is_stmt 0 view .LVU207
 1003 003a 0133     		adds	r3, r3, #1
 1004 003c 6C4A     		ldr	r2, .L93+12
 1005 003e 1380     		strh	r3, [r2]	@ movhi
 1006              	.L47:
 331:Core/Src/main.c **** 		{
 1007              		.loc 1 331 3 is_stmt 1 view .LVU208
 331:Core/Src/main.c **** 		{
 1008              		.loc 1 331 7 is_stmt 0 view .LVU209
 1009 0040 6C4B     		ldr	r3, .L93+16
 1010 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 331:Core/Src/main.c **** 		{
 1011              		.loc 1 331 6 view .LVU210
 1012 0044 002B     		cmp	r3, #0
 1013 0046 59D0     		beq	.L48
 423:Core/Src/main.c **** 			rightmotor = nextspeed_r;
 1014              		.loc 1 423 4 is_stmt 1 view .LVU211
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 54


 423:Core/Src/main.c **** 			rightmotor = nextspeed_r;
 1015              		.loc 1 423 14 is_stmt 0 view .LVU212
 1016 0048 6B4B     		ldr	r3, .L93+20
 1017 004a D3E90001 		ldrd	r0, [r3]
 1018              	.LVL60:
 423:Core/Src/main.c **** 			rightmotor = nextspeed_r;
 1019              		.loc 1 423 14 view .LVU213
 1020 004e 6B4B     		ldr	r3, .L93+24
 1021 0050 C3E90001 		strd	r0, [r3]
 424:Core/Src/main.c **** #endif	// !USE_ANALOG
 1022              		.loc 1 424 4 is_stmt 1 view .LVU214
 424:Core/Src/main.c **** #endif	// !USE_ANALOG
 1023              		.loc 1 424 15 is_stmt 0 view .LVU215
 1024 0054 6A4B     		ldr	r3, .L93+28
 1025 0056 D3E90001 		ldrd	r0, [r3]
 1026 005a 6A4B     		ldr	r3, .L93+32
 1027 005c C3E90001 		strd	r0, [r3]
 1028              	.L49:
 439:Core/Src/main.c **** 		{
 1029              		.loc 1 439 3 is_stmt 1 view .LVU216
 439:Core/Src/main.c **** 		{
 1030              		.loc 1 439 5 is_stmt 0 view .LVU217
 1031 0060 0022     		movs	r2, #0
 1032 0062 0023     		movs	r3, #0
 1033 0064 6549     		ldr	r1, .L93+24
 1034 0066 D1E90001 		ldrd	r0, [r1]
 1035 006a FFF7FEFF 		bl	__aeabi_dcmplt
 1036              	.LVL61:
 1037 006e 0028     		cmp	r0, #0
 1038 0070 4DD1     		bne	.L88
 446:Core/Src/main.c **** 		}
 1039              		.loc 1 446 5 is_stmt 1 view .LVU218
 1040 0072 0122     		movs	r2, #1
 1041 0074 0421     		movs	r1, #4
 1042 0076 6448     		ldr	r0, .L93+36
 1043 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1044              	.LVL62:
 1045              	.L52:
 449:Core/Src/main.c **** 		{
 1046              		.loc 1 449 3 view .LVU219
 449:Core/Src/main.c **** 		{
 1047              		.loc 1 449 5 is_stmt 0 view .LVU220
 1048 007c 0022     		movs	r2, #0
 1049 007e 0023     		movs	r3, #0
 1050 0080 6049     		ldr	r1, .L93+32
 1051 0082 D1E90001 		ldrd	r0, [r1]
 1052 0086 FFF7FEFF 		bl	__aeabi_dcmplt
 1053              	.LVL63:
 1054 008a 0028     		cmp	r0, #0
 1055 008c 4CD1     		bne	.L89
 456:Core/Src/main.c **** 		}
 1056              		.loc 1 456 5 is_stmt 1 view .LVU221
 1057 008e 0022     		movs	r2, #0
 1058 0090 4FF40051 		mov	r1, #8192
 1059 0094 5D48     		ldr	r0, .L93+40
 1060 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1061              	.LVL64:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 55


 1062              	.L55:
 459:Core/Src/main.c **** 		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 1063              		.loc 1 459 3 view .LVU222
 459:Core/Src/main.c **** 		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 1064              		.loc 1 459 25 is_stmt 0 view .LVU223
 1065 009a 584B     		ldr	r3, .L93+24
 1066 009c D3E90089 		ldrd	r8, [r3]
 459:Core/Src/main.c **** 		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 1067              		.loc 1 459 43 view .LVU224
 1068 00a0 0022     		movs	r2, #0
 1069 00a2 5B4B     		ldr	r3, .L93+44
 1070 00a4 4046     		mov	r0, r8
 1071 00a6 4946     		mov	r1, r9
 1072 00a8 FFF7FEFF 		bl	__aeabi_dcmpgt
 1073              	.LVL65:
 1074 00ac 18B1     		cbz	r0, .L56
 1075 00ae 4FF00008 		mov	r8, #0
 1076 00b2 DFF85C91 		ldr	r9, .L93+44
 1077              	.L56:
 459:Core/Src/main.c **** 		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 1078              		.loc 1 459 13 discriminator 4 view .LVU225
 1079 00b6 514B     		ldr	r3, .L93+24
 1080 00b8 C3E90089 		strd	r8, [r3]
 460:Core/Src/main.c **** #endif
 1081              		.loc 1 460 3 is_stmt 1 discriminator 4 view .LVU226
 460:Core/Src/main.c **** #endif
 1082              		.loc 1 460 27 is_stmt 0 discriminator 4 view .LVU227
 1083 00bc 514B     		ldr	r3, .L93+32
 1084 00be D3E90067 		ldrd	r6, [r3]
 460:Core/Src/main.c **** #endif
 1085              		.loc 1 460 45 discriminator 4 view .LVU228
 1086 00c2 0022     		movs	r2, #0
 1087 00c4 524B     		ldr	r3, .L93+44
 1088 00c6 3046     		mov	r0, r6
 1089 00c8 3946     		mov	r1, r7
 1090 00ca FFF7FEFF 		bl	__aeabi_dcmpgt
 1091              	.LVL66:
 1092 00ce 08B1     		cbz	r0, .L58
 460:Core/Src/main.c **** #endif
 1093              		.loc 1 460 45 view .LVU229
 1094 00d0 0026     		movs	r6, #0
 1095 00d2 4F4F     		ldr	r7, .L93+44
 1096              	.L58:
 460:Core/Src/main.c **** #endif
 1097              		.loc 1 460 14 discriminator 4 view .LVU230
 1098 00d4 4B4B     		ldr	r3, .L93+32
 1099 00d6 C3E90067 		strd	r6, [r3]
 464:Core/Src/main.c **** 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 1100              		.loc 1 464 3 is_stmt 1 discriminator 4 view .LVU231
 1101 00da 4E4B     		ldr	r3, .L93+48
 1102 00dc 1D68     		ldr	r5, [r3]
 1103 00de 4046     		mov	r0, r8
 1104 00e0 4946     		mov	r1, r9
 1105 00e2 FFF7FEFF 		bl	__aeabi_d2uiz
 1106              	.LVL67:
 1107 00e6 6863     		str	r0, [r5, #52]
 465:Core/Src/main.c **** #else
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 56


 1108              		.loc 1 465 3 discriminator 4 view .LVU232
 1109 00e8 3046     		mov	r0, r6
 1110 00ea 3946     		mov	r1, r7
 1111 00ec FFF7FEFF 		bl	__aeabi_d2uiz
 1112              	.LVL68:
 1113 00f0 A863     		str	r0, [r5, #56]
 1114 00f2 8EE7     		b	.L45
 1115              	.LVL69:
 1116              	.L46:
 327:Core/Src/main.c **** 		}
 1117              		.loc 1 327 4 view .LVU233
 327:Core/Src/main.c **** 		}
 1118              		.loc 1 327 16 is_stmt 0 view .LVU234
 1119 00f4 3F4B     		ldr	r3, .L93+16
 1120 00f6 0022     		movs	r2, #0
 1121 00f8 1A70     		strb	r2, [r3]
 1122 00fa A1E7     		b	.L47
 1123              	.L48:
 436:Core/Src/main.c **** 			rightmotor = 0;
 1124              		.loc 1 436 4 is_stmt 1 view .LVU235
 436:Core/Src/main.c **** 			rightmotor = 0;
 1125              		.loc 1 436 14 is_stmt 0 view .LVU236
 1126 00fc 0022     		movs	r2, #0
 1127 00fe 0023     		movs	r3, #0
 1128 0100 3E49     		ldr	r1, .L93+24
 1129 0102 C1E90023 		strd	r2, [r1]
 437:Core/Src/main.c **** 		}
 1130              		.loc 1 437 4 is_stmt 1 view .LVU237
 437:Core/Src/main.c **** 		}
 1131              		.loc 1 437 15 is_stmt 0 view .LVU238
 1132 0106 3F49     		ldr	r1, .L93+32
 1133 0108 C1E90023 		strd	r2, [r1]
 1134 010c A8E7     		b	.L49
 1135              	.LVL70:
 1136              	.L88:
 441:Core/Src/main.c **** 		  leftmotor = leftmotor * -1;
 1137              		.loc 1 441 5 is_stmt 1 view .LVU239
 1138 010e 0022     		movs	r2, #0
 1139 0110 0421     		movs	r1, #4
 1140 0112 3D48     		ldr	r0, .L93+36
 1141 0114 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1142              	.LVL71:
 442:Core/Src/main.c **** 		}
 1143              		.loc 1 442 5 view .LVU240
 442:Core/Src/main.c **** 		}
 1144              		.loc 1 442 27 is_stmt 0 view .LVU241
 1145 0118 384B     		ldr	r3, .L93+24
 1146 011a 1868     		ldr	r0, [r3]
 1147 011c 5A68     		ldr	r2, [r3, #4]
 1148 011e 02F10041 		add	r1, r2, #-2147483648
 442:Core/Src/main.c **** 		}
 1149              		.loc 1 442 15 view .LVU242
 1150 0122 C3E90001 		strd	r0, [r3]
 1151 0126 A9E7     		b	.L52
 1152              	.L89:
 451:Core/Src/main.c **** 		  rightmotor = rightmotor * -1;
 1153              		.loc 1 451 5 is_stmt 1 view .LVU243
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 57


 1154 0128 0122     		movs	r2, #1
 1155 012a 4FF40051 		mov	r1, #8192
 1156 012e 3748     		ldr	r0, .L93+40
 1157 0130 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1158              	.LVL72:
 452:Core/Src/main.c **** 		}
 1159              		.loc 1 452 5 view .LVU244
 452:Core/Src/main.c **** 		}
 1160              		.loc 1 452 29 is_stmt 0 view .LVU245
 1161 0134 334B     		ldr	r3, .L93+32
 1162 0136 1868     		ldr	r0, [r3]
 1163 0138 5A68     		ldr	r2, [r3, #4]
 1164 013a 02F10041 		add	r1, r2, #-2147483648
 452:Core/Src/main.c **** 		}
 1165              		.loc 1 452 16 view .LVU246
 1166 013e C3E90001 		strd	r0, [r3]
 1167 0142 AAE7     		b	.L55
 1168              	.L86:
 1169              	.LBB10:
 490:Core/Src/main.c **** 
 1170              		.loc 1 490 3 is_stmt 1 view .LVU247
 492:Core/Src/main.c **** 		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 1171              		.loc 1 492 3 view .LVU248
 492:Core/Src/main.c **** 		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 1172              		.loc 1 492 14 is_stmt 0 view .LVU249
 1173 0144 344E     		ldr	r6, .L93+52
 1174 0146 0421     		movs	r1, #4
 1175 0148 3046     		mov	r0, r6
 1176 014a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1177              	.LVL73:
 492:Core/Src/main.c **** 		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 1178              		.loc 1 492 54 view .LVU250
 1179 014e B0FA80F5 		clz	r5, r0
 1180 0152 6D09     		lsrs	r5, r5, #5
 1181              	.LVL74:
 493:Core/Src/main.c **** 
 1182              		.loc 1 493 3 is_stmt 1 view .LVU251
 493:Core/Src/main.c **** 
 1183              		.loc 1 493 15 is_stmt 0 view .LVU252
 1184 0154 4FF40061 		mov	r1, #2048
 1185 0158 3046     		mov	r0, r6
 1186 015a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1187              	.LVL75:
 493:Core/Src/main.c **** 
 1188              		.loc 1 493 56 view .LVU253
 1189 015e 10BB     		cbnz	r0, .L74
 1190 0160 0220     		movs	r0, #2
 1191              	.L61:
 493:Core/Src/main.c **** 
 1192              		.loc 1 493 11 discriminator 4 view .LVU254
 1193 0162 0544     		add	r5, r5, r0
 1194              	.LVL76:
 495:Core/Src/main.c **** 			subsensbuf = subsens;
 1195              		.loc 1 495 3 is_stmt 1 discriminator 4 view .LVU255
 495:Core/Src/main.c **** 			subsensbuf = subsens;
 1196              		.loc 1 495 15 is_stmt 0 discriminator 4 view .LVU256
 1197 0164 2D4B     		ldr	r3, .L93+56
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 58


 1198 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 495:Core/Src/main.c **** 			subsensbuf = subsens;
 1199              		.loc 1 495 6 discriminator 4 view .LVU257
 1200 0168 AB42     		cmp	r3, r5
 1201 016a 66D0     		beq	.L62
 496:Core/Src/main.c **** 			marker += subsens << (2 * sidedeltacount);
 1202              		.loc 1 496 4 is_stmt 1 view .LVU258
 496:Core/Src/main.c **** 			marker += subsens << (2 * sidedeltacount);
 1203              		.loc 1 496 15 is_stmt 0 view .LVU259
 1204 016c 2B4B     		ldr	r3, .L93+56
 1205 016e 1D70     		strb	r5, [r3]
 497:Core/Src/main.c **** 			if (subsens == 0b00 && sidedeltacount != 0) {
 1206              		.loc 1 497 4 is_stmt 1 view .LVU260
 497:Core/Src/main.c **** 			if (subsens == 0b00 && sidedeltacount != 0) {
 1207              		.loc 1 497 28 is_stmt 0 view .LVU261
 1208 0170 2B4B     		ldr	r3, .L93+60
 1209 0172 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1210 0174 5300     		lsls	r3, r2, #1
 497:Core/Src/main.c **** 			if (subsens == 0b00 && sidedeltacount != 0) {
 1211              		.loc 1 497 22 view .LVU262
 1212 0176 05FA03F1 		lsl	r1, r5, r3
 497:Core/Src/main.c **** 			if (subsens == 0b00 && sidedeltacount != 0) {
 1213              		.loc 1 497 11 view .LVU263
 1214 017a 2A48     		ldr	r0, .L93+64
 1215 017c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1216 017e 0B44     		add	r3, r3, r1
 1217 0180 DBB2     		uxtb	r3, r3
 1218 0182 0370     		strb	r3, [r0]
 498:Core/Src/main.c **** 				first = (marker & 0b0011);
 1219              		.loc 1 498 4 is_stmt 1 view .LVU264
 498:Core/Src/main.c **** 				first = (marker & 0b0011);
 1220              		.loc 1 498 7 is_stmt 0 view .LVU265
 1221 0184 002D     		cmp	r5, #0
 1222 0186 55D1     		bne	.L63
 498:Core/Src/main.c **** 				first = (marker & 0b0011);
 1223              		.loc 1 498 24 discriminator 1 view .LVU266
 1224 0188 002A     		cmp	r2, #0
 1225 018a 53D0     		beq	.L63
 499:Core/Src/main.c **** 				second = (marker & 0b1100) >> 2;
 1226              		.loc 1 499 5 is_stmt 1 view .LVU267
 499:Core/Src/main.c **** 				second = (marker & 0b1100) >> 2;
 1227              		.loc 1 499 11 is_stmt 0 view .LVU268
 1228 018c 03F00302 		and	r2, r3, #3
 1229              	.LVL77:
 500:Core/Src/main.c **** 				if (second == 0b00) {
 1230              		.loc 1 500 5 is_stmt 1 view .LVU269
 501:Core/Src/main.c **** 					if (first == 0b01) {
 1231              		.loc 1 501 5 view .LVU270
 501:Core/Src/main.c **** 					if (first == 0b01) {
 1232              		.loc 1 501 8 is_stmt 0 view .LVU271
 1233 0190 13F00C0F 		tst	r3, #12
 1234 0194 1BD1     		bne	.L64
 502:Core/Src/main.c **** 						// right -> stop
 1235              		.loc 1 502 6 is_stmt 1 view .LVU272
 502:Core/Src/main.c **** 						// right -> stop
 1236              		.loc 1 502 9 is_stmt 0 view .LVU273
 1237 0196 012A     		cmp	r2, #1
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 59


 1238 0198 07D0     		beq	.L90
 510:Core/Src/main.c **** 						// left -> curve
 1239              		.loc 1 510 13 is_stmt 1 view .LVU274
 510:Core/Src/main.c **** 						// left -> curve
 1240              		.loc 1 510 16 is_stmt 0 view .LVU275
 1241 019a 022A     		cmp	r2, #2
 1242 019c 14D0     		beq	.L91
 521:Core/Src/main.c **** 					}
 1243              		.loc 1 521 7 is_stmt 1 view .LVU276
 521:Core/Src/main.c **** 					}
 1244              		.loc 1 521 19 is_stmt 0 view .LVU277
 1245 019e 224B     		ldr	r3, .L93+68
 1246              	.LVL78:
 521:Core/Src/main.c **** 					}
 1247              		.loc 1 521 19 view .LVU278
 1248 01a0 0322     		movs	r2, #3
 1249              	.LVL79:
 521:Core/Src/main.c **** 					}
 1250              		.loc 1 521 19 view .LVU279
 1251 01a2 1A70     		strb	r2, [r3]
 1252 01a4 16E0     		b	.L67
 1253              	.LVL80:
 1254              	.L74:
 493:Core/Src/main.c **** 
 1255              		.loc 1 493 56 view .LVU280
 1256 01a6 0020     		movs	r0, #0
 1257 01a8 DBE7     		b	.L61
 1258              	.LVL81:
 1259              	.L90:
 504:Core/Src/main.c **** 						if (rightmarkercount == 0) {
 1260              		.loc 1 504 7 is_stmt 1 view .LVU281
 504:Core/Src/main.c **** 						if (rightmarkercount == 0) {
 1261              		.loc 1 504 19 is_stmt 0 view .LVU282
 1262 01aa 1F4B     		ldr	r3, .L93+68
 1263              	.LVL82:
 504:Core/Src/main.c **** 						if (rightmarkercount == 0) {
 1264              		.loc 1 504 19 view .LVU283
 1265 01ac 1A70     		strb	r2, [r3]
 505:Core/Src/main.c **** 							rightmarkercount++;
 1266              		.loc 1 505 7 is_stmt 1 view .LVU284
 505:Core/Src/main.c **** 							rightmarkercount++;
 1267              		.loc 1 505 28 is_stmt 0 view .LVU285
 1268 01ae 1F4B     		ldr	r3, .L93+72
 1269 01b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 505:Core/Src/main.c **** 							rightmarkercount++;
 1270              		.loc 1 505 10 view .LVU286
 1271 01b2 1BB9     		cbnz	r3, .L66
 506:Core/Src/main.c **** 						} else if (rightmarkercount == 1) {
 1272              		.loc 1 506 8 is_stmt 1 view .LVU287
 506:Core/Src/main.c **** 						} else if (rightmarkercount == 1) {
 1273              		.loc 1 506 24 is_stmt 0 view .LVU288
 1274 01b4 1344     		add	r3, r3, r2
 1275 01b6 1D4A     		ldr	r2, .L93+72
 1276              	.LVL83:
 506:Core/Src/main.c **** 						} else if (rightmarkercount == 1) {
 1277              		.loc 1 506 24 view .LVU289
 1278 01b8 1370     		strb	r3, [r2]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 60


 1279 01ba 0BE0     		b	.L67
 1280              	.LVL84:
 1281              	.L66:
 507:Core/Src/main.c **** 							enter = 0;
 1282              		.loc 1 507 14 is_stmt 1 view .LVU290
 507:Core/Src/main.c **** 							enter = 0;
 1283              		.loc 1 507 17 is_stmt 0 view .LVU291
 1284 01bc 012B     		cmp	r3, #1
 1285 01be 09D1     		bne	.L67
 508:Core/Src/main.c **** 						}
 1286              		.loc 1 508 8 is_stmt 1 view .LVU292
 508:Core/Src/main.c **** 						}
 1287              		.loc 1 508 14 is_stmt 0 view .LVU293
 1288 01c0 1B4B     		ldr	r3, .L93+76
 1289 01c2 0022     		movs	r2, #0
 1290              	.LVL85:
 508:Core/Src/main.c **** 						}
 1291              		.loc 1 508 14 view .LVU294
 1292 01c4 1A70     		strb	r2, [r3]
 1293 01c6 05E0     		b	.L67
 1294              	.LVL86:
 1295              	.L91:
 512:Core/Src/main.c **** #if USE_FLASH
 1296              		.loc 1 512 7 is_stmt 1 view .LVU295
 512:Core/Src/main.c **** #if USE_FLASH
 1297              		.loc 1 512 19 is_stmt 0 view .LVU296
 1298 01c8 174B     		ldr	r3, .L93+68
 1299              	.LVL87:
 512:Core/Src/main.c **** #if USE_FLASH
 1300              		.loc 1 512 19 view .LVU297
 1301 01ca 1A70     		strb	r2, [r3]
 1302 01cc 02E0     		b	.L67
 1303              	.LVL88:
 1304              	.L64:
 525:Core/Src/main.c **** 				}
 1305              		.loc 1 525 6 is_stmt 1 view .LVU298
 525:Core/Src/main.c **** 				}
 1306              		.loc 1 525 18 is_stmt 0 view .LVU299
 1307 01ce 164B     		ldr	r3, .L93+68
 1308              	.LVL89:
 525:Core/Src/main.c **** 				}
 1309              		.loc 1 525 18 view .LVU300
 1310 01d0 0322     		movs	r2, #3
 1311              	.LVL90:
 525:Core/Src/main.c **** 				}
 1312              		.loc 1 525 18 view .LVU301
 1313 01d2 1A70     		strb	r2, [r3]
 1314              	.L67:
 527:Core/Src/main.c **** 				marker = 0;
 1315              		.loc 1 527 5 is_stmt 1 view .LVU302
 527:Core/Src/main.c **** 				marker = 0;
 1316              		.loc 1 527 20 is_stmt 0 view .LVU303
 1317 01d4 0023     		movs	r3, #0
 1318 01d6 124A     		ldr	r2, .L93+60
 1319 01d8 1370     		strb	r3, [r2]
 528:Core/Src/main.c **** 				markerstate = 0;
 1320              		.loc 1 528 5 is_stmt 1 view .LVU304
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 61


 528:Core/Src/main.c **** 				markerstate = 0;
 1321              		.loc 1 528 12 is_stmt 0 view .LVU305
 1322 01da 124A     		ldr	r2, .L93+64
 1323 01dc 1370     		strb	r3, [r2]
 1324              	.LVL91:
 529:Core/Src/main.c **** 			} else {
 1325              		.loc 1 529 5 is_stmt 1 view .LVU306
 529:Core/Src/main.c **** 			} else {
 1326              		.loc 1 529 17 is_stmt 0 view .LVU307
 1327 01de 124A     		ldr	r2, .L93+68
 1328 01e0 1370     		strb	r3, [r2]
 1329 01e2 2AE0     		b	.L62
 1330              	.L94:
 1331              		.align	2
 1332              	.L93:
 1333 01e4 00100040 		.word	1073745920
 1334 01e8 00440140 		.word	1073824768
 1335 01ec 00480140 		.word	1073825792
 1336 01f0 00000000 		.word	.LANCHOR17
 1337 01f4 00000000 		.word	.LANCHOR12
 1338 01f8 00000000 		.word	.LANCHOR18
 1339 01fc 00000000 		.word	.LANCHOR8
 1340 0200 00000000 		.word	.LANCHOR7
 1341 0204 00000000 		.word	.LANCHOR9
 1342 0208 000C0240 		.word	1073875968
 1343 020c 00080240 		.word	1073874944
 1344 0210 00408F40 		.word	1083129856
 1345 0214 00000000 		.word	.LANCHOR14
 1346 0218 00040240 		.word	1073873920
 1347 021c 00000000 		.word	.LANCHOR19
 1348 0220 00000000 		.word	.LANCHOR20
 1349 0224 00000000 		.word	.LANCHOR21
 1350 0228 00000000 		.word	.LANCHOR22
 1351 022c 00000000 		.word	.LANCHOR23
 1352 0230 00000000 		.word	.LANCHOR24
 1353              	.L63:
 531:Core/Src/main.c **** 			}
 1354              		.loc 1 531 5 is_stmt 1 view .LVU308
 531:Core/Src/main.c **** 			}
 1355              		.loc 1 531 19 is_stmt 0 view .LVU309
 1356 0234 0132     		adds	r2, r2, #1
 1357 0236 9E4B     		ldr	r3, .L95+8
 1358 0238 1A70     		strb	r2, [r3]
 1359              	.L62:
 538:Core/Src/main.c **** 		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 1360              		.loc 1 538 3 is_stmt 1 view .LVU310
 1361 023a DFF8D482 		ldr	r8, .L95+104
 1362 023e 3C21     		movs	r1, #60
 1363 0240 4046     		mov	r0, r8
 1364 0242 FFF7FEFF 		bl	HAL_TIM_Encoder_Stop
 1365              	.LVL92:
 539:Core/Src/main.c **** 
 1366              		.loc 1 539 3 view .LVU311
 1367 0246 9B4F     		ldr	r7, .L95+12
 1368 0248 3C21     		movs	r1, #60
 1369 024a 3846     		mov	r0, r7
 1370 024c FFF7FEFF 		bl	HAL_TIM_Encoder_Stop
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 62


 1371              	.LVL93:
 541:Core/Src/main.c **** 		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 1372              		.loc 1 541 3 view .LVU312
 541:Core/Src/main.c **** 		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 1373              		.loc 1 541 19 is_stmt 0 view .LVU313
 1374 0250 9948     		ldr	r0, .L95+16
 1375 0252 436A     		ldr	r3, [r0, #36]
 541:Core/Src/main.c **** 		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 1376              		.loc 1 541 25 view .LVU314
 1377 0254 A3F50043 		sub	r3, r3, #32768
 541:Core/Src/main.c **** 		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 1378              		.loc 1 541 13 view .LVU315
 1379 0258 984E     		ldr	r6, .L95+20
 1380 025a 3380     		strh	r3, [r6]	@ movhi
 542:Core/Src/main.c **** 
 1381              		.loc 1 542 3 is_stmt 1 view .LVU316
 542:Core/Src/main.c **** 
 1382              		.loc 1 542 22 is_stmt 0 view .LVU317
 1383 025c 984A     		ldr	r2, .L95+24
 1384 025e 536A     		ldr	r3, [r2, #36]
 542:Core/Src/main.c **** 
 1385              		.loc 1 542 15 view .LVU318
 1386 0260 4FF40041 		mov	r1, #32768
 1387 0264 CB1A     		subs	r3, r1, r3
 542:Core/Src/main.c **** 
 1388              		.loc 1 542 13 view .LVU319
 1389 0266 974D     		ldr	r5, .L95+28
 1390              	.LVL94:
 542:Core/Src/main.c **** 
 1391              		.loc 1 542 13 view .LVU320
 1392 0268 2B80     		strh	r3, [r5]	@ movhi
 544:Core/Src/main.c **** 		TIM3->CNT = ENCODER_MIDDLE;
 1393              		.loc 1 544 3 is_stmt 1 view .LVU321
 544:Core/Src/main.c **** 		TIM3->CNT = ENCODER_MIDDLE;
 1394              		.loc 1 544 13 is_stmt 0 view .LVU322
 1395 026a 4162     		str	r1, [r0, #36]
 545:Core/Src/main.c **** 
 1396              		.loc 1 545 3 is_stmt 1 view .LVU323
 545:Core/Src/main.c **** 
 1397              		.loc 1 545 13 is_stmt 0 view .LVU324
 1398 026c 5162     		str	r1, [r2, #36]
 547:Core/Src/main.c **** 		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 1399              		.loc 1 547 3 is_stmt 1 view .LVU325
 1400 026e 3C21     		movs	r1, #60
 1401 0270 4046     		mov	r0, r8
 1402 0272 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1403              	.LVL95:
 548:Core/Src/main.c **** 
 1404              		.loc 1 548 3 view .LVU326
 1405 0276 3C21     		movs	r1, #60
 1406 0278 3846     		mov	r0, r7
 1407 027a FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 1408              	.LVL96:
 565:Core/Src/main.c **** 		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 1409              		.loc 1 565 3 view .LVU327
 565:Core/Src/main.c **** 		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 1410              		.loc 1 565 30 is_stmt 0 view .LVU328
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 63


 1411 027e 924B     		ldr	r3, .L95+32
 1412 0280 93ED007B 		vldr.64	d7, [r3]
 1413 0284 B0EE478A 		vmov.f32	s16, s14
 1414 0288 F0EE678A 		vmov.f32	s17, s15
 1415 028c B6F90000 		ldrsh	r0, [r6]
 1416 0290 FFF7FEFF 		bl	__aeabi_i2d
 1417              	.LVL97:
 1418 0294 53EC182B 		vmov	r2, r3, d8
 1419 0298 FFF7FEFF 		bl	__aeabi_dmul
 1420              	.LVL98:
 1421 029c 8046     		mov	r8, r0
 1422 029e 8946     		mov	r9, r1
 565:Core/Src/main.c **** 		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 1423              		.loc 1 565 18 view .LVU329
 1424 02a0 8A4B     		ldr	r3, .L95+36
 1425 02a2 C3E90089 		strd	r8, [r3]
 566:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1426              		.loc 1 566 3 is_stmt 1 view .LVU330
 566:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1427              		.loc 1 566 16 is_stmt 0 view .LVU331
 1428 02a6 8A4E     		ldr	r6, .L95+40
 1429 02a8 D6E90001 		ldrd	r0, [r6]
 1430 02ac FFF7FEFF 		bl	__aeabi_d2iz
 1431              	.LVL99:
 1432 02b0 0746     		mov	r7, r0
 1433 02b2 4046     		mov	r0, r8
 1434 02b4 4946     		mov	r1, r9
 1435 02b6 FFF7FEFF 		bl	__aeabi_d2iz
 1436              	.LVL100:
 1437 02ba 4FF4C872 		mov	r2, #400
 1438 02be 3946     		mov	r1, r7
 1439 02c0 FFF7FEFF 		bl	low_pass_filter
 1440              	.LVL101:
 566:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1441              		.loc 1 566 14 view .LVU332
 1442 02c4 FFF7FEFF 		bl	__aeabi_i2d
 1443              	.LVL102:
 1444 02c8 0246     		mov	r2, r0
 1445 02ca 0B46     		mov	r3, r1
 1446 02cc C6E90023 		strd	r2, [r6]
 568:Core/Src/main.c **** 		s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 1447              		.loc 1 568 3 is_stmt 1 view .LVU333
 568:Core/Src/main.c **** 		s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 1448              		.loc 1 568 41 is_stmt 0 view .LVU334
 1449 02d0 0020     		movs	r0, #0
 1450 02d2 0021     		movs	r1, #0
 1451 02d4 FFF7FEFF 		bl	__aeabi_dsub
 1452              	.LVL103:
 1453 02d8 8246     		mov	r10, r0
 1454 02da 8B46     		mov	fp, r1
 568:Core/Src/main.c **** 		s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 1455              		.loc 1 568 20 view .LVU335
 1456 02dc 7D4B     		ldr	r3, .L95+44
 1457 02de C3E900AB 		strd	r10, [r3]
 569:Core/Src/main.c **** 		// PI
 1458              		.loc 1 569 3 is_stmt 1 view .LVU336
 569:Core/Src/main.c **** 		// PI
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 64


 1459              		.loc 1 569 43 is_stmt 0 view .LVU337
 1460 02e2 DFF83082 		ldr	r8, .L95+108
 1461 02e6 D8E90023 		ldrd	r2, [r8]
 1462 02ea FFF7FEFF 		bl	__aeabi_dadd
 1463              	.LVL104:
 1464 02ee 0646     		mov	r6, r0
 1465 02f0 0F46     		mov	r7, r1
 569:Core/Src/main.c **** 		// PI
 1466              		.loc 1 569 22 view .LVU338
 1467 02f2 C8E90067 		strd	r6, [r8]
 571:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 1468              		.loc 1 571 3 is_stmt 1 view .LVU339
 571:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 1469              		.loc 1 571 26 is_stmt 0 view .LVU340
 1470 02f6 0022     		movs	r2, #0
 1471 02f8 0023     		movs	r3, #0
 1472 02fa 5046     		mov	r0, r10
 1473 02fc 5946     		mov	r1, fp
 1474 02fe FFF7FEFF 		bl	__aeabi_dmul
 1475              	.LVL105:
 1476 0302 8046     		mov	r8, r0
 1477 0304 8946     		mov	r9, r1
 571:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 1478              		.loc 1 571 52 view .LVU341
 1479 0306 0022     		movs	r2, #0
 1480 0308 0023     		movs	r3, #0
 1481 030a 3046     		mov	r0, r6
 1482 030c 3946     		mov	r1, r7
 1483 030e FFF7FEFF 		bl	__aeabi_dmul
 1484              	.LVL106:
 1485 0312 0246     		mov	r2, r0
 1486 0314 0B46     		mov	r3, r1
 571:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 1487              		.loc 1 571 45 view .LVU342
 1488 0316 4046     		mov	r0, r8
 1489 0318 4946     		mov	r1, r9
 1490 031a FFF7FEFF 		bl	__aeabi_dadd
 1491              	.LVL107:
 1492 031e 0646     		mov	r6, r0
 1493 0320 0F46     		mov	r7, r1
 571:Core/Src/main.c **** 		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 1494              		.loc 1 571 19 view .LVU343
 1495 0322 6D4B     		ldr	r3, .L95+48
 1496 0324 C3E90067 		strd	r6, [r3]
 572:Core/Src/main.c **** 		nextspeed_l = (VELOCITY_TARGET + velocity_next_l) * PWMMAX / VELOCITY_MAX;
 1497              		.loc 1 572 3 is_stmt 1 view .LVU344
 573:Core/Src/main.c **** 
 1498              		.loc 1 573 3 view .LVU345
 573:Core/Src/main.c **** 
 1499              		.loc 1 573 34 is_stmt 0 view .LVU346
 1500 0328 0022     		movs	r2, #0
 1501 032a 0023     		movs	r3, #0
 1502 032c FFF7FEFF 		bl	__aeabi_dadd
 1503              	.LVL108:
 573:Core/Src/main.c **** 
 1504              		.loc 1 573 53 view .LVU347
 1505 0330 0022     		movs	r2, #0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 65


 1506 0332 6A4B     		ldr	r3, .L95+52
 1507 0334 FFF7FEFF 		bl	__aeabi_dmul
 1508              	.LVL109:
 573:Core/Src/main.c **** 
 1509              		.loc 1 573 62 view .LVU348
 1510 0338 5BA3     		adr	r3, .L95
 1511 033a D3E90023 		ldrd	r2, [r3]
 1512 033e FFF7FEFF 		bl	__aeabi_ddiv
 1513              	.LVL110:
 573:Core/Src/main.c **** 
 1514              		.loc 1 573 15 view .LVU349
 1515 0342 674B     		ldr	r3, .L95+56
 1516 0344 C3E90001 		strd	r0, [r3]
 576:Core/Src/main.c **** 		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 1517              		.loc 1 576 3 is_stmt 1 view .LVU350
 576:Core/Src/main.c **** 		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 1518              		.loc 1 576 30 is_stmt 0 view .LVU351
 1519 0348 B5F90000 		ldrsh	r0, [r5]
 1520 034c FFF7FEFF 		bl	__aeabi_i2d
 1521              	.LVL111:
 1522 0350 53EC182B 		vmov	r2, r3, d8
 1523 0354 FFF7FEFF 		bl	__aeabi_dmul
 1524              	.LVL112:
 1525 0358 0646     		mov	r6, r0
 1526 035a 0F46     		mov	r7, r1
 576:Core/Src/main.c **** 		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 1527              		.loc 1 576 18 view .LVU352
 1528 035c 614B     		ldr	r3, .L95+60
 1529 035e C3E90067 		strd	r6, [r3]
 577:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1530              		.loc 1 577 3 is_stmt 1 view .LVU353
 577:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1531              		.loc 1 577 16 is_stmt 0 view .LVU354
 1532 0362 614D     		ldr	r5, .L95+64
 1533 0364 D5E90001 		ldrd	r0, [r5]
 1534 0368 FFF7FEFF 		bl	__aeabi_d2iz
 1535              	.LVL113:
 1536 036c 8046     		mov	r8, r0
 1537 036e 3046     		mov	r0, r6
 1538 0370 3946     		mov	r1, r7
 1539 0372 FFF7FEFF 		bl	__aeabi_d2iz
 1540              	.LVL114:
 1541 0376 4FF4C872 		mov	r2, #400
 1542 037a 4146     		mov	r1, r8
 1543 037c FFF7FEFF 		bl	low_pass_filter
 1544              	.LVL115:
 577:Core/Src/main.c **** 		// Here VELOCITY_TARGET is array from Flash ROM.
 1545              		.loc 1 577 14 view .LVU355
 1546 0380 FFF7FEFF 		bl	__aeabi_i2d
 1547              	.LVL116:
 1548 0384 0246     		mov	r2, r0
 1549 0386 0B46     		mov	r3, r1
 1550 0388 C5E90023 		strd	r2, [r5]
 579:Core/Src/main.c **** 		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 1551              		.loc 1 579 3 is_stmt 1 view .LVU356
 579:Core/Src/main.c **** 		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 1552              		.loc 1 579 39 is_stmt 0 view .LVU357
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 66


 1553 038c 0020     		movs	r0, #0
 1554 038e 0021     		movs	r1, #0
 1555 0390 FFF7FEFF 		bl	__aeabi_dsub
 1556              	.LVL117:
 1557 0394 8046     		mov	r8, r0
 1558 0396 8946     		mov	r9, r1
 579:Core/Src/main.c **** 		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 1559              		.loc 1 579 20 view .LVU358
 1560 0398 544B     		ldr	r3, .L95+68
 1561 039a C3E90089 		strd	r8, [r3]
 580:Core/Src/main.c **** 		// PI
 1562              		.loc 1 580 3 is_stmt 1 view .LVU359
 580:Core/Src/main.c **** 		// PI
 1563              		.loc 1 580 43 is_stmt 0 view .LVU360
 1564 039e 544D     		ldr	r5, .L95+72
 1565 03a0 D5E90023 		ldrd	r2, [r5]
 1566 03a4 FFF7FEFF 		bl	__aeabi_dadd
 1567              	.LVL118:
 1568 03a8 0646     		mov	r6, r0
 1569 03aa 0F46     		mov	r7, r1
 580:Core/Src/main.c **** 		// PI
 1570              		.loc 1 580 22 view .LVU361
 1571 03ac C5E90067 		strd	r6, [r5]
 582:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 1572              		.loc 1 582 3 is_stmt 1 view .LVU362
 582:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 1573              		.loc 1 582 26 is_stmt 0 view .LVU363
 1574 03b0 0022     		movs	r2, #0
 1575 03b2 504B     		ldr	r3, .L95+76
 1576 03b4 4046     		mov	r0, r8
 1577 03b6 4946     		mov	r1, r9
 1578 03b8 FFF7FEFF 		bl	__aeabi_dmul
 1579              	.LVL119:
 1580 03bc 8046     		mov	r8, r0
 1581 03be 8946     		mov	r9, r1
 582:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 1582              		.loc 1 582 52 view .LVU364
 1583 03c0 0022     		movs	r2, #0
 1584 03c2 0023     		movs	r3, #0
 1585 03c4 3046     		mov	r0, r6
 1586 03c6 3946     		mov	r1, r7
 1587 03c8 FFF7FEFF 		bl	__aeabi_dmul
 1588              	.LVL120:
 1589 03cc 0246     		mov	r2, r0
 1590 03ce 0B46     		mov	r3, r1
 582:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 1591              		.loc 1 582 45 view .LVU365
 1592 03d0 4046     		mov	r0, r8
 1593 03d2 4946     		mov	r1, r9
 1594 03d4 FFF7FEFF 		bl	__aeabi_dadd
 1595              	.LVL121:
 1596 03d8 0646     		mov	r6, r0
 1597 03da 0F46     		mov	r7, r1
 582:Core/Src/main.c **** 		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 1598              		.loc 1 582 19 view .LVU366
 1599 03dc 464B     		ldr	r3, .L95+80
 1600 03de C3E90067 		strd	r6, [r3]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 67


 583:Core/Src/main.c **** 		nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
 1601              		.loc 1 583 3 is_stmt 1 view .LVU367
 584:Core/Src/main.c **** #endif
 1602              		.loc 1 584 3 view .LVU368
 584:Core/Src/main.c **** #endif
 1603              		.loc 1 584 34 is_stmt 0 view .LVU369
 1604 03e2 0022     		movs	r2, #0
 1605 03e4 0023     		movs	r3, #0
 1606 03e6 FFF7FEFF 		bl	__aeabi_dadd
 1607              	.LVL122:
 584:Core/Src/main.c **** #endif
 1608              		.loc 1 584 53 view .LVU370
 1609 03ea 0022     		movs	r2, #0
 1610 03ec 3B4B     		ldr	r3, .L95+52
 1611 03ee FFF7FEFF 		bl	__aeabi_dmul
 1612              	.LVL123:
 584:Core/Src/main.c **** #endif
 1613              		.loc 1 584 62 view .LVU371
 1614 03f2 2DA3     		adr	r3, .L95
 1615 03f4 D3E90023 		ldrd	r2, [r3]
 1616 03f8 FFF7FEFF 		bl	__aeabi_ddiv
 1617              	.LVL124:
 584:Core/Src/main.c **** #endif
 1618              		.loc 1 584 15 view .LVU372
 1619 03fc 3F4B     		ldr	r3, .L95+84
 1620 03fe C3E90001 		strd	r0, [r3]
 1621 0402 0BE6     		b	.L60
 1622              	.L87:
 584:Core/Src/main.c **** #endif
 1623              		.loc 1 584 15 view .LVU373
 1624              	.LBE10:
 1625              	.LBB11:
 610:Core/Src/main.c **** 		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 1626              		.loc 1 610 3 is_stmt 1 view .LVU374
 611:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 1627              		.loc 1 611 3 view .LVU375
 611:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 1628              		.loc 1 611 24 is_stmt 0 view .LVU376
 1629 0404 3E4D     		ldr	r5, .L95+88
 1630 0406 4FF48051 		mov	r1, #4096
 1631 040a 2846     		mov	r0, r5
 1632 040c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1633              	.LVL125:
 611:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 1634              		.loc 1 611 66 view .LVU377
 1635 0410 B0FA80F4 		clz	r4, r0
 1636              	.LVL126:
 611:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 1637              		.loc 1 611 66 view .LVU378
 1638 0414 6409     		lsrs	r4, r4, #5
 1639              	.LVL127:
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 1640              		.loc 1 612 3 is_stmt 1 view .LVU379
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 1641              		.loc 1 612 25 is_stmt 0 view .LVU380
 1642 0416 4FF48061 		mov	r1, #1024
 1643 041a 2846     		mov	r0, r5
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 68


 1644 041c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1645              	.LVL128:
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 1646              		.loc 1 612 67 view .LVU381
 1647 0420 70BB     		cbnz	r0, .L75
 1648 0422 0220     		movs	r0, #2
 1649              	.L70:
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 1650              		.loc 1 612 20 discriminator 4 view .LVU382
 1651 0424 0444     		add	r4, r4, r0
 1652              	.LVL129:
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1653              		.loc 1 613 3 is_stmt 1 discriminator 4 view .LVU383
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1654              		.loc 1 613 25 is_stmt 0 discriminator 4 view .LVU384
 1655 0426 4FF48051 		mov	r1, #4096
 1656 042a 3648     		ldr	r0, .L95+92
 1657 042c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1658              	.LVL130:
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1659              		.loc 1 613 67 discriminator 4 view .LVU385
 1660 0430 40BB     		cbnz	r0, .L76
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1661              		.loc 1 613 67 view .LVU386
 1662 0432 0423     		movs	r3, #4
 1663              	.L71:
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1664              		.loc 1 613 20 discriminator 4 view .LVU387
 1665 0434 1C44     		add	r4, r4, r3
 1666              	.LVL131:
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1667              		.loc 1 613 20 discriminator 4 view .LVU388
 1668 0436 E4B2     		uxtb	r4, r4
 1669              	.LVL132:
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1670              		.loc 1 614 3 is_stmt 1 discriminator 4 view .LVU389
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1671              		.loc 1 614 25 is_stmt 0 discriminator 4 view .LVU390
 1672 0438 4FF40061 		mov	r1, #2048
 1673 043c 3048     		ldr	r0, .L95+88
 1674 043e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1675              	.LVL133:
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1676              		.loc 1 614 67 discriminator 4 view .LVU391
 1677 0442 08BB     		cbnz	r0, .L77
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1678              		.loc 1 614 67 view .LVU392
 1679 0444 0823     		movs	r3, #8
 1680              	.L72:
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1681              		.loc 1 614 20 discriminator 4 view .LVU393
 1682 0446 1C44     		add	r4, r4, r3
 1683              	.LVL134:
 615:Core/Src/main.c **** 
 1684              		.loc 1 615 3 is_stmt 1 discriminator 4 view .LVU394
 615:Core/Src/main.c **** 
 1685              		.loc 1 615 16 is_stmt 0 discriminator 4 view .LVU395
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 69


 1686 0448 2F4B     		ldr	r3, .L95+96
 1687 044a 1C70     		strb	r4, [r3]
 621:Core/Src/main.c **** 				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1688              		.loc 1 621 3 is_stmt 1 discriminator 4 view .LVU396
 621:Core/Src/main.c **** 				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1689              		.loc 1 621 8 is_stmt 0 discriminator 4 view .LVU397
 1690 044c 4FF48041 		mov	r1, #16384
 1691 0450 2B48     		ldr	r0, .L95+88
 1692 0452 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1693              	.LVL135:
 621:Core/Src/main.c **** 				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1694              		.loc 1 621 6 discriminator 4 view .LVU398
 1695 0456 C8B1     		cbz	r0, .L92
 1696              	.L73:
 625:Core/Src/main.c **** 				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1697              		.loc 1 625 3 is_stmt 1 view .LVU399
 625:Core/Src/main.c **** 				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1698              		.loc 1 625 7 is_stmt 0 view .LVU400
 1699 0458 4FF48041 		mov	r1, #16384
 1700 045c 2848     		ldr	r0, .L95+88
 1701 045e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1702              	.LVL136:
 625:Core/Src/main.c **** 				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 1703              		.loc 1 625 6 view .LVU401
 1704 0462 0028     		cmp	r0, #0
 1705 0464 3FF4DFAD 		beq	.L44
 626:Core/Src/main.c **** 			enter = 0;
 1706              		.loc 1 626 9 view .LVU402
 1707 0468 4FF40041 		mov	r1, #32768
 1708 046c 2448     		ldr	r0, .L95+88
 1709 046e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1710              	.LVL137:
 626:Core/Src/main.c **** 			enter = 0;
 1711              		.loc 1 626 5 view .LVU403
 1712 0472 0028     		cmp	r0, #0
 1713 0474 7FF4D7AD 		bne	.L44
 627:Core/Src/main.c **** 		}
 1714              		.loc 1 627 4 is_stmt 1 view .LVU404
 627:Core/Src/main.c **** 		}
 1715              		.loc 1 627 10 is_stmt 0 view .LVU405
 1716 0478 244B     		ldr	r3, .L95+100
 1717 047a 0022     		movs	r2, #0
 1718 047c 1A70     		strb	r2, [r3]
 1719              	.LBE11:
 640:Core/Src/main.c **** 
 1720              		.loc 1 640 1 view .LVU406
 1721 047e D2E5     		b	.L44
 1722              	.L75:
 1723              	.LBB12:
 612:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 1724              		.loc 1 612 67 view .LVU407
 1725 0480 0020     		movs	r0, #0
 1726 0482 CFE7     		b	.L70
 1727              	.L76:
 613:Core/Src/main.c **** 		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 1728              		.loc 1 613 67 view .LVU408
 1729 0484 0023     		movs	r3, #0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 70


 1730 0486 D5E7     		b	.L71
 1731              	.L77:
 614:Core/Src/main.c **** 		rotary_value = rotary_value_row;
 1732              		.loc 1 614 67 view .LVU409
 1733 0488 0023     		movs	r3, #0
 1734 048a DCE7     		b	.L72
 1735              	.L92:
 622:Core/Src/main.c **** 			enter = 1;
 1736              		.loc 1 622 8 view .LVU410
 1737 048c 4FF40041 		mov	r1, #32768
 1738 0490 00F18040 		add	r0, r0, #1073741824
 1739 0494 00F50230 		add	r0, r0, #133120
 1740 0498 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1741              	.LVL138:
 622:Core/Src/main.c **** 			enter = 1;
 1742              		.loc 1 622 5 view .LVU411
 1743 049c 0028     		cmp	r0, #0
 1744 049e DBD0     		beq	.L73
 623:Core/Src/main.c **** 		}
 1745              		.loc 1 623 4 is_stmt 1 view .LVU412
 623:Core/Src/main.c **** 		}
 1746              		.loc 1 623 10 is_stmt 0 view .LVU413
 1747 04a0 1A4B     		ldr	r3, .L95+100
 1748 04a2 0122     		movs	r2, #1
 1749 04a4 1A70     		strb	r2, [r3]
 1750 04a6 D7E7     		b	.L73
 1751              	.L96:
 1752              		.align	3
 1753              	.L95:
 1754 04a8 00000000 		.word	0
 1755 04ac 009AC040 		.word	1086364160
 1756 04b0 00000000 		.word	.LANCHOR20
 1757 04b4 00000000 		.word	.LANCHOR11
 1758 04b8 00000140 		.word	1073807360
 1759 04bc 00000000 		.word	.LANCHOR2
 1760 04c0 00040040 		.word	1073742848
 1761 04c4 00000000 		.word	.LANCHOR1
 1762 04c8 00000000 		.word	.LANCHOR25
 1763 04cc 00000000 		.word	.LANCHOR26
 1764 04d0 00000000 		.word	.LANCHOR27
 1765 04d4 00000000 		.word	.LANCHOR28
 1766 04d8 00000000 		.word	.LANCHOR30
 1767 04dc 00408F40 		.word	1083129856
 1768 04e0 00000000 		.word	.LANCHOR18
 1769 04e4 00000000 		.word	.LANCHOR31
 1770 04e8 00000000 		.word	.LANCHOR3
 1771 04ec 00000000 		.word	.LANCHOR4
 1772 04f0 00000000 		.word	.LANCHOR5
 1773 04f4 00002E40 		.word	1076756480
 1774 04f8 00000000 		.word	.LANCHOR6
 1775 04fc 00000000 		.word	.LANCHOR7
 1776 0500 00080240 		.word	1073874944
 1777 0504 00000240 		.word	1073872896
 1778 0508 00000000 		.word	.LANCHOR32
 1779 050c 00000000 		.word	.LANCHOR24
 1780 0510 00000000 		.word	.LANCHOR10
 1781 0514 00000000 		.word	.LANCHOR29
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 71


 1782              	.LBE12:
 1783              		.cfi_endproc
 1784              	.LFE238:
 1786              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1787              		.align	1
 1788              		.global	HAL_ADC_ConvCpltCallback
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1793              	HAL_ADC_ConvCpltCallback:
 1794              	.LVL139:
 1795              	.LFB264:
1962:Core/Src/main.c **** 
1963:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 1796              		.loc 1 1963 61 is_stmt 1 view -0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
1964:Core/Src/main.c **** 	if (sensgettime >= SENSGETCOUNT) {
 1801              		.loc 1 1964 2 view .LVU415
 1802              		.loc 1 1964 18 is_stmt 0 view .LVU416
 1803 0000 184B     		ldr	r3, .L105
 1804 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1805              		.loc 1 1964 5 view .LVU417
 1806 0004 082B     		cmp	r3, #8
 1807 0006 2AD9     		bls	.L98
1965:Core/Src/main.c **** 		sensgettime = 0;
 1808              		.loc 1 1965 3 is_stmt 1 view .LVU418
 1809              		.loc 1 1965 15 is_stmt 0 view .LVU419
 1810 0008 0022     		movs	r2, #0
 1811 000a 164B     		ldr	r3, .L105
 1812 000c 1A70     		strb	r2, [r3]
1966:Core/Src/main.c **** 		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 1813              		.loc 1 1966 3 is_stmt 1 view .LVU420
 1814              	.LBB13:
 1815              		.loc 1 1966 8 view .LVU421
 1816              	.LVL140:
 1817              		.loc 1 1966 3 is_stmt 0 view .LVU422
 1818 000e 0DE0     		b	.L99
 1819              	.LVL141:
 1820              	.L100:
 1821              	.LBB14:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
1968:Core/Src/main.c **** 				for (unsigned char alphaindex = 0; alphaindex > count;
 1822              		.loc 1 1968 5 is_stmt 1 discriminator 1 view .LVU423
 1823              	.LBE14:
 1824              	.LBE13:
 1825              		.loc 1 1968 10 discriminator 1 view .LVU424
 1826              		.loc 1 1968 40 discriminator 1 view .LVU425
 1827              	.LBB17:
 1828              	.LBB15:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1829              		.loc 1 1967 56 discriminator 1 view .LVU426
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1830              		.loc 1 1967 61 is_stmt 0 discriminator 1 view .LVU427
 1831 0010 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 72


 1832              	.LVL142:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1833              		.loc 1 1967 61 discriminator 1 view .LVU428
 1834 0012 DBB2     		uxtb	r3, r3
 1835              	.LVL143:
 1836              	.L101:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1837              		.loc 1 1967 34 is_stmt 1 discriminator 1 view .LVU429
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1838              		.loc 1 1967 4 is_stmt 0 discriminator 1 view .LVU430
 1839 0014 082B     		cmp	r3, #8
 1840 0016 FBD9     		bls	.L100
 1841              	.LBE15:
1969:Core/Src/main.c **** 						alphaindex--) {
1970:Core/Src/main.c **** 					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
1971:Core/Src/main.c **** 					analogbuffers[alphaindex - 1][index] =
1972:Core/Src/main.c **** 							analogbuffers[alphaindex][index];
1973:Core/Src/main.c **** 					analogbuffers[alphaindex][index] = analogbuffer;
1974:Core/Src/main.c **** 				}
1975:Core/Src/main.c **** 			}
1976:Core/Src/main.c **** 			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 1842              		.loc 1 1976 4 is_stmt 1 discriminator 2 view .LVU431
 1843              		.loc 1 1976 57 is_stmt 0 discriminator 2 view .LVU432
 1844 0018 02F13001 		add	r1, r2, #48
 1845 001c 124B     		ldr	r3, .L105+4
 1846              	.LVL144:
 1847              		.loc 1 1976 57 discriminator 2 view .LVU433
 1848 001e 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 1849              		.loc 1 1976 18 discriminator 2 view .LVU434
 1850 0022 124B     		ldr	r3, .L105+8
 1851 0024 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1852              		.loc 1 1966 58 is_stmt 1 discriminator 2 view .LVU435
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1853              		.loc 1 1966 63 is_stmt 0 discriminator 2 view .LVU436
 1854 0028 0132     		adds	r2, r2, #1
 1855              	.LVL145:
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1856              		.loc 1 1966 63 discriminator 2 view .LVU437
 1857 002a D2B2     		uxtb	r2, r2
 1858              	.LVL146:
 1859              	.L99:
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1860              		.loc 1 1966 33 is_stmt 1 discriminator 1 view .LVU438
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1861              		.loc 1 1966 3 is_stmt 0 discriminator 1 view .LVU439
 1862 002c 0B2A     		cmp	r2, #11
 1863 002e 16D8     		bhi	.L98
 1864              	.LBB16:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1865              		.loc 1 1967 23 view .LVU440
 1866 0030 0023     		movs	r3, #0
 1867 0032 EFE7     		b	.L101
 1868              	.LVL147:
 1869              	.L103:
1967:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1870              		.loc 1 1967 23 view .LVU441
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 73


 1871              	.LBE16:
 1872              	.LBE17:
 1873              	.LBB18:
1977:Core/Src/main.c **** 		}
1978:Core/Src/main.c **** 	}
1979:Core/Src/main.c **** 	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
1980:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1874              		.loc 1 1980 3 is_stmt 1 discriminator 3 view .LVU442
 1875              		.loc 1 1980 29 is_stmt 0 discriminator 3 view .LVU443
 1876 0034 0B4A     		ldr	r2, .L105
 1877 0036 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1878              		.loc 1 1980 48 discriminator 3 view .LVU444
 1879 0038 0D49     		ldr	r1, .L105+12
 1880 003a 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 1881              		.loc 1 1980 37 discriminator 3 view .LVU445
 1882 003e 02EB4202 		add	r2, r2, r2, lsl #1
 1883 0042 9100     		lsls	r1, r2, #2
 1884 0044 1944     		add	r1, r1, r3
 1885 0046 084A     		ldr	r2, .L105+4
 1886 0048 22F81100 		strh	r0, [r2, r1, lsl #1]	@ movhi
1979:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1887              		.loc 1 1979 57 is_stmt 1 discriminator 3 view .LVU446
1979:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1888              		.loc 1 1979 62 is_stmt 0 discriminator 3 view .LVU447
 1889 004c 0133     		adds	r3, r3, #1
 1890              	.LVL148:
1979:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1891              		.loc 1 1979 62 discriminator 3 view .LVU448
 1892 004e DBB2     		uxtb	r3, r3
 1893              	.LVL149:
 1894              	.L102:
1979:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1895              		.loc 1 1979 32 is_stmt 1 discriminator 1 view .LVU449
1979:Core/Src/main.c **** 		analogbuffers[sensgettime][index] = analograw[index];
 1896              		.loc 1 1979 2 is_stmt 0 discriminator 1 view .LVU450
 1897 0050 0B2B     		cmp	r3, #11
 1898 0052 EFD9     		bls	.L103
 1899              	.LBE18:
1981:Core/Src/main.c **** 	}
1982:Core/Src/main.c **** 	sensgettime++;
 1900              		.loc 1 1982 2 is_stmt 1 view .LVU451
 1901              		.loc 1 1982 13 is_stmt 0 view .LVU452
 1902 0054 034A     		ldr	r2, .L105
 1903 0056 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1904              	.LVL150:
 1905              		.loc 1 1982 13 view .LVU453
 1906 0058 0133     		adds	r3, r3, #1
 1907 005a 1370     		strb	r3, [r2]
1983:Core/Src/main.c **** }
 1908              		.loc 1 1983 1 view .LVU454
 1909 005c 7047     		bx	lr
 1910              	.LVL151:
 1911              	.L98:
 1912              	.LBB19:
1966:Core/Src/main.c **** 			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 1913              		.loc 1 1966 22 discriminator 1 view .LVU455
 1914 005e 0023     		movs	r3, #0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 74


 1915 0060 F6E7     		b	.L102
 1916              	.L106:
 1917 0062 00BF     		.align	2
 1918              	.L105:
 1919 0064 00000000 		.word	.LANCHOR33
 1920 0068 00000000 		.word	.LANCHOR34
 1921 006c 00000000 		.word	.LANCHOR35
 1922 0070 00000000 		.word	.LANCHOR36
 1923              	.LBE19:
 1924              		.cfi_endproc
 1925              	.LFE264:
 1927              		.section	.text.power,"ax",%progbits
 1928              		.align	1
 1929              		.global	power
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1934              	power:
 1935              	.LVL152:
 1936              	.LFB265:
1984:Core/Src/main.c **** 
1985:Core/Src/main.c **** double power(double a, double b) {
 1937              		.loc 1 1985 34 is_stmt 1 view -0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              		.loc 1 1985 34 is_stmt 0 view .LVU457
 1942 0000 08B5     		push	{r3, lr}
 1943              	.LCFI22:
 1944              		.cfi_def_cfa_offset 8
 1945              		.cfi_offset 3, -8
 1946              		.cfi_offset 14, -4
 1947 0002 51EC110B 		vmov	r0, r1, d1
1986:Core/Src/main.c **** 	double r;
 1948              		.loc 1 1986 2 is_stmt 1 view .LVU458
1987:Core/Src/main.c **** 	r = 1;
 1949              		.loc 1 1987 2 view .LVU459
 1950              	.LVL153:
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1951              		.loc 1 1988 2 view .LVU460
 1952              	.LBB20:
 1953              		.loc 1 1988 7 view .LVU461
 1954              		.loc 1 1988 11 is_stmt 0 view .LVU462
 1955 0006 FFF7FEFF 		bl	__aeabi_d2iz
 1956              	.LVL154:
 1957              		.loc 1 1988 2 view .LVU463
 1958 000a 00E0     		b	.L108
 1959              	.L109:
1989:Core/Src/main.c **** 	//	r = r * a;
1990:Core/Src/main.c **** 	}
 1960              		.loc 1 1990 2 is_stmt 1 discriminator 3 view .LVU464
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1961              		.loc 1 1988 25 discriminator 3 view .LVU465
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1962              		.loc 1 1988 26 is_stmt 0 discriminator 3 view .LVU466
 1963 000c 0138     		subs	r0, r0, #1
 1964              	.LVL155:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 75


 1965              	.L108:
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1966              		.loc 1 1988 18 is_stmt 1 discriminator 1 view .LVU467
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1967              		.loc 1 1988 2 is_stmt 0 discriminator 1 view .LVU468
 1968 000e 0028     		cmp	r0, #0
 1969 0010 FCDC     		bgt	.L109
1988:Core/Src/main.c **** 	for (int i = b; i > 0; i--) {
 1970              		.loc 1 1988 2 discriminator 1 view .LVU469
 1971              	.LBE20:
1991:Core/Src/main.c **** 
1992:Core/Src/main.c **** 	return r;
 1972              		.loc 1 1992 2 is_stmt 1 view .LVU470
1993:Core/Src/main.c **** }
 1973              		.loc 1 1993 1 is_stmt 0 view .LVU471
 1974 0012 9FED010B 		vldr.64	d0, .L111
 1975 0016 08BD     		pop	{r3, pc}
 1976              	.L112:
 1977              		.align	3
 1978              	.L111:
 1979 0018 00000000 		.word	0
 1980 001c 0000F03F 		.word	1072693248
 1981              		.cfi_endproc
 1982              	.LFE265:
 1984              		.section	.text.Error_Handler,"ax",%progbits
 1985              		.align	1
 1986              		.global	Error_Handler
 1987              		.syntax unified
 1988              		.thumb
 1989              		.thumb_func
 1991              	Error_Handler:
 1992              	.LFB266:
1994:Core/Src/main.c **** 
1995:Core/Src/main.c **** #if USE_FLASH
1996:Core/Src/main.c **** void eraseFlash(void) {
1997:Core/Src/main.c **** 	FLASH_EraseInitTypeDef erase;
1998:Core/Src/main.c **** 	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
1999:Core/Src/main.c **** 	erase.Sector = FLASH_SECTOR_11;
2000:Core/Src/main.c **** 	erase.NbSectors = 1;
2001:Core/Src/main.c **** 	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
2002:Core/Src/main.c **** 	uint32_t pageError = 0;
2003:Core/Src/main.c **** 
2004:Core/Src/main.c **** 	HAL_FLASHEx_Erase(&erase, &pageError);
2005:Core/Src/main.c **** }
2006:Core/Src/main.c **** 
2007:Core/Src/main.c **** void writeFlash(uint32_t address, uint8_t *data, uint32_t size) {
2008:Core/Src/main.c **** 	HAL_FLASH_Unlock();
2009:Core/Src/main.c **** 	eraseFlash();
2010:Core/Src/main.c **** 
2011:Core/Src/main.c **** 	for (uint32_t add = address; add < (address + size); add++) {
2012:Core/Src/main.c **** 		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
2013:Core/Src/main.c **** 		data++;
2014:Core/Src/main.c **** 	}
2015:Core/Src/main.c **** 
2016:Core/Src/main.c **** 	HAL_FLASH_Lock();
2017:Core/Src/main.c **** }
2018:Core/Src/main.c **** 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 76


2019:Core/Src/main.c **** void loadFlash(uint32_t address, uint8_t *data, uint32_t size) {
2020:Core/Src/main.c **** 	memcpy(data, (uint64_t*) address, size);
2021:Core/Src/main.c **** }
2022:Core/Src/main.c **** #endif
2023:Core/Src/main.c **** /* USER CODE END 4 */
2024:Core/Src/main.c **** 
2025:Core/Src/main.c **** /**
2026:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
2027:Core/Src/main.c ****   * @retval None
2028:Core/Src/main.c ****   */
2029:Core/Src/main.c **** void Error_Handler(void)
2030:Core/Src/main.c **** {
 1993              		.loc 1 2030 1 is_stmt 1 view -0
 1994              		.cfi_startproc
 1995              		@ Volatile: function does not return.
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 1998              		@ link register save eliminated.
2031:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
2032:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
2033:Core/Src/main.c **** 	__disable_irq();
 1999              		.loc 1 2033 2 view .LVU473
 2000              	.LBB21:
 2001              	.LBI21:
 2002              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 77


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 78


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2003              		.loc 2 140 27 view .LVU474
 2004              	.LBB22:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2005              		.loc 2 142 3 view .LVU475
 2006              		.syntax unified
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 79


 2007              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2008 0000 72B6     		cpsid i
 2009              	@ 0 "" 2
 2010              		.thumb
 2011              		.syntax unified
 2012              	.L114:
 2013              	.LBE22:
 2014              	.LBE21:
2034:Core/Src/main.c **** 	while (1) {
 2015              		.loc 1 2034 2 discriminator 1 view .LVU476
2035:Core/Src/main.c **** 	}
 2016              		.loc 1 2035 2 discriminator 1 view .LVU477
2034:Core/Src/main.c **** 	while (1) {
 2017              		.loc 1 2034 8 discriminator 1 view .LVU478
 2018 0002 FEE7     		b	.L114
 2019              		.cfi_endproc
 2020              	.LFE266:
 2022              		.section	.text.MX_ADC1_Init,"ax",%progbits
 2023              		.align	1
 2024              		.syntax unified
 2025              		.thumb
 2026              		.thumb_func
 2028              	MX_ADC1_Init:
 2029              	.LFB241:
1089:Core/Src/main.c **** 
 2030              		.loc 1 1089 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 16
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034 0000 00B5     		push	{lr}
 2035              	.LCFI23:
 2036              		.cfi_def_cfa_offset 4
 2037              		.cfi_offset 14, -4
 2038 0002 85B0     		sub	sp, sp, #20
 2039              	.LCFI24:
 2040              		.cfi_def_cfa_offset 24
1095:Core/Src/main.c **** 
 2041              		.loc 1 1095 3 view .LVU480
1095:Core/Src/main.c **** 
 2042              		.loc 1 1095 26 is_stmt 0 view .LVU481
 2043 0004 0023     		movs	r3, #0
 2044 0006 0093     		str	r3, [sp]
 2045 0008 0193     		str	r3, [sp, #4]
 2046 000a 0293     		str	r3, [sp, #8]
 2047 000c 0393     		str	r3, [sp, #12]
1103:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 2048              		.loc 1 1103 3 is_stmt 1 view .LVU482
1103:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 2049              		.loc 1 1103 18 is_stmt 0 view .LVU483
 2050 000e 7048     		ldr	r0, .L151
 2051 0010 704A     		ldr	r2, .L151+4
 2052 0012 0260     		str	r2, [r0]
1104:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 2053              		.loc 1 1104 3 is_stmt 1 view .LVU484
1104:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 2054              		.loc 1 1104 29 is_stmt 0 view .LVU485
 2055 0014 4FF48032 		mov	r2, #65536
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 80


 2056 0018 4260     		str	r2, [r0, #4]
1105:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 2057              		.loc 1 1105 3 is_stmt 1 view .LVU486
1105:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 2058              		.loc 1 1105 25 is_stmt 0 view .LVU487
 2059 001a 8360     		str	r3, [r0, #8]
1106:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 2060              		.loc 1 1106 3 is_stmt 1 view .LVU488
1106:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 2061              		.loc 1 1106 27 is_stmt 0 view .LVU489
 2062 001c 0122     		movs	r2, #1
 2063 001e 0261     		str	r2, [r0, #16]
1107:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 2064              		.loc 1 1107 3 is_stmt 1 view .LVU490
1107:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 2065              		.loc 1 1107 33 is_stmt 0 view .LVU491
 2066 0020 0276     		strb	r2, [r0, #24]
1108:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 2067              		.loc 1 1108 3 is_stmt 1 view .LVU492
1108:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 2068              		.loc 1 1108 36 is_stmt 0 view .LVU493
 2069 0022 80F82030 		strb	r3, [r0, #32]
1109:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 2070              		.loc 1 1109 3 is_stmt 1 view .LVU494
1109:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 2071              		.loc 1 1109 35 is_stmt 0 view .LVU495
 2072 0026 C362     		str	r3, [r0, #44]
1110:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 2073              		.loc 1 1110 3 is_stmt 1 view .LVU496
1110:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 2074              		.loc 1 1110 31 is_stmt 0 view .LVU497
 2075 0028 6B49     		ldr	r1, .L151+8
 2076 002a 8162     		str	r1, [r0, #40]
1111:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 16;
 2077              		.loc 1 1111 3 is_stmt 1 view .LVU498
1111:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 16;
 2078              		.loc 1 1111 24 is_stmt 0 view .LVU499
 2079 002c C360     		str	r3, [r0, #12]
1112:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 2080              		.loc 1 1112 3 is_stmt 1 view .LVU500
1112:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 2081              		.loc 1 1112 30 is_stmt 0 view .LVU501
 2082 002e 1023     		movs	r3, #16
 2083 0030 C361     		str	r3, [r0, #28]
1113:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 2084              		.loc 1 1113 3 is_stmt 1 view .LVU502
1113:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 2085              		.loc 1 1113 36 is_stmt 0 view .LVU503
 2086 0032 80F83020 		strb	r2, [r0, #48]
1114:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 2087              		.loc 1 1114 3 is_stmt 1 view .LVU504
1114:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 2088              		.loc 1 1114 27 is_stmt 0 view .LVU505
 2089 0036 4261     		str	r2, [r0, #20]
1115:Core/Src/main.c ****   {
 2090              		.loc 1 1115 3 is_stmt 1 view .LVU506
1115:Core/Src/main.c ****   {
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 81


 2091              		.loc 1 1115 7 is_stmt 0 view .LVU507
 2092 0038 FFF7FEFF 		bl	HAL_ADC_Init
 2093              	.LVL156:
1115:Core/Src/main.c ****   {
 2094              		.loc 1 1115 6 view .LVU508
 2095 003c 0028     		cmp	r0, #0
 2096 003e 40F0A580 		bne	.L134
1122:Core/Src/main.c ****   sConfig.Rank = 1;
 2097              		.loc 1 1122 3 is_stmt 1 view .LVU509
1122:Core/Src/main.c ****   sConfig.Rank = 1;
 2098              		.loc 1 1122 19 is_stmt 0 view .LVU510
 2099 0042 0923     		movs	r3, #9
 2100 0044 0093     		str	r3, [sp]
1123:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 2101              		.loc 1 1123 3 is_stmt 1 view .LVU511
1123:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 2102              		.loc 1 1123 16 is_stmt 0 view .LVU512
 2103 0046 0123     		movs	r3, #1
 2104 0048 0193     		str	r3, [sp, #4]
1124:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2105              		.loc 1 1124 3 is_stmt 1 view .LVU513
1124:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2106              		.loc 1 1124 24 is_stmt 0 view .LVU514
 2107 004a 0323     		movs	r3, #3
 2108 004c 0293     		str	r3, [sp, #8]
1125:Core/Src/main.c ****   {
 2109              		.loc 1 1125 3 is_stmt 1 view .LVU515
1125:Core/Src/main.c ****   {
 2110              		.loc 1 1125 7 is_stmt 0 view .LVU516
 2111 004e 6946     		mov	r1, sp
 2112 0050 5F48     		ldr	r0, .L151
 2113 0052 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2114              	.LVL157:
1125:Core/Src/main.c ****   {
 2115              		.loc 1 1125 6 view .LVU517
 2116 0056 0028     		cmp	r0, #0
 2117 0058 40F09A80 		bne	.L135
1132:Core/Src/main.c ****   sConfig.Rank = 2;
 2118              		.loc 1 1132 3 is_stmt 1 view .LVU518
1132:Core/Src/main.c ****   sConfig.Rank = 2;
 2119              		.loc 1 1132 19 is_stmt 0 view .LVU519
 2120 005c 0A23     		movs	r3, #10
 2121 005e 0093     		str	r3, [sp]
1133:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2122              		.loc 1 1133 3 is_stmt 1 view .LVU520
1133:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2123              		.loc 1 1133 16 is_stmt 0 view .LVU521
 2124 0060 0223     		movs	r3, #2
 2125 0062 0193     		str	r3, [sp, #4]
1134:Core/Src/main.c ****   {
 2126              		.loc 1 1134 3 is_stmt 1 view .LVU522
1134:Core/Src/main.c ****   {
 2127              		.loc 1 1134 7 is_stmt 0 view .LVU523
 2128 0064 6946     		mov	r1, sp
 2129 0066 5A48     		ldr	r0, .L151
 2130 0068 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2131              	.LVL158:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 82


1134:Core/Src/main.c ****   {
 2132              		.loc 1 1134 6 view .LVU524
 2133 006c 0028     		cmp	r0, #0
 2134 006e 40F09180 		bne	.L136
1141:Core/Src/main.c ****   sConfig.Rank = 3;
 2135              		.loc 1 1141 3 is_stmt 1 view .LVU525
1141:Core/Src/main.c ****   sConfig.Rank = 3;
 2136              		.loc 1 1141 19 is_stmt 0 view .LVU526
 2137 0072 0823     		movs	r3, #8
 2138 0074 0093     		str	r3, [sp]
1142:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2139              		.loc 1 1142 3 is_stmt 1 view .LVU527
1142:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2140              		.loc 1 1142 16 is_stmt 0 view .LVU528
 2141 0076 0323     		movs	r3, #3
 2142 0078 0193     		str	r3, [sp, #4]
1143:Core/Src/main.c ****   {
 2143              		.loc 1 1143 3 is_stmt 1 view .LVU529
1143:Core/Src/main.c ****   {
 2144              		.loc 1 1143 7 is_stmt 0 view .LVU530
 2145 007a 6946     		mov	r1, sp
 2146 007c 5448     		ldr	r0, .L151
 2147 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2148              	.LVL159:
1143:Core/Src/main.c ****   {
 2149              		.loc 1 1143 6 view .LVU531
 2150 0082 0028     		cmp	r0, #0
 2151 0084 40F08880 		bne	.L137
1150:Core/Src/main.c ****   sConfig.Rank = 4;
 2152              		.loc 1 1150 3 is_stmt 1 view .LVU532
1150:Core/Src/main.c ****   sConfig.Rank = 4;
 2153              		.loc 1 1150 19 is_stmt 0 view .LVU533
 2154 0088 0B23     		movs	r3, #11
 2155 008a 0093     		str	r3, [sp]
1151:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2156              		.loc 1 1151 3 is_stmt 1 view .LVU534
1151:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2157              		.loc 1 1151 16 is_stmt 0 view .LVU535
 2158 008c 0423     		movs	r3, #4
 2159 008e 0193     		str	r3, [sp, #4]
1152:Core/Src/main.c ****   {
 2160              		.loc 1 1152 3 is_stmt 1 view .LVU536
1152:Core/Src/main.c ****   {
 2161              		.loc 1 1152 7 is_stmt 0 view .LVU537
 2162 0090 6946     		mov	r1, sp
 2163 0092 4F48     		ldr	r0, .L151
 2164 0094 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2165              	.LVL160:
1152:Core/Src/main.c ****   {
 2166              		.loc 1 1152 6 view .LVU538
 2167 0098 0028     		cmp	r0, #0
 2168 009a 7FD1     		bne	.L138
1159:Core/Src/main.c ****   sConfig.Rank = 5;
 2169              		.loc 1 1159 3 is_stmt 1 view .LVU539
1159:Core/Src/main.c ****   sConfig.Rank = 5;
 2170              		.loc 1 1159 19 is_stmt 0 view .LVU540
 2171 009c 0E23     		movs	r3, #14
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 83


 2172 009e 0093     		str	r3, [sp]
1160:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2173              		.loc 1 1160 3 is_stmt 1 view .LVU541
1160:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2174              		.loc 1 1160 16 is_stmt 0 view .LVU542
 2175 00a0 0523     		movs	r3, #5
 2176 00a2 0193     		str	r3, [sp, #4]
1161:Core/Src/main.c ****   {
 2177              		.loc 1 1161 3 is_stmt 1 view .LVU543
1161:Core/Src/main.c ****   {
 2178              		.loc 1 1161 7 is_stmt 0 view .LVU544
 2179 00a4 6946     		mov	r1, sp
 2180 00a6 4A48     		ldr	r0, .L151
 2181 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2182              	.LVL161:
1161:Core/Src/main.c ****   {
 2183              		.loc 1 1161 6 view .LVU545
 2184 00ac 0028     		cmp	r0, #0
 2185 00ae 77D1     		bne	.L139
1168:Core/Src/main.c ****   sConfig.Rank = 6;
 2186              		.loc 1 1168 3 is_stmt 1 view .LVU546
1168:Core/Src/main.c ****   sConfig.Rank = 6;
 2187              		.loc 1 1168 19 is_stmt 0 view .LVU547
 2188 00b0 0F23     		movs	r3, #15
 2189 00b2 0093     		str	r3, [sp]
1169:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2190              		.loc 1 1169 3 is_stmt 1 view .LVU548
1169:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2191              		.loc 1 1169 16 is_stmt 0 view .LVU549
 2192 00b4 0623     		movs	r3, #6
 2193 00b6 0193     		str	r3, [sp, #4]
1170:Core/Src/main.c ****   {
 2194              		.loc 1 1170 3 is_stmt 1 view .LVU550
1170:Core/Src/main.c ****   {
 2195              		.loc 1 1170 7 is_stmt 0 view .LVU551
 2196 00b8 6946     		mov	r1, sp
 2197 00ba 4548     		ldr	r0, .L151
 2198 00bc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2199              	.LVL162:
1170:Core/Src/main.c ****   {
 2200              		.loc 1 1170 6 view .LVU552
 2201 00c0 0028     		cmp	r0, #0
 2202 00c2 6FD1     		bne	.L140
1177:Core/Src/main.c ****   sConfig.Rank = 7;
 2203              		.loc 1 1177 3 is_stmt 1 view .LVU553
1177:Core/Src/main.c ****   sConfig.Rank = 7;
 2204              		.loc 1 1177 19 is_stmt 0 view .LVU554
 2205 00c4 0C23     		movs	r3, #12
 2206 00c6 0093     		str	r3, [sp]
1178:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2207              		.loc 1 1178 3 is_stmt 1 view .LVU555
1178:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2208              		.loc 1 1178 16 is_stmt 0 view .LVU556
 2209 00c8 0723     		movs	r3, #7
 2210 00ca 0193     		str	r3, [sp, #4]
1179:Core/Src/main.c ****   {
 2211              		.loc 1 1179 3 is_stmt 1 view .LVU557
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 84


1179:Core/Src/main.c ****   {
 2212              		.loc 1 1179 7 is_stmt 0 view .LVU558
 2213 00cc 6946     		mov	r1, sp
 2214 00ce 4048     		ldr	r0, .L151
 2215 00d0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2216              	.LVL163:
1179:Core/Src/main.c ****   {
 2217              		.loc 1 1179 6 view .LVU559
 2218 00d4 0028     		cmp	r0, #0
 2219 00d6 67D1     		bne	.L141
1186:Core/Src/main.c ****   sConfig.Rank = 8;
 2220              		.loc 1 1186 3 is_stmt 1 view .LVU560
1186:Core/Src/main.c ****   sConfig.Rank = 8;
 2221              		.loc 1 1186 19 is_stmt 0 view .LVU561
 2222 00d8 0D23     		movs	r3, #13
 2223 00da 0093     		str	r3, [sp]
1187:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2224              		.loc 1 1187 3 is_stmt 1 view .LVU562
1187:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2225              		.loc 1 1187 16 is_stmt 0 view .LVU563
 2226 00dc 0823     		movs	r3, #8
 2227 00de 0193     		str	r3, [sp, #4]
1188:Core/Src/main.c ****   {
 2228              		.loc 1 1188 3 is_stmt 1 view .LVU564
1188:Core/Src/main.c ****   {
 2229              		.loc 1 1188 7 is_stmt 0 view .LVU565
 2230 00e0 6946     		mov	r1, sp
 2231 00e2 3B48     		ldr	r0, .L151
 2232 00e4 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2233              	.LVL164:
1188:Core/Src/main.c ****   {
 2234              		.loc 1 1188 6 view .LVU566
 2235 00e8 0028     		cmp	r0, #0
 2236 00ea 5FD1     		bne	.L142
1195:Core/Src/main.c ****   sConfig.Rank = 9;
 2237              		.loc 1 1195 3 is_stmt 1 view .LVU567
1195:Core/Src/main.c ****   sConfig.Rank = 9;
 2238              		.loc 1 1195 19 is_stmt 0 view .LVU568
 2239 00ec 0723     		movs	r3, #7
 2240 00ee 0093     		str	r3, [sp]
1196:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2241              		.loc 1 1196 3 is_stmt 1 view .LVU569
1196:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2242              		.loc 1 1196 16 is_stmt 0 view .LVU570
 2243 00f0 0923     		movs	r3, #9
 2244 00f2 0193     		str	r3, [sp, #4]
1197:Core/Src/main.c ****   {
 2245              		.loc 1 1197 3 is_stmt 1 view .LVU571
1197:Core/Src/main.c ****   {
 2246              		.loc 1 1197 7 is_stmt 0 view .LVU572
 2247 00f4 6946     		mov	r1, sp
 2248 00f6 3648     		ldr	r0, .L151
 2249 00f8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2250              	.LVL165:
1197:Core/Src/main.c ****   {
 2251              		.loc 1 1197 6 view .LVU573
 2252 00fc 0028     		cmp	r0, #0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 85


 2253 00fe 57D1     		bne	.L143
1204:Core/Src/main.c ****   sConfig.Rank = 10;
 2254              		.loc 1 1204 3 is_stmt 1 view .LVU574
1204:Core/Src/main.c ****   sConfig.Rank = 10;
 2255              		.loc 1 1204 19 is_stmt 0 view .LVU575
 2256 0100 0023     		movs	r3, #0
 2257 0102 0093     		str	r3, [sp]
1205:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2258              		.loc 1 1205 3 is_stmt 1 view .LVU576
1205:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2259              		.loc 1 1205 16 is_stmt 0 view .LVU577
 2260 0104 0A23     		movs	r3, #10
 2261 0106 0193     		str	r3, [sp, #4]
1206:Core/Src/main.c ****   {
 2262              		.loc 1 1206 3 is_stmt 1 view .LVU578
1206:Core/Src/main.c ****   {
 2263              		.loc 1 1206 7 is_stmt 0 view .LVU579
 2264 0108 6946     		mov	r1, sp
 2265 010a 3148     		ldr	r0, .L151
 2266 010c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2267              	.LVL166:
1206:Core/Src/main.c ****   {
 2268              		.loc 1 1206 6 view .LVU580
 2269 0110 0028     		cmp	r0, #0
 2270 0112 4FD1     		bne	.L144
1213:Core/Src/main.c ****   sConfig.Rank = 11;
 2271              		.loc 1 1213 3 is_stmt 1 view .LVU581
1213:Core/Src/main.c ****   sConfig.Rank = 11;
 2272              		.loc 1 1213 19 is_stmt 0 view .LVU582
 2273 0114 0623     		movs	r3, #6
 2274 0116 0093     		str	r3, [sp]
1214:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2275              		.loc 1 1214 3 is_stmt 1 view .LVU583
1214:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2276              		.loc 1 1214 16 is_stmt 0 view .LVU584
 2277 0118 0B23     		movs	r3, #11
 2278 011a 0193     		str	r3, [sp, #4]
1215:Core/Src/main.c ****   {
 2279              		.loc 1 1215 3 is_stmt 1 view .LVU585
1215:Core/Src/main.c ****   {
 2280              		.loc 1 1215 7 is_stmt 0 view .LVU586
 2281 011c 6946     		mov	r1, sp
 2282 011e 2C48     		ldr	r0, .L151
 2283 0120 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2284              	.LVL167:
1215:Core/Src/main.c ****   {
 2285              		.loc 1 1215 6 view .LVU587
 2286 0124 0028     		cmp	r0, #0
 2287 0126 47D1     		bne	.L145
1222:Core/Src/main.c ****   sConfig.Rank = 12;
 2288              		.loc 1 1222 3 is_stmt 1 view .LVU588
1222:Core/Src/main.c ****   sConfig.Rank = 12;
 2289              		.loc 1 1222 19 is_stmt 0 view .LVU589
 2290 0128 0123     		movs	r3, #1
 2291 012a 0093     		str	r3, [sp]
1223:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2292              		.loc 1 1223 3 is_stmt 1 view .LVU590
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 86


1223:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2293              		.loc 1 1223 16 is_stmt 0 view .LVU591
 2294 012c 0C23     		movs	r3, #12
 2295 012e 0193     		str	r3, [sp, #4]
1224:Core/Src/main.c ****   {
 2296              		.loc 1 1224 3 is_stmt 1 view .LVU592
1224:Core/Src/main.c ****   {
 2297              		.loc 1 1224 7 is_stmt 0 view .LVU593
 2298 0130 6946     		mov	r1, sp
 2299 0132 2748     		ldr	r0, .L151
 2300 0134 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2301              	.LVL168:
1224:Core/Src/main.c ****   {
 2302              		.loc 1 1224 6 view .LVU594
 2303 0138 0028     		cmp	r0, #0
 2304 013a 3FD1     		bne	.L146
1231:Core/Src/main.c ****   sConfig.Rank = 13;
 2305              		.loc 1 1231 3 is_stmt 1 view .LVU595
1231:Core/Src/main.c ****   sConfig.Rank = 13;
 2306              		.loc 1 1231 19 is_stmt 0 view .LVU596
 2307 013c 0523     		movs	r3, #5
 2308 013e 0093     		str	r3, [sp]
1232:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2309              		.loc 1 1232 3 is_stmt 1 view .LVU597
1232:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2310              		.loc 1 1232 16 is_stmt 0 view .LVU598
 2311 0140 0D23     		movs	r3, #13
 2312 0142 0193     		str	r3, [sp, #4]
1233:Core/Src/main.c ****   {
 2313              		.loc 1 1233 3 is_stmt 1 view .LVU599
1233:Core/Src/main.c ****   {
 2314              		.loc 1 1233 7 is_stmt 0 view .LVU600
 2315 0144 6946     		mov	r1, sp
 2316 0146 2248     		ldr	r0, .L151
 2317 0148 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2318              	.LVL169:
1233:Core/Src/main.c ****   {
 2319              		.loc 1 1233 6 view .LVU601
 2320 014c 0028     		cmp	r0, #0
 2321 014e 37D1     		bne	.L147
1240:Core/Src/main.c ****   sConfig.Rank = 14;
 2322              		.loc 1 1240 3 is_stmt 1 view .LVU602
1240:Core/Src/main.c ****   sConfig.Rank = 14;
 2323              		.loc 1 1240 19 is_stmt 0 view .LVU603
 2324 0150 0223     		movs	r3, #2
 2325 0152 0093     		str	r3, [sp]
1241:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2326              		.loc 1 1241 3 is_stmt 1 view .LVU604
1241:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2327              		.loc 1 1241 16 is_stmt 0 view .LVU605
 2328 0154 0E23     		movs	r3, #14
 2329 0156 0193     		str	r3, [sp, #4]
1242:Core/Src/main.c ****   {
 2330              		.loc 1 1242 3 is_stmt 1 view .LVU606
1242:Core/Src/main.c ****   {
 2331              		.loc 1 1242 7 is_stmt 0 view .LVU607
 2332 0158 6946     		mov	r1, sp
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 87


 2333 015a 1D48     		ldr	r0, .L151
 2334 015c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2335              	.LVL170:
1242:Core/Src/main.c ****   {
 2336              		.loc 1 1242 6 view .LVU608
 2337 0160 80BB     		cbnz	r0, .L148
1249:Core/Src/main.c ****   sConfig.Rank = 15;
 2338              		.loc 1 1249 3 is_stmt 1 view .LVU609
1249:Core/Src/main.c ****   sConfig.Rank = 15;
 2339              		.loc 1 1249 19 is_stmt 0 view .LVU610
 2340 0162 0423     		movs	r3, #4
 2341 0164 0093     		str	r3, [sp]
1250:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2342              		.loc 1 1250 3 is_stmt 1 view .LVU611
1250:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2343              		.loc 1 1250 16 is_stmt 0 view .LVU612
 2344 0166 0F23     		movs	r3, #15
 2345 0168 0193     		str	r3, [sp, #4]
1251:Core/Src/main.c ****   {
 2346              		.loc 1 1251 3 is_stmt 1 view .LVU613
1251:Core/Src/main.c ****   {
 2347              		.loc 1 1251 7 is_stmt 0 view .LVU614
 2348 016a 6946     		mov	r1, sp
 2349 016c 1848     		ldr	r0, .L151
 2350 016e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2351              	.LVL171:
1251:Core/Src/main.c ****   {
 2352              		.loc 1 1251 6 view .LVU615
 2353 0172 48BB     		cbnz	r0, .L149
1258:Core/Src/main.c ****   sConfig.Rank = 16;
 2354              		.loc 1 1258 3 is_stmt 1 view .LVU616
1258:Core/Src/main.c ****   sConfig.Rank = 16;
 2355              		.loc 1 1258 19 is_stmt 0 view .LVU617
 2356 0174 0323     		movs	r3, #3
 2357 0176 0093     		str	r3, [sp]
1259:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2358              		.loc 1 1259 3 is_stmt 1 view .LVU618
1259:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 2359              		.loc 1 1259 16 is_stmt 0 view .LVU619
 2360 0178 1023     		movs	r3, #16
 2361 017a 0193     		str	r3, [sp, #4]
1260:Core/Src/main.c ****   {
 2362              		.loc 1 1260 3 is_stmt 1 view .LVU620
1260:Core/Src/main.c ****   {
 2363              		.loc 1 1260 7 is_stmt 0 view .LVU621
 2364 017c 6946     		mov	r1, sp
 2365 017e 1448     		ldr	r0, .L151
 2366 0180 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 2367              	.LVL172:
1260:Core/Src/main.c ****   {
 2368              		.loc 1 1260 6 view .LVU622
 2369 0184 10BB     		cbnz	r0, .L150
1268:Core/Src/main.c **** 
 2370              		.loc 1 1268 1 view .LVU623
 2371 0186 05B0     		add	sp, sp, #20
 2372              	.LCFI25:
 2373              		.cfi_remember_state
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 88


 2374              		.cfi_def_cfa_offset 4
 2375              		@ sp needed
 2376 0188 5DF804FB 		ldr	pc, [sp], #4
 2377              	.L134:
 2378              	.LCFI26:
 2379              		.cfi_restore_state
1117:Core/Src/main.c ****   }
 2380              		.loc 1 1117 5 is_stmt 1 view .LVU624
 2381 018c FFF7FEFF 		bl	Error_Handler
 2382              	.LVL173:
 2383              	.L135:
1127:Core/Src/main.c ****   }
 2384              		.loc 1 1127 5 view .LVU625
 2385 0190 FFF7FEFF 		bl	Error_Handler
 2386              	.LVL174:
 2387              	.L136:
1136:Core/Src/main.c ****   }
 2388              		.loc 1 1136 5 view .LVU626
 2389 0194 FFF7FEFF 		bl	Error_Handler
 2390              	.LVL175:
 2391              	.L137:
1145:Core/Src/main.c ****   }
 2392              		.loc 1 1145 5 view .LVU627
 2393 0198 FFF7FEFF 		bl	Error_Handler
 2394              	.LVL176:
 2395              	.L138:
1154:Core/Src/main.c ****   }
 2396              		.loc 1 1154 5 view .LVU628
 2397 019c FFF7FEFF 		bl	Error_Handler
 2398              	.LVL177:
 2399              	.L139:
1163:Core/Src/main.c ****   }
 2400              		.loc 1 1163 5 view .LVU629
 2401 01a0 FFF7FEFF 		bl	Error_Handler
 2402              	.LVL178:
 2403              	.L140:
1172:Core/Src/main.c ****   }
 2404              		.loc 1 1172 5 view .LVU630
 2405 01a4 FFF7FEFF 		bl	Error_Handler
 2406              	.LVL179:
 2407              	.L141:
1181:Core/Src/main.c ****   }
 2408              		.loc 1 1181 5 view .LVU631
 2409 01a8 FFF7FEFF 		bl	Error_Handler
 2410              	.LVL180:
 2411              	.L142:
1190:Core/Src/main.c ****   }
 2412              		.loc 1 1190 5 view .LVU632
 2413 01ac FFF7FEFF 		bl	Error_Handler
 2414              	.LVL181:
 2415              	.L143:
1199:Core/Src/main.c ****   }
 2416              		.loc 1 1199 5 view .LVU633
 2417 01b0 FFF7FEFF 		bl	Error_Handler
 2418              	.LVL182:
 2419              	.L144:
1208:Core/Src/main.c ****   }
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 89


 2420              		.loc 1 1208 5 view .LVU634
 2421 01b4 FFF7FEFF 		bl	Error_Handler
 2422              	.LVL183:
 2423              	.L145:
1217:Core/Src/main.c ****   }
 2424              		.loc 1 1217 5 view .LVU635
 2425 01b8 FFF7FEFF 		bl	Error_Handler
 2426              	.LVL184:
 2427              	.L146:
1226:Core/Src/main.c ****   }
 2428              		.loc 1 1226 5 view .LVU636
 2429 01bc FFF7FEFF 		bl	Error_Handler
 2430              	.LVL185:
 2431              	.L147:
1235:Core/Src/main.c ****   }
 2432              		.loc 1 1235 5 view .LVU637
 2433 01c0 FFF7FEFF 		bl	Error_Handler
 2434              	.LVL186:
 2435              	.L148:
1244:Core/Src/main.c ****   }
 2436              		.loc 1 1244 5 view .LVU638
 2437 01c4 FFF7FEFF 		bl	Error_Handler
 2438              	.LVL187:
 2439              	.L149:
1253:Core/Src/main.c ****   }
 2440              		.loc 1 1253 5 view .LVU639
 2441 01c8 FFF7FEFF 		bl	Error_Handler
 2442              	.LVL188:
 2443              	.L150:
1262:Core/Src/main.c ****   }
 2444              		.loc 1 1262 5 view .LVU640
 2445 01cc FFF7FEFF 		bl	Error_Handler
 2446              	.LVL189:
 2447              	.L152:
 2448              		.align	2
 2449              	.L151:
 2450 01d0 00000000 		.word	.LANCHOR0
 2451 01d4 00200140 		.word	1073815552
 2452 01d8 0100000F 		.word	251658241
 2453              		.cfi_endproc
 2454              	.LFE241:
 2456              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 2457              		.align	1
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2462              	MX_USART6_UART_Init:
 2463              	.LFB250:
1600:Core/Src/main.c **** 
 2464              		.loc 1 1600 1 view -0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468 0000 08B5     		push	{r3, lr}
 2469              	.LCFI27:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 3, -8
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 90


 2472              		.cfi_offset 14, -4
1609:Core/Src/main.c ****   huart6.Init.BaudRate = 9600;
 2473              		.loc 1 1609 3 view .LVU642
1609:Core/Src/main.c ****   huart6.Init.BaudRate = 9600;
 2474              		.loc 1 1609 19 is_stmt 0 view .LVU643
 2475 0002 0A48     		ldr	r0, .L157
 2476 0004 0A4B     		ldr	r3, .L157+4
 2477 0006 0360     		str	r3, [r0]
1610:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 2478              		.loc 1 1610 3 is_stmt 1 view .LVU644
1610:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 2479              		.loc 1 1610 24 is_stmt 0 view .LVU645
 2480 0008 4FF41653 		mov	r3, #9600
 2481 000c 4360     		str	r3, [r0, #4]
1611:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 2482              		.loc 1 1611 3 is_stmt 1 view .LVU646
1611:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 2483              		.loc 1 1611 26 is_stmt 0 view .LVU647
 2484 000e 0023     		movs	r3, #0
 2485 0010 8360     		str	r3, [r0, #8]
1612:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 2486              		.loc 1 1612 3 is_stmt 1 view .LVU648
1612:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 2487              		.loc 1 1612 24 is_stmt 0 view .LVU649
 2488 0012 C360     		str	r3, [r0, #12]
1613:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 2489              		.loc 1 1613 3 is_stmt 1 view .LVU650
1613:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 2490              		.loc 1 1613 22 is_stmt 0 view .LVU651
 2491 0014 0361     		str	r3, [r0, #16]
1614:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2492              		.loc 1 1614 3 is_stmt 1 view .LVU652
1614:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2493              		.loc 1 1614 20 is_stmt 0 view .LVU653
 2494 0016 0C22     		movs	r2, #12
 2495 0018 4261     		str	r2, [r0, #20]
1615:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 2496              		.loc 1 1615 3 is_stmt 1 view .LVU654
1615:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 2497              		.loc 1 1615 25 is_stmt 0 view .LVU655
 2498 001a 8361     		str	r3, [r0, #24]
1616:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 2499              		.loc 1 1616 3 is_stmt 1 view .LVU656
1616:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 2500              		.loc 1 1616 28 is_stmt 0 view .LVU657
 2501 001c C361     		str	r3, [r0, #28]
1617:Core/Src/main.c ****   {
 2502              		.loc 1 1617 3 is_stmt 1 view .LVU658
1617:Core/Src/main.c ****   {
 2503              		.loc 1 1617 7 is_stmt 0 view .LVU659
 2504 001e FFF7FEFF 		bl	HAL_UART_Init
 2505              	.LVL190:
1617:Core/Src/main.c ****   {
 2506              		.loc 1 1617 6 view .LVU660
 2507 0022 00B9     		cbnz	r0, .L156
1625:Core/Src/main.c **** 
 2508              		.loc 1 1625 1 view .LVU661
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 91


 2509 0024 08BD     		pop	{r3, pc}
 2510              	.L156:
1619:Core/Src/main.c ****   }
 2511              		.loc 1 1619 5 is_stmt 1 view .LVU662
 2512 0026 FFF7FEFF 		bl	Error_Handler
 2513              	.LVL191:
 2514              	.L158:
 2515 002a 00BF     		.align	2
 2516              	.L157:
 2517 002c 00000000 		.word	.LANCHOR16
 2518 0030 00140140 		.word	1073812480
 2519              		.cfi_endproc
 2520              	.LFE250:
 2522              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2523              		.align	1
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2528              	MX_TIM6_Init:
 2529              	.LFB247:
1500:Core/Src/main.c **** 
 2530              		.loc 1 1500 1 view -0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 8
 2533              		@ frame_needed = 0, uses_anonymous_args = 0
 2534 0000 00B5     		push	{lr}
 2535              	.LCFI28:
 2536              		.cfi_def_cfa_offset 4
 2537              		.cfi_offset 14, -4
 2538 0002 83B0     		sub	sp, sp, #12
 2539              	.LCFI29:
 2540              		.cfi_def_cfa_offset 16
1506:Core/Src/main.c **** 
 2541              		.loc 1 1506 3 view .LVU664
1506:Core/Src/main.c **** 
 2542              		.loc 1 1506 27 is_stmt 0 view .LVU665
 2543 0004 0023     		movs	r3, #0
 2544 0006 0093     		str	r3, [sp]
 2545 0008 0193     		str	r3, [sp, #4]
1511:Core/Src/main.c ****   htim6.Init.Prescaler = 4;
 2546              		.loc 1 1511 3 is_stmt 1 view .LVU666
1511:Core/Src/main.c ****   htim6.Init.Prescaler = 4;
 2547              		.loc 1 1511 18 is_stmt 0 view .LVU667
 2548 000a 0E48     		ldr	r0, .L165
 2549 000c 0E4A     		ldr	r2, .L165+4
 2550 000e 0260     		str	r2, [r0]
1512:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2551              		.loc 1 1512 3 is_stmt 1 view .LVU668
1512:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2552              		.loc 1 1512 24 is_stmt 0 view .LVU669
 2553 0010 0422     		movs	r2, #4
 2554 0012 4260     		str	r2, [r0, #4]
1513:Core/Src/main.c ****   htim6.Init.Period = 16799;
 2555              		.loc 1 1513 3 is_stmt 1 view .LVU670
1513:Core/Src/main.c ****   htim6.Init.Period = 16799;
 2556              		.loc 1 1513 26 is_stmt 0 view .LVU671
 2557 0014 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 92


1514:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2558              		.loc 1 1514 3 is_stmt 1 view .LVU672
1514:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2559              		.loc 1 1514 21 is_stmt 0 view .LVU673
 2560 0016 44F29F12 		movw	r2, #16799
 2561 001a C260     		str	r2, [r0, #12]
1515:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2562              		.loc 1 1515 3 is_stmt 1 view .LVU674
1515:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2563              		.loc 1 1515 32 is_stmt 0 view .LVU675
 2564 001c 8361     		str	r3, [r0, #24]
1516:Core/Src/main.c ****   {
 2565              		.loc 1 1516 3 is_stmt 1 view .LVU676
1516:Core/Src/main.c ****   {
 2566              		.loc 1 1516 7 is_stmt 0 view .LVU677
 2567 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2568              	.LVL192:
1516:Core/Src/main.c ****   {
 2569              		.loc 1 1516 6 view .LVU678
 2570 0022 50B9     		cbnz	r0, .L163
1520:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2571              		.loc 1 1520 3 is_stmt 1 view .LVU679
1520:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2572              		.loc 1 1520 37 is_stmt 0 view .LVU680
 2573 0024 0023     		movs	r3, #0
 2574 0026 0093     		str	r3, [sp]
1521:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2575              		.loc 1 1521 3 is_stmt 1 view .LVU681
1521:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2576              		.loc 1 1521 33 is_stmt 0 view .LVU682
 2577 0028 0193     		str	r3, [sp, #4]
1522:Core/Src/main.c ****   {
 2578              		.loc 1 1522 3 is_stmt 1 view .LVU683
1522:Core/Src/main.c ****   {
 2579              		.loc 1 1522 7 is_stmt 0 view .LVU684
 2580 002a 6946     		mov	r1, sp
 2581 002c 0548     		ldr	r0, .L165
 2582 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2583              	.LVL193:
1522:Core/Src/main.c ****   {
 2584              		.loc 1 1522 6 view .LVU685
 2585 0032 20B9     		cbnz	r0, .L164
1530:Core/Src/main.c **** 
 2586              		.loc 1 1530 1 view .LVU686
 2587 0034 03B0     		add	sp, sp, #12
 2588              	.LCFI30:
 2589              		.cfi_remember_state
 2590              		.cfi_def_cfa_offset 4
 2591              		@ sp needed
 2592 0036 5DF804FB 		ldr	pc, [sp], #4
 2593              	.L163:
 2594              	.LCFI31:
 2595              		.cfi_restore_state
1518:Core/Src/main.c ****   }
 2596              		.loc 1 1518 5 is_stmt 1 view .LVU687
 2597 003a FFF7FEFF 		bl	Error_Handler
 2598              	.LVL194:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 93


 2599              	.L164:
1524:Core/Src/main.c ****   }
 2600              		.loc 1 1524 5 view .LVU688
 2601 003e FFF7FEFF 		bl	Error_Handler
 2602              	.LVL195:
 2603              	.L166:
 2604 0042 00BF     		.align	2
 2605              	.L165:
 2606 0044 00000000 		.word	.LANCHOR13
 2607 0048 00100040 		.word	1073745920
 2608              		.cfi_endproc
 2609              	.LFE247:
 2611              		.section	.text.MX_TIM4_Init,"ax",%progbits
 2612              		.align	1
 2613              		.syntax unified
 2614              		.thumb
 2615              		.thumb_func
 2617              	MX_TIM4_Init:
 2618              	.LFB246:
1447:Core/Src/main.c **** 
 2619              		.loc 1 1447 1 view -0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 40
 2622              		@ frame_needed = 0, uses_anonymous_args = 0
 2623 0000 00B5     		push	{lr}
 2624              	.LCFI32:
 2625              		.cfi_def_cfa_offset 4
 2626              		.cfi_offset 14, -4
 2627 0002 8BB0     		sub	sp, sp, #44
 2628              	.LCFI33:
 2629              		.cfi_def_cfa_offset 48
1453:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 2630              		.loc 1 1453 3 view .LVU690
1453:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 2631              		.loc 1 1453 27 is_stmt 0 view .LVU691
 2632 0004 0023     		movs	r3, #0
 2633 0006 0893     		str	r3, [sp, #32]
 2634 0008 0993     		str	r3, [sp, #36]
1454:Core/Src/main.c **** 
 2635              		.loc 1 1454 3 is_stmt 1 view .LVU692
1454:Core/Src/main.c **** 
 2636              		.loc 1 1454 22 is_stmt 0 view .LVU693
 2637 000a 0193     		str	r3, [sp, #4]
 2638 000c 0293     		str	r3, [sp, #8]
 2639 000e 0393     		str	r3, [sp, #12]
 2640 0010 0493     		str	r3, [sp, #16]
 2641 0012 0593     		str	r3, [sp, #20]
 2642 0014 0693     		str	r3, [sp, #24]
 2643 0016 0793     		str	r3, [sp, #28]
1459:Core/Src/main.c ****   htim4.Init.Prescaler = 1;
 2644              		.loc 1 1459 3 is_stmt 1 view .LVU694
1459:Core/Src/main.c ****   htim4.Init.Prescaler = 1;
 2645              		.loc 1 1459 18 is_stmt 0 view .LVU695
 2646 0018 1A48     		ldr	r0, .L177
 2647 001a 1B4A     		ldr	r2, .L177+4
 2648 001c 0260     		str	r2, [r0]
1460:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 94


 2649              		.loc 1 1460 3 is_stmt 1 view .LVU696
1460:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2650              		.loc 1 1460 24 is_stmt 0 view .LVU697
 2651 001e 0122     		movs	r2, #1
 2652 0020 4260     		str	r2, [r0, #4]
1461:Core/Src/main.c ****   htim4.Init.Period = 999;
 2653              		.loc 1 1461 3 is_stmt 1 view .LVU698
1461:Core/Src/main.c ****   htim4.Init.Period = 999;
 2654              		.loc 1 1461 26 is_stmt 0 view .LVU699
 2655 0022 8360     		str	r3, [r0, #8]
1462:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2656              		.loc 1 1462 3 is_stmt 1 view .LVU700
1462:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2657              		.loc 1 1462 21 is_stmt 0 view .LVU701
 2658 0024 40F2E732 		movw	r2, #999
 2659 0028 C260     		str	r2, [r0, #12]
1463:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2660              		.loc 1 1463 3 is_stmt 1 view .LVU702
1463:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2661              		.loc 1 1463 28 is_stmt 0 view .LVU703
 2662 002a 0361     		str	r3, [r0, #16]
1464:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 2663              		.loc 1 1464 3 is_stmt 1 view .LVU704
1464:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 2664              		.loc 1 1464 32 is_stmt 0 view .LVU705
 2665 002c 8361     		str	r3, [r0, #24]
1465:Core/Src/main.c ****   {
 2666              		.loc 1 1465 3 is_stmt 1 view .LVU706
1465:Core/Src/main.c ****   {
 2667              		.loc 1 1465 7 is_stmt 0 view .LVU707
 2668 002e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2669              	.LVL196:
1465:Core/Src/main.c ****   {
 2670              		.loc 1 1465 6 view .LVU708
 2671 0032 F8B9     		cbnz	r0, .L173
1469:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2672              		.loc 1 1469 3 is_stmt 1 view .LVU709
1469:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2673              		.loc 1 1469 37 is_stmt 0 view .LVU710
 2674 0034 0023     		movs	r3, #0
 2675 0036 0893     		str	r3, [sp, #32]
1470:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2676              		.loc 1 1470 3 is_stmt 1 view .LVU711
1470:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2677              		.loc 1 1470 33 is_stmt 0 view .LVU712
 2678 0038 0993     		str	r3, [sp, #36]
1471:Core/Src/main.c ****   {
 2679              		.loc 1 1471 3 is_stmt 1 view .LVU713
1471:Core/Src/main.c ****   {
 2680              		.loc 1 1471 7 is_stmt 0 view .LVU714
 2681 003a 08A9     		add	r1, sp, #32
 2682 003c 1148     		ldr	r0, .L177
 2683 003e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2684              	.LVL197:
1471:Core/Src/main.c ****   {
 2685              		.loc 1 1471 6 view .LVU715
 2686 0042 C8B9     		cbnz	r0, .L174
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 95


1475:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 2687              		.loc 1 1475 3 is_stmt 1 view .LVU716
1475:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 2688              		.loc 1 1475 20 is_stmt 0 view .LVU717
 2689 0044 6023     		movs	r3, #96
 2690 0046 0193     		str	r3, [sp, #4]
1476:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2691              		.loc 1 1476 3 is_stmt 1 view .LVU718
1476:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2692              		.loc 1 1476 19 is_stmt 0 view .LVU719
 2693 0048 0022     		movs	r2, #0
 2694 004a 0292     		str	r2, [sp, #8]
1477:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2695              		.loc 1 1477 3 is_stmt 1 view .LVU720
1477:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2696              		.loc 1 1477 24 is_stmt 0 view .LVU721
 2697 004c 0392     		str	r2, [sp, #12]
1478:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2698              		.loc 1 1478 3 is_stmt 1 view .LVU722
1478:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2699              		.loc 1 1478 24 is_stmt 0 view .LVU723
 2700 004e 0592     		str	r2, [sp, #20]
1479:Core/Src/main.c ****   {
 2701              		.loc 1 1479 3 is_stmt 1 view .LVU724
1479:Core/Src/main.c ****   {
 2702              		.loc 1 1479 7 is_stmt 0 view .LVU725
 2703 0050 01A9     		add	r1, sp, #4
 2704 0052 0C48     		ldr	r0, .L177
 2705 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2706              	.LVL198:
1479:Core/Src/main.c ****   {
 2707              		.loc 1 1479 6 view .LVU726
 2708 0058 80B9     		cbnz	r0, .L175
1483:Core/Src/main.c ****   {
 2709              		.loc 1 1483 3 is_stmt 1 view .LVU727
1483:Core/Src/main.c ****   {
 2710              		.loc 1 1483 7 is_stmt 0 view .LVU728
 2711 005a 0422     		movs	r2, #4
 2712 005c 0DEB0201 		add	r1, sp, r2
 2713 0060 0848     		ldr	r0, .L177
 2714 0062 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2715              	.LVL199:
1483:Core/Src/main.c ****   {
 2716              		.loc 1 1483 6 view .LVU729
 2717 0066 58B9     		cbnz	r0, .L176
1490:Core/Src/main.c **** 
 2718              		.loc 1 1490 3 is_stmt 1 view .LVU730
 2719 0068 0648     		ldr	r0, .L177
 2720 006a FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2721              	.LVL200:
1492:Core/Src/main.c **** 
 2722              		.loc 1 1492 1 is_stmt 0 view .LVU731
 2723 006e 0BB0     		add	sp, sp, #44
 2724              	.LCFI34:
 2725              		.cfi_remember_state
 2726              		.cfi_def_cfa_offset 4
 2727              		@ sp needed
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 96


 2728 0070 5DF804FB 		ldr	pc, [sp], #4
 2729              	.L173:
 2730              	.LCFI35:
 2731              		.cfi_restore_state
1467:Core/Src/main.c ****   }
 2732              		.loc 1 1467 5 is_stmt 1 view .LVU732
 2733 0074 FFF7FEFF 		bl	Error_Handler
 2734              	.LVL201:
 2735              	.L174:
1473:Core/Src/main.c ****   }
 2736              		.loc 1 1473 5 view .LVU733
 2737 0078 FFF7FEFF 		bl	Error_Handler
 2738              	.LVL202:
 2739              	.L175:
1481:Core/Src/main.c ****   }
 2740              		.loc 1 1481 5 view .LVU734
 2741 007c FFF7FEFF 		bl	Error_Handler
 2742              	.LVL203:
 2743              	.L176:
1485:Core/Src/main.c ****   }
 2744              		.loc 1 1485 5 view .LVU735
 2745 0080 FFF7FEFF 		bl	Error_Handler
 2746              	.LVL204:
 2747              	.L178:
 2748              		.align	2
 2749              	.L177:
 2750 0084 00000000 		.word	.LANCHOR14
 2751 0088 00080040 		.word	1073743872
 2752              		.cfi_endproc
 2753              	.LFE246:
 2755              		.section	.text.MX_TIM1_Init,"ax",%progbits
 2756              		.align	1
 2757              		.syntax unified
 2758              		.thumb
 2759              		.thumb_func
 2761              	MX_TIM1_Init:
 2762              	.LFB244:
1348:Core/Src/main.c **** 
 2763              		.loc 1 1348 1 view -0
 2764              		.cfi_startproc
 2765              		@ args = 0, pretend = 0, frame = 48
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
 2767 0000 00B5     		push	{lr}
 2768              	.LCFI36:
 2769              		.cfi_def_cfa_offset 4
 2770              		.cfi_offset 14, -4
 2771 0002 8DB0     		sub	sp, sp, #52
 2772              	.LCFI37:
 2773              		.cfi_def_cfa_offset 56
1354:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2774              		.loc 1 1354 3 view .LVU737
1354:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2775              		.loc 1 1354 27 is_stmt 0 view .LVU738
 2776 0004 2422     		movs	r2, #36
 2777 0006 0021     		movs	r1, #0
 2778 0008 03A8     		add	r0, sp, #12
 2779 000a FFF7FEFF 		bl	memset
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 97


 2780              	.LVL205:
1355:Core/Src/main.c **** 
 2781              		.loc 1 1355 3 is_stmt 1 view .LVU739
1355:Core/Src/main.c **** 
 2782              		.loc 1 1355 27 is_stmt 0 view .LVU740
 2783 000e 0023     		movs	r3, #0
 2784 0010 0193     		str	r3, [sp, #4]
 2785 0012 0293     		str	r3, [sp, #8]
1360:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2786              		.loc 1 1360 3 is_stmt 1 view .LVU741
1360:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2787              		.loc 1 1360 18 is_stmt 0 view .LVU742
 2788 0014 1148     		ldr	r0, .L185
 2789 0016 124A     		ldr	r2, .L185+4
 2790 0018 0260     		str	r2, [r0]
1361:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2791              		.loc 1 1361 3 is_stmt 1 view .LVU743
1361:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2792              		.loc 1 1361 24 is_stmt 0 view .LVU744
 2793 001a 4360     		str	r3, [r0, #4]
1362:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2794              		.loc 1 1362 3 is_stmt 1 view .LVU745
1362:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2795              		.loc 1 1362 26 is_stmt 0 view .LVU746
 2796 001c 8360     		str	r3, [r0, #8]
1363:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2797              		.loc 1 1363 3 is_stmt 1 view .LVU747
1363:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2798              		.loc 1 1363 21 is_stmt 0 view .LVU748
 2799 001e 4FF6FF72 		movw	r2, #65535
 2800 0022 C260     		str	r2, [r0, #12]
1364:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2801              		.loc 1 1364 3 is_stmt 1 view .LVU749
1364:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2802              		.loc 1 1364 28 is_stmt 0 view .LVU750
 2803 0024 0361     		str	r3, [r0, #16]
1365:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2804              		.loc 1 1365 3 is_stmt 1 view .LVU751
1365:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2805              		.loc 1 1365 32 is_stmt 0 view .LVU752
 2806 0026 4361     		str	r3, [r0, #20]
1366:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 2807              		.loc 1 1366 3 is_stmt 1 view .LVU753
1366:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 2808              		.loc 1 1366 32 is_stmt 0 view .LVU754
 2809 0028 8361     		str	r3, [r0, #24]
1367:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 2810              		.loc 1 1367 3 is_stmt 1 view .LVU755
1367:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 2811              		.loc 1 1367 23 is_stmt 0 view .LVU756
 2812 002a 0323     		movs	r3, #3
 2813 002c 0393     		str	r3, [sp, #12]
1368:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 2814              		.loc 1 1368 3 is_stmt 1 view .LVU757
1369:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 2815              		.loc 1 1369 3 view .LVU758
1369:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 98


 2816              		.loc 1 1369 24 is_stmt 0 view .LVU759
 2817 002e 0123     		movs	r3, #1
 2818 0030 0593     		str	r3, [sp, #20]
1370:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 2819              		.loc 1 1370 3 is_stmt 1 view .LVU760
1371:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 2820              		.loc 1 1371 3 view .LVU761
1372:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 2821              		.loc 1 1372 3 view .LVU762
1373:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 2822              		.loc 1 1373 3 view .LVU763
1373:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 2823              		.loc 1 1373 24 is_stmt 0 view .LVU764
 2824 0032 0993     		str	r3, [sp, #36]
1374:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 2825              		.loc 1 1374 3 is_stmt 1 view .LVU765
1375:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 2826              		.loc 1 1375 3 view .LVU766
1376:Core/Src/main.c ****   {
 2827              		.loc 1 1376 3 view .LVU767
1376:Core/Src/main.c ****   {
 2828              		.loc 1 1376 7 is_stmt 0 view .LVU768
 2829 0034 03A9     		add	r1, sp, #12
 2830 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 2831              	.LVL206:
1376:Core/Src/main.c ****   {
 2832              		.loc 1 1376 6 view .LVU769
 2833 003a 50B9     		cbnz	r0, .L183
1380:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2834              		.loc 1 1380 3 is_stmt 1 view .LVU770
1380:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2835              		.loc 1 1380 37 is_stmt 0 view .LVU771
 2836 003c 0023     		movs	r3, #0
 2837 003e 0193     		str	r3, [sp, #4]
1381:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2838              		.loc 1 1381 3 is_stmt 1 view .LVU772
1381:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2839              		.loc 1 1381 33 is_stmt 0 view .LVU773
 2840 0040 0293     		str	r3, [sp, #8]
1382:Core/Src/main.c ****   {
 2841              		.loc 1 1382 3 is_stmt 1 view .LVU774
1382:Core/Src/main.c ****   {
 2842              		.loc 1 1382 7 is_stmt 0 view .LVU775
 2843 0042 01A9     		add	r1, sp, #4
 2844 0044 0548     		ldr	r0, .L185
 2845 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2846              	.LVL207:
1382:Core/Src/main.c ****   {
 2847              		.loc 1 1382 6 view .LVU776
 2848 004a 20B9     		cbnz	r0, .L184
1390:Core/Src/main.c **** 
 2849              		.loc 1 1390 1 view .LVU777
 2850 004c 0DB0     		add	sp, sp, #52
 2851              	.LCFI38:
 2852              		.cfi_remember_state
 2853              		.cfi_def_cfa_offset 4
 2854              		@ sp needed
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 99


 2855 004e 5DF804FB 		ldr	pc, [sp], #4
 2856              	.L183:
 2857              	.LCFI39:
 2858              		.cfi_restore_state
1378:Core/Src/main.c ****   }
 2859              		.loc 1 1378 5 is_stmt 1 view .LVU778
 2860 0052 FFF7FEFF 		bl	Error_Handler
 2861              	.LVL208:
 2862              	.L184:
1384:Core/Src/main.c ****   }
 2863              		.loc 1 1384 5 view .LVU779
 2864 0056 FFF7FEFF 		bl	Error_Handler
 2865              	.LVL209:
 2866              	.L186:
 2867 005a 00BF     		.align	2
 2868              	.L185:
 2869 005c 00000000 		.word	.LANCHOR10
 2870 0060 00000140 		.word	1073807360
 2871              		.cfi_endproc
 2872              	.LFE244:
 2874              		.section	.text.MX_TIM3_Init,"ax",%progbits
 2875              		.align	1
 2876              		.syntax unified
 2877              		.thumb
 2878              		.thumb_func
 2880              	MX_TIM3_Init:
 2881              	.LFB245:
1398:Core/Src/main.c **** 
 2882              		.loc 1 1398 1 view -0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 48
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
 2886 0000 00B5     		push	{lr}
 2887              	.LCFI40:
 2888              		.cfi_def_cfa_offset 4
 2889              		.cfi_offset 14, -4
 2890 0002 8DB0     		sub	sp, sp, #52
 2891              	.LCFI41:
 2892              		.cfi_def_cfa_offset 56
1404:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2893              		.loc 1 1404 3 view .LVU781
1404:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 2894              		.loc 1 1404 27 is_stmt 0 view .LVU782
 2895 0004 2422     		movs	r2, #36
 2896 0006 0021     		movs	r1, #0
 2897 0008 03A8     		add	r0, sp, #12
 2898 000a FFF7FEFF 		bl	memset
 2899              	.LVL210:
1405:Core/Src/main.c **** 
 2900              		.loc 1 1405 3 is_stmt 1 view .LVU783
1405:Core/Src/main.c **** 
 2901              		.loc 1 1405 27 is_stmt 0 view .LVU784
 2902 000e 0023     		movs	r3, #0
 2903 0010 0193     		str	r3, [sp, #4]
 2904 0012 0293     		str	r3, [sp, #8]
1410:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 2905              		.loc 1 1410 3 is_stmt 1 view .LVU785
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 100


1410:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 2906              		.loc 1 1410 18 is_stmt 0 view .LVU786
 2907 0014 1048     		ldr	r0, .L193
 2908 0016 114A     		ldr	r2, .L193+4
 2909 0018 0260     		str	r2, [r0]
1411:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2910              		.loc 1 1411 3 is_stmt 1 view .LVU787
1411:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2911              		.loc 1 1411 24 is_stmt 0 view .LVU788
 2912 001a 4360     		str	r3, [r0, #4]
1412:Core/Src/main.c ****   htim3.Init.Period = 65535;
 2913              		.loc 1 1412 3 is_stmt 1 view .LVU789
1412:Core/Src/main.c ****   htim3.Init.Period = 65535;
 2914              		.loc 1 1412 26 is_stmt 0 view .LVU790
 2915 001c 8360     		str	r3, [r0, #8]
1413:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2916              		.loc 1 1413 3 is_stmt 1 view .LVU791
1413:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2917              		.loc 1 1413 21 is_stmt 0 view .LVU792
 2918 001e 4FF6FF72 		movw	r2, #65535
 2919 0022 C260     		str	r2, [r0, #12]
1414:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2920              		.loc 1 1414 3 is_stmt 1 view .LVU793
1414:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2921              		.loc 1 1414 28 is_stmt 0 view .LVU794
 2922 0024 0361     		str	r3, [r0, #16]
1415:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 2923              		.loc 1 1415 3 is_stmt 1 view .LVU795
1415:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 2924              		.loc 1 1415 32 is_stmt 0 view .LVU796
 2925 0026 8361     		str	r3, [r0, #24]
1416:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 2926              		.loc 1 1416 3 is_stmt 1 view .LVU797
1416:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 2927              		.loc 1 1416 23 is_stmt 0 view .LVU798
 2928 0028 0323     		movs	r3, #3
 2929 002a 0393     		str	r3, [sp, #12]
1417:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 2930              		.loc 1 1417 3 is_stmt 1 view .LVU799
1418:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 2931              		.loc 1 1418 3 view .LVU800
1418:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 2932              		.loc 1 1418 24 is_stmt 0 view .LVU801
 2933 002c 0123     		movs	r3, #1
 2934 002e 0593     		str	r3, [sp, #20]
1419:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 2935              		.loc 1 1419 3 is_stmt 1 view .LVU802
1420:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 2936              		.loc 1 1420 3 view .LVU803
1421:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 2937              		.loc 1 1421 3 view .LVU804
1422:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 2938              		.loc 1 1422 3 view .LVU805
1422:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 2939              		.loc 1 1422 24 is_stmt 0 view .LVU806
 2940 0030 0993     		str	r3, [sp, #36]
1423:Core/Src/main.c ****   sConfig.IC2Filter = 0;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 101


 2941              		.loc 1 1423 3 is_stmt 1 view .LVU807
1424:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 2942              		.loc 1 1424 3 view .LVU808
1425:Core/Src/main.c ****   {
 2943              		.loc 1 1425 3 view .LVU809
1425:Core/Src/main.c ****   {
 2944              		.loc 1 1425 7 is_stmt 0 view .LVU810
 2945 0032 03A9     		add	r1, sp, #12
 2946 0034 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 2947              	.LVL211:
1425:Core/Src/main.c ****   {
 2948              		.loc 1 1425 6 view .LVU811
 2949 0038 50B9     		cbnz	r0, .L191
1429:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2950              		.loc 1 1429 3 is_stmt 1 view .LVU812
1429:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2951              		.loc 1 1429 37 is_stmt 0 view .LVU813
 2952 003a 0023     		movs	r3, #0
 2953 003c 0193     		str	r3, [sp, #4]
1430:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2954              		.loc 1 1430 3 is_stmt 1 view .LVU814
1430:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2955              		.loc 1 1430 33 is_stmt 0 view .LVU815
 2956 003e 0293     		str	r3, [sp, #8]
1431:Core/Src/main.c ****   {
 2957              		.loc 1 1431 3 is_stmt 1 view .LVU816
1431:Core/Src/main.c ****   {
 2958              		.loc 1 1431 7 is_stmt 0 view .LVU817
 2959 0040 01A9     		add	r1, sp, #4
 2960 0042 0548     		ldr	r0, .L193
 2961 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2962              	.LVL212:
1431:Core/Src/main.c ****   {
 2963              		.loc 1 1431 6 view .LVU818
 2964 0048 20B9     		cbnz	r0, .L192
1439:Core/Src/main.c **** 
 2965              		.loc 1 1439 1 view .LVU819
 2966 004a 0DB0     		add	sp, sp, #52
 2967              	.LCFI42:
 2968              		.cfi_remember_state
 2969              		.cfi_def_cfa_offset 4
 2970              		@ sp needed
 2971 004c 5DF804FB 		ldr	pc, [sp], #4
 2972              	.L191:
 2973              	.LCFI43:
 2974              		.cfi_restore_state
1427:Core/Src/main.c ****   }
 2975              		.loc 1 1427 5 is_stmt 1 view .LVU820
 2976 0050 FFF7FEFF 		bl	Error_Handler
 2977              	.LVL213:
 2978              	.L192:
1433:Core/Src/main.c ****   }
 2979              		.loc 1 1433 5 view .LVU821
 2980 0054 FFF7FEFF 		bl	Error_Handler
 2981              	.LVL214:
 2982              	.L194:
 2983              		.align	2
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 102


 2984              	.L193:
 2985 0058 00000000 		.word	.LANCHOR11
 2986 005c 00040040 		.word	1073742848
 2987              		.cfi_endproc
 2988              	.LFE245:
 2990              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2991              		.align	1
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2996              	MX_TIM10_Init:
 2997              	.LFB248:
1538:Core/Src/main.c **** 
 2998              		.loc 1 1538 1 view -0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 0
 3001              		@ frame_needed = 0, uses_anonymous_args = 0
 3002 0000 08B5     		push	{r3, lr}
 3003              	.LCFI44:
 3004              		.cfi_def_cfa_offset 8
 3005              		.cfi_offset 3, -8
 3006              		.cfi_offset 14, -4
1547:Core/Src/main.c ****   htim10.Init.Prescaler = 4;
 3007              		.loc 1 1547 3 view .LVU823
1547:Core/Src/main.c ****   htim10.Init.Prescaler = 4;
 3008              		.loc 1 1547 19 is_stmt 0 view .LVU824
 3009 0002 0948     		ldr	r0, .L199
 3010 0004 094B     		ldr	r3, .L199+4
 3011 0006 0360     		str	r3, [r0]
1548:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 3012              		.loc 1 1548 3 is_stmt 1 view .LVU825
1548:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 3013              		.loc 1 1548 25 is_stmt 0 view .LVU826
 3014 0008 0423     		movs	r3, #4
 3015 000a 4360     		str	r3, [r0, #4]
1549:Core/Src/main.c ****   htim10.Init.Period = 16799;
 3016              		.loc 1 1549 3 is_stmt 1 view .LVU827
1549:Core/Src/main.c ****   htim10.Init.Period = 16799;
 3017              		.loc 1 1549 27 is_stmt 0 view .LVU828
 3018 000c 0023     		movs	r3, #0
 3019 000e 8360     		str	r3, [r0, #8]
1550:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3020              		.loc 1 1550 3 is_stmt 1 view .LVU829
1550:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3021              		.loc 1 1550 22 is_stmt 0 view .LVU830
 3022 0010 44F29F12 		movw	r2, #16799
 3023 0014 C260     		str	r2, [r0, #12]
1551:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3024              		.loc 1 1551 3 is_stmt 1 view .LVU831
1551:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3025              		.loc 1 1551 29 is_stmt 0 view .LVU832
 3026 0016 0361     		str	r3, [r0, #16]
1552:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 3027              		.loc 1 1552 3 is_stmt 1 view .LVU833
1552:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 3028              		.loc 1 1552 33 is_stmt 0 view .LVU834
 3029 0018 8361     		str	r3, [r0, #24]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 103


1553:Core/Src/main.c ****   {
 3030              		.loc 1 1553 3 is_stmt 1 view .LVU835
1553:Core/Src/main.c ****   {
 3031              		.loc 1 1553 7 is_stmt 0 view .LVU836
 3032 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 3033              	.LVL215:
1553:Core/Src/main.c ****   {
 3034              		.loc 1 1553 6 view .LVU837
 3035 001e 00B9     		cbnz	r0, .L198
1561:Core/Src/main.c **** 
 3036              		.loc 1 1561 1 view .LVU838
 3037 0020 08BD     		pop	{r3, pc}
 3038              	.L198:
1555:Core/Src/main.c ****   }
 3039              		.loc 1 1555 5 is_stmt 1 view .LVU839
 3040 0022 FFF7FEFF 		bl	Error_Handler
 3041              	.LVL216:
 3042              	.L200:
 3043 0026 00BF     		.align	2
 3044              	.L199:
 3045 0028 00000000 		.word	.LANCHOR15
 3046 002c 00440140 		.word	1073824768
 3047              		.cfi_endproc
 3048              	.LFE248:
 3050              		.section	.text.MX_TIM11_Init,"ax",%progbits
 3051              		.align	1
 3052              		.syntax unified
 3053              		.thumb
 3054              		.thumb_func
 3056              	MX_TIM11_Init:
 3057              	.LFB249:
1569:Core/Src/main.c **** 
 3058              		.loc 1 1569 1 view -0
 3059              		.cfi_startproc
 3060              		@ args = 0, pretend = 0, frame = 0
 3061              		@ frame_needed = 0, uses_anonymous_args = 0
 3062 0000 08B5     		push	{r3, lr}
 3063              	.LCFI45:
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 3, -8
 3066              		.cfi_offset 14, -4
1578:Core/Src/main.c ****   htim11.Init.Prescaler = 4;
 3067              		.loc 1 1578 3 view .LVU841
1578:Core/Src/main.c ****   htim11.Init.Prescaler = 4;
 3068              		.loc 1 1578 19 is_stmt 0 view .LVU842
 3069 0002 0948     		ldr	r0, .L205
 3070 0004 094B     		ldr	r3, .L205+4
 3071 0006 0360     		str	r3, [r0]
1579:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 3072              		.loc 1 1579 3 is_stmt 1 view .LVU843
1579:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 3073              		.loc 1 1579 25 is_stmt 0 view .LVU844
 3074 0008 0423     		movs	r3, #4
 3075 000a 4360     		str	r3, [r0, #4]
1580:Core/Src/main.c ****   htim11.Init.Period = 16799;
 3076              		.loc 1 1580 3 is_stmt 1 view .LVU845
1580:Core/Src/main.c ****   htim11.Init.Period = 16799;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 104


 3077              		.loc 1 1580 27 is_stmt 0 view .LVU846
 3078 000c 0023     		movs	r3, #0
 3079 000e 8360     		str	r3, [r0, #8]
1581:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3080              		.loc 1 1581 3 is_stmt 1 view .LVU847
1581:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3081              		.loc 1 1581 22 is_stmt 0 view .LVU848
 3082 0010 44F29F12 		movw	r2, #16799
 3083 0014 C260     		str	r2, [r0, #12]
1582:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3084              		.loc 1 1582 3 is_stmt 1 view .LVU849
1582:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3085              		.loc 1 1582 29 is_stmt 0 view .LVU850
 3086 0016 0361     		str	r3, [r0, #16]
1583:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 3087              		.loc 1 1583 3 is_stmt 1 view .LVU851
1583:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 3088              		.loc 1 1583 33 is_stmt 0 view .LVU852
 3089 0018 8361     		str	r3, [r0, #24]
1584:Core/Src/main.c ****   {
 3090              		.loc 1 1584 3 is_stmt 1 view .LVU853
1584:Core/Src/main.c ****   {
 3091              		.loc 1 1584 7 is_stmt 0 view .LVU854
 3092 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 3093              	.LVL217:
1584:Core/Src/main.c ****   {
 3094              		.loc 1 1584 6 view .LVU855
 3095 001e 00B9     		cbnz	r0, .L204
1592:Core/Src/main.c **** 
 3096              		.loc 1 1592 1 view .LVU856
 3097 0020 08BD     		pop	{r3, pc}
 3098              	.L204:
1586:Core/Src/main.c ****   }
 3099              		.loc 1 1586 5 is_stmt 1 view .LVU857
 3100 0022 FFF7FEFF 		bl	Error_Handler
 3101              	.LVL218:
 3102              	.L206:
 3103 0026 00BF     		.align	2
 3104              	.L205:
 3105 0028 00000000 		.word	.LANCHOR37
 3106 002c 00480140 		.word	1073825792
 3107              		.cfi_endproc
 3108              	.LFE249:
 3110              		.section	.text.MX_SPI2_Init,"ax",%progbits
 3111              		.align	1
 3112              		.syntax unified
 3113              		.thumb
 3114              		.thumb_func
 3116              	MX_SPI2_Init:
 3117              	.LFB243:
1310:Core/Src/main.c **** 
 3118              		.loc 1 1310 1 view -0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 0
 3121              		@ frame_needed = 0, uses_anonymous_args = 0
 3122 0000 08B5     		push	{r3, lr}
 3123              	.LCFI46:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 105


 3124              		.cfi_def_cfa_offset 8
 3125              		.cfi_offset 3, -8
 3126              		.cfi_offset 14, -4
1320:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 3127              		.loc 1 1320 3 view .LVU859
1320:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 3128              		.loc 1 1320 18 is_stmt 0 view .LVU860
 3129 0002 0E48     		ldr	r0, .L211
 3130 0004 0E4B     		ldr	r3, .L211+4
 3131 0006 0360     		str	r3, [r0]
1321:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 3132              		.loc 1 1321 3 is_stmt 1 view .LVU861
1321:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 3133              		.loc 1 1321 19 is_stmt 0 view .LVU862
 3134 0008 4FF48273 		mov	r3, #260
 3135 000c 4360     		str	r3, [r0, #4]
1322:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 3136              		.loc 1 1322 3 is_stmt 1 view .LVU863
1322:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 3137              		.loc 1 1322 24 is_stmt 0 view .LVU864
 3138 000e 0023     		movs	r3, #0
 3139 0010 8360     		str	r3, [r0, #8]
1323:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 3140              		.loc 1 1323 3 is_stmt 1 view .LVU865
1323:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 3141              		.loc 1 1323 23 is_stmt 0 view .LVU866
 3142 0012 C360     		str	r3, [r0, #12]
1324:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 3143              		.loc 1 1324 3 is_stmt 1 view .LVU867
1324:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 3144              		.loc 1 1324 26 is_stmt 0 view .LVU868
 3145 0014 0222     		movs	r2, #2
 3146 0016 0261     		str	r2, [r0, #16]
1325:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 3147              		.loc 1 1325 3 is_stmt 1 view .LVU869
1325:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 3148              		.loc 1 1325 23 is_stmt 0 view .LVU870
 3149 0018 0122     		movs	r2, #1
 3150 001a 4261     		str	r2, [r0, #20]
1326:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 3151              		.loc 1 1326 3 is_stmt 1 view .LVU871
1326:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 3152              		.loc 1 1326 18 is_stmt 0 view .LVU872
 3153 001c 4FF40072 		mov	r2, #512
 3154 0020 8261     		str	r2, [r0, #24]
1327:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 3155              		.loc 1 1327 3 is_stmt 1 view .LVU873
1327:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 3156              		.loc 1 1327 32 is_stmt 0 view .LVU874
 3157 0022 2022     		movs	r2, #32
 3158 0024 C261     		str	r2, [r0, #28]
1328:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 3159              		.loc 1 1328 3 is_stmt 1 view .LVU875
1328:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 3160              		.loc 1 1328 23 is_stmt 0 view .LVU876
 3161 0026 0362     		str	r3, [r0, #32]
1329:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 106


 3162              		.loc 1 1329 3 is_stmt 1 view .LVU877
1329:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 3163              		.loc 1 1329 21 is_stmt 0 view .LVU878
 3164 0028 4362     		str	r3, [r0, #36]
1330:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 3165              		.loc 1 1330 3 is_stmt 1 view .LVU879
1330:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 3166              		.loc 1 1330 29 is_stmt 0 view .LVU880
 3167 002a 8362     		str	r3, [r0, #40]
1331:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 3168              		.loc 1 1331 3 is_stmt 1 view .LVU881
1331:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 3169              		.loc 1 1331 28 is_stmt 0 view .LVU882
 3170 002c 0A23     		movs	r3, #10
 3171 002e C362     		str	r3, [r0, #44]
1332:Core/Src/main.c ****   {
 3172              		.loc 1 1332 3 is_stmt 1 view .LVU883
1332:Core/Src/main.c ****   {
 3173              		.loc 1 1332 7 is_stmt 0 view .LVU884
 3174 0030 FFF7FEFF 		bl	HAL_SPI_Init
 3175              	.LVL219:
1332:Core/Src/main.c ****   {
 3176              		.loc 1 1332 6 view .LVU885
 3177 0034 00B9     		cbnz	r0, .L210
1340:Core/Src/main.c **** 
 3178              		.loc 1 1340 1 view .LVU886
 3179 0036 08BD     		pop	{r3, pc}
 3180              	.L210:
1334:Core/Src/main.c ****   }
 3181              		.loc 1 1334 5 is_stmt 1 view .LVU887
 3182 0038 FFF7FEFF 		bl	Error_Handler
 3183              	.LVL220:
 3184              	.L212:
 3185              		.align	2
 3186              	.L211:
 3187 003c 00000000 		.word	.LANCHOR38
 3188 0040 00380040 		.word	1073756160
 3189              		.cfi_endproc
 3190              	.LFE243:
 3192              		.section	.text.MX_I2C1_Init,"ax",%progbits
 3193              		.align	1
 3194              		.syntax unified
 3195              		.thumb
 3196              		.thumb_func
 3198              	MX_I2C1_Init:
 3199              	.LFB242:
1276:Core/Src/main.c **** 
 3200              		.loc 1 1276 1 view -0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204 0000 08B5     		push	{r3, lr}
 3205              	.LCFI47:
 3206              		.cfi_def_cfa_offset 8
 3207              		.cfi_offset 3, -8
 3208              		.cfi_offset 14, -4
1285:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 107


 3209              		.loc 1 1285 3 view .LVU889
1285:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 3210              		.loc 1 1285 18 is_stmt 0 view .LVU890
 3211 0002 0B48     		ldr	r0, .L217
 3212 0004 0B4B     		ldr	r3, .L217+4
 3213 0006 0360     		str	r3, [r0]
1286:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 3214              		.loc 1 1286 3 is_stmt 1 view .LVU891
1286:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 3215              		.loc 1 1286 25 is_stmt 0 view .LVU892
 3216 0008 0B4B     		ldr	r3, .L217+8
 3217 000a 4360     		str	r3, [r0, #4]
1287:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 3218              		.loc 1 1287 3 is_stmt 1 view .LVU893
1287:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 3219              		.loc 1 1287 24 is_stmt 0 view .LVU894
 3220 000c 0023     		movs	r3, #0
 3221 000e 8360     		str	r3, [r0, #8]
1288:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 3222              		.loc 1 1288 3 is_stmt 1 view .LVU895
1288:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 3223              		.loc 1 1288 26 is_stmt 0 view .LVU896
 3224 0010 C360     		str	r3, [r0, #12]
1289:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 3225              		.loc 1 1289 3 is_stmt 1 view .LVU897
1289:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 3226              		.loc 1 1289 29 is_stmt 0 view .LVU898
 3227 0012 4FF48042 		mov	r2, #16384
 3228 0016 0261     		str	r2, [r0, #16]
1290:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 3229              		.loc 1 1290 3 is_stmt 1 view .LVU899
1290:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 3230              		.loc 1 1290 30 is_stmt 0 view .LVU900
 3231 0018 4361     		str	r3, [r0, #20]
1291:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 3232              		.loc 1 1291 3 is_stmt 1 view .LVU901
1291:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 3233              		.loc 1 1291 26 is_stmt 0 view .LVU902
 3234 001a 8361     		str	r3, [r0, #24]
1292:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 3235              		.loc 1 1292 3 is_stmt 1 view .LVU903
1292:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 3236              		.loc 1 1292 30 is_stmt 0 view .LVU904
 3237 001c C361     		str	r3, [r0, #28]
1293:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 3238              		.loc 1 1293 3 is_stmt 1 view .LVU905
1293:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 3239              		.loc 1 1293 28 is_stmt 0 view .LVU906
 3240 001e 8023     		movs	r3, #128
 3241 0020 0362     		str	r3, [r0, #32]
1294:Core/Src/main.c ****   {
 3242              		.loc 1 1294 3 is_stmt 1 view .LVU907
1294:Core/Src/main.c ****   {
 3243              		.loc 1 1294 7 is_stmt 0 view .LVU908
 3244 0022 FFF7FEFF 		bl	HAL_I2C_Init
 3245              	.LVL221:
1294:Core/Src/main.c ****   {
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 108


 3246              		.loc 1 1294 6 view .LVU909
 3247 0026 00B9     		cbnz	r0, .L216
1302:Core/Src/main.c **** 
 3248              		.loc 1 1302 1 view .LVU910
 3249 0028 08BD     		pop	{r3, pc}
 3250              	.L216:
1296:Core/Src/main.c ****   }
 3251              		.loc 1 1296 5 is_stmt 1 view .LVU911
 3252 002a FFF7FEFF 		bl	Error_Handler
 3253              	.LVL222:
 3254              	.L218:
 3255 002e 00BF     		.align	2
 3256              	.L217:
 3257 0030 00000000 		.word	.LANCHOR39
 3258 0034 00540040 		.word	1073763328
 3259 0038 A0860100 		.word	100000
 3260              		.cfi_endproc
 3261              	.LFE242:
 3263              		.section	.text.SystemClock_Config,"ax",%progbits
 3264              		.align	1
 3265              		.global	SystemClock_Config
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3270              	SystemClock_Config:
 3271              	.LFB240:
1043:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 3272              		.loc 1 1043 1 view -0
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 80
 3275              		@ frame_needed = 0, uses_anonymous_args = 0
 3276 0000 00B5     		push	{lr}
 3277              	.LCFI48:
 3278              		.cfi_def_cfa_offset 4
 3279              		.cfi_offset 14, -4
 3280 0002 95B0     		sub	sp, sp, #84
 3281              	.LCFI49:
 3282              		.cfi_def_cfa_offset 88
1044:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 3283              		.loc 1 1044 3 view .LVU913
1044:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 3284              		.loc 1 1044 22 is_stmt 0 view .LVU914
 3285 0004 3022     		movs	r2, #48
 3286 0006 0021     		movs	r1, #0
 3287 0008 08A8     		add	r0, sp, #32
 3288 000a FFF7FEFF 		bl	memset
 3289              	.LVL223:
1045:Core/Src/main.c **** 
 3290              		.loc 1 1045 3 is_stmt 1 view .LVU915
1045:Core/Src/main.c **** 
 3291              		.loc 1 1045 22 is_stmt 0 view .LVU916
 3292 000e 0023     		movs	r3, #0
 3293 0010 0393     		str	r3, [sp, #12]
 3294 0012 0493     		str	r3, [sp, #16]
 3295 0014 0593     		str	r3, [sp, #20]
 3296 0016 0693     		str	r3, [sp, #24]
 3297 0018 0793     		str	r3, [sp, #28]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 109


1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3298              		.loc 1 1049 3 is_stmt 1 view .LVU917
 3299              	.LBB23:
1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3300              		.loc 1 1049 3 view .LVU918
 3301 001a 0193     		str	r3, [sp, #4]
1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3302              		.loc 1 1049 3 view .LVU919
 3303 001c 204A     		ldr	r2, .L225
 3304 001e 116C     		ldr	r1, [r2, #64]
 3305 0020 41F08051 		orr	r1, r1, #268435456
 3306 0024 1164     		str	r1, [r2, #64]
1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3307              		.loc 1 1049 3 view .LVU920
 3308 0026 126C     		ldr	r2, [r2, #64]
 3309 0028 02F08052 		and	r2, r2, #268435456
 3310 002c 0192     		str	r2, [sp, #4]
1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3311              		.loc 1 1049 3 view .LVU921
 3312 002e 019A     		ldr	r2, [sp, #4]
 3313              	.LBE23:
1049:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 3314              		.loc 1 1049 3 view .LVU922
1050:Core/Src/main.c **** 
 3315              		.loc 1 1050 3 view .LVU923
 3316              	.LBB24:
1050:Core/Src/main.c **** 
 3317              		.loc 1 1050 3 view .LVU924
 3318 0030 0293     		str	r3, [sp, #8]
1050:Core/Src/main.c **** 
 3319              		.loc 1 1050 3 view .LVU925
 3320 0032 1C4B     		ldr	r3, .L225+4
 3321 0034 1A68     		ldr	r2, [r3]
 3322 0036 42F48042 		orr	r2, r2, #16384
 3323 003a 1A60     		str	r2, [r3]
1050:Core/Src/main.c **** 
 3324              		.loc 1 1050 3 view .LVU926
 3325 003c 1B68     		ldr	r3, [r3]
 3326 003e 03F48043 		and	r3, r3, #16384
 3327 0042 0293     		str	r3, [sp, #8]
1050:Core/Src/main.c **** 
 3328              		.loc 1 1050 3 view .LVU927
 3329 0044 029B     		ldr	r3, [sp, #8]
 3330              	.LBE24:
1050:Core/Src/main.c **** 
 3331              		.loc 1 1050 3 view .LVU928
1055:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 3332              		.loc 1 1055 3 view .LVU929
1055:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 3333              		.loc 1 1055 36 is_stmt 0 view .LVU930
 3334 0046 0123     		movs	r3, #1
 3335 0048 0893     		str	r3, [sp, #32]
1056:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 3336              		.loc 1 1056 3 is_stmt 1 view .LVU931
1056:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 3337              		.loc 1 1056 30 is_stmt 0 view .LVU932
 3338 004a 4FF4A023 		mov	r3, #327680
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 110


 3339 004e 0993     		str	r3, [sp, #36]
1057:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 3340              		.loc 1 1057 3 is_stmt 1 view .LVU933
1057:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 3341              		.loc 1 1057 34 is_stmt 0 view .LVU934
 3342 0050 0223     		movs	r3, #2
 3343 0052 0E93     		str	r3, [sp, #56]
1058:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 3344              		.loc 1 1058 3 is_stmt 1 view .LVU935
1058:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 3345              		.loc 1 1058 35 is_stmt 0 view .LVU936
 3346 0054 4FF48002 		mov	r2, #4194304
 3347 0058 0F92     		str	r2, [sp, #60]
1059:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 3348              		.loc 1 1059 3 is_stmt 1 view .LVU937
1059:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 3349              		.loc 1 1059 30 is_stmt 0 view .LVU938
 3350 005a 0822     		movs	r2, #8
 3351 005c 1092     		str	r2, [sp, #64]
1060:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 3352              		.loc 1 1060 3 is_stmt 1 view .LVU939
1060:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 3353              		.loc 1 1060 30 is_stmt 0 view .LVU940
 3354 005e A822     		movs	r2, #168
 3355 0060 1192     		str	r2, [sp, #68]
1061:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 3356              		.loc 1 1061 3 is_stmt 1 view .LVU941
1061:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 3357              		.loc 1 1061 30 is_stmt 0 view .LVU942
 3358 0062 1293     		str	r3, [sp, #72]
1062:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3359              		.loc 1 1062 3 is_stmt 1 view .LVU943
1062:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3360              		.loc 1 1062 30 is_stmt 0 view .LVU944
 3361 0064 0423     		movs	r3, #4
 3362 0066 1393     		str	r3, [sp, #76]
1063:Core/Src/main.c ****   {
 3363              		.loc 1 1063 3 is_stmt 1 view .LVU945
1063:Core/Src/main.c ****   {
 3364              		.loc 1 1063 7 is_stmt 0 view .LVU946
 3365 0068 08A8     		add	r0, sp, #32
 3366 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 3367              	.LVL224:
1063:Core/Src/main.c ****   {
 3368              		.loc 1 1063 6 view .LVU947
 3369 006e 98B9     		cbnz	r0, .L223
1070:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 3370              		.loc 1 1070 3 is_stmt 1 view .LVU948
1070:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 3371              		.loc 1 1070 31 is_stmt 0 view .LVU949
 3372 0070 0F23     		movs	r3, #15
 3373 0072 0393     		str	r3, [sp, #12]
1072:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3374              		.loc 1 1072 3 is_stmt 1 view .LVU950
1072:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3375              		.loc 1 1072 34 is_stmt 0 view .LVU951
 3376 0074 0223     		movs	r3, #2
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 111


 3377 0076 0493     		str	r3, [sp, #16]
1073:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 3378              		.loc 1 1073 3 is_stmt 1 view .LVU952
1073:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 3379              		.loc 1 1073 35 is_stmt 0 view .LVU953
 3380 0078 0023     		movs	r3, #0
 3381 007a 0593     		str	r3, [sp, #20]
1074:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 3382              		.loc 1 1074 3 is_stmt 1 view .LVU954
1074:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 3383              		.loc 1 1074 36 is_stmt 0 view .LVU955
 3384 007c 4FF4A053 		mov	r3, #5120
 3385 0080 0693     		str	r3, [sp, #24]
1075:Core/Src/main.c **** 
 3386              		.loc 1 1075 3 is_stmt 1 view .LVU956
1075:Core/Src/main.c **** 
 3387              		.loc 1 1075 36 is_stmt 0 view .LVU957
 3388 0082 4FF48053 		mov	r3, #4096
 3389 0086 0793     		str	r3, [sp, #28]
1077:Core/Src/main.c ****   {
 3390              		.loc 1 1077 3 is_stmt 1 view .LVU958
1077:Core/Src/main.c ****   {
 3391              		.loc 1 1077 7 is_stmt 0 view .LVU959
 3392 0088 0521     		movs	r1, #5
 3393 008a 03A8     		add	r0, sp, #12
 3394 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 3395              	.LVL225:
1077:Core/Src/main.c ****   {
 3396              		.loc 1 1077 6 view .LVU960
 3397 0090 20B9     		cbnz	r0, .L224
1081:Core/Src/main.c **** 
 3398              		.loc 1 1081 1 view .LVU961
 3399 0092 15B0     		add	sp, sp, #84
 3400              	.LCFI50:
 3401              		.cfi_remember_state
 3402              		.cfi_def_cfa_offset 4
 3403              		@ sp needed
 3404 0094 5DF804FB 		ldr	pc, [sp], #4
 3405              	.L223:
 3406              	.LCFI51:
 3407              		.cfi_restore_state
1065:Core/Src/main.c ****   }
 3408              		.loc 1 1065 5 is_stmt 1 view .LVU962
 3409 0098 FFF7FEFF 		bl	Error_Handler
 3410              	.LVL226:
 3411              	.L224:
1079:Core/Src/main.c ****   }
 3412              		.loc 1 1079 5 view .LVU963
 3413 009c FFF7FEFF 		bl	Error_Handler
 3414              	.LVL227:
 3415              	.L226:
 3416              		.align	2
 3417              	.L225:
 3418 00a0 00380240 		.word	1073887232
 3419 00a4 00700040 		.word	1073770496
 3420              		.cfi_endproc
 3421              	.LFE240:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 112


 3423              		.section	.text.sensor_initialize,"ax",%progbits
 3424              		.align	1
 3425              		.global	sensor_initialize
 3426              		.syntax unified
 3427              		.thumb
 3428              		.thumb_func
 3430              	sensor_initialize:
 3431              	.LFB255:
1746:Core/Src/main.c **** 	sensgettime = 0;
 3432              		.loc 1 1746 26 view -0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 0
 3435              		@ frame_needed = 0, uses_anonymous_args = 0
 3436 0000 08B5     		push	{r3, lr}
 3437              	.LCFI52:
 3438              		.cfi_def_cfa_offset 8
 3439              		.cfi_offset 3, -8
 3440              		.cfi_offset 14, -4
1747:Core/Src/main.c **** 	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 3441              		.loc 1 1747 2 view .LVU965
1747:Core/Src/main.c **** 	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 3442              		.loc 1 1747 14 is_stmt 0 view .LVU966
 3443 0002 084B     		ldr	r3, .L231
 3444 0004 0022     		movs	r2, #0
 3445 0006 1A70     		strb	r2, [r3]
1748:Core/Src/main.c **** 	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
 3446              		.loc 1 1748 2 is_stmt 1 view .LVU967
1748:Core/Src/main.c **** 	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
 3447              		.loc 1 1748 6 is_stmt 0 view .LVU968
 3448 0008 1022     		movs	r2, #16
 3449 000a 0749     		ldr	r1, .L231+4
 3450 000c 0748     		ldr	r0, .L231+8
 3451 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 3452              	.LVL228:
1748:Core/Src/main.c **** 	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
 3453              		.loc 1 1748 5 view .LVU969
 3454 0012 20B9     		cbnz	r0, .L230
1752:Core/Src/main.c **** }
 3455              		.loc 1 1752 2 is_stmt 1 view .LVU970
 3456 0014 4FF47A70 		mov	r0, #1000
 3457 0018 FFF7FEFF 		bl	HAL_Delay
 3458              	.LVL229:
1753:Core/Src/main.c **** 
 3459              		.loc 1 1753 1 is_stmt 0 view .LVU971
 3460 001c 08BD     		pop	{r3, pc}
 3461              	.L230:
1750:Core/Src/main.c **** 	}
 3462              		.loc 1 1750 3 is_stmt 1 view .LVU972
 3463 001e FFF7FEFF 		bl	Error_Handler
 3464              	.LVL230:
 3465              	.L232:
 3466 0022 00BF     		.align	2
 3467              	.L231:
 3468 0024 00000000 		.word	.LANCHOR33
 3469 0028 00000000 		.word	.LANCHOR36
 3470 002c 00000000 		.word	.LANCHOR0
 3471              		.cfi_endproc
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 113


 3472              	.LFE255:
 3474              		.section	.rodata.running_initialize.str1.4,"aMS",%progbits,1
 3475              		.align	2
 3476              	.LC7:
 3477 0000 456E636F 		.ascii	"Encoder_Start\015\000"
 3477      6465725F 
 3477      53746172 
 3477      740D00
 3478 000f 00       		.align	2
 3479              	.LC8:
 3480 0010 53494445 		.ascii	"SIDESENSOR ENCODER\015\000"
 3480      53454E53 
 3480      4F522045 
 3480      4E434F44 
 3480      45520D00 
 3481              		.align	2
 3482              	.LC9:
 3483 0024 50574D5F 		.ascii	"PWM_Start\015\000"
 3483      53746172 
 3483      740D00
 3484 002f 00       		.align	2
 3485              	.LC10:
 3486 0030 5049440D 		.ascii	"PID\015\000"
 3486      00
 3487              		.section	.text.running_initialize,"ax",%progbits
 3488              		.align	1
 3489              		.global	running_initialize
 3490              		.syntax unified
 3491              		.thumb
 3492              		.thumb_func
 3494              	running_initialize:
 3495              	.LFB257:
1759:Core/Src/main.c **** 	sensor_initialize();
 3496              		.loc 1 1759 27 view -0
 3497              		.cfi_startproc
 3498              		@ args = 0, pretend = 0, frame = 0
 3499              		@ frame_needed = 0, uses_anonymous_args = 0
 3500 0000 D0B5     		push	{r4, r6, r7, lr}
 3501              	.LCFI53:
 3502              		.cfi_def_cfa_offset 16
 3503              		.cfi_offset 4, -16
 3504              		.cfi_offset 6, -12
 3505              		.cfi_offset 7, -8
 3506              		.cfi_offset 14, -4
1760:Core/Src/main.c **** #if D_VELOCITY_CONTROL
 3507              		.loc 1 1760 2 view .LVU974
 3508 0002 FFF7FEFF 		bl	sensor_initialize
 3509              	.LVL231:
1763:Core/Src/main.c **** #endif
 3510              		.loc 1 1763 2 view .LVU975
1763:Core/Src/main.c **** #endif
 3511              		.loc 1 1763 11 is_stmt 0 view .LVU976
 3512 0006 0024     		movs	r4, #0
 3513 0008 224B     		ldr	r3, .L235
 3514 000a 1C80     		strh	r4, [r3]	@ movhi
1765:Core/Src/main.c **** 	s_velocity_error_r = 0;
 3515              		.loc 1 1765 2 is_stmt 1 view .LVU977
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 114


1765:Core/Src/main.c **** 	s_velocity_error_r = 0;
 3516              		.loc 1 1765 21 is_stmt 0 view .LVU978
 3517 000c 0026     		movs	r6, #0
 3518 000e 0027     		movs	r7, #0
 3519 0010 214B     		ldr	r3, .L235+4
 3520 0012 C3E90067 		strd	r6, [r3]
1766:Core/Src/main.c **** #endif
 3521              		.loc 1 1766 2 is_stmt 1 view .LVU979
1766:Core/Src/main.c **** #endif
 3522              		.loc 1 1766 21 is_stmt 0 view .LVU980
 3523 0016 214B     		ldr	r3, .L235+8
 3524 0018 C3E90067 		strd	r6, [r3]
1768:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 3525              		.loc 1 1768 2 is_stmt 1 view .LVU981
 3526 001c 2048     		ldr	r0, .L235+12
 3527 001e FFF7FEFF 		bl	puts
 3528              	.LVL232:
1769:Core/Src/main.c **** 	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 3529              		.loc 1 1769 2 view .LVU982
 3530 0022 3C21     		movs	r1, #60
 3531 0024 1F48     		ldr	r0, .L235+16
 3532 0026 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 3533              	.LVL233:
1770:Core/Src/main.c **** 	subsensbuf = 0;
 3534              		.loc 1 1770 2 view .LVU983
 3535 002a 3C21     		movs	r1, #60
 3536 002c 1E48     		ldr	r0, .L235+20
 3537 002e FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 3538              	.LVL234:
1771:Core/Src/main.c **** 	marker = 0;
 3539              		.loc 1 1771 2 view .LVU984
1771:Core/Src/main.c **** 	marker = 0;
 3540              		.loc 1 1771 13 is_stmt 0 view .LVU985
 3541 0032 1E4B     		ldr	r3, .L235+24
 3542 0034 1C70     		strb	r4, [r3]
1772:Core/Src/main.c **** 	sidedeltacount = 0;
 3543              		.loc 1 1772 2 is_stmt 1 view .LVU986
1772:Core/Src/main.c **** 	sidedeltacount = 0;
 3544              		.loc 1 1772 9 is_stmt 0 view .LVU987
 3545 0036 1E4B     		ldr	r3, .L235+28
 3546 0038 1C70     		strb	r4, [r3]
1773:Core/Src/main.c **** 	markerstate = 0;
 3547              		.loc 1 1773 2 is_stmt 1 view .LVU988
1773:Core/Src/main.c **** 	markerstate = 0;
 3548              		.loc 1 1773 17 is_stmt 0 view .LVU989
 3549 003a 1E4B     		ldr	r3, .L235+32
 3550 003c 1C70     		strb	r4, [r3]
1774:Core/Src/main.c **** 	rightmarkercount = 0;
 3551              		.loc 1 1774 2 is_stmt 1 view .LVU990
1774:Core/Src/main.c **** 	rightmarkercount = 0;
 3552              		.loc 1 1774 14 is_stmt 0 view .LVU991
 3553 003e 1E4B     		ldr	r3, .L235+36
 3554 0040 1C70     		strb	r4, [r3]
1775:Core/Src/main.c **** #if USE_FLASH
 3555              		.loc 1 1775 2 is_stmt 1 view .LVU992
1775:Core/Src/main.c **** #if USE_FLASH
 3556              		.loc 1 1775 19 is_stmt 0 view .LVU993
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 115


 3557 0042 1E4B     		ldr	r3, .L235+40
 3558 0044 1C70     		strb	r4, [r3]
1779:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim10);
 3559              		.loc 1 1779 2 is_stmt 1 view .LVU994
 3560 0046 1E48     		ldr	r0, .L235+44
 3561 0048 FFF7FEFF 		bl	puts
 3562              	.LVL235:
1780:Core/Src/main.c **** 	leftmotor = 0;
 3563              		.loc 1 1780 2 view .LVU995
 3564 004c 1D48     		ldr	r0, .L235+48
 3565 004e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3566              	.LVL236:
1781:Core/Src/main.c **** 	rightmotor = 0;
 3567              		.loc 1 1781 2 view .LVU996
1781:Core/Src/main.c **** 	rightmotor = 0;
 3568              		.loc 1 1781 12 is_stmt 0 view .LVU997
 3569 0052 1D4B     		ldr	r3, .L235+52
 3570 0054 C3E90067 		strd	r6, [r3]
1782:Core/Src/main.c **** 	beforedirection = 0;
 3571              		.loc 1 1782 2 is_stmt 1 view .LVU998
1782:Core/Src/main.c **** 	beforedirection = 0;
 3572              		.loc 1 1782 13 is_stmt 0 view .LVU999
 3573 0058 1C4B     		ldr	r3, .L235+56
 3574 005a C3E90067 		strd	r6, [r3]
1783:Core/Src/main.c **** 	encoder_initialize();
 3575              		.loc 1 1783 2 is_stmt 1 view .LVU1000
1783:Core/Src/main.c **** 	encoder_initialize();
 3576              		.loc 1 1783 18 is_stmt 0 view .LVU1001
 3577 005e 1C4B     		ldr	r3, .L235+60
 3578 0060 1C60     		str	r4, [r3]
1784:Core/Src/main.c **** 	printf("PWM_Start\r\n");
 3579              		.loc 1 1784 2 is_stmt 1 view .LVU1002
 3580 0062 FFF7FEFF 		bl	encoder_initialize
 3581              	.LVL237:
1785:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 3582              		.loc 1 1785 2 view .LVU1003
 3583 0066 1B48     		ldr	r0, .L235+64
 3584 0068 FFF7FEFF 		bl	puts
 3585              	.LVL238:
1786:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 3586              		.loc 1 1786 2 view .LVU1004
 3587 006c 1A4E     		ldr	r6, .L235+68
 3588 006e 2146     		mov	r1, r4
 3589 0070 3046     		mov	r0, r6
 3590 0072 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 3591              	.LVL239:
1787:Core/Src/main.c **** 	printf("PID\r\n");
 3592              		.loc 1 1787 2 view .LVU1005
 3593 0076 0421     		movs	r1, #4
 3594 0078 3046     		mov	r0, r6
 3595 007a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 3596              	.LVL240:
1788:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim6);	// PID
 3597              		.loc 1 1788 2 view .LVU1006
 3598 007e 1748     		ldr	r0, .L235+72
 3599 0080 FFF7FEFF 		bl	puts
 3600              	.LVL241:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 116


1789:Core/Src/main.c **** #if PLAY
 3601              		.loc 1 1789 2 view .LVU1007
 3602 0084 1648     		ldr	r0, .L235+76
 3603 0086 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3604              	.LVL242:
1791:Core/Src/main.c **** #endif
 3605              		.loc 1 1791 2 view .LVU1008
1791:Core/Src/main.c **** #endif
 3606              		.loc 1 1791 14 is_stmt 0 view .LVU1009
 3607 008a 164B     		ldr	r3, .L235+80
 3608 008c 0122     		movs	r2, #1
 3609 008e 1A70     		strb	r2, [r3]
1793:Core/Src/main.c **** 
 3610              		.loc 1 1793 1 view .LVU1010
 3611 0090 D0BD     		pop	{r4, r6, r7, pc}
 3612              	.L236:
 3613 0092 00BF     		.align	2
 3614              	.L235:
 3615 0094 00000000 		.word	.LANCHOR17
 3616 0098 00000000 		.word	.LANCHOR29
 3617 009c 00000000 		.word	.LANCHOR5
 3618 00a0 00000000 		.word	.LC7
 3619 00a4 00000000 		.word	.LANCHOR10
 3620 00a8 00000000 		.word	.LANCHOR11
 3621 00ac 00000000 		.word	.LANCHOR19
 3622 00b0 00000000 		.word	.LANCHOR21
 3623 00b4 00000000 		.word	.LANCHOR20
 3624 00b8 00000000 		.word	.LANCHOR22
 3625 00bc 00000000 		.word	.LANCHOR23
 3626 00c0 10000000 		.word	.LC8
 3627 00c4 00000000 		.word	.LANCHOR15
 3628 00c8 00000000 		.word	.LANCHOR8
 3629 00cc 00000000 		.word	.LANCHOR9
 3630 00d0 00000000 		.word	.LANCHOR40
 3631 00d4 24000000 		.word	.LC9
 3632 00d8 00000000 		.word	.LANCHOR14
 3633 00dc 30000000 		.word	.LC10
 3634 00e0 00000000 		.word	.LANCHOR13
 3635 00e4 00000000 		.word	.LANCHOR12
 3636              		.cfi_endproc
 3637              	.LFE257:
 3639              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3640              		.align	2
 3641              	.LC11:
 3642 0000 1B5B3339 		.ascii	"\033[39m\000"
 3642      6D00
 3643 0006 0000     		.align	2
 3644              	.LC12:
 3645 0008 0D0A0D0A 		.ascii	"\015\012\015\012\015\012Starting Program...\015\012"
 3645      0D0A5374 
 3645      61727469 
 3645      6E672050 
 3645      726F6772 
 3646 0023 0D00     		.ascii	"\015\000"
 3647 0025 000000   		.align	2
 3648              	.LC13:
 3649 0028 53746172 		.ascii	"Starting Analog Read\015\000"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 117


 3649      74696E67 
 3649      20416E61 
 3649      6C6F6720 
 3649      52656164 
 3650 003e 0000     		.align	2
 3651              	.LC14:
 3652 0040 53746172 		.ascii	"Starting TIM11\015\000"
 3652      74696E67 
 3652      2054494D 
 3652      31310D00 
 3653              		.align	2
 3654              	.LC15:
 3655 0050 2F2F2F2F 		.ascii	"///// WHILE /////\012\015\000"
 3655      2F205748 
 3655      494C4520 
 3655      2F2F2F2F 
 3655      2F0A0D00 
 3656              		.section	.text.main,"ax",%progbits
 3657              		.align	1
 3658              		.global	main
 3659              		.syntax unified
 3660              		.thumb
 3661              		.thumb_func
 3663              	main:
 3664              	.LFB239:
 654:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 3665              		.loc 1 654 1 is_stmt 1 view -0
 3666              		.cfi_startproc
 3667              		@ args = 0, pretend = 0, frame = 0
 3668              		@ frame_needed = 0, uses_anonymous_args = 0
 3669 0000 10B5     		push	{r4, lr}
 3670              	.LCFI54:
 3671              		.cfi_def_cfa_offset 8
 3672              		.cfi_offset 4, -8
 3673              		.cfi_offset 14, -4
 662:Core/Src/main.c **** 
 3674              		.loc 1 662 3 view .LVU1012
 3675 0002 FFF7FEFF 		bl	HAL_Init
 3676              	.LVL243:
 669:Core/Src/main.c **** 	motorenable = 0;
 3677              		.loc 1 669 2 view .LVU1013
 669:Core/Src/main.c **** 	motorenable = 0;
 3678              		.loc 1 669 8 is_stmt 0 view .LVU1014
 3679 0006 0023     		movs	r3, #0
 3680 0008 9D4A     		ldr	r2, .L265
 3681 000a 1370     		strb	r3, [r2]
 670:Core/Src/main.c **** 	rotary_value = 0;
 3682              		.loc 1 670 2 is_stmt 1 view .LVU1015
 670:Core/Src/main.c **** 	rotary_value = 0;
 3683              		.loc 1 670 14 is_stmt 0 view .LVU1016
 3684 000c 9D4A     		ldr	r2, .L265+4
 3685 000e 1370     		strb	r3, [r2]
 671:Core/Src/main.c **** 	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 3686              		.loc 1 671 2 is_stmt 1 view .LVU1017
 671:Core/Src/main.c **** 	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 3687              		.loc 1 671 15 is_stmt 0 view .LVU1018
 3688 0010 9D4A     		ldr	r2, .L265+8
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 118


 3689 0012 1370     		strb	r3, [r2]
 672:Core/Src/main.c **** 	commonspeed = 0;
 3690              		.loc 1 672 2 is_stmt 1 view .LVU1019
 672:Core/Src/main.c **** 	commonspeed = 0;
 3691              		.loc 1 672 17 is_stmt 0 view .LVU1020
 3692 0014 9D4A     		ldr	r2, .L265+12
 3693 0016 0020     		movs	r0, #0
 3694 0018 9D49     		ldr	r1, .L265+16
 3695 001a C2E90001 		strd	r0, [r2]
 673:Core/Src/main.c **** #if D_PWM
 3696              		.loc 1 673 2 is_stmt 1 view .LVU1021
 673:Core/Src/main.c **** #if D_PWM
 3697              		.loc 1 673 14 is_stmt 0 view .LVU1022
 3698 001e 9D4A     		ldr	r2, .L265+20
 3699 0020 1380     		strh	r3, [r2]	@ movhi
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3700              		.loc 1 679 2 is_stmt 1 view .LVU1023
 3701              	.LBB25:
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3702              		.loc 1 679 7 view .LVU1024
 3703              	.LVL244:
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3704              		.loc 1 679 2 is_stmt 0 view .LVU1025
 3705 0022 0AE0     		b	.L238
 3706              	.LVL245:
 3707              	.L239:
 680:Core/Src/main.c **** 		analogmin[i] = 4096;
 3708              		.loc 1 680 3 is_stmt 1 discriminator 3 view .LVU1026
 680:Core/Src/main.c **** 		analogmin[i] = 4096;
 3709              		.loc 1 680 16 is_stmt 0 discriminator 3 view .LVU1027
 3710 0024 9C4A     		ldr	r2, .L265+24
 3711 0026 0021     		movs	r1, #0
 3712 0028 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 681:Core/Src/main.c **** 	}
 3713              		.loc 1 681 3 is_stmt 1 discriminator 3 view .LVU1028
 681:Core/Src/main.c **** 	}
 3714              		.loc 1 681 16 is_stmt 0 discriminator 3 view .LVU1029
 3715 002c 9B4A     		ldr	r2, .L265+28
 3716 002e 4FF48051 		mov	r1, #4096
 3717 0032 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3718              		.loc 1 679 49 is_stmt 1 discriminator 3 view .LVU1030
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3719              		.loc 1 679 50 is_stmt 0 discriminator 3 view .LVU1031
 3720 0036 0133     		adds	r3, r3, #1
 3721              	.LVL246:
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3722              		.loc 1 679 50 discriminator 3 view .LVU1032
 3723 0038 DBB2     		uxtb	r3, r3
 3724              	.LVL247:
 3725              	.L238:
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3726              		.loc 1 679 28 is_stmt 1 discriminator 1 view .LVU1033
 679:Core/Src/main.c **** 		analogmax[i] = 0;
 3727              		.loc 1 679 2 is_stmt 0 discriminator 1 view .LVU1034
 3728 003a 0B2B     		cmp	r3, #11
 3729 003c F2D9     		bls	.L239
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 119


 3730              	.LBE25:
 687:Core/Src/main.c **** 
 3731              		.loc 1 687 3 is_stmt 1 view .LVU1035
 3732 003e FFF7FEFF 		bl	SystemClock_Config
 3733              	.LVL248:
 694:Core/Src/main.c ****   MX_DMA_Init();
 3734              		.loc 1 694 3 view .LVU1036
 3735 0042 FFF7FEFF 		bl	MX_GPIO_Init
 3736              	.LVL249:
 695:Core/Src/main.c ****   MX_ADC1_Init();
 3737              		.loc 1 695 3 view .LVU1037
 3738 0046 FFF7FEFF 		bl	MX_DMA_Init
 3739              	.LVL250:
 696:Core/Src/main.c ****   MX_USART6_UART_Init();
 3740              		.loc 1 696 3 view .LVU1038
 3741 004a FFF7FEFF 		bl	MX_ADC1_Init
 3742              	.LVL251:
 697:Core/Src/main.c ****   MX_TIM6_Init();
 3743              		.loc 1 697 3 view .LVU1039
 3744 004e FFF7FEFF 		bl	MX_USART6_UART_Init
 3745              	.LVL252:
 698:Core/Src/main.c ****   MX_TIM4_Init();
 3746              		.loc 1 698 3 view .LVU1040
 3747 0052 FFF7FEFF 		bl	MX_TIM6_Init
 3748              	.LVL253:
 699:Core/Src/main.c ****   MX_TIM1_Init();
 3749              		.loc 1 699 3 view .LVU1041
 3750 0056 FFF7FEFF 		bl	MX_TIM4_Init
 3751              	.LVL254:
 700:Core/Src/main.c ****   MX_TIM3_Init();
 3752              		.loc 1 700 3 view .LVU1042
 3753 005a FFF7FEFF 		bl	MX_TIM1_Init
 3754              	.LVL255:
 701:Core/Src/main.c ****   MX_TIM10_Init();
 3755              		.loc 1 701 3 view .LVU1043
 3756 005e FFF7FEFF 		bl	MX_TIM3_Init
 3757              	.LVL256:
 702:Core/Src/main.c ****   MX_TIM11_Init();
 3758              		.loc 1 702 3 view .LVU1044
 3759 0062 FFF7FEFF 		bl	MX_TIM10_Init
 3760              	.LVL257:
 703:Core/Src/main.c ****   MX_SPI2_Init();
 3761              		.loc 1 703 3 view .LVU1045
 3762 0066 FFF7FEFF 		bl	MX_TIM11_Init
 3763              	.LVL258:
 704:Core/Src/main.c ****   MX_I2C1_Init();
 3764              		.loc 1 704 3 view .LVU1046
 3765 006a FFF7FEFF 		bl	MX_SPI2_Init
 3766              	.LVL259:
 705:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 3767              		.loc 1 705 3 view .LVU1047
 3768 006e FFF7FEFF 		bl	MX_I2C1_Init
 3769              	.LVL260:
 707:Core/Src/main.c **** 	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 3770              		.loc 1 707 2 view .LVU1048
 3771 0072 8B48     		ldr	r0, .L265+32
 3772 0074 FFF7FEFF 		bl	printf
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 120


 3773              	.LVL261:
 708:Core/Src/main.c **** 
 3774              		.loc 1 708 2 view .LVU1049
 3775 0078 8A48     		ldr	r0, .L265+36
 3776 007a FFF7FEFF 		bl	puts
 3777              	.LVL262:
 710:Core/Src/main.c **** 	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 3778              		.loc 1 710 2 view .LVU1050
 3779 007e 8A48     		ldr	r0, .L265+40
 3780 0080 FFF7FEFF 		bl	puts
 3781              	.LVL263:
 711:Core/Src/main.c **** 		Error_Handler();
 3782              		.loc 1 711 2 view .LVU1051
 711:Core/Src/main.c **** 		Error_Handler();
 3783              		.loc 1 711 6 is_stmt 0 view .LVU1052
 3784 0084 8948     		ldr	r0, .L265+44
 3785 0086 FFF7FEFF 		bl	HAL_ADC_Init
 3786              	.LVL264:
 711:Core/Src/main.c **** 		Error_Handler();
 3787              		.loc 1 711 5 view .LVU1053
 3788 008a 08B1     		cbz	r0, .L240
 712:Core/Src/main.c **** 	}
 3789              		.loc 1 712 3 is_stmt 1 view .LVU1054
 3790 008c FFF7FEFF 		bl	Error_Handler
 3791              	.LVL265:
 3792              	.L240:
 715:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 3793              		.loc 1 715 2 view .LVU1055
 3794 0090 8748     		ldr	r0, .L265+48
 3795 0092 FFF7FEFF 		bl	puts
 3796              	.LVL266:
 716:Core/Src/main.c **** 
 3797              		.loc 1 716 2 view .LVU1056
 3798 0096 8748     		ldr	r0, .L265+52
 3799 0098 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3800              	.LVL267:
 753:Core/Src/main.c **** #if D_LED
 3801              		.loc 1 753 2 view .LVU1057
 3802 009c 0122     		movs	r2, #1
 3803 009e 1146     		mov	r1, r2
 3804 00a0 1046     		mov	r0, r2
 3805 00a2 FFF7FEFF 		bl	led_rgb
 3806              	.LVL268:
 3807 00a6 28E0     		b	.L241
 3808              	.L249:
 769:Core/Src/main.c **** 
 3809              		.loc 1 769 5 view .LVU1058
 3810 00a8 0022     		movs	r2, #0
 3811 00aa 0121     		movs	r1, #1
 3812 00ac 0846     		mov	r0, r1
 3813 00ae FFF7FEFF 		bl	led_rgb
 3814              	.LVL269:
 771:Core/Src/main.c **** 
 3815              		.loc 1 771 5 view .LVU1059
 3816 00b2 FFF7FEFF 		bl	sensor_initialize
 3817              	.LVL270:
 773:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 121


 3818              		.loc 1 773 5 view .LVU1060
 773:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 3819              		.loc 1 773 11 is_stmt 0 view .LVU1061
 3820 00b6 19E0     		b	.L250
 3821              	.LVL271:
 3822              	.L251:
 3823              	.LBB26:
 3824              	.LBB27:
 775:Core/Src/main.c **** 						analogmax[j] =
 3825              		.loc 1 775 7 is_stmt 1 discriminator 3 view .LVU1062
 775:Core/Src/main.c **** 						analogmax[j] =
 3826              		.loc 1 775 16 is_stmt 0 discriminator 3 view .LVU1063
 3827 00b8 7F4A     		ldr	r2, .L265+56
 3828 00ba 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 3829              	.LVL272:
 776:Core/Src/main.c **** 								(analogmax[j] < analogbuf) ?
 3830              		.loc 1 776 7 is_stmt 1 discriminator 3 view .LVU1064
 777:Core/Src/main.c **** 										analogbuf : analogmax[j];
 3831              		.loc 1 777 19 is_stmt 0 discriminator 3 view .LVU1065
 3832 00be 764A     		ldr	r2, .L265+24
 3833 00c0 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 778:Core/Src/main.c **** 						analogmin[j] =
 3834              		.loc 1 778 21 discriminator 3 view .LVU1066
 3835 00c4 8142     		cmp	r1, r0
 3836 00c6 38BF     		it	cc
 3837 00c8 0146     		movcc	r1, r0
 776:Core/Src/main.c **** 								(analogmax[j] < analogbuf) ?
 3838              		.loc 1 776 20 discriminator 3 view .LVU1067
 3839 00ca 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 779:Core/Src/main.c **** 								(analogmin[j] > analogbuf) ?
 3840              		.loc 1 779 7 is_stmt 1 discriminator 3 view .LVU1068
 780:Core/Src/main.c **** 										analogbuf : analogmin[j];
 3841              		.loc 1 780 19 is_stmt 0 discriminator 3 view .LVU1069
 3842 00ce 7349     		ldr	r1, .L265+28
 3843 00d0 31F81320 		ldrh	r2, [r1, r3, lsl #1]
 781:Core/Src/main.c **** #if D_ANALOG
 3844              		.loc 1 781 21 discriminator 3 view .LVU1070
 3845 00d4 8242     		cmp	r2, r0
 3846 00d6 28BF     		it	cs
 3847 00d8 0246     		movcs	r2, r0
 779:Core/Src/main.c **** 								(analogmin[j] > analogbuf) ?
 3848              		.loc 1 779 20 discriminator 3 view .LVU1071
 3849 00da 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 3850              	.LBE27:
 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3851              		.loc 1 774 53 is_stmt 1 discriminator 3 view .LVU1072
 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3852              		.loc 1 774 54 is_stmt 0 discriminator 3 view .LVU1073
 3853 00de 0133     		adds	r3, r3, #1
 3854              	.LVL273:
 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3855              		.loc 1 774 54 discriminator 3 view .LVU1074
 3856 00e0 DBB2     		uxtb	r3, r3
 3857              	.LVL274:
 3858              	.L252:
 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3859              		.loc 1 774 32 is_stmt 1 discriminator 1 view .LVU1075
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 122


 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3860              		.loc 1 774 6 is_stmt 0 discriminator 1 view .LVU1076
 3861 00e2 0B2B     		cmp	r3, #11
 3862 00e4 E8D9     		bls	.L251
 3863              	.LBE26:
 792:Core/Src/main.c **** 				}
 3864              		.loc 1 792 6 is_stmt 1 view .LVU1077
 3865 00e6 FA20     		movs	r0, #250
 3866 00e8 FFF7FEFF 		bl	HAL_Delay
 3867              	.LVL275:
 3868              	.L250:
 773:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 3869              		.loc 1 773 11 view .LVU1078
 773:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 3870              		.loc 1 773 12 is_stmt 0 view .LVU1079
 3871 00ec 644B     		ldr	r3, .L265
 3872 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 773:Core/Src/main.c **** 					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 3873              		.loc 1 773 11 view .LVU1080
 3874 00f0 0BB1     		cbz	r3, .L264
 3875              	.LBB28:
 774:Core/Src/main.c **** 						uint16_t analogbuf = analog[j];
 3876              		.loc 1 774 25 view .LVU1081
 3877 00f2 2346     		mov	r3, r4
 3878 00f4 F5E7     		b	.L252
 3879              	.L264:
 3880              	.LBE28:
 794:Core/Src/main.c **** #if D_ANALOG
 3881              		.loc 1 794 5 is_stmt 1 view .LVU1082
 3882 00f6 FFF7FEFF 		bl	sensor_finalize
 3883              	.LVL276:
 835:Core/Src/main.c **** 			case 0x1:
 3884              		.loc 1 835 5 view .LVU1083
 3885              	.L241:
 757:Core/Src/main.c **** #if !D_LED
 3886              		.loc 1 757 2 view .LVU1084
 759:Core/Src/main.c **** #if D_SWITCH
 3887              		.loc 1 759 3 view .LVU1085
 3888 00fa 7048     		ldr	r0, .L265+60
 3889 00fc FFF7FEFF 		bl	printf
 3890              	.LVL277:
 766:Core/Src/main.c **** 			switch (rotary_value) {
 3891              		.loc 1 766 3 view .LVU1086
 766:Core/Src/main.c **** 			switch (rotary_value) {
 3892              		.loc 1 766 7 is_stmt 0 view .LVU1087
 3893 0100 5F4B     		ldr	r3, .L265
 3894 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 766:Core/Src/main.c **** 			switch (rotary_value) {
 3895              		.loc 1 766 6 view .LVU1088
 3896 0104 002B     		cmp	r3, #0
 3897 0106 F8D0     		beq	.L241
 767:Core/Src/main.c **** 			case 0x0:
 3898              		.loc 1 767 4 is_stmt 1 view .LVU1089
 3899 0108 5F4B     		ldr	r3, .L265+8
 3900 010a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 3901 010c 0F2C     		cmp	r4, #15
 3902 010e F4D8     		bhi	.L241
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 123


 3903 0110 01A3     		adr	r3, .L244
 3904 0112 53F824F0 		ldr	pc, [r3, r4, lsl #2]
 3905 0116 00BF     		.p2align 2
 3906              	.L244:
 3907 0118 A9000000 		.word	.L249+1
 3908 011c 59010000 		.word	.L248+1
 3909 0120 A9010000 		.word	.L247+1
 3910 0124 FB010000 		.word	.L246+1
 3911 0128 FB000000 		.word	.L241+1
 3912 012c FB000000 		.word	.L241+1
 3913 0130 FB000000 		.word	.L241+1
 3914 0134 FB000000 		.word	.L241+1
 3915 0138 FB000000 		.word	.L241+1
 3916 013c FB000000 		.word	.L241+1
 3917 0140 FB000000 		.word	.L241+1
 3918 0144 FB000000 		.word	.L241+1
 3919 0148 FB000000 		.word	.L241+1
 3920 014c FB000000 		.word	.L241+1
 3921 0150 51020000 		.word	.L245+1
 3922 0154 75020000 		.word	.L243+1
 3923              		.p2align 1
 3924              	.L248:
 837:Core/Src/main.c **** 				kpl = KPL1;
 3925              		.loc 1 837 5 view .LVU1090
 837:Core/Src/main.c **** 				kpl = KPL1;
 3926              		.loc 1 837 17 is_stmt 0 view .LVU1091
 3927 0158 4E4B     		ldr	r3, .L265+20
 3928 015a 6422     		movs	r2, #100
 3929 015c 1A80     		strh	r2, [r3]	@ movhi
 838:Core/Src/main.c **** 				kpr = KPR1;
 3930              		.loc 1 838 5 is_stmt 1 view .LVU1092
 838:Core/Src/main.c **** 				kpr = KPR1;
 3931              		.loc 1 838 9 is_stmt 0 view .LVU1093
 3932 015e 0022     		movs	r2, #0
 3933 0160 574B     		ldr	r3, .L265+64
 3934 0162 5849     		ldr	r1, .L265+68
 3935 0164 C1E90023 		strd	r2, [r1]
 839:Core/Src/main.c **** 				kdl = KDL1;
 3936              		.loc 1 839 5 is_stmt 1 view .LVU1094
 839:Core/Src/main.c **** 				kdl = KDL1;
 3937              		.loc 1 839 9 is_stmt 0 view .LVU1095
 3938 0168 5749     		ldr	r1, .L265+72
 3939 016a C1E90023 		strd	r2, [r1]
 840:Core/Src/main.c **** 				kdr = KDR1;
 3940              		.loc 1 840 5 is_stmt 1 view .LVU1096
 840:Core/Src/main.c **** 				kdr = KDR1;
 3941              		.loc 1 840 9 is_stmt 0 view .LVU1097
 3942 016e 0022     		movs	r2, #0
 3943 0170 0023     		movs	r3, #0
 3944 0172 5649     		ldr	r1, .L265+76
 3945 0174 C1E90023 		strd	r2, [r1]
 841:Core/Src/main.c **** 				kil = KIL1;
 3946              		.loc 1 841 5 is_stmt 1 view .LVU1098
 841:Core/Src/main.c **** 				kil = KIL1;
 3947              		.loc 1 841 9 is_stmt 0 view .LVU1099
 3948 0178 5549     		ldr	r1, .L265+80
 3949 017a C1E90023 		strd	r2, [r1]
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 124


 842:Core/Src/main.c **** 				kir = KIR1;
 3950              		.loc 1 842 5 is_stmt 1 view .LVU1100
 842:Core/Src/main.c **** 				kir = KIR1;
 3951              		.loc 1 842 9 is_stmt 0 view .LVU1101
 3952 017e 5549     		ldr	r1, .L265+84
 3953 0180 C1E90023 		strd	r2, [r1]
 843:Core/Src/main.c **** 				running_initialize();
 3954              		.loc 1 843 5 is_stmt 1 view .LVU1102
 843:Core/Src/main.c **** 				running_initialize();
 3955              		.loc 1 843 9 is_stmt 0 view .LVU1103
 3956 0184 5449     		ldr	r1, .L265+88
 3957 0186 C1E90023 		strd	r2, [r1]
 844:Core/Src/main.c **** 
 3958              		.loc 1 844 5 is_stmt 1 view .LVU1104
 3959 018a FFF7FEFF 		bl	running_initialize
 3960              	.LVL278:
 846:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 3961              		.loc 1 846 5 view .LVU1105
 846:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 3962              		.loc 1 846 11 is_stmt 0 view .LVU1106
 3963 018e 04E0     		b	.L253
 3964              	.L254:
 870:Core/Src/main.c **** 					HAL_Delay(250);
 3965              		.loc 1 870 6 is_stmt 1 view .LVU1107
 3966 0190 FFF7FEFF 		bl	d_print
 3967              	.LVL279:
 871:Core/Src/main.c **** 				}
 3968              		.loc 1 871 6 view .LVU1108
 3969 0194 FA20     		movs	r0, #250
 3970 0196 FFF7FEFF 		bl	HAL_Delay
 3971              	.LVL280:
 3972              	.L253:
 846:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 3973              		.loc 1 846 11 view .LVU1109
 846:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 3974              		.loc 1 846 12 is_stmt 0 view .LVU1110
 3975 019a 394B     		ldr	r3, .L265
 3976 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846:Core/Src/main.c **** #if D_VELOCITY_CONTROL_IN_WHILE
 3977              		.loc 1 846 11 view .LVU1111
 3978 019e 002B     		cmp	r3, #0
 3979 01a0 F6D1     		bne	.L254
 874:Core/Src/main.c **** #if USE_FLASH
 3980              		.loc 1 874 5 is_stmt 1 view .LVU1112
 3981 01a2 FFF7FEFF 		bl	running_finalize
 3982              	.LVL281:
 907:Core/Src/main.c **** 			case 0x2:
 3983              		.loc 1 907 5 view .LVU1113
 3984 01a6 A8E7     		b	.L241
 3985              	.L247:
 909:Core/Src/main.c **** 				kpl = KPL2;
 3986              		.loc 1 909 5 view .LVU1114
 909:Core/Src/main.c **** 				kpl = KPL2;
 3987              		.loc 1 909 17 is_stmt 0 view .LVU1115
 3988 01a8 3A4B     		ldr	r3, .L265+20
 3989 01aa 4FF47A72 		mov	r2, #1000
 3990 01ae 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 125


 910:Core/Src/main.c **** 				kpr = KPR2;
 3991              		.loc 1 910 5 is_stmt 1 view .LVU1116
 910:Core/Src/main.c **** 				kpr = KPR2;
 3992              		.loc 1 910 9 is_stmt 0 view .LVU1117
 3993 01b0 0022     		movs	r2, #0
 3994 01b2 4A4B     		ldr	r3, .L265+92
 3995 01b4 4349     		ldr	r1, .L265+68
 3996 01b6 C1E90023 		strd	r2, [r1]
 911:Core/Src/main.c **** 				kdl = KDL2;
 3997              		.loc 1 911 5 is_stmt 1 view .LVU1118
 911:Core/Src/main.c **** 				kdl = KDL2;
 3998              		.loc 1 911 9 is_stmt 0 view .LVU1119
 3999 01ba 4349     		ldr	r1, .L265+72
 4000 01bc C1E90023 		strd	r2, [r1]
 912:Core/Src/main.c **** 				kdr = KDR2;
 4001              		.loc 1 912 5 is_stmt 1 view .LVU1120
 912:Core/Src/main.c **** 				kdr = KDR2;
 4002              		.loc 1 912 9 is_stmt 0 view .LVU1121
 4003 01c0 0022     		movs	r2, #0
 4004 01c2 0023     		movs	r3, #0
 4005 01c4 4149     		ldr	r1, .L265+76
 4006 01c6 C1E90023 		strd	r2, [r1]
 913:Core/Src/main.c **** 				kil = KIL2;
 4007              		.loc 1 913 5 is_stmt 1 view .LVU1122
 913:Core/Src/main.c **** 				kil = KIL2;
 4008              		.loc 1 913 9 is_stmt 0 view .LVU1123
 4009 01ca 4149     		ldr	r1, .L265+80
 4010 01cc C1E90023 		strd	r2, [r1]
 914:Core/Src/main.c **** 				kir = KIR2;
 4011              		.loc 1 914 5 is_stmt 1 view .LVU1124
 914:Core/Src/main.c **** 				kir = KIR2;
 4012              		.loc 1 914 9 is_stmt 0 view .LVU1125
 4013 01d0 4049     		ldr	r1, .L265+84
 4014 01d2 C1E90023 		strd	r2, [r1]
 915:Core/Src/main.c **** #if USE_FLASH
 4015              		.loc 1 915 5 is_stmt 1 view .LVU1126
 915:Core/Src/main.c **** #if USE_FLASH
 4016              		.loc 1 915 9 is_stmt 0 view .LVU1127
 4017 01d6 4049     		ldr	r1, .L265+88
 4018 01d8 C1E90023 		strd	r2, [r1]
 920:Core/Src/main.c **** 
 4019              		.loc 1 920 5 is_stmt 1 view .LVU1128
 4020 01dc FFF7FEFF 		bl	running_initialize
 4021              	.LVL282:
 922:Core/Src/main.c **** 					d_print();
 4022              		.loc 1 922 5 view .LVU1129
 922:Core/Src/main.c **** 					d_print();
 4023              		.loc 1 922 11 is_stmt 0 view .LVU1130
 4024 01e0 04E0     		b	.L255
 4025              	.L256:
 923:Core/Src/main.c **** 					HAL_Delay(250);
 4026              		.loc 1 923 6 is_stmt 1 view .LVU1131
 4027 01e2 FFF7FEFF 		bl	d_print
 4028              	.LVL283:
 924:Core/Src/main.c **** 				}
 4029              		.loc 1 924 6 view .LVU1132
 4030 01e6 FA20     		movs	r0, #250
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 126


 4031 01e8 FFF7FEFF 		bl	HAL_Delay
 4032              	.LVL284:
 4033              	.L255:
 922:Core/Src/main.c **** 					d_print();
 4034              		.loc 1 922 11 view .LVU1133
 922:Core/Src/main.c **** 					d_print();
 4035              		.loc 1 922 12 is_stmt 0 view .LVU1134
 4036 01ec 244B     		ldr	r3, .L265
 4037 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 922:Core/Src/main.c **** 					d_print();
 4038              		.loc 1 922 11 view .LVU1135
 4039 01f0 002B     		cmp	r3, #0
 4040 01f2 F6D1     		bne	.L256
 927:Core/Src/main.c **** 				break;
 4041              		.loc 1 927 5 is_stmt 1 view .LVU1136
 4042 01f4 FFF7FEFF 		bl	running_finalize
 4043              	.LVL285:
 928:Core/Src/main.c **** 			case 0x3:
 4044              		.loc 1 928 5 view .LVU1137
 4045 01f8 7FE7     		b	.L241
 4046              	.L246:
 930:Core/Src/main.c **** 				kpl = KPL3;
 4047              		.loc 1 930 5 view .LVU1138
 930:Core/Src/main.c **** 				kpl = KPL3;
 4048              		.loc 1 930 17 is_stmt 0 view .LVU1139
 4049 01fa 264B     		ldr	r3, .L265+20
 4050 01fc 4FF4E172 		mov	r2, #450
 4051 0200 1A80     		strh	r2, [r3]	@ movhi
 931:Core/Src/main.c **** 				kpr = KPR3;
 4052              		.loc 1 931 5 is_stmt 1 view .LVU1140
 931:Core/Src/main.c **** 				kpr = KPR3;
 4053              		.loc 1 931 9 is_stmt 0 view .LVU1141
 4054 0202 0022     		movs	r2, #0
 4055 0204 364B     		ldr	r3, .L265+96
 4056 0206 2F49     		ldr	r1, .L265+68
 4057 0208 C1E90023 		strd	r2, [r1]
 932:Core/Src/main.c **** 				kdl = KDL3;
 4058              		.loc 1 932 5 is_stmt 1 view .LVU1142
 932:Core/Src/main.c **** 				kdl = KDL3;
 4059              		.loc 1 932 9 is_stmt 0 view .LVU1143
 4060 020c 2E49     		ldr	r1, .L265+72
 4061 020e C1E90023 		strd	r2, [r1]
 933:Core/Src/main.c **** 				kdr = KDR3;
 4062              		.loc 1 933 5 is_stmt 1 view .LVU1144
 933:Core/Src/main.c **** 				kdr = KDR3;
 4063              		.loc 1 933 9 is_stmt 0 view .LVU1145
 4064 0212 0022     		movs	r2, #0
 4065 0214 334B     		ldr	r3, .L265+100
 4066 0216 2D49     		ldr	r1, .L265+76
 4067 0218 C1E90023 		strd	r2, [r1]
 934:Core/Src/main.c **** 				kil = KIL3;
 4068              		.loc 1 934 5 is_stmt 1 view .LVU1146
 934:Core/Src/main.c **** 				kil = KIL3;
 4069              		.loc 1 934 9 is_stmt 0 view .LVU1147
 4070 021c 2C49     		ldr	r1, .L265+80
 4071 021e C1E90023 		strd	r2, [r1]
 935:Core/Src/main.c **** 				kir = KIR3;
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 127


 4072              		.loc 1 935 5 is_stmt 1 view .LVU1148
 935:Core/Src/main.c **** 				kir = KIR3;
 4073              		.loc 1 935 9 is_stmt 0 view .LVU1149
 4074 0222 0022     		movs	r2, #0
 4075 0224 0023     		movs	r3, #0
 4076 0226 2B49     		ldr	r1, .L265+84
 4077 0228 C1E90023 		strd	r2, [r1]
 936:Core/Src/main.c **** 				running_initialize();
 4078              		.loc 1 936 5 is_stmt 1 view .LVU1150
 936:Core/Src/main.c **** 				running_initialize();
 4079              		.loc 1 936 9 is_stmt 0 view .LVU1151
 4080 022c 2A49     		ldr	r1, .L265+88
 4081 022e C1E90023 		strd	r2, [r1]
 937:Core/Src/main.c **** 
 4082              		.loc 1 937 5 is_stmt 1 view .LVU1152
 4083 0232 FFF7FEFF 		bl	running_initialize
 4084              	.LVL286:
 939:Core/Src/main.c **** 					d_print();
 4085              		.loc 1 939 5 view .LVU1153
 939:Core/Src/main.c **** 					d_print();
 4086              		.loc 1 939 11 is_stmt 0 view .LVU1154
 4087 0236 04E0     		b	.L257
 4088              	.L258:
 940:Core/Src/main.c **** 					HAL_Delay(250);
 4089              		.loc 1 940 6 is_stmt 1 view .LVU1155
 4090 0238 FFF7FEFF 		bl	d_print
 4091              	.LVL287:
 941:Core/Src/main.c **** 				}
 4092              		.loc 1 941 6 view .LVU1156
 4093 023c FA20     		movs	r0, #250
 4094 023e FFF7FEFF 		bl	HAL_Delay
 4095              	.LVL288:
 4096              	.L257:
 939:Core/Src/main.c **** 					d_print();
 4097              		.loc 1 939 11 view .LVU1157
 939:Core/Src/main.c **** 					d_print();
 4098              		.loc 1 939 12 is_stmt 0 view .LVU1158
 4099 0242 0F4B     		ldr	r3, .L265
 4100 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939:Core/Src/main.c **** 					d_print();
 4101              		.loc 1 939 11 view .LVU1159
 4102 0246 002B     		cmp	r3, #0
 4103 0248 F6D1     		bne	.L258
 944:Core/Src/main.c **** 				break;
 4104              		.loc 1 944 5 is_stmt 1 view .LVU1160
 4105 024a FFF7FEFF 		bl	running_finalize
 4106              	.LVL289:
 945:Core/Src/main.c **** 			case 0xE:
 4107              		.loc 1 945 5 view .LVU1161
 4108 024e 54E7     		b	.L241
 4109              	.L245:
 966:Core/Src/main.c **** 
 4110              		.loc 1 966 5 view .LVU1162
 4111 0250 FFF7FEFF 		bl	running_initialize
 4112              	.LVL290:
 968:Core/Src/main.c **** 					d_print();
 4113              		.loc 1 968 5 view .LVU1163
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 128


 968:Core/Src/main.c **** 					d_print();
 4114              		.loc 1 968 11 is_stmt 0 view .LVU1164
 4115 0254 04E0     		b	.L259
 4116              	.L260:
 969:Core/Src/main.c **** 					HAL_Delay(250);
 4117              		.loc 1 969 6 is_stmt 1 view .LVU1165
 4118 0256 FFF7FEFF 		bl	d_print
 4119              	.LVL291:
 970:Core/Src/main.c **** 				}
 4120              		.loc 1 970 6 view .LVU1166
 4121 025a FA20     		movs	r0, #250
 4122 025c FFF7FEFF 		bl	HAL_Delay
 4123              	.LVL292:
 4124              	.L259:
 968:Core/Src/main.c **** 					d_print();
 4125              		.loc 1 968 11 view .LVU1167
 968:Core/Src/main.c **** 					d_print();
 4126              		.loc 1 968 12 is_stmt 0 view .LVU1168
 4127 0260 074B     		ldr	r3, .L265
 4128 0262 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968:Core/Src/main.c **** 					d_print();
 4129              		.loc 1 968 11 view .LVU1169
 4130 0264 002B     		cmp	r3, #0
 4131 0266 F6D1     		bne	.L260
 973:Core/Src/main.c **** #endif
 4132              		.loc 1 973 5 is_stmt 1 view .LVU1170
 4133 0268 FFF7FEFF 		bl	running_finalize
 4134              	.LVL293:
 975:Core/Src/main.c **** 			case 0xF:
 4135              		.loc 1 975 5 view .LVU1171
 4136 026c 45E7     		b	.L241
 4137              	.L261:
 995:Core/Src/main.c **** 				}
 4138              		.loc 1 995 6 view .LVU1172
 4139 026e FA20     		movs	r0, #250
 4140 0270 FFF7FEFF 		bl	HAL_Delay
 4141              	.LVL294:
 4142              	.L243:
 994:Core/Src/main.c **** 					HAL_Delay(250);
 4143              		.loc 1 994 11 view .LVU1173
 994:Core/Src/main.c **** 					HAL_Delay(250);
 4144              		.loc 1 994 12 is_stmt 0 view .LVU1174
 4145 0274 024B     		ldr	r3, .L265
 4146 0276 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 994:Core/Src/main.c **** 					HAL_Delay(250);
 4147              		.loc 1 994 11 view .LVU1175
 4148 0278 002B     		cmp	r3, #0
 4149 027a F8D1     		bne	.L261
 4150 027c 3DE7     		b	.L241
 4151              	.L266:
 4152 027e 00BF     		.align	2
 4153              	.L265:
 4154 0280 00000000 		.word	.LANCHOR24
 4155 0284 00000000 		.word	.LANCHOR12
 4156 0288 00000000 		.word	.LANCHOR32
 4157 028c 00000000 		.word	.LANCHOR25
 4158 0290 00003840 		.word	1077411840
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 129


 4159 0294 00000000 		.word	.LANCHOR41
 4160 0298 00000000 		.word	.LANCHOR42
 4161 029c 00000000 		.word	.LANCHOR43
 4162 02a0 00000000 		.word	.LC11
 4163 02a4 08000000 		.word	.LC12
 4164 02a8 28000000 		.word	.LC13
 4165 02ac 00000000 		.word	.LANCHOR0
 4166 02b0 40000000 		.word	.LC14
 4167 02b4 00000000 		.word	.LANCHOR37
 4168 02b8 00000000 		.word	.LANCHOR35
 4169 02bc 50000000 		.word	.LC15
 4170 02c0 00002040 		.word	1075838976
 4171 02c4 00000000 		.word	.LANCHOR44
 4172 02c8 00000000 		.word	.LANCHOR45
 4173 02cc 00000000 		.word	.LANCHOR46
 4174 02d0 00000000 		.word	.LANCHOR47
 4175 02d4 00000000 		.word	.LANCHOR48
 4176 02d8 00000000 		.word	.LANCHOR49
 4177 02dc 00004440 		.word	1078198272
 4178 02e0 00003940 		.word	1077477376
 4179 02e4 00002440 		.word	1076101120
 4180              		.cfi_endproc
 4181              	.LFE239:
 4183              		.global	motorenable
 4184              		.global	enter
 4185              		.global	rotary_value
 4186              		.global	rightmotor
 4187              		.global	leftmotor
 4188              		.global	commonspeed
 4189              		.global	nextspeed_r
 4190              		.global	velocity_r_raw
 4191              		.global	velocity_next_r
 4192              		.global	s_velocity_error_r
 4193              		.global	velocity_error_r
 4194              		.global	velocity_r
 4195              		.global	nextspeed_l
 4196              		.global	velocity_l_raw
 4197              		.global	velocity_next_l
 4198              		.global	s_velocity_error_l
 4199              		.global	velocity_error_l
 4200              		.global	velocity_l
 4201              		.global	stoptime
 4202              		.global	LENGTHPERPULSE
 4203              		.global	encoder_r
 4204              		.global	encoder_l
 4205              		.global	rightmarkercount
 4206              		.global	markerstate
 4207              		.global	sidedeltacount
 4208              		.global	marker
 4209              		.global	subsensbuf
 4210              		.global	kir
 4211              		.global	kil
 4212              		.global	kdr
 4213              		.global	kdl
 4214              		.global	kpr
 4215              		.global	kpl
 4216              		.global	calibrationsize
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 130


 4217              		.global	sensgettime
 4218              		.global	beforedirection
 4219              		.global	direction
 4220              		.global	analogl
 4221              		.global	analogr
 4222              		.global	analograte
 4223              		.global	analogbuffers
 4224              		.global	analogmin
 4225              		.global	analogmax
 4226              		.global	analog
 4227              		.global	analograw
 4228              		.global	huart6
 4229              		.global	htim11
 4230              		.global	htim10
 4231              		.global	htim6
 4232              		.global	htim4
 4233              		.global	htim3
 4234              		.global	htim1
 4235              		.global	hspi2
 4236              		.global	hi2c1
 4237              		.global	hdma_adc1
 4238              		.global	hadc1
 4239              		.section	.bss.LENGTHPERPULSE,"aw",%nobits
 4240              		.align	3
 4241              		.set	.LANCHOR25,. + 0
 4244              	LENGTHPERPULSE:
 4245 0000 00000000 		.space	8
 4245      00000000 
 4246              		.section	.bss.analog,"aw",%nobits
 4247              		.align	2
 4248              		.set	.LANCHOR35,. + 0
 4251              	analog:
 4252 0000 00000000 		.space	24
 4252      00000000 
 4252      00000000 
 4252      00000000 
 4252      00000000 
 4253              		.section	.bss.analogbuffers,"aw",%nobits
 4254              		.align	2
 4255              		.set	.LANCHOR34,. + 0
 4258              	analogbuffers:
 4259 0000 00000000 		.space	216
 4259      00000000 
 4259      00000000 
 4259      00000000 
 4259      00000000 
 4260              		.section	.bss.analogl,"aw",%nobits
 4261              		.align	1
 4264              	analogl:
 4265 0000 0000     		.space	2
 4266              		.section	.bss.analogmax,"aw",%nobits
 4267              		.align	2
 4268              		.set	.LANCHOR42,. + 0
 4271              	analogmax:
 4272 0000 00000000 		.space	24
 4272      00000000 
 4272      00000000 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 131


 4272      00000000 
 4272      00000000 
 4273              		.section	.bss.analogmin,"aw",%nobits
 4274              		.align	2
 4275              		.set	.LANCHOR43,. + 0
 4278              	analogmin:
 4279 0000 00000000 		.space	24
 4279      00000000 
 4279      00000000 
 4279      00000000 
 4279      00000000 
 4280              		.section	.bss.analogr,"aw",%nobits
 4281              		.align	1
 4284              	analogr:
 4285 0000 0000     		.space	2
 4286              		.section	.bss.analograte,"aw",%nobits
 4287              		.align	2
 4290              	analograte:
 4291 0000 00000000 		.space	24
 4291      00000000 
 4291      00000000 
 4291      00000000 
 4291      00000000 
 4292              		.section	.bss.analograw,"aw",%nobits
 4293              		.align	2
 4294              		.set	.LANCHOR36,. + 0
 4297              	analograw:
 4298 0000 00000000 		.space	32
 4298      00000000 
 4298      00000000 
 4298      00000000 
 4298      00000000 
 4299              		.section	.bss.beforedirection,"aw",%nobits
 4300              		.align	2
 4301              		.set	.LANCHOR40,. + 0
 4304              	beforedirection:
 4305 0000 00000000 		.space	4
 4306              		.section	.bss.calibrationsize,"aw",%nobits
 4309              	calibrationsize:
 4310 0000 00       		.space	1
 4311              		.section	.bss.commonspeed,"aw",%nobits
 4312              		.align	1
 4313              		.set	.LANCHOR41,. + 0
 4316              	commonspeed:
 4317 0000 0000     		.space	2
 4318              		.section	.bss.direction,"aw",%nobits
 4319              		.align	2
 4322              	direction:
 4323 0000 00000000 		.space	4
 4324              		.section	.bss.encoder_l,"aw",%nobits
 4325              		.align	1
 4326              		.set	.LANCHOR2,. + 0
 4329              	encoder_l:
 4330 0000 0000     		.space	2
 4331              		.section	.bss.encoder_r,"aw",%nobits
 4332              		.align	1
 4333              		.set	.LANCHOR1,. + 0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 132


 4336              	encoder_r:
 4337 0000 0000     		.space	2
 4338              		.section	.bss.enter,"aw",%nobits
 4339              		.set	.LANCHOR24,. + 0
 4342              	enter:
 4343 0000 00       		.space	1
 4344              		.section	.bss.hadc1,"aw",%nobits
 4345              		.align	2
 4346              		.set	.LANCHOR0,. + 0
 4349              	hadc1:
 4350 0000 00000000 		.space	72
 4350      00000000 
 4350      00000000 
 4350      00000000 
 4350      00000000 
 4351              		.section	.bss.hdma_adc1,"aw",%nobits
 4352              		.align	2
 4355              	hdma_adc1:
 4356 0000 00000000 		.space	96
 4356      00000000 
 4356      00000000 
 4356      00000000 
 4356      00000000 
 4357              		.section	.bss.hi2c1,"aw",%nobits
 4358              		.align	2
 4359              		.set	.LANCHOR39,. + 0
 4362              	hi2c1:
 4363 0000 00000000 		.space	84
 4363      00000000 
 4363      00000000 
 4363      00000000 
 4363      00000000 
 4364              		.section	.bss.hspi2,"aw",%nobits
 4365              		.align	2
 4366              		.set	.LANCHOR38,. + 0
 4369              	hspi2:
 4370 0000 00000000 		.space	88
 4370      00000000 
 4370      00000000 
 4370      00000000 
 4370      00000000 
 4371              		.section	.bss.htim1,"aw",%nobits
 4372              		.align	2
 4373              		.set	.LANCHOR10,. + 0
 4376              	htim1:
 4377 0000 00000000 		.space	72
 4377      00000000 
 4377      00000000 
 4377      00000000 
 4377      00000000 
 4378              		.section	.bss.htim10,"aw",%nobits
 4379              		.align	2
 4380              		.set	.LANCHOR15,. + 0
 4383              	htim10:
 4384 0000 00000000 		.space	72
 4384      00000000 
 4384      00000000 
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 133


 4384      00000000 
 4384      00000000 
 4385              		.section	.bss.htim11,"aw",%nobits
 4386              		.align	2
 4387              		.set	.LANCHOR37,. + 0
 4390              	htim11:
 4391 0000 00000000 		.space	72
 4391      00000000 
 4391      00000000 
 4391      00000000 
 4391      00000000 
 4392              		.section	.bss.htim3,"aw",%nobits
 4393              		.align	2
 4394              		.set	.LANCHOR11,. + 0
 4397              	htim3:
 4398 0000 00000000 		.space	72
 4398      00000000 
 4398      00000000 
 4398      00000000 
 4398      00000000 
 4399              		.section	.bss.htim4,"aw",%nobits
 4400              		.align	2
 4401              		.set	.LANCHOR14,. + 0
 4404              	htim4:
 4405 0000 00000000 		.space	72
 4405      00000000 
 4405      00000000 
 4405      00000000 
 4405      00000000 
 4406              		.section	.bss.htim6,"aw",%nobits
 4407              		.align	2
 4408              		.set	.LANCHOR13,. + 0
 4411              	htim6:
 4412 0000 00000000 		.space	72
 4412      00000000 
 4412      00000000 
 4412      00000000 
 4412      00000000 
 4413              		.section	.bss.huart6,"aw",%nobits
 4414              		.align	2
 4415              		.set	.LANCHOR16,. + 0
 4418              	huart6:
 4419 0000 00000000 		.space	68
 4419      00000000 
 4419      00000000 
 4419      00000000 
 4419      00000000 
 4420              		.section	.bss.kdl,"aw",%nobits
 4421              		.align	3
 4422              		.set	.LANCHOR46,. + 0
 4425              	kdl:
 4426 0000 00000000 		.space	8
 4426      00000000 
 4427              		.section	.bss.kdr,"aw",%nobits
 4428              		.align	3
 4429              		.set	.LANCHOR47,. + 0
 4432              	kdr:
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 134


 4433 0000 00000000 		.space	8
 4433      00000000 
 4434              		.section	.bss.kil,"aw",%nobits
 4435              		.align	3
 4436              		.set	.LANCHOR48,. + 0
 4439              	kil:
 4440 0000 00000000 		.space	8
 4440      00000000 
 4441              		.section	.bss.kir,"aw",%nobits
 4442              		.align	3
 4443              		.set	.LANCHOR49,. + 0
 4446              	kir:
 4447 0000 00000000 		.space	8
 4447      00000000 
 4448              		.section	.bss.kpl,"aw",%nobits
 4449              		.align	3
 4450              		.set	.LANCHOR44,. + 0
 4453              	kpl:
 4454 0000 00000000 		.space	8
 4454      00000000 
 4455              		.section	.bss.kpr,"aw",%nobits
 4456              		.align	3
 4457              		.set	.LANCHOR45,. + 0
 4460              	kpr:
 4461 0000 00000000 		.space	8
 4461      00000000 
 4462              		.section	.bss.leftmotor,"aw",%nobits
 4463              		.align	3
 4464              		.set	.LANCHOR8,. + 0
 4467              	leftmotor:
 4468 0000 00000000 		.space	8
 4468      00000000 
 4469              		.section	.bss.marker,"aw",%nobits
 4470              		.set	.LANCHOR21,. + 0
 4473              	marker:
 4474 0000 00       		.space	1
 4475              		.section	.bss.markerstate,"aw",%nobits
 4476              		.set	.LANCHOR22,. + 0
 4479              	markerstate:
 4480 0000 00       		.space	1
 4481              		.section	.bss.motorenable,"aw",%nobits
 4482              		.set	.LANCHOR12,. + 0
 4485              	motorenable:
 4486 0000 00       		.space	1
 4487              		.section	.bss.nextspeed_l,"aw",%nobits
 4488              		.align	3
 4489              		.set	.LANCHOR18,. + 0
 4492              	nextspeed_l:
 4493 0000 00000000 		.space	8
 4493      00000000 
 4494              		.section	.bss.nextspeed_r,"aw",%nobits
 4495              		.align	3
 4496              		.set	.LANCHOR7,. + 0
 4499              	nextspeed_r:
 4500 0000 00000000 		.space	8
 4500      00000000 
 4501              		.section	.bss.rightmarkercount,"aw",%nobits
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 135


 4502              		.set	.LANCHOR23,. + 0
 4505              	rightmarkercount:
 4506 0000 00       		.space	1
 4507              		.section	.bss.rightmotor,"aw",%nobits
 4508              		.align	3
 4509              		.set	.LANCHOR9,. + 0
 4512              	rightmotor:
 4513 0000 00000000 		.space	8
 4513      00000000 
 4514              		.section	.bss.rotary_value,"aw",%nobits
 4515              		.set	.LANCHOR32,. + 0
 4518              	rotary_value:
 4519 0000 00       		.space	1
 4520              		.section	.bss.s_velocity_error_l,"aw",%nobits
 4521              		.align	3
 4522              		.set	.LANCHOR29,. + 0
 4525              	s_velocity_error_l:
 4526 0000 00000000 		.space	8
 4526      00000000 
 4527              		.section	.bss.s_velocity_error_r,"aw",%nobits
 4528              		.align	3
 4529              		.set	.LANCHOR5,. + 0
 4532              	s_velocity_error_r:
 4533 0000 00000000 		.space	8
 4533      00000000 
 4534              		.section	.bss.sensgettime,"aw",%nobits
 4535              		.set	.LANCHOR33,. + 0
 4538              	sensgettime:
 4539 0000 00       		.space	1
 4540              		.section	.bss.sidedeltacount,"aw",%nobits
 4541              		.set	.LANCHOR20,. + 0
 4544              	sidedeltacount:
 4545 0000 00       		.space	1
 4546              		.section	.bss.stoptime,"aw",%nobits
 4547              		.align	1
 4548              		.set	.LANCHOR17,. + 0
 4551              	stoptime:
 4552 0000 0000     		.space	2
 4553              		.section	.bss.subsensbuf,"aw",%nobits
 4554              		.set	.LANCHOR19,. + 0
 4557              	subsensbuf:
 4558 0000 00       		.space	1
 4559              		.section	.bss.velocity_error_l,"aw",%nobits
 4560              		.align	3
 4561              		.set	.LANCHOR28,. + 0
 4564              	velocity_error_l:
 4565 0000 00000000 		.space	8
 4565      00000000 
 4566              		.section	.bss.velocity_error_r,"aw",%nobits
 4567              		.align	3
 4568              		.set	.LANCHOR4,. + 0
 4571              	velocity_error_r:
 4572 0000 00000000 		.space	8
 4572      00000000 
 4573              		.section	.bss.velocity_l,"aw",%nobits
 4574              		.align	3
 4575              		.set	.LANCHOR27,. + 0
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 136


 4578              	velocity_l:
 4579 0000 00000000 		.space	8
 4579      00000000 
 4580              		.section	.bss.velocity_l_raw,"aw",%nobits
 4581              		.align	3
 4582              		.set	.LANCHOR26,. + 0
 4585              	velocity_l_raw:
 4586 0000 00000000 		.space	8
 4586      00000000 
 4587              		.section	.bss.velocity_next_l,"aw",%nobits
 4588              		.align	3
 4589              		.set	.LANCHOR30,. + 0
 4592              	velocity_next_l:
 4593 0000 00000000 		.space	8
 4593      00000000 
 4594              		.section	.bss.velocity_next_r,"aw",%nobits
 4595              		.align	3
 4596              		.set	.LANCHOR6,. + 0
 4599              	velocity_next_r:
 4600 0000 00000000 		.space	8
 4600      00000000 
 4601              		.section	.bss.velocity_r,"aw",%nobits
 4602              		.align	3
 4603              		.set	.LANCHOR3,. + 0
 4606              	velocity_r:
 4607 0000 00000000 		.space	8
 4607      00000000 
 4608              		.section	.bss.velocity_r_raw,"aw",%nobits
 4609              		.align	3
 4610              		.set	.LANCHOR31,. + 0
 4613              	velocity_r_raw:
 4614 0000 00000000 		.space	8
 4614      00000000 
 4615              		.text
 4616              	.Letext0:
 4617              		.file 3 "c:\\tools\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default_type
 4618              		.file 4 "c:\\tools\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 4619              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 4620              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4621              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4622              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 4623              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 4624              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4625              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4626              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 4627              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 4628              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 4629              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 4630              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4631              		.file 17 "Core/Inc/ICM20648.h"
 4632              		.file 18 "c:\\tools\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\stdio.h"
 4633              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4634              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 4635              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 4636              		.file 22 "Core/Inc/main.h"
 4637              		.file 23 "<built-in>"
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 137


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:20     .text.MX_GPIO_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:25     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:311    .text.MX_GPIO_Init:00000158 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:320    .text.MX_DMA_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:325    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:374    .text.MX_DMA_Init:00000030 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:379    .text.rotary_read:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:385    .text.rotary_read:00000000 rotary_read
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:451    .text.rotary_read:00000048 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:457    .text.led_rgb:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:463    .text.led_rgb:00000000 led_rgb
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:513    .text.led_rgb:0000003c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:519    .text.sensor_finalize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:525    .text.sensor_finalize:00000000 sensor_finalize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:545    .text.sensor_finalize:0000000c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:550    .rodata.d_print.str1.4:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:575    .text.d_print:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:581    .text.d_print:00000000 d_print
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:659    .text.d_print:00000080 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:679    .text.encoder_initialize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:685    .text.encoder_initialize:00000000 encoder_initialize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:720    .text.encoder_initialize:00000020 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:727    .text.encoder_finalize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:733    .text.encoder_finalize:00000000 encoder_finalize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:759    .text.encoder_finalize:00000014 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:765    .text.running_finalize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:771    .text.running_finalize:00000000 running_finalize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:819    .text.running_finalize:00000030 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:827    .text.__io_putchar:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:833    .text.__io_putchar:00000000 __io_putchar
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:869    .text.__io_putchar:0000001c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:874    .text.low_pass_filter:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:880    .text.low_pass_filter:00000000 low_pass_filter
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:908    .text.low_pass_filter:0000001c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:922    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:928    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1333   .text.HAL_TIM_PeriodElapsedCallback:000001e4 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1356   .text.HAL_TIM_PeriodElapsedCallback:00000234 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1754   .text.HAL_TIM_PeriodElapsedCallback:000004a8 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1787   .text.HAL_ADC_ConvCpltCallback:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1793   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1919   .text.HAL_ADC_ConvCpltCallback:00000064 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1928   .text.power:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1934   .text.power:00000000 power
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1979   .text.power:00000018 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1985   .text.Error_Handler:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:1991   .text.Error_Handler:00000000 Error_Handler
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2023   .text.MX_ADC1_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2028   .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2450   .text.MX_ADC1_Init:000001d0 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2457   .text.MX_USART6_UART_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2462   .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2517   .text.MX_USART6_UART_Init:0000002c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2523   .text.MX_TIM6_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2528   .text.MX_TIM6_Init:00000000 MX_TIM6_Init
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 138


C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2606   .text.MX_TIM6_Init:00000044 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2612   .text.MX_TIM4_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2617   .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2750   .text.MX_TIM4_Init:00000084 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2756   .text.MX_TIM1_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2761   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2869   .text.MX_TIM1_Init:0000005c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2875   .text.MX_TIM3_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2880   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2985   .text.MX_TIM3_Init:00000058 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2991   .text.MX_TIM10_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:2996   .text.MX_TIM10_Init:00000000 MX_TIM10_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3045   .text.MX_TIM10_Init:00000028 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3051   .text.MX_TIM11_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3056   .text.MX_TIM11_Init:00000000 MX_TIM11_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3105   .text.MX_TIM11_Init:00000028 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3111   .text.MX_SPI2_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3116   .text.MX_SPI2_Init:00000000 MX_SPI2_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3187   .text.MX_SPI2_Init:0000003c $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3193   .text.MX_I2C1_Init:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3198   .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3257   .text.MX_I2C1_Init:00000030 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3264   .text.SystemClock_Config:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3270   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3418   .text.SystemClock_Config:000000a0 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3424   .text.sensor_initialize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3430   .text.sensor_initialize:00000000 sensor_initialize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3468   .text.sensor_initialize:00000024 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3475   .rodata.running_initialize.str1.4:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3488   .text.running_initialize:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3494   .text.running_initialize:00000000 running_initialize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3615   .text.running_initialize:00000094 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3640   .rodata.main.str1.4:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3657   .text.main:00000000 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3663   .text.main:00000000 main
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3907   .text.main:00000118 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:3923   .text.main:00000158 $t
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4154   .text.main:00000280 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4485   .bss.motorenable:00000000 motorenable
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4342   .bss.enter:00000000 enter
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4518   .bss.rotary_value:00000000 rotary_value
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4512   .bss.rightmotor:00000000 rightmotor
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4467   .bss.leftmotor:00000000 leftmotor
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4316   .bss.commonspeed:00000000 commonspeed
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4499   .bss.nextspeed_r:00000000 nextspeed_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4613   .bss.velocity_r_raw:00000000 velocity_r_raw
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4599   .bss.velocity_next_r:00000000 velocity_next_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4532   .bss.s_velocity_error_r:00000000 s_velocity_error_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4571   .bss.velocity_error_r:00000000 velocity_error_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4606   .bss.velocity_r:00000000 velocity_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4492   .bss.nextspeed_l:00000000 nextspeed_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4585   .bss.velocity_l_raw:00000000 velocity_l_raw
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4592   .bss.velocity_next_l:00000000 velocity_next_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4525   .bss.s_velocity_error_l:00000000 s_velocity_error_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4564   .bss.velocity_error_l:00000000 velocity_error_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4578   .bss.velocity_l:00000000 velocity_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4551   .bss.stoptime:00000000 stoptime
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 139


C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4244   .bss.LENGTHPERPULSE:00000000 LENGTHPERPULSE
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4336   .bss.encoder_r:00000000 encoder_r
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4329   .bss.encoder_l:00000000 encoder_l
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4505   .bss.rightmarkercount:00000000 rightmarkercount
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4479   .bss.markerstate:00000000 markerstate
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4544   .bss.sidedeltacount:00000000 sidedeltacount
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4473   .bss.marker:00000000 marker
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4557   .bss.subsensbuf:00000000 subsensbuf
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4446   .bss.kir:00000000 kir
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4439   .bss.kil:00000000 kil
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4432   .bss.kdr:00000000 kdr
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4425   .bss.kdl:00000000 kdl
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4460   .bss.kpr:00000000 kpr
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4453   .bss.kpl:00000000 kpl
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4309   .bss.calibrationsize:00000000 calibrationsize
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4538   .bss.sensgettime:00000000 sensgettime
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4304   .bss.beforedirection:00000000 beforedirection
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4322   .bss.direction:00000000 direction
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4264   .bss.analogl:00000000 analogl
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4284   .bss.analogr:00000000 analogr
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4290   .bss.analograte:00000000 analograte
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4258   .bss.analogbuffers:00000000 analogbuffers
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4278   .bss.analogmin:00000000 analogmin
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4271   .bss.analogmax:00000000 analogmax
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4251   .bss.analog:00000000 analog
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4297   .bss.analograw:00000000 analograw
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4418   .bss.huart6:00000000 huart6
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4390   .bss.htim11:00000000 htim11
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4383   .bss.htim10:00000000 htim10
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4411   .bss.htim6:00000000 htim6
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4404   .bss.htim4:00000000 htim4
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4397   .bss.htim3:00000000 htim3
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4376   .bss.htim1:00000000 htim1
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4369   .bss.hspi2:00000000 hspi2
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4362   .bss.hi2c1:00000000 hi2c1
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4355   .bss.hdma_adc1:00000000 hdma_adc1
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4349   .bss.hadc1:00000000 hadc1
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4240   .bss.LENGTHPERPULSE:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4247   .bss.analog:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4254   .bss.analogbuffers:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4261   .bss.analogl:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4267   .bss.analogmax:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4274   .bss.analogmin:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4281   .bss.analogr:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4287   .bss.analograte:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4293   .bss.analograw:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4300   .bss.beforedirection:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4310   .bss.calibrationsize:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4312   .bss.commonspeed:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4319   .bss.direction:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4325   .bss.encoder_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4332   .bss.encoder_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4343   .bss.enter:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4345   .bss.hadc1:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4352   .bss.hdma_adc1:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4358   .bss.hi2c1:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4365   .bss.hspi2:00000000 $d
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 140


C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4372   .bss.htim1:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4379   .bss.htim10:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4386   .bss.htim11:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4393   .bss.htim3:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4400   .bss.htim4:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4407   .bss.htim6:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4414   .bss.huart6:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4421   .bss.kdl:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4428   .bss.kdr:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4435   .bss.kil:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4442   .bss.kir:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4449   .bss.kpl:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4456   .bss.kpr:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4463   .bss.leftmotor:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4474   .bss.marker:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4480   .bss.markerstate:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4486   .bss.motorenable:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4488   .bss.nextspeed_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4495   .bss.nextspeed_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4506   .bss.rightmarkercount:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4508   .bss.rightmotor:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4519   .bss.rotary_value:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4521   .bss.s_velocity_error_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4528   .bss.s_velocity_error_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4539   .bss.sensgettime:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4545   .bss.sidedeltacount:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4547   .bss.stoptime:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4558   .bss.subsensbuf:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4560   .bss.velocity_error_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4567   .bss.velocity_error_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4574   .bss.velocity_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4581   .bss.velocity_l_raw:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4588   .bss.velocity_next_l:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4595   .bss.velocity_next_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4602   .bss.velocity_r:00000000 $d
C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s:4609   .bss.velocity_r_raw:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_ADC_Stop_DMA
__aeabi_d2f
__aeabi_f2d
puts
printf
HAL_TIM_Encoder_Start
HAL_TIM_Encoder_Stop
HAL_TIM_Base_Stop_IT
HAL_TIM_PWM_Stop
HAL_UART_Transmit
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_d2uiz
__aeabi_i2d
ARM GAS  C:\Users\tonfa\AppData\Local\Temp\ccRJ1JsL.s 			page 141


__aeabi_dmul
__aeabi_d2iz
__aeabi_dsub
__aeabi_dadd
__aeabi_ddiv
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
memset
HAL_TIM_Encoder_Init
HAL_SPI_Init
HAL_I2C_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_ADC_Start_DMA
HAL_Delay
HAL_TIM_Base_Start_IT
HAL_TIM_PWM_Start
HAL_Init
